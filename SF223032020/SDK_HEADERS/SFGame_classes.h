/*
#############################################################################################
# Special Force 2 (1.0.46397.0) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: SFGame_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL, crylessdomore
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_SHOP_MY_ITEM                                       -2
#define CONST_SHOP_ADDSP_ITEM                                    -3
#define CONST_SHOP_VIP_WPITEM                                    5
#define CONST_SHOP_GASHA_ITEM                                    6
#define CONST_SHOP_PMC_CODE                                      5
#define CONST_SHOP_MONTHLYREWARD_ITEM                            5
#define CONST_ClanMemberLevel_WaitPeople                         0
#define CONST_ClanMemberLevel_Normal                             10
#define CONST_ClanMemberLevel_Regular                            20
#define CONST_ClanMemberLevel_Manager                            30
#define CONST_ClanMemberLevel_Master                             40
#define CONST_PlayerGradeLV_Normal                               10
#define CONST_PlayerGradeLV_League                               20
#define CONST_PlayerGradeLV_SpectatorLV1                         25
#define CONST_PlayerGradeLV_SpectatorLV2                         26
#define CONST_PlayerGradeLV_SpectatorLV3                         27
#define CONST_PlayerGradeLV_QA                                   30
#define CONST_PlayerGradeLV_GM                                   40
#define CONST_PlayerGradeLV_Dev                                  50
#define CONST_Channeltype_ClanMin                                20
#define CONST_Channeltype_ClanMax                                29
#define CONST_Channeltype_ClanMatchingMin                        26
#define CONST_Channeltype_ClanMatchingMax                        27
#define CONST_Channeltype_ClanLeague                             27
#define CONST_Channeltype_League                                 30
#define CONST_Channeltype_FreeLeague                             31
#define CONST_Channeltype_ProLeague                              100
#define CONST_Channeltype_Lady                                   60
#define CONST_Channeltype_BeginnerMin                            90
#define CONST_Channeltype_BeginnerMax                            99
#define CONST_Channeltype_Rookie                                 90
#define CONST_Channeltype_HeroTest                               130
#define CONST_Channeltype_VIP                                    140
#define CONST_HUD_CODENAMEDISPLAY_SELF                           0x00000001
#define CONST_HUD_CODENAMEDISPLAY_HIDE_SAMETEAM                  0x00000002
#define CONST_HUD_CODENAMEDISPLAY_HIDE_SAMETEAM_BUTPLAYER        0x00000004
#define CONST_HUD_CODENAMEDISPLAY_ENEMY_POINTING                 0x00000008
#define CONST_HUD_CODENAMEDISPLAY_HIDE_ENEMY                     0x00000010
#define CONST_HUD_CODENAMEDISPLAY_SHOW_ENEMYHP                   0x00000020
#define CONST_HUD_CODENAMEDISPLAY_ENEMY_NOCLAMP                  0x00000040
#define CONST_HUD_CODENAMEDISPLAY_HIDE_ENEMYAI_NAMETEXT          0x00000100
#define CONST_HUD_CODENAMEDISPLAY_ENEMY_POINTING_AT_CENTER       0x00000200
#define CONST_HUD_CODENAMEDISPLAY_TOPVIEW                        0x00000400
#define CONST_HUD_CODENAMEDISPLAY_HIDE_ENEMYAI                   0x00001000
#define CONST_HUD_MINIMAP_SHOW_ENEMY_ALL                         0x00000001
#define CONST_HUD_MINIMAP_SHOW_ENEMY_RENDERED                    0x00000002
#define CONST_HUD_MINIMAP_SHOW_ENEMY_DAMAGED                     0x00000004
#define CONST_HUD_MINIMAP_SHOW_PLAYERPAWN_ONLY                   0x00000008
#define CONST_HUD_MINIMAP_SHOW_ENEMY_ALL_WITHTIME                0x00000010
#define CONST_HUD_MINIMAP_SHOW_ENEMY_DISCOVERED                  0x00000020
#define CONST_HUD_MINIMAP_ALL_IS_ENEMY                           0x00000040
#define CONST_HUD_MINIMAP_AI_IS_SMALL                            0x00000080
#define CONST_HUD_MINIMAP_PLAYERPAWN_THICKCOLOR                  0x00000100
#define CONST_HUD_MINIMAP_SHOW_AI_ALL                            0x00000200
#define CONST_ROUNDWINTYPE_Save                                  0x01
#define CONST_ROUNDWINTYPE_Perfect                               0x02
#define CONST_ROUNDWINTYPE_AllKill                               0x04
#define CONST_CM_Crushed                                         0x00000001
#define CONST_CM_ElectricShock                                   0x00000002
#define CONST_CM_Fell                                            0x00000004
#define CONST_CM_Drown                                           0x00000008
#define CONST_CM_SnowBall                                        0x00000010
#define CONST_CM_SnowBall_Explosion                              0x00000020
#define CONST_CM_SnowBall_Stun                                   0x00000040
#define CONST_CM_AutoTurret                                      0x00000080
#define CONST_CM_SnowBall_Big                                    0x00000100
#define CONST_STRINGSIZE_MAX                                     128
#define CONST_WP_WEAPSET_MAX                                     3
#define CONST_SFBlockWhisper_ClanMember                          0x00000004
#define CONST_SFBlockWhisper_Friend                              0x00000002
#define CONST_SFBlockWhisper_General                             0x00000001
#define CONST_SFClanBuff_EXPRatio                                0x00000002
#define CONST_SFClanBuff_LPRatio                                 0x00000001
#define CONST_SIZEOFINT                                          32
#define CONST_SFKM_Critical                                      0x00200000
#define CONST_SFKM_HelmetHit                                     0x00100000
#define CONST_SFKM_CriticalHeadShot                              0x00080000
#define CONST_SFKM_AimKill                                       0x00040000
#define CONST_SFKM_Gas                                           0x00020000
#define CONST_SFKM_InstantHit                                    0x00010000
#define CONST_SFKM_SpecialForce                                  0x00008000
#define CONST_SFKM_Specialist                                    0x00004000
#define CONST_SFKM_MultiKill                                     0x00002000
#define CONST_SFKM_DoubleKill                                    0x00001000
#define CONST_SFKM_CONTINUOUS_START                              0x00001000
#define CONST_SFTOTAL_CONTINUOUSKILL                             4
#define CONST_SFKM_WelcomeBack                                   0x00000800
#define CONST_SFKM_PiercingShot                                  0x00000400
#define CONST_SFKM_FirstKill                                     0x00000200
#define CONST_SFKM_LastOneShot                                   0x00000100
#define CONST_SFKM_RARE_START                                    0x00000100
#define CONST_SFTOTAL_RAREKILL                                   4
#define CONST_SFKM_Revenge                                       0x00000080
#define CONST_SFKM_BackAttack                                    0x00000040
#define CONST_SFKM_WallShot                                      0x00000020
#define CONST_SFKM_HeadShot                                      0x00000010
#define CONST_SFKM_SPECIAL_START                                 0x00000010
#define CONST_SFTOTAL_SPECIALKILL                                4
#define CONST_SFKM_LoveShot                                      0x00000008
#define CONST_SFKM_LongShot                                      0x00000004
#define CONST_SFKM_FastZoom                                      0x00000002
#define CONST_SFKM_NORMAL_START                                  0x00000002
#define CONST_SFTOTAL_NORMALKILL                                 3
#define CONST_SFKM_KillAssist                                    0x00000001
#define CONST_SFKM_None                                          0x00000000
#define CONST_SFTOTAL_DEFAULTKILL                                2
#define CONST_SFWeapKM_Atropen                                   0x00000800
#define CONST_SFWeapKM_SuperMario                                0x00000400
#define CONST_SFWeapKM_Strike                                    0x00000200
#define CONST_SFWeapKM_Splash                                    0x00000100
#define CONST_SFWeapKMTOTAL_RAREKILLSTART                        0x00000100
#define CONST_SFWeapKMTOTAL_RAREKILL                             3
#define CONST_SFWeapKM_IncendiaryGrenade                         0x00000080
#define CONST_SFWeapKM_Shuriken                                  0x00000040
#define CONST_SFWeapKM_ToyHammer                                 0x00000020
#define CONST_SFWeapKM_GrenadeKill                               0x00000010
#define CONST_SFWeapKM_Tomahawk                                  0x00000008
#define CONST_SFWeapKM_ThrowingKnife                             0x00000004
#define CONST_SFWeapKM_Slash                                     0x00000002
#define CONST_SFWeapKM_ManOnAStick                               0x00000001
#define CONST_SFWeapKMTOTAL_SPECIALKILLSTART                     0x00000001
#define CONST_SFWeapKMTOTAL_SPECIALKILL                          8
#define CONST_ThreshPosBufferSize                                20
#define CONST_NEAROBJECTIVEDIST                                  2000.0
#define CONST_PoolSize                                           50
#define CONST_MaxLineChecksPerFrame                              13
#define CONST_bUseAsyncLineChecksForVisibility                   0
#define CONST_TOTAL_MISSION                                      3
#define CONST_TOTAL_KILLFEEDBACK                                 12
#define CONST_MAX_SURVIVAL_WEAPON_DURABILITY                     50000
#define CONST_TOTAL_WEAPONTYPE                                   5
#define CONST_MAX_GLASSSTATE                                     255
#define CONST_WEAPONCOMMAND_ATTACH                               0x00000001
#define CONST_WEAPONCOMMAND_DETACH                               0x00000002
#define CONST_WEAPONCOMMAND_FIRE                                 0x00000008
#define CONST_WEAPONCOMMAND_POSTFIRE                             0x00000004
#define CONST_WEAPONCOMMAND_RELOAD                               0x00000010
#define CONST_WEAPONCOMMAND_POSTRELOAD                           0x00000020
#define CONST_WEAPONCOMMAND_ZOOMSTATECHANGING                    0x00000040
#define CONST_WEAPONCOMMAND_CHANGEVIEWMODE                       0x00000080
#define CONST_WEAPONCOMMAND_CHANGEWEAPONSTATE                    0x00000100
#define CONST_WEAPONCOMMAND_RESELECT                             0x00000200
#define CONST_WEAPONCOMMAND_PUTDOWN                              0x00000400
#define CONST_WEAPONCOMMAND_ZOOMSTATECHANGED                     0x00000800
#define CONST_WEAPONCOMMAND_FORCEDETACH                          0x00001000
#define CONST_WEAPONCOMMAND_STOPFIRE                             0x00002000
#define CONST_WEAPONCOMMAND_KILLED                               0x00004000
#define CONST_WEAPONCOMMAND_SPRINTCHANGED                        0x00008000
#define CONST_WEAPONCOMMAND_NOTCHANGEWEAPON                      0x00010000
#define CONST_WEAPONCOMMAND_EXIGENCYATTACK                       0x00020000
#define CONST_WEAPONCOMMAND_TICKSPECIAL                          0x80000000
#define CONST_GAMEEVENT_KILL_SPECIFIC                            1100
#define CONST_GAMEEVENT_GAMEPLAY_SPECIFIC                        1200
#define CONST_GAMEEVENT_GAMETYPE_SPECIFIC                        1400
#define CONST_GAMEEVENT_PLAYER_SCORE_UPDATE                      1401
#define CONST_GAMEEVENT_GAME_SUMMARY                             1500
#define CONST_RARE_DISPLAYRANK_MIN                               100
#define CONST_ALLINONETOOLTIP_BASE                               "BASE"
#define CONST_BUDDYTYPE_ALLOW                                    1
#define CONST_BUDDYTYPE_BLOCK                                    2
#define CONST_BUDDYTYPE_REVERSE                                  4
#define CONST_BUDDYTYPE_FORWARD                                  8
#define CONST_RecurciveChildLimit                                10
#define CONST_WEAPON_STEADY_FASTER                               200
#define CONST_WEAPON_STEADY_SLOWER                               10
#define CONST_PurcharseStat                                      2
#define CONST_MaxPurchaseItemCount                               60
#define CONST_Mask                                               0x00000001
#define CONST_Eye                                                0x00000002
#define CONST_Jacket                                             0x00000004
#define CONST_Glove                                              0x00000008
#define CONST_Wrist                                              0x00000010
#define CONST_Pants                                              0x00000020
#define CONST_Shoes                                              0x00000040
#define CONST_Belt                                               0x00000080
#define CONST_Cap                                                0x00000100
#define CONST_Face                                               0x00000200
#define CONST_Suit                                               0x00000400
#define CONST_Unit                                               0x00000800
#define CONST_Effect                                             0x00001000
#define CONST_MAX_RAINDROP_EMITTERS                              20
#define CONST_LO_HOST_ATTR_DIALOG                                0x00000001
#define CONST_LO_HOST_ATTR_DISABLE_HELP_MENU                     0x00000002
#define CONST_LO_HOST_ATTR_NO3DBORDER                            0x00000004
#define CONST_LO_HOST_ATTR_SCROLL_NO                             0x00000008
#define CONST_LO_HOST_ATTR_DISABLE_SCRIPT_INACTIVE               0x00000010
#define CONST_LO_HOST_ATTR_OPENNEWWIN                            0x00000020
#define CONST_LO_HOST_ATTR_DISABLE_OFFSCREEN                     0x00000040
#define CONST_LO_HOST_ATTR_FLAT_SCROLLBAR                        0x00000080
#define CONST_LO_HOST_ATTR_DIV_BLOCKDEFAULT                      0x00000100
#define CONST_LO_HOST_ATTR_ACTIVATE_CLIENTHIT_ONLY               0x00000200
#define CONST_LO_HOST_ATTR_OVERRIDEBEHAVIORFACTORY               0x00000400
#define CONST_LO_HOST_ATTR_CODEPAGELINKEDFONTS                   0x00000800
#define CONST_LO_HOST_ATTR_URL_ENCODING_DISABLE_UTF8             0x00001000
#define CONST_LO_HOST_ATTR_URL_ENCODING_ENABLE_UTF8              0x00002000
#define CONST_LO_HOST_ATTR_ENABLE_FORMS_AUTOCOMPLETE             0x00004000
#define CONST_LO_HOST_ATTR_ENABLE_INPLACE_NAVIGATION             0x00010000
#define CONST_LO_HOST_ATTR_IME_ENABLE_RECONVERSION               0x00020000
#define CONST_LO_HOST_ATTR_THEME                                 0x00040000
#define CONST_LO_HOST_ATTR_NOTHEME                               0x00080000
#define CONST_LO_HOST_ATTR_NOPICS                                0x00100000
#define CONST_LO_HOST_ATTR_NO3DOUTERBORDER                       0x00200000
#define CONST_LO_HOST_ATTR_DISABLE_EDIT_NS_FIXUP                 0x00400000
#define CONST_LO_HOST_ATTR_DISABLE_UNTRUSTEDPROTOCOL             0x01000000
#define CONST_ERROR_CLIENTAUTH_FAIL                              0
#define CONST_ERROR_CLIENTAUTH_SUCCESS                           1
#define CONST_ERROR_CLIENTAUTH_DATA_ENCODING_FAIL                1001
#define CONST_ERROR_CLIENTAUTH_PROCESS_EMPTY_URL                 2001
#define CONST_ERROR_CLIENTAUTH_PROCESS_BUFFER_OVERFLOW           2002
#define CONST_ERROR_CLIENTAUTH_PROCESS_RESPONSE_FAIL             2003
#define CONST_ERROR_CLIENTAUTH_PROCESS_INVALID_NODE              2004
#define CONST_ERROR_CLIENTAUTH_PROCESS_INSTANCE_FAIL             2005
#define CONST_ERROR_CLIENTAUTH_PROCESS_QUERYHEADER_FAIL          2006
#define CONST_ERROR_CLIENTAUTH_PROCESS_HTTPREQUEST_FAIL          2007
#define CONST_ERROR_CLIENTAUTH_PROCESS_HTTPCONNECT_FAIL          2008
#define CONST_ERROR_CLIENTAUTH_COMPLETE_SERVER_FAIL              3001
#define CONST_ERROR_CLIENTAUTH_COMPLETE_WRONG_ERROR_CODE         3002
#define CONST_MAX_IMPACT_LOCATION                                32
#define CONST_MaxKillAssist                                      4
#define CONST_ShockDamageSpeedReduceRate                         0.7f
#define CONST_ShockDamageMax                                     20.0f
#define CONST_ShockRetrieval                                     4.0f
#define CONST_ShockResistance                                    1.0f
#define CONST_MINTIMEBETWEENPAINSOUNDS                           0.35
#define CONST_SFPID_Whisper_ClanMemberBlock                      813
#define CONST_SFPID_Whisper_FriendBlock                          812
#define CONST_SFPID_Whisper_GeneralBlock                         811
#define CONST_SFPID_Whisper_AllBlock                             810
#define CONST_SFPID_Facebook_MaintainCookie                      803
#define CONST_SFPID_Facebook_AutoUpdate_Movie                    802
#define CONST_SFPID_Facebook_AutoUpdate_Screenshot               801
#define CONST_SFPID_Facebook_AutoUpdate_Event                    800
#define CONST_SFPID_HoldZoomKeySet                               716
#define CONST_SFPID_SprintKeySet                                 715
#define CONST_SFPID_RecordPresetNum                              712
#define CONST_SFPID_RecordSavePath                               711
#define CONST_SFPID_CaptureSavePath                              710
#define CONST_SFPID_LobbyFullScreen                              705
#define CONST_SFPID_PurchaseGuide                                704
#define CONST_SFPID_RookieChannelNotice                          703
#define CONST_SFPID_TPNoticeToday                                702
#define CONST_SFPID_ResetScaleLevel                              701
#define CONST_SFPID_Radar_Range                                  700
#define CONST_SFPID_MCWeap_Sec_Silencer                          665
#define CONST_SFPID_MCWeap_Sec_Magazine                          664
#define CONST_SFPID_MCWeap_Sec_Laser                             663
#define CONST_SFPID_MCWeap_Sec_Body                              662
#define CONST_SFPID_MCWeap_Sec_Asset                             661
#define CONST_SFPID_MCWeap_Pri_Silencer                          658
#define CONST_SFPID_MCWeap_Pri_Barrel                            657
#define CONST_SFPID_MCWeap_Pri_Stock                             656
#define CONST_SFPID_MCWeap_Pri_Scope                             655
#define CONST_SFPID_MCWeap_Pri_Laser                             654
#define CONST_SFPID_MCWeap_Pri_Magazine                          653
#define CONST_SFPID_MCWeap_Pri_Body                              652
#define CONST_SFPID_MCWeap_Pri_Asset                             651
#define CONST_SFPID_MCHelm_Strap                                 634
#define CONST_SFPID_MCHelm_NScope                                633
#define CONST_SFPID_MCHelm_Goggle                                632
#define CONST_SFPID_MCHelm_Body                                  631
#define CONST_SFPID_MCChar_Hair                                  625
#define CONST_SFPID_MCChar_Shoulder2                             624
#define CONST_SFPID_MCChar_Shoulder1                             623
#define CONST_SFPID_MCChar_Magazine                              622
#define CONST_SFPID_MCChar_Gasbag                                621
#define CONST_SFPID_MCChar_Canteen                               620
#define CONST_SFPID_MCChar_Pouch                                 619
#define CONST_SFPID_MCChar_Foot                                  618
#define CONST_SFPID_MCChar_Levelmark                             617
#define CONST_SFPID_MCChar_Clanmark                              616
#define CONST_SFPID_MCChar_Vest5                                 615
#define CONST_SFPID_MCChar_Vest4                                 614
#define CONST_SFPID_MCChar_Vest3                                 613
#define CONST_SFPID_MCChar_Vest2                                 612
#define CONST_SFPID_MCChar_Vest1                                 611
#define CONST_SFPID_MCChar_Earset                                610
#define CONST_SFPID_MCChar_Hand                                  609
#define CONST_SFPID_MCChar_Pants5                                608
#define CONST_SFPID_MCChar_Pants3                                607
#define CONST_SFPID_MCChar_Pants2                                606
#define CONST_SFPID_MCChar_Pants1                                605
#define CONST_SFPID_MCChar_Wrist                                 604
#define CONST_SFPID_MCChar_Arm                                   603
#define CONST_SFPID_MCChar_Glass                                 602
#define CONST_SFPID_MCChar_Face                                  601
#define CONST_SFPID_KeyAction                                    560
#define CONST_SFPID_KeyAction01                                  559
#define CONST_SFPID_KeyAction02                                  558
#define CONST_SFPID_KeyAction03                                  557
#define CONST_SFPID_KeyAction04                                  556
#define CONST_SFPID_KeyAction05                                  555
#define CONST_SFPID_KeyAction06                                  554
#define CONST_SFPID_KeyAction07                                  553
#define CONST_SFPID_KeyAction08                                  552
#define CONST_SFPID_KeyAction09                                  551
#define CONST_SFPID_KeyAction10                                  550
#define CONST_SFPID_KeyAction11                                  549
#define CONST_SFPID_KeyAction12                                  548
#define CONST_SFPID_KeyAction13                                  547
#define CONST_SFPID_KeyAction14                                  546
#define CONST_SFPID_KeyAction15                                  545
#define CONST_SFPID_KeyAction16                                  544
#define CONST_SFPID_KeyAction17                                  543
#define CONST_SFPID_KeyAction18                                  542
#define CONST_SFPID_KeyAction19                                  541
#define CONST_SFPID_KeyAction20                                  540
#define CONST_SFPID_KeyAction21                                  539
#define CONST_SFPID_KeyAction22                                  538
#define CONST_SFPID_KeyAction23                                  537
#define CONST_SFPID_KeyAction24                                  536
#define CONST_SFPID_KeyAction25                                  535
#define CONST_SFPID_KeyAction26                                  534
#define CONST_SFPID_KeyAction27                                  533
#define CONST_SFPID_KeyAction28                                  532
#define CONST_SFPID_KeyAction29                                  531
#define CONST_SFPID_KeyAction30                                  530
#define CONST_SFPID_KeyAction31                                  529
#define CONST_SFPID_KeyAction32                                  528
#define CONST_SFPID_KeyAction33                                  527
#define CONST_SFPID_KeyAction34                                  526
#define CONST_SFPID_KeyAction35                                  525
#define CONST_SFPID_KeyAction36                                  524
#define CONST_SFPID_KeyAction37                                  523
#define CONST_SFPID_KeyAction38                                  522
#define CONST_SFPID_KeyAction39                                  521
#define CONST_SFPID_KeyAction40                                  520
#define CONST_SFPID_KeyAction41                                  519
#define CONST_SFPID_KeyAction42                                  518
#define CONST_SFPID_KeyAction43                                  517
#define CONST_SFPID_KeyAction44                                  516
#define CONST_SFPID_KeyAction45                                  515
#define CONST_SFPID_KeyAction46                                  514
#define CONST_SFPID_KeyAction47                                  513
#define CONST_SFPID_KeyAction48                                  512
#define CONST_SFPID_KeyAction49                                  511
#define CONST_SFPID_KeyAction50                                  510
#define CONST_SFPID_KeyAction51                                  509
#define CONST_SFPID_KeyAction52                                  508
#define CONST_SFPID_KeyAction53                                  507
#define CONST_SFPID_KeyAction54                                  506
#define CONST_SFPID_KeyAction55                                  505
#define CONST_SFPID_KeyAction56                                  504
#define CONST_SFPID_KeyAction57                                  503
#define CONST_SFPID_KeyAction58                                  502
#define CONST_SFPID_KeyAction59                                  501
#define CONST_SFPID_GamepadBinding_AnalogStickPreset             447
#define CONST_SFPID_GamepadBinding_DPadRight                     446
#define CONST_SFPID_GamepadBinding_DPadLeft                      445
#define CONST_SFPID_GamepadBinding_DPadDown                      444
#define CONST_SFPID_GamepadBinding_DPadUp                        443
#define CONST_SFPID_GamepadBinding_LeftThumbstickPressed         442
#define CONST_SFPID_GamepadBinding_RightThumbstickPressed        441
#define CONST_SFPID_GamepadBinding_LeftTrigger                   440
#define CONST_SFPID_GamepadBinding_RightTrigger                  439
#define CONST_SFPID_GamepadBinding_LeftBumper                    438
#define CONST_SFPID_GamepadBinding_RightBumper                   437
#define CONST_SFPID_GamepadBinding_Back                          436
#define CONST_SFPID_GamepadBinding_ButtonY                       435
#define CONST_SFPID_GamepadBinding_ButtonX                       434
#define CONST_SFPID_GamepadBinding_ButtonB                       433
#define CONST_SFPID_GamepadBinding_ButtonA                       432
#define CONST_SFPID_MouseInvertY                                 431
#define CONST_SFPID_TurningAccelerationFactor                    430
#define CONST_SFPID_DodgeDoubleClickTime                         429
#define CONST_SFPID_MouseAccelTreshold                           428
#define CONST_SFPID_MouseSmoothingStrength                       427
#define CONST_SFPID_MouseSensitivityMenus                        426
#define CONST_SFPID_MouseSensitivityZoom                         425
#define CONST_SFPID_UseMouseSensitivityZoom                      424
#define CONST_SFPID_MouseSensitivityGame                         423
#define CONST_SFPID_EnableJoystick                               422
#define CONST_SFPID_ReduceMouseLag                               421
#define CONST_SFPID_MouseSmoothing                               420
#define CONST_SFPID_ExploRadialBlur                              340
#define CONST_SFPID_DepthOfField                                 339
#define CONST_SFPID_HoldHUDImageSize                             338
#define CONST_SFPID_Gore                                         337
#define CONST_SFPID_DynamicShadows                               336
#define CONST_SFPID_LightSpreadEffect                            335
#define CONST_SFPID_Language                                     332
#define CONST_SFPID_ResultWindowAutoSave                         331
#define CONST_SFPID_EnemyDefaultUnit                             230
#define CONST_SFPID_IgnoreWindowSwitching                        329
#define CONST_SFPID_Antialiasing                                 328
#define CONST_SFPID_FrameStability                               327
#define CONST_SFPID_VerticalSync                                 326
#define CONST_SFPID_AdvanceSetting                               324
#define CONST_SFPID_ScaleLevel                                   323
#define CONST_SFPID_ScreenFullMode                               325
#define CONST_SFPID_ScreenResolutionY                            322
#define CONST_SFPID_ScreenResolutionX                            321
#define CONST_SFPID_Gamma                                        320
#define CONST_SFPID_AmbianceMUTE                                 311
#define CONST_SFPID_AnnouncerMUTE                                310
#define CONST_SFPID_VoiceMUTE                                    309
#define CONST_SFPID_EffectMUTE                                   308
#define CONST_SFPID_BGMMUTE                                      307
#define CONST_SFPID_MasterVolume                                 306
#define CONST_SFPID_AmbianceVolume                               305
#define CONST_SFPID_AnnouncerVolume                              304
#define CONST_SFPID_VoiceVolume                                  303
#define CONST_SFPID_EffectVolume                                 302
#define CONST_SFPID_BGMVolume                                    301
#define CONST_MAX_ENEMIES_COUNT                                  6
#define CONST_MAX_STATE                                          22
#define CONST_MAXPOSITIONDIST                                    1024
#define CONST_MAXPOSITIONDISTSQ                                  1048576
#define CONST_VALIDATION_SEND_COUNTER                            5
#define CONST_MAX_MOVINGACTOR_COUNT                              2
#define CONST_MAX_WAYPOINTS                                      15

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum SFGame.SFTypes.EHackType
/*enum EHackType
{
	EHT_WALLHACK_HARDWARE_OCCLUSION_QUERY              = 0,
	EHT_GAMEPLAY_MOVEMENTPACKET_SUPPRESS               = 1,
	EHT_GAMEPLAY_WEAPON_INFINITYPROJECTILE             = 2,
	EHT_GAMEPLAY_PAUSE                                 = 3,
	EHT_GAMEPLAY_WEAPON_INFINITYMAGAZINE_INVALID_AMMO  = 4,
	EHT_GAMEPLAY_WEAPON_INFINITYMAGAZINE_INVALID_MAX_AMMO = 5,
	EHT_GAMEPLAY_INVALID_ITEM                          = 6,
	EHT_GAMEPLAY_INVALID_WEAPON                        = 7,
	EHT_GAMEPLAY_INVALID_RECOIL                        = 8,
	EHT_GAMEPLAY_INVALID_DAMAGE                        = 9,
	EHT_GAMEPLAY_INVALID_ATTACKER_POSITION             = 10,
	EHT_WALLHACK_HARDWARE_OCCLUSION_QUERY_PLAYER       = 11,
	EHT_GAMEPLAY_INVALID_PACKET                        = 12,
	EHT_GAMEPLAY_CHEAT_INGAMESTORE_ITEM                = 13,
	EHT_GAMEPLAY_INVALID_PHYSICALMATERIAL              = 14,
	EHT_GAMEPLAY_UNACCEPTABLE_SPECTATOR                = 15,
	EHT_MAX                                            = 16
};*/

// Enum SFGame.SFTypes.eClanMarkImageSize
/*enum eClanMarkImageSize
{
	eClanMarkImageSize                                 = 0,
	eClanMarkImageSize01                               = 1,
	eClanMarkImageSize02                               = 2,
	eClanMarkImageSize_MAX                             = 3
};*/

// Enum SFGame.SFTypes.EModeStatType
/*enum EModeStatType
{
	EModeStatType_None                                 = 0,
	EModeStatType_Attack                               = 1,
	EModeStatType_Defence                              = 2,
	EModeStatType_Vitality                             = 3,
	EModeStatType_Speed                                = 4,
	EModeStatType_MAX                                  = 5
};*/

// Enum SFGame.SFTypes.EMessengerGroupType
/*enum EMessengerGroupType
{
	EMessengerGroup_Clan                               = 0,
	EMessengerGroup_Friends                            = 1,
	EMessengerGroup_MAX                                = 2
};*/

// Enum SFGame.SFTypes.ENaviImageType
/*enum ENaviImageType
{
	ENaviImageType_BasicType                           = 0,
	ENaviImageType_ClanLeagueChannelType               = 1,
	ENaviImageType_ClanLeaguePageType                  = 2,
	ENaviImageType_MAX                                 = 3
};*/

// Enum SFGame.SFTypes.EHUDWidgetHideType
/*enum EHUDWidgetHideType
{
	EHWH_Blind                                         = 0,
	EHWH_Stun                                          = 1,
	EHWH_Dead                                          = 2,
	EHWH_NotHuman                                      = 3,
	EHWH_NotCrustalyn                                  = 4,
	EHWH_MAX                                           = 5
};*/

// Enum SFGame.SFTypes.ETwitchTVMsg
/*enum ETwitchTVMsg
{
	ETwitchTVMsg_InitFail                              = 0,
	ETwitchTVMsg_InvalidLogin                          = 1,
	ETwitchTVMsg_AuthFail                              = 2,
	ETwitchTVMsg_LoginFail                             = 3,
	ETwitchTVMsg_FindIngestServerFail                  = 4,
	ETwitchTVMsg_LoginOKMessage                        = 5,
	ETwitchTVMsg_BroadcastStartFail                    = 6,
	ETwitchTVMsg_SetTitleFail                          = 7,
	ETwitchTVMsg_StopFail                              = 8,
	ETwitchTVMsg_Description                           = 9,
	ETwitchTVMsg_StartedMessage                        = 10,
	ETwitchTVMsg_StopMessage                           = 11,
	ETwitchTVMsg_NoBroadcastTitleMessage               = 12,
	ETwitchTVMsg_WaitMessage                           = 13,
	ETwitchTVMsg_MAX                                   = 14
};*/

// Enum SFGame.SFTypes.ETwtichTVStreamState
/*enum ETwtichTVStreamState
{
	TwtichTV_Uninitialized                             = 0,
	TwtichTV_Initialized                               = 1,
	TwtichTV_Authenticating                            = 2,
	TwtichTV_Authenticated                             = 3,
	TwtichTV_LoggingIn                                 = 4,
	TwtichTV_LoggedIn                                  = 5,
	TwtichTV_FindingIngestServer                       = 6,
	TwtichTV_FoundIngestServer                         = 7,
	TwtichTV_ReadyToStream                             = 8,
	TwtichTV_Streaming                                 = 9,
	TwtichTV_Paused                                    = 10,
	TwtichTV_MAX                                       = 11
};*/

// Enum SFGame.SFTypes.ESmokeEffectType
/*enum ESmokeEffectType
{
	ESmokeEffectType_Spread                            = 0,
	ESmokeEffectType_Explosion                         = 1,
	ESmokeEffectType_MAX                               = 2
};*/

// Enum SFGame.SFTypes.ESmokeEffectColor
/*enum ESmokeEffectColor
{
	SmokeEffect_Spread_R                               = 0,
	SmokeEffect_Spread_G                               = 1,
	SmokeEffect_Spread_B                               = 2,
	SmokeEffect_Explosion_R                            = 3,
	SmokeEffect_Explosion_G                            = 4,
	SmokeEffect_Explosion_B                            = 5,
	SmokeEffect_MAX                                    = 6
};*/

// Enum SFGame.SFTypes.EConvoyanceItemStatus
/*enum EConvoyanceItemStatus
{
	EConvoyanceItem_OnTaken                            = 0,
	EConvoyanceItem_OnDropped                          = 1,
	EConvoyanceItem_OnReturned                         = 2,
	EConvoyanceItem_OnCaptured                         = 3,
	EConvoyanceItem_MAX                                = 4
};*/

// Enum SFGame.SFTypes.EConvoyanceMoveStatus
/*enum EConvoyanceMoveStatus
{
	EConvoyanceMove_OnMove                             = 0,
	EConvoyanceMove_OnStop                             = 1,
	EConvoyanceMove_MAX                                = 2
};*/

// Enum SFGame.SFTypes.EConvoyanceNotiRemainGold
/*enum EConvoyanceNotiRemainGold
{
	EConvoyanceNotiRemainGold_OnRemainThreeQuater      = 0,
	EConvoyanceNotiRemainGold_OnRemainHalf             = 1,
	EConvoyanceNotiRemainGold_OnRemainQuater           = 2,
	EConvoyanceNotiRemainGold_OnRemainZero             = 3,
	EConvoyanceNotiRemainGold_MAX                      = 4
};*/

// Enum SFGame.SFTypes.ETriggerType
/*enum ETriggerType
{
	ETriggerType_Normal                                = 0,
	ETriggerType_ConvoyanceSeizure                     = 1,
	ETriggerType_ConvoyanceStore                       = 2,
	ETriggerType_MAX                                   = 3
};*/

// Enum SFGame.SFTypes.EConvoyancePathGroup
/*enum EConvoyancePathGroup
{
	EConvoyancePoint_A                                 = 0,
	EConvoyancePoint_B                                 = 1,
	EConvoyancePoint_C                                 = 2,
	EConvoyancePoint_MAX                               = 3
};*/

// Enum SFGame.SFTypes.EResultBoostType
/*enum EResultBoostType
{
	EResultBoost_PCRoom                                = 0,
	EResultBoost_RealTimeEvent                         = 1,
	EResultBoost_FunctionalItem                        = 2,
	EResultBoost_Channel                               = 3,
	EResultBoost_PMC                                   = 4,
	EResultBoost_VIP                                   = 5,
	EResultBoost_MonthlyReward                         = 6,
	EResultBoost_MAX                                   = 7
};*/

// Enum SFGame.SFTypes.EHideSeekFeverTime
/*enum EHideSeekFeverTime
{
	EHideSeekFeverTime_None                            = 0,
	EHideSeekFeverTime_CountDown                       = 1,
	EHideSeekFeverTime_Activate                        = 2,
	EHideSeekFeverTime_MAX                             = 3
};*/

// Enum SFGame.SFTypes.EDomainType
/*enum EDomainType
{
	EDomain_NONE                                       = 0,
	EDomain_Facebook                                   = 1,
	EDomain_AID                                        = 2,
	EDomain_TCG                                        = 3,
	EDomain_Google                                     = 4,
	EDomain_MAX                                        = 5
};*/

// Enum SFGame.SFTypes.EAITypes
/*enum EAITypes
{
	AIType_DEFAULT                                     = 0,
	AIType_Dummy                                       = 1,
	AIType_FlyingBug                                   = 2,
	AIType_WormHoleBug                                 = 3,
	AIType_MeleeBase                                   = 4,
	AIType_Libertine                                   = 5,
	AIType_Crawler                                     = 6,
	AIType_Ripper                                      = 7,
	AIType_Stunner                                     = 8,
	AIType_Tyrant                                      = 9,
	AIType_CloakingRipper                              = 10,
	AIType_GasStunner                                  = 11,
	AIType_EliteCrawler                                = 12,
	AIType_NamedCrawler                                = 13,
	AIType_EliteRipper                                 = 14,
	AIType_NamedRipper                                 = 15,
	AIType_EliteLibertine                              = 16,
	AIType_NamedLibertine                              = 17,
	AIType_EliteStunner                                = 18,
	AIType_NamedStunner                                = 19,
	AIType_EliteTyrant                                 = 20,
	AIType_NamedTyrant                                 = 21,
	AIType_WarriorCrawler                              = 22,
	AIType_WarriorRipper                               = 23,
	AIType_WarriorLibertine                            = 24,
	AIType_WarriorElderLibertine                       = 25,
	AIType_WarriorStunner                              = 26,
	AIType_WarriorTyrant                               = 27,
	AIType_WarriorBaronTyrant                          = 28,
	AIType_Turret                                      = 29,
	AIType_AlienController                             = 30,
	AIType_BossCrawler                                 = 31,
	AIType_LightStunner                                = 32,
	AIType_RifleMan                                    = 33,
	AIType_WalkSnatcher                                = 34,
	AIType_ItemCarrier                                 = 35,
	AIType_ConvoyTarget                                = 36,
	AIType_ZombieWalker                                = 37,
	AIType_ZombieRunner                                = 38,
	AIType_ZombieTanker                                = 39,
	AIType_ZombieInvincible                            = 40,
	AIType_ZombiePunisher                              = 41,
	AIType_ZombiePuker                                 = 42,
	AIType_ZombieBoomer                                = 43,
	AIType_ZombieStrongWalker                          = 44,
	AIType_ZombieFastRunner                            = 45,
	AIType_EliteZombieWalker                           = 46,
	AIType_EliteZombieStrongWalker                     = 47,
	AIType_EliteZombieRunner                           = 48,
	AIType_EliteZombieFastRunner                       = 49,
	AIType_EliteZombieBoomer                           = 50,
	AIType_EliteZombiePuker                            = 51,
	AIType_EliteZombieInvincible                       = 52,
	AIType_EliteZombieTanker                           = 53,
	AIType_ZombieHideSeekWalker                        = 54,
	AIType_ZombieHound                                 = 55,
	AIType_ZombieGuard                                 = 56,
	AIType_ZombieLibertine                             = 57,
	AIType_ZombieSpectre                               = 58,
	AIType_ZombieRevenant                              = 59,
	AIType_ZombieHanger                                = 60,
	AIType_None                                        = 61,
	AIType_MAX                                         = 62
};*/

// Enum SFGame.SFTypes.EPHYRESLINKTypes
/*enum EPHYRESLINKTypes
{
	EPRLTypes_Small                                    = 0,
	EPRLTypes_MId                                      = 1,
	EPRLTypes_Big                                      = 2,
	EPRLTypes_MAX                                      = 3
};*/

// Enum SFGame.SFTypes.EItemTypeCheck
/*enum EItemTypeCheck
{
	ETYPECHECK_DefaultItem                             = 0,
	ETYPECHECK_Weapon                                  = 1,
	ETYPECHECK_ChatItem                                = 2,
	ETYPECHECK_ModeItem                                = 3,
	ETYPECHECK_GashaItem                               = 4,
	ETYPECHECK_ClanItem                                = 5,
	ETYPECHECK_TPExchangeIte                           = 6,
	ETYPECHECK_MAX                                     = 7
};*/

// Enum SFGame.SFTypes.EInGameVoteState
/*enum EInGameVoteState
{
	EIGKS_Default                                      = 0,
	EIGKS_Waiting                                      = 1,
	EIGKS_Accept                                       = 2,
	EIGKS_Refuse                                       = 3,
	EIGKS_MAX                                          = 4
};*/

// Enum SFGame.SFTypes.EHeroVersion
/*enum EHeroVersion
{
	EHeroVersion_Season1                               = 0,
	EHeroVersion_Season2                               = 1,
	EHeroVersion_MAX                                   = 2
};*/

// Enum SFGame.SFTypes.EHeroKillingWeaponLogType
/*enum EHeroKillingWeaponLogType
{
	EHKWLT_Default                                     = 0,
	EHKWLT_Rifle                                       = 1,
	EHKWLT_SpecialWeapon                               = 2,
	EHKWLT_MAX                                         = 3
};*/

// Enum SFGame.SFTypes.EInGameStoreItemLogType
/*enum EInGameStoreItemLogType
{
	EIGSILT_ETC                                        = 0,
	EIGSILT_Healing                                    = 1,
	EIGSILT_Stat                                       = 2,
	EIGSILT_Summon                                     = 3,
	EIGSILT_Weapon                                     = 4,
	EIGSILT_MAX                                        = 5
};*/

// Enum SFGame.SFTypes.EGuideItemType
/*enum EGuideItemType
{
	EGuideItem_None                                    = 0,
	EGuideItem_Expired                                 = 1,
	EGuideItem_WillExpire                              = 2,
	EGuideItem_GameMode                                = 3,
	EGuideItem_Recommend                               = 4,
	EGuideItem_MAX                                     = 5
};*/

// Enum SFGame.SFTypes.EBuffType
/*enum EBuffType
{
	EBuffType_None                                     = 0,
	EBuffType_Ripper_Recovery                          = 1,
	EBuffType_Ripper_Cloaking                          = 2,
	EBuffType_Stunner_Dash                             = 3,
	EBuffType_Libertine_Adrenalin                      = 4,
	EBuffType_RecoverHealth                            = 5,
	EBuffType_PurchaseAmmo                             = 6,
	EBuffType_PowerUp                                  = 7,
	EBuffType_DefenceUp                                = 8,
	EBuffType_AgilityUp                                = 9,
	EBuffType_LevelUp                                  = 10,
	EBuffType_Recall_Red                               = 11,
	EBuffType_Recall_Blue                              = 12,
	EBuffType_Baron                                    = 13,
	EBuffType_Streak_Health                            = 14,
	EBuffType_Streak_Power                             = 15,
	EBuffType_Streak_Speed                             = 16,
	EBuffType_Streak_Weapon                            = 17,
	EBuffType_MAX                                      = 18
};*/

// Enum SFGame.SFTypes.EWeapAimProfile
/*enum EWeapAimProfile
{
	EWAP_AR                                            = 0,
	EWAP_SR                                            = 1,
	EWAP_MG                                            = 2,
	EWAP_SMG                                           = 3,
	EWAP_PST                                           = 4,
	EWAP_SG                                            = 5,
	EWAP_HG                                            = 6,
	EWAP_KNIFE                                         = 7,
	EWAP_C4                                            = 8,
	EWAP_NUM                                           = 9,
	EWAP_MAX                                           = 10
};*/

// Enum SFGame.SFTypes.EWEAPON_GROUP
/*enum EWEAPON_GROUP
{
	EWEAPON_GROUP_None                                 = 0,
	EWEAPON_GROUP_PRI                                  = 1,
	EWEAPON_GROUP_SEC                                  = 2,
	EWEAPON_GROUP_SPE                                  = 3,
	EWEAPON_GROUP_HG                                   = 4,
	EWEAPON_GROUP_MODE                                 = 5,
	EWEAPON_GROUP_MIS                                  = 6,
	EWEAPON_GROUP_EXG                                  = 7,
	EWEAPON_GROUP_GL                                   = 8,
	EWEAPON_GROUP_MAX                                  = 9
};*/

// Enum SFGame.SFTypes.EWeaponState
/*enum EWeaponState
{
	EWS_Off                                            = 0,
	EWS_Idle                                           = 1,
	EWS_Sprint                                         = 2,
	EWS_SprintOff                                      = 3,
	EWS_EquipUp                                        = 4,
	EWS_PutDown                                        = 5,
	EWS_PutDownEx                                      = 6,
	EWS_EquipUpEx                                      = 7,
	EWS_PreFire                                        = 8,
	EWS_EmptyMagazine                                  = 9,
	EWS_Fire1                                          = 10,
	EWS_FireHit1                                       = 11,
	EWS_FireKill1                                      = 12,
	EWS_FireProj1                                      = 13,
	EWS_Fire2                                          = 14,
	EWS_FireHit2                                       = 15,
	EWS_FireKill2                                      = 16,
	EWS_FireProj2                                      = 17,
	EWS_PostFire                                       = 18,
	EWS_ChargeCancel                                   = 19,
	EWS_FlashOnOff                                     = 20,
	EWS_ZoomIn                                         = 21,
	EWS_Zoomed                                         = 22,
	EWS_ZoomOut                                        = 23,
	EWS_PreReload                                      = 24,
	EWS_Reload                                         = 25,
	EWS_PostReload                                     = 26,
	EWS_AccIdle                                        = 27,
	EWS_AccActive                                      = 28,
	EWS_AccDeActive                                    = 29,
	EWS_AccExigencyActive                              = 30,
	EWS_AccZoomActive                                  = 31,
	EWS_AccReloadActive                                = 32,
	EWS_AccSprintActive                                = 33,
	EWS_SubWeaponExtension1                            = 34,
	EWS_SubWeaponExtension2                            = 35,
	EWS_SubWeaponExtension3                            = 36,
	EWS_SubWeaponExtension4                            = 37,
	EWS_SubWeaponExtension5                            = 38,
	EWS_SubWeaponExtension6                            = 39,
	EWS_LAST                                           = 40,
	EWS_MAX                                            = 41
};*/

// Enum SFGame.SFTypes.EAICombatType
/*enum EAICombatType
{
	EAICombatType_None                                 = 0,
	EAICombatType_Melee                                = 1,
	EAICombatType_Range                                = 2,
	EAICombatType_Hide                                 = 3,
	EAICombatType_MAX                                  = 4
};*/

// Enum SFGame.SFTypes.EAIGrade
/*enum EAIGrade
{
	EAIGrade_None                                      = 0,
	EAIGrade_Mob                                       = 1,
	EAIGrade_Boss                                      = 2,
	EAIGrade_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.EAlienAttackType
/*enum EAlienAttackType
{
	EEAlienAttackType_None                             = 0,
	EEAlienAttackType_Ripper_Claw                      = 1,
	EEAlienAttackType_Ripper_RecoverHealth             = 2,
	EEAlienAttackType_Stunner_Kamikaze                 = 3,
	EEAlienAttackType_Stunner_Dash                     = 4,
	EEAlienAttackType_Libertine_Split                  = 5,
	EEAlienAttackType_Libertine_Adrenalin              = 6,
	EEAlienAttackType_MAX                              = 7
};*/

// Enum SFGame.SFTypes.ELevelOfDifficulty
/*enum ELevelOfDifficulty
{
	ELOD_EASY                                          = 0,
	ELOD_NORMAL                                        = 1,
	ELOD_HARD                                          = 2,
	ELOD_VERYHARD                                      = 3,
	ELOD_MAX                                           = 4
};*/

// Enum SFGame.SFTypes.ESquadTargetType
/*enum ESquadTargetType
{
	ESquadTarget_DEFAULT                               = 0,
	ESquadTarget_PRIMARYTARGET                         = 1,
	ESquadTarget_PAWN                                  = 2,
	ESquadTarget_MAX                                   = 3
};*/

// Enum SFGame.SFTypes.EPingNotifyType
/*enum EPingNotifyType
{
	EPing_Attack                                       = 0,
	EPing_Retreat                                      = 1,
	EPing_MAX                                          = 2
};*/

// Enum SFGame.SFTypes.EEmblemType
/*enum EEmblemType
{
	EEmblemType_None                                   = 0,
	EEmblemType_Normal                                 = 1,
	EEmblemType_PCRoom                                 = 2,
	EEmblemType_Challenge                              = 3,
	EEmblemType_Spray_Cash                             = 4,
	EEmblemType_Spray_Cash_Infinite                    = 5,
	EEmblemType_Spray_Event                            = 6,
	EEmblemType_Spray_Event_Infinite                   = 7,
	EEmblemType_VIP                                    = 8,
	EEmblemType_MAX                                    = 9
};*/

// Enum SFGame.SFTypes.EFeverItemType
/*enum EFeverItemType
{
	EFeverItem_LPReward                                = 0,
	EFeverItem_Sale                                    = 1,
	EFeverItem_Reward                                  = 2,
	EFeverItem_MAX                                     = 3
};*/

// Enum SFGame.SFTypes.EAdditionalType
/*enum EAdditionalType
{
	EAdditionalType_EXPUP                              = 0,
	EAdditionalType_SPGAGEUP                           = 1,
	EAdditionalType_TPUP                               = 2,
	EAdditionalType_COMBINECOUNT                       = 3,
	EAdditionalType_MAX                                = 4
};*/

// Enum SFGame.SFTypes.ERandomRespawnType
/*enum ERandomRespawnType
{
	ERandomRespawnType_Default                         = 0,
	ERandomRespawnType_AvoidSameTeam                   = 1,
	ERandomRespawnType_MAX                             = 2
};*/

// Enum SFGame.SFTypes.EFreeItemType
/*enum EFreeItemType
{
	EFreeItem_PCRoom                                   = 0,
	EFreeItem_VIP                                      = 1,
	EFreeItem_MonthlyReward                            = 2,
	EFreeItem_MAX                                      = 3
};*/

// Enum SFGame.SFTypes.PolyType
/*enum PolyType
{
	PolyType_UNKNOWN                                   = 0,
	PolyType_INPUT                                     = 1,
	PolyType_INSERT                                    = 2,
	PolyType_START                                     = 3,
	PolyType_END                                       = 4,
	PolyType_MERGE                                     = 5,
	PolyType_SPLIT                                     = 6,
	PolyType_REGULAR_UP                                = 7,
	PolyType_REGULAR_DOWN                              = 8,
	PolyType_MAX                                       = 9
};*/

// Enum SFGame.SFTypes.EHackRespondType
/*enum EHackRespondType
{
	EHACKRESPOND_NONE                                  = 0,
	EHACKRESPOND_SENDREPORT                            = 1,
	EHACKRESPOND_RETURNTOLOBBY                         = 2,
	EHACKRESPOND_TERMINATEGAME                         = 3,
	EHACKRESPOND_MAX                                   = 4
};*/

// Enum SFGame.SFTypes.eECONSUME_TEAMSCORE
/*enum eECONSUME_TEAMSCORE
{
	ECONSUME_REVIVAL                                   = 0,
	ECONSUME_SETUPBARRICADE                            = 1,
	ECONSUME_USESHOP                                   = 2,
	ECONSUME_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.eSpawnAnimStat
/*enum eSpawnAnimStat
{
	eSpawnAnimStat_Ready                               = 0,
	eSpawnAnimStat_Playing                             = 1,
	eSpawnAnimStat_Played                              = 2,
	eSpawnAnimStat_MAX                                 = 3
};*/

// Enum SFGame.SFTypes.EDBNOLEVEL
/*enum EDBNOLEVEL
{
	EDBNO_ALIVE                                        = 0,
	EDBNO_DOWN                                         = 1,
	EDBNO_IDLE                                         = 2,
	EDBNO_REVIVAL                                      = 3,
	EDBNO_RIP                                          = 4,
	EDBNO_MAX                                          = 5
};*/

// Enum SFGame.SFTypes.EEventProgressType
/*enum EEventProgressType
{
	EEventProgress_Percent                             = 0,
	EEventProgress_Gage                                = 1,
	EEventProgress_Collect                             = 2,
	EEventProgress_Attendance                          = 3,
	EEventProgress_MAX                                 = 4
};*/

// Enum SFGame.SFTypes.EPaymentIndex
/*enum EPaymentIndex
{
	EPayment_None                                      = 0,
	EPayment_SP                                        = 1,
	EPayment_CASH                                      = 2,
	EPayment_TP                                        = 3,
	EPayment_LP                                        = 4,
	EPayment_MAX                                       = 5
};*/

// Enum SFGame.SFTypes.ERadioMessageType
/*enum ERadioMessageType
{
	ERdo_Community                                     = 0,
	ERdo_Command                                       = 1,
	ERdo_Mission                                       = 2,
	ERdo_Auto                                          = 3,
	ERdo_MAX                                           = 4
};*/

// Enum SFGame.SFTypes.EObserverShowArmBand
/*enum EObserverShowArmBand
{
	EOSAB_Both                                         = 0,
	EOSAB_IFFBand                                      = 1,
	EOSAB_TeamBand                                     = 2,
	EOSAB_Neither                                      = 3,
	EOSAB_MAX                                          = 4
};*/

// Enum SFGame.SFTypes.EObserverViewMode
/*enum EObserverViewMode
{
	EOVM_Everyone_1ST                                  = 0,
	EOVM_Everyone_3RD                                  = 1,
	EOVM_RED_1ST                                       = 2,
	EOVM_RED_3RD                                       = 3,
	EOVM_BLUE_1ST                                      = 4,
	EOVM_BLUE_3RD                                      = 5,
	EOVM_Free                                          = 6,
	EOVM_Translucent                                   = 7,
	EOVM_Top                                           = 8,
	EOVM_InGameSpectator                               = 9,
	EOVM_MAX                                           = 10
};*/

// Enum SFGame.SFTypes.eFullBodyAnimType
/*enum eFullBodyAnimType
{
	eFBAT_Attack                                       = 0,
	eFBAT_AttackAlt                                    = 1,
	eFBAT_Roar                                         = 2,
	eFBAT_Hit                                          = 3,
	eFBAT_Spawn                                        = 4,
	eFBAT_Stun                                         = 5,
	eFBAT_Death                                        = 6,
	eFBAT_Idle                                         = 7,
	eFBAT_IdleToDash                                   = 8,
	eFBAT_DashToIdle                                   = 9,
	eFBAT_DashStun                                     = 10,
	eFBAT_PreAttack                                    = 11,
	eFBAT_PostAttack                                   = 12,
	eFBAT_MAX                                          = 13
};*/

// Enum SFGame.SFTypes.EKillFeedBackType
/*enum EKillFeedBackType
{
	EKillFeedBack_None                                 = 0,
	EKillFeedBack_Default                              = 1,
	EKillFeedBack_Normal                               = 2,
	EKillFeedBack_Special                              = 3,
	EKillFeedBack_Rare                                 = 4,
	EKillFeedBack_Continuous                           = 5,
	EKillFeedBack_MAX                                  = 6
};*/

// Enum SFGame.SFTypes.EChallengeType
/*enum EChallengeType
{
	EChallengeType_Weapon                              = 0,
	EChallengeType_Mission                             = 1,
	EChallengeType_SpecialKill                         = 2,
	EChallengeType_ETC                                 = 3,
	EChallengeType_MAX                                 = 4
};*/

// Enum SFGame.SFTypes.SFFoleyID
/*enum SFFoleyID
{
	SFFoley_None                                       = 0,
	SFFoley_RustleSound                                = 1,
	SFFoley_RustleSoundDash                            = 2,
	SFFoley_HitDead                                    = 3,
	SFFoley_HitHelmet                                  = 4,
	SFFoley_HitByNormal                                = 5,
	SFFoley_HitByKnife                                 = 6,
	SFFoley_HitByArrow                                 = 7,
	SFFoley_Kill                                       = 8,
	SFFoley_KillHead                                   = 9,
	SFFoley_FallDeadBody                               = 10,
	SFFoley_HitBySnow                                  = 11,
	SFFoley_HitBack                                    = 12,
	SFFoley_KillBack                                   = 13,
	SFFoley_HitByTomahawk                              = 14,
	SFFoley_HitByStun                                  = 15,
	SFFoley_HitByBreath                                = 16,
	SFFoley_HitByBreathDot                             = 17,
	SFFoley_HitByZombieNormal                          = 18,
	SFFoley_HitByFlame                                 = 19,
	SFFoley_MAX                                        = 20
};*/

// Enum SFGame.SFTypes.SFVoiceFoleyID
/*enum SFVoiceFoleyID
{
	SFVoiceFoley_None                                  = 0,
	SFVoiceFoley_DamagedNormal                         = 1,
	SFVoiceFoley_DyingSound                            = 2,
	SFVoiceFoley_DamageSnow                            = 3,
	SFVoiceFoley_DamagedCritical                       = 4,
	SFVoiceFoley_Breath_Left_1st                       = 5,
	SFVoiceFoley_Breath_Right_1st                      = 6,
	SFVoiceFoley_MAX                                   = 7
};*/

// Enum SFGame.SFTypes.EAwardValueType
/*enum EAwardValueType
{
	EAwardValueType_Null                               = 0,
	EAwardValueType_Number                             = 1,
	EAwardValueType_String                             = 2,
	EAwardValueType_Boolean                            = 3,
	EAwardValueType_MAX                                = 4
};*/

// Enum SFGame.SFTypes.EAwardDispatchType
/*enum EAwardDispatchType
{
	EAwardDispatchType_Instantly                       = 0,
	EAwardDispatchType_RoundOver                       = 1,
	EAwardDispatchType_MatchOver                       = 2,
	EAwardDispatchType_MAX                             = 3
};*/

// Enum SFGame.SFTypes.EventDataType
/*enum EventDataType
{
	EventData_Saved                                    = 0,
	EventData_Invalid                                  = 1,
	EventData_SavedWeapType                            = 2,
	EventData_InvalidWeapType                          = 3,
	EventData_MAX                                      = 4
};*/

// Enum SFGame.SFTypes.ERTEType
/*enum ERTEType
{
	ERTEType_All                                       = 0,
	ERTEType_Map                                       = 1,
	ERTEType_GameMode                                  = 2,
	ERTEType_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.ESFUIDataProviderType
/*enum ESFUIDataProviderType
{
	ESFUIDataProviderType_Tutorial                     = 0,
	ESFUIDataProviderType_Training                     = 1,
	ESFUIDataProviderType_Beginner                     = 2,
	ESFUIDataProviderType_MAX                          = 3
};*/

// Enum SFGame.SFTypes.ERankType
/*enum ERankType
{
	ERankType_None                                     = 0,
	ERankType_AllExp                                   = 1,
	ERankType_WinRoundRank                             = 2,
	ERankType_KillRank                                 = 3,
	ERankType_AssistRank                               = 4,
	ERankType_HeadShotRank                             = 5,
	ERankType_None1                                    = 6,
	ERankType_None2                                    = 7,
	ERankType_BlastingRank                             = 8,
	ERankType_SeizureRank                              = 9,
	ERankType_EscapeRank                               = 10,
	ERankType_ClanRank                                 = 11,
	ERankType_MAX                                      = 12
};*/

// Enum SFGame.SFTypes.EBUYALLTYPE
/*enum EBUYALLTYPE
{
	EBUYALL_None                                       = 0,
	EBUYALL_Normal                                     = 1,
	EBUYALL_PurchaseGuide                              = 2,
	EBUYALL_FEVERTIMEPAGE                              = 3,
	EBUYALL_MAX                                        = 4
};*/

// Enum SFGame.SFTypes.ELOBBYPROPACTION
/*enum ELOBBYPROPACTION
{
	ELOBBYPROPACTION_IDLE                              = 0,
	ELOBBYPROPACTION_INVENIDLE                         = 1,
	ELOBBYPROPACTION_SHOPBUY                           = 2,
	ELOBBYPROPACTION_MATCHLOSE                         = 3,
	ELOBBYPROPACTION_MATCHWIN                          = 4,
	ELOBBYPROPACTION_NOBUY                             = 5,
	ELOBBYPROPACTION_RANKUP                            = 6,
	ELOBBYPROPACTION_MAX                               = 7
};*/

// Enum SFGame.SFTypes.ELobbySeasonType
/*enum ELobbySeasonType
{
	ELobbySeasonType_None                              = 0,
	ELobbySeasonType_Spring                            = 1,
	ELobbySeasonType_Summer                            = 2,
	ELobbySeasonType_Autumn                            = 3,
	ELobbySeasonType_Winter                            = 4,
	ELobbySeasonType_MAX                               = 5
};*/

// Enum SFGame.SFTypes.eCAMOUSEFAIL
/*enum eCAMOUSEFAIL
{
	CAMOUSEFAIL_OK                                     = 0,
	CAMOUSEFAIL_NOTARGET                               = 1,
	CAMOUSEFAIL_OUTRANGE                               = 2,
	CAMOUSEFAIL_MAX                                    = 3
};*/

// Enum SFGame.SFTypes.EMemberOutType
/*enum EMemberOutType
{
	EMemberOutType_MemberSelfOut                       = 0,
	EMemberOutType_WaitPeopleSelfOut                   = 1,
	EMemberOutType_WaitPeopleOut                       = 2,
	EMemberOutType_MasterUseOut                        = 3,
	EMemberOutType_MAX                                 = 4
};*/

// Enum SFGame.SFTypes.EClanHomeViewType
/*enum EClanHomeViewType
{
	EClanHomeViewType_UserTab                          = 0,
	EClanHomeViewType_ManagerTab                       = 1,
	EClanHomeViewType_Main                             = 2,
	EClanHomeViewType_Chat                             = 3,
	EClanHomeViewType_MAX                              = 4
};*/

// Enum SFGame.SFTypes.EHitMarkType
/*enum EHitMarkType
{
	EHITMARK_NONE                                      = 0,
	EHITMARK_CENTERCROSS                               = 1,
	EHITMARK_MULTICROSS                                = 2,
	EHITMARK_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.EINVITERESULT
/*enum EINVITERESULT
{
	EINVITERESULT_NONE                                 = 0,
	EINVITERESULT_SUCCESS                              = 1,
	EINVITERESULT_NOTBUDDY                             = 2,
	EINVITERESULT_BEGINNER                             = 3,
	EINVITERESULT_SEX                                  = 4,
	EINVITERESULT_CLAN                                 = 5,
	EINVITERESULT_USERGRADE                            = 6,
	EINVITERESULT_NOUSER                               = 7,
	EINVITERESULT_INGAME                               = 8,
	EINVITERESULT_NOTINROOM                            = 9,
	EINVITERESULT_FULLCHANNEL                          = 10,
	EINVITERESULT_FULLROOM                             = 11,
	EINVITERESULT_OFFLINE                              = 12,
	EINVITERESULT_REPEAT                               = 13,
	EINVITERESULT_SELF                                 = 14,
	EINVITERESULT_INSAMELOC                            = 15,
	EINVITERESULT_WAITINGINVITE                        = 16,
	EINVITERESULT_INCOUNTDOWN                          = 17,
	EINVITERESULT_INMINIGAME                           = 18,
	EINVITERESULT_REFUSEINVITE                         = 19,
	EINVITERESULT_NOINTRUSION                          = 20,
	EINVITERESULT_NOHEROTEST                           = 21,
	EINVITERESULT_NOROOM                               = 22,
	EINVITERESULT_NOCHANNEL                            = 23,
	EINVITERESULT_MAX                                  = 24
};*/

// Enum SFGame.SFTypes.eItemTypeDEF
/*enum eItemTypeDEF
{
	eItemType_CAMO                                     = 0,
	eItemType_WEAPON                                   = 1,
	eItemType_CHAR                                     = 2,
	eItemType_PMC                                      = 3,
	eItemType_MAX                                      = 4
};*/

// Enum SFGame.SFTypes.ELobbyDialog
/*enum ELobbyDialog
{
	EDialog_None                                       = 0,
	EDialog_Base                                       = 1,
	EDialog_CreateEvent                                = 2,
	EDialog_CreateRoom                                 = 3,
	EDialog_BuyOne                                     = 4,
	EDialog_BuyAll                                     = 5,
	EDialog_BuyOk                                      = 6,
	EDialog_Following                                  = 7,
	EDialog_SysSetting                                 = 8,
	EDialog_WaitingAck                                 = 9,
	EDialog_GameResult                                 = 10,
	EDialog_GameResult_PVE                             = 11,
	EDialog_GameResult_Hero                            = 12,
	EDialog_GameResult_Zombie                          = 13,
	EDialog_GameResult_16vs16                          = 14,
	EDialog_Password                                   = 15,
	EDialog_ItemRepair                                 = 16,
	EDialog_AllItemRepair                              = 17,
	EDialog_ItemResell                                 = 18,
	EDialog_SystemMessage                              = 19,
	EDialog_ClanAreaSelect                             = 20,
	EDialog_ClanMake                                   = 21,
	EDialog_ClanJoin                                   = 22,
	EDialog_RankLimitError                             = 23,
	EDialog_Exit                                       = 24,
	EDialog_FullScrHelp                                = 25,
	EDialog_FuncUseDefault                             = 26,
	EDialog_FuncUseReset                               = 27,
	EDialog_FuncChangeName                             = 28,
	EDialog_FuncChangeSpecialName                      = 29,
	EDialog_FuncChangeClanMark                         = 30,
	EDialog_UseCamo                                    = 31,
	EDialog_UseColorCodeName                           = 32,
	EDialog_UseColorCodeNameV2                         = 33,
	EDialog_UseCarveWeaponTag                          = 34,
	EDialog_UseMuzzleFlash                             = 35,
	EDialog_UseStoredMaterial                          = 36,
	EDialog_UseCoupon                                  = 37,
	EDialog_QuickJoin                                  = 38,
	EDialog_MatchingFound                              = 39,
	EDialog_ExtraReward                                = 40,
	EDialog_RewardItem                                 = 41,
	EDialog_ClanWideAreaSelect                         = 42,
	EDialog_ChangeTP                                   = 43,
	EDialog_ChallengeComplete                          = 44,
	EDialog_EmblemDeck                                 = 45,
	EDialog_ExitInGame                                 = 46,
	EDialog_ExitConfirmDialog                          = 47,
	EDialog_BeginnerComplete                           = 48,
	EDialog_RookieChannel                              = 49,
	EDialog_SelectGift                                 = 50,
	Edialog_IngameShop                                 = 51,
	EDialog_EventList                                  = 52,
	EDialog_TagSystem                                  = 53,
	EDialog_ChoicePackage                              = 54,
	EDialog_CommunityNews                              = 55,
	EDialog_ChangeCrossHair                            = 56,
	EDialog_WebLogin                                   = 57,
	EDialog_SpectatorDeco                              = 58,
	EDialog_ClanMarkAnimation                          = 59,
	EDialog_WebBrowser                                 = 60,
	EDialog_ClanMakeLimit                              = 61,
	EDialog_PackagePreview                             = 62,
	EDialog_FacebookFriendList                         = 63,
	EDialog_VoteOut                                    = 64,
	EDialog_WeeklyClanRank                             = 65,
	EDialog_Declare                                    = 66,
	EDialog_ClanSearch                                 = 67,
	EDialog_BillingToken                               = 68,
	EDialog_WaitingChangeObj                           = 69,
	EDialog_TwitchTV                                   = 70,
	EDialog_InitWeaponKillDeath                        = 71,
	EDialog_ChangeClassMark                            = 72,
	EDialog_UseRandomBox                               = 73,
	EDialog_UseFiringRangeScoreInitial                 = 74,
	EDialog_UseBombSPCoupon                            = 75,
	EDialog_Serial                                     = 76,
	EDialog_RecycleResult                              = 77,
	ELobbyDialog_MAX                                   = 78
};*/

// Enum SFGame.SFTypes.ELobbyScreen
/*enum ELobbyScreen
{
	ELobby_None                                        = 0,
	ELobby_LoginView                                   = 1,
	ELobby_WebLoginView                                = 2,
	ELobby_CHNLoginView                                = 3,
	ELobby_PMSLoginView                                = 4,
	ELobby_OTPLoginView                                = 5,
	ELobby_CreateCodeName                              = 6,
	ELobby_CreateCharacter                             = 7,
	ELobby_ChannelSelect                               = 8,
	ELobby_RoomList                                    = 9,
	ELobby_CreateRoom                                  = 10,
	ELobby_QuickJoin                                   = 11,
	ELobby_Inventory                                   = 12,
	ELobby_Shop                                        = 13,
	ELobby_MyInfo                                      = 14,
	ELobby_MiniGame                                    = 15,
	ELobby_WaitingRoom                                 = 16,
	ELobby_PartyRoom                                   = 17,
	ELobby_WaitingRoom_PVE                             = 18,
	ELobby_WaitingRoom_Hero                            = 19,
	ELobby_PartyRoomList                               = 20,
	ELobby_GashaponList                                = 21,
	ELobby_GashaOrgelBox                               = 22,
	ELobby_ClanHome                                    = 23,
	ELobby_ClanList                                    = 24,
	ELobby_Album                                       = 25,
	ELobby_Navi                                        = 26,
	ELobby_MsgrBuddy                                   = 27,
	ELobby_GachaRoll                                   = 28,
	ELobby_MsgrChatting                                = 29,
	ELobby_LeftNotice                                  = 30,
	ELobby_PurchaseGuide                               = 31,
	ELobby_VideoPlayer                                 = 32,
	ELobby_SideBackground                              = 33,
	ELobby_Community                                   = 34,
	ELobby_WaitingRoom_AITDM                           = 35,
	ELobby_WaitingRoom_Zombie                          = 36,
	ELobby_WaitingRoom_AITDMVS16                       = 37,
	ELobby_WaitingRoom_1VS1                            = 38,
	ELobby_WaitingRoom_16VS16                          = 39,
	ELobby_Rank                                        = 40,
	ELobby_Enchant                                     = 41,
	ELobby_ClanLeague                                  = 42,
	ELobby_FeverTime                                   = 43,
	ELobby_Combine                                     = 44,
	ELobby_MAX                                         = 45
};*/

// Enum SFGame.SFTypes.ECharItemType
/*enum ECharItemType
{
	CIT_UNIT                                           = 0,
	CIT_FACE                                           = 1,
	CIT_MASK                                           = 2,
	CIT_EYE                                            = 3,
	CIT_JACKET                                         = 4,
	CIT_GLOVE                                          = 5,
	CIT_WRIST                                          = 6,
	CIT_PANTS                                          = 7,
	CIT_SHOES                                          = 8,
	CIT_BELT                                           = 9,
	CIT_CAP                                            = 10,
	CIT_SUIT                                           = 11,
	CIT_EFFECT                                         = 12,
	CIT_MAX                                            = 13
};*/

// Enum SFGame.SFTypes.AttendanceEventBoxType
/*enum AttendanceEventBoxType
{
	AEBoxType_InProgress                               = 0,
	AEBoxType_AchivedGoal                              = 1,
	AEBoxType_AchivedReward                            = 2,
	AEBoxType_MAX                                      = 3
};*/

// Enum SFGame.SFTypes.EReturnLobby
/*enum EReturnLobby
{
	EReturnLobby_None                                  = 0,
	EReturnLobby_WaitingRoom                           = 1,
	EReturnLobby_MiniGameRoomList                      = 2,
	EReturnLobby_MiniGameChannelList                   = 3,
	EReturnLobby_MAX                                   = 4
};*/

// Enum SFGame.SFTypes.BUDDYFILTTER
/*enum BUDDYFILTTER
{
	BF_NONE                                            = 0,
	BF_CODENAMESAME                                    = 1,
	BF_CODENAMENOCASE                                  = 2,
	BF_CODENAMEINSTR                                   = 3,
	BF_MAX                                             = 4
};*/

// Enum SFGame.SFTypes.BUDDYGROUPTYPE
/*enum BUDDYGROUPTYPE
{
	BGT_NONE                                           = 0,
	BGT_BUDDY                                          = 1,
	BGT_CLAN                                           = 2,
	BGT_BOTH                                           = 3,
	BGT_MAX                                            = 4
};*/

// Enum SFGame.SFTypes.EInGameKickRes
/*enum EInGameKickRes
{
	EInGameKick_VoteStart                              = 0,
	EInGameKick_KickSuccess                            = 1,
	EInGameKick_KickFail                               = 2,
	EInGameKick_Yes                                    = 3,
	EInGameKick_No                                     = 4,
	EInGameKick_VoteRating                             = 5,
	EInGameKick_VoteResult                             = 6,
	EInGameKick_Err_NoTarget                           = 7,
	EInGameKick_Err_OverUse                            = 8,
	EInGameKick_Err_inVote                             = 9,
	EInGameKick_Err_SelfKick                           = 10,
	EInGameKick_Err_VoteCooltime                       = 11,
	EInGameKick_Err_DisableMode                        = 12,
	EInGameKick_Err_DisableChannel                     = 13,
	EInGameKick_Err_NoInGameKickState                  = 14,
	EInGameKick_Err_NoGRI                              = 15,
	EInGameKick_Err_Bot                                = 16,
	EInGameKick_Err_Voted                              = 17,
	EInGameKick_Err_Disable                            = 18,
	EInGameKick_Err_DisableInGameState                 = 19,
	EInGameKick_Err_TargetQuit                         = 20,
	EInGameKick_Err_LowMemberCount                     = 21,
	EInGameKick_Err_NoBallot                           = 22,
	EInGameKick_Err_NotTargetTeam                      = 23,
	EInGameKick_Err_NeedSP                             = 24,
	EInGameKick_Err_ProposerQuit                       = 25,
	EInGameKick_MAX                                    = 26
};*/

// Enum SFGame.SFTypes.MGRNOTISTR
/*enum MGRNOTISTR
{
	MGRNOTISTR_NONE                                    = 0,
	MGRNOTISTR_REQBUDDY                                = 1,
	MGRNOTISTR_ALREADYBAN                              = 2,
	MGRNOTISTR_ALREADYBUDDYNOCN                        = 3,
	MGRNOTISTR_NONEUSERNOCN                            = 4,
	MGRNOTISTR_INVITEBUDDYFAIL                         = 5,
	MGRNOTISTR_ACCEPTBUDDY                             = 6,
	MGRNOTISTR_MAXBUDDYCNT                             = 7,
	MGRNOTISTR_ALREADYBUDDY                            = 8,
	MGRNOTISTR_YETSUPPORT                              = 9,
	MGRNOTISTR_GETINVITEBUDDY                          = 10,
	MGRNOTISTR_Q_DEL                                   = 11,
	MGRNOTISTR_DISCONNECTED                            = 12,
	MGRNOTISTR_NEEDBUYITEM                             = 13,
	MGRNOTISTR_INVITEDGAME                             = 14,
	MGRNOTISTR_TOOSHORT                                = 15,
	MGRNOTISTR_SELFINVITED                             = 16,
	MGRNOTISTR_TOOLONG                                 = 17,
	MGRNOTISTR_AFTERRETRY                              = 18,
	MGRNOTISTR_QUESTION_BLOCK                          = 19,
	MGRNOTISTR_QUESTION_REMOVE_BLOCK                   = 20,
	MGRNOTISTR_MAX                                     = 21
};*/

// Enum SFGame.SFTypes.EClanMsgPacketType
/*enum EClanMsgPacketType
{
	EClanMsgPacketType_JoinOk                          = 0,
	EClanMsgPacketType_MyClanJoinOk                    = 1,
	EClanMsgPacketType_JoinNo                          = 2,
	EClanMsgPacketType_NotifyClanJoin                  = 3,
	EClanMsgPacketType_MemberOut                       = 4,
	EClanMsgPacketType_DestroyClan                     = 5,
	EClanMsgPacketType_NotifyMemberLogin               = 6,
	EClanMsgPacketType_NotifyResultClanWar             = 7,
	EClanMsgPacketType_GiveMaster                      = 8,
	EClanMsgPacketType_NotifyChangeClanName            = 9,
	EClanMsgPacketType_NotifyChangeCodeName            = 10,
	EClanMsgPacketType_SelfRefresh                     = 11,
	EClanMsgPacketType_MakeClan                        = 12,
	EClanMsgPacketType_LevelChange                     = 13,
	EClanMsgPacketType_NotifyRemoveClan                = 14,
	EClanMsgPacketType_NotifyChangeClanMark            = 15,
	EClanMsgPacketType_MAX                             = 16
};*/

// Enum SFGame.SFTypes.EAspectRatioType
/*enum EAspectRatioType
{
	EAspectRatio_0403                                  = 0,
	EAspectRatio                                       = 1,
	EAspectRatio01                                     = 2,
	EAspectRatio_None                                  = 3,
	EAspectRatio_MAX                                   = 4
};*/

// Enum SFGame.SFTypes.EForceExitType
/*enum EForceExitType
{
	EForceExit_None                                    = 0,
	EForceExit_NoConnect                               = 1,
	EForceExit_Disconnect                              = 2,
	EForceExit_NoLogin                                 = 3,
	EForceExit_ByGM                                    = 4,
	EForceExit_NoPingPong                              = 5,
	EForceExit_SameUser                                = 6,
	EForceExit_ShutDownLaw                             = 7,
	EForceExit_TCProtectError_LoadDLL                  = 8,
	EForceExit_TCProtectError_CheckHack                = 9,
	EForceExit_WaitingTimeOut                          = 10,
	EForceExit_MAX                                     = 11
};*/

// Enum SFGame.SFTypes.EGameModeDispType
/*enum EGameModeDispType
{
	EGameModeDisp_None                                 = 0,
	EGameModeDisp_New                                  = 1,
	EGameModeDisp_Hot                                  = 2,
	EGameModeDisp_Easy                                 = 3,
	EGameModeDisp_Hard                                 = 4,
	EGameModeDisp_MAX                                  = 5
};*/

// Enum SFGame.SFTypes.ERoomType
/*enum ERoomType
{
	ERoom_Gaming                                       = 0,
	ERoom_Party                                        = 1,
	ERoom_Pending                                      = 2,
	ERoom_Matching                                     = 3,
	ERoom_NoType                                       = 4,
	ERoom_MAX                                          = 5
};*/

// Enum SFGame.SFTypes.ECommunityEvent
/*enum ECommunityEvent
{
	ECommunityEvent_Normal                             = 0,
	ECommunityEvent_Ranking                            = 1,
	ECommunityEvent_JoinClan                           = 2,
	ECommunityEvent_Gasha                              = 3,
	ECommunityEvent_MAX                                = 4
};*/

// Enum SFGame.SFTypes.ECantStartGame
/*enum ECantStartGame
{
	ECantStartGame_None                                = 0,
	ECantStartGame_PlayerNeed                          = 1,
	ECantStartGame_ChangingMaster                      = 2,
	ECantStartGame_IntrusionFailed                     = 3,
	ECantStartGame_MisBalance                          = 4,
	ECantStartGame_IntrusionDisabled                   = 5,
	ECantStartGame_NoMainWeapon                        = 6,
	ECantStartGame_OverPlayers                         = 7,
	ECantStartGame_MercenaryExceeded                   = 8,
	ECantStartGame_SameClanMatch                       = 9,
	ECantStartGame_ClanPlayerNeed                      = 10,
	ECantStartGame_MatchSearchPlayerNeed               = 11,
	ECantStartGame                                     = 12,
	ECantStartGame01                                   = 13,
	ECantStartGame02                                   = 14,
	ECantStartGame_PlayerNeedNoTeam                    = 15,
	ECantStartGame_MatchIsOver                         = 16,
	ECantStartGame_NeedMorePlayers                     = 17,
	ECantStartGame_NeedAI                              = 18,
	ECantStartGame_NeedOpenSlot                        = 19,
	ECantStartGame_MAX                                 = 20
};*/

// Enum SFGame.SFTypes.EOutFromRoom
/*enum EOutFromRoom
{
	EOutFromRoom_WaitingRoomKick                       = 0,
	EOutFromRoom_NoInput                               = 1,
	EOutFromRoom_ClanKick                              = 2,
	EOutFromRoom_ClanDestroy                           = 3,
	EOutFromRoom_HeroModeExit                          = 4,
	EOutFromRoom_InGameVoteKick                        = 5,
	EOutFromRoom_GraduateRookie                        = 6,
	EOutFromRoom_GameMasterKick                        = 7,
	EOutFromRoom_None                                  = 8,
	EOutFromRoom_MAX                                   = 9
};*/

// Enum SFGame.SFTypes.EHUDScoreType
/*enum EHUDScoreType
{
	EHUDScoreType_Score                                = 0,
	EHUDScoreType_Round                                = 1,
	EHUDScoreType_WinArea                              = 2,
	EHUDScoreType_Wave                                 = 3,
	EHUDScoreType_MAX                                  = 4
};*/

// Enum SFGame.SFTypes.EEmotionType
/*enum EEmotionType
{
	EmotionRoundEnd                                    = 0,
	EmotionRadioMessage                                = 1,
	EEmotionType_MAX                                   = 2
};*/

// Enum SFGame.SFTypes.EGFxPingType
/*enum EGFxPingType
{
	EGFxPingType_BAD                                   = 0,
	EGFxPingType_NORMAL                                = 1,
	EGFxPingType_GOOD                                  = 2,
	EGFxPingType_VERYGOOD                              = 3,
	EGFxPingType_MAX                                   = 4
};*/

// Enum SFGame.SFTypes.EZombieKillType
/*enum EZombieKillType
{
	EZBK_ZombieWalker                                  = 0,
	EZBK_ZombieInvincible                              = 1,
	EZBK_ZombiePuker                                   = 2,
	EZBK_ZombieBoomer                                  = 3,
	EZBK_ZombieTanker                                  = 4,
	EZBK_ZombiePunisher                                = 5,
	EZBK_MAX                                           = 6
};*/

// Enum SFGame.SFTypes.EManHuntKillType
/*enum EManHuntKillType
{
	EMHKT_CloakingRipper                               = 0,
	EMHKT_Stunner                                      = 1,
	EMHKT_Libertine                                    = 2,
	EMHKT_MAX                                          = 3
};*/

// Enum SFGame.SFTypes.EManHuntLogType
/*enum EManHuntLogType
{
	EMHLT_PlayTimeByHuman                              = 0,
	EMHLT_KillByHuman                                  = 1,
	EMHLT_AssistByHuman                                = 2,
	EMHLT_DeadByHuman                                  = 3,
	EMHLT_PlayTimeByBeast                              = 4,
	EMHLT_KillByBeastType                              = 5,
	EMHLT_AssistByBeastType                            = 6,
	EMHLT_DeadByBeastType                              = 7,
	EMHLT_MAX                                          = 8
};*/

// Enum SFGame.SFTypes.EPVELogType
/*enum EPVELogType
{
	EPVELT_Kill                                        = 0,
	EPVELT_BossKill                                    = 1,
	EPVELT_CriticalKill                                = 2,
	EPVELT_Assist                                      = 3,
	EPVELT_DeadCount                                   = 4,
	EPVELT_AccumulationMoney                           = 5,
	EPVELT_SpendMoney                                  = 6,
	EPVELT_EliteCrawlerKill                            = 7,
	EPVELT_NamedCrawlerKill                            = 8,
	EPVELT_EliteRipperKill                             = 9,
	EPVELT_NamedRipperKill                             = 10,
	EPVELT_CloakingRipperKill                          = 11,
	EPVELT_EliteLibertineKill                          = 12,
	EPVELT_NamedLibertineKill                          = 13,
	EPVELT_EliteStunnerKill                            = 14,
	EPVELT_NamedStunnerKill                            = 15,
	EPVELT_GasStunnerKill                              = 16,
	EPVELT_EliteTyrantKill                             = 17,
	EPVELT_NamedTyrantKill                             = 18,
	EPVELT_MAX                                         = 19
};*/

// Enum SFGame.SFTypes.ELogType
/*enum ELogType
{
	ELT_None                                           = 0,
	ELT_PlayTime                                       = 1,
	ELT_Kill                                           = 2,
	ELT_Assist                                         = 3,
	ELT_Death                                          = 4,
	ELT_AimKill                                        = 5,
	ELT_HeadShot                                       = 6,
	ELT_ChestHit                                       = 7,
	ELT_StomachHit                                     = 8,
	ELT_LimbsHit                                       = 9,
	ELT_HeadPoint                                      = 10,
	ELT_AliveCount                                     = 11,
	ELT_MissionInfo                                    = 12,
	ELT_MissionInfo01                                  = 13,
	ELT_MissionInfo02                                  = 14,
	ELT_AttackRound                                    = 15,
	ELT_DefendRound                                    = 16,
	ELT_TotWinCount                                    = 17,
	ELT_TotLoseCount                                   = 18,
	ELT_WinGameCount                                   = 19,
	ELT_CSN                                            = 20,
	ELT_PlayerWithCount                                = 21,
	ELT_EarnScore                                      = 22,
	ELT_EarnLuckyPointCount                            = 23,
	ELT_AttackRoundWin                                 = 24,
	ELT_DefendRoundWin                                 = 25,
	ELT_TotalHitEnemyCount                             = 26,
	ELT_HeadHitCount                                   = 27,
	ELT_TotalHitCount                                  = 28,
	ELT_LuckyPoint                                     = 29,
	ELT_HitEnemyCount                                  = 30,
	ELT_WeapSetUsedCount                               = 31,
	ELT_GameScore                                      = 32,
	ELT_MAX                                            = 33
};*/

// Enum SFGame.SFTypes.EMissionScoreType
/*enum EMissionScoreType
{
	EMissionScore_TeamAndUser                          = 0,
	EMissionScore_Team                                 = 1,
	EMissionScore_User                                 = 2,
	EMissionScore_MAX                                  = 3
};*/

// Enum SFGame.SFTypes.EMatchEndType
/*enum EMatchEndType
{
	EMatchEnd_Win                                      = 0,
	EMatchEnd_Lose                                     = 1,
	EMatchEnd_Max                                      = 2
};*/

// Enum SFGame.SFTypes.ERoundEndType
/*enum ERoundEndType
{
	ERoundEnd_Win                                      = 0,
	ERoundEnd_Lose                                     = 1,
	ERoundEnd_SaveRound                                = 2,
	ERoundEnd_PerfectRound                             = 3,
	ERoundEnd_AllKill                                  = 4,
	ERoundEnd_Max                                      = 5
};*/

// Enum SFGame.SFTypes.ERoundStartType
/*enum ERoundStartType
{
	ERoundStart_Normal                                 = 0,
	ERoundStart_MatchPoint                             = 1,
	ERoundStart_FinalRound                             = 2,
	ERoundStart_Max                                    = 3
};*/

// Enum SFGame.SFTypes.ERaidoMessagePriority
/*enum ERaidoMessagePriority
{
	ERadioMessagePriority_VeryLow                      = 0,
	ERadioMessagePriority_Low                          = 1,
	ERadioMessagePriority_Medium                       = 2,
	ERadioMessagePriority_High                         = 3,
	ERadioMessagePriority_VeryHigh                     = 4,
	ERadioMessagePriority_MAX                          = 5
};*/

// Enum SFGame.SFTypes.ECountDownCount
/*enum ECountDownCount
{
	ECountDownCount                                    = 0,
	ECountDownCount01                                  = 1,
	ECountDownCount02                                  = 2,
	ECountDownCount03                                  = 3,
	ECountDownCount04                                  = 4,
	ECountDownCount05                                  = 5,
	ECountDownCount06                                  = 6,
	ECountDownCount07                                  = 7,
	ECountDownCount08                                  = 8,
	ECountDownCount09                                  = 9,
	ECountDownCount10                                  = 10,
	ECountDownCount_MAX                                = 11
};*/

// Enum SFGame.SFTypes.EMCCharacter
/*enum EMCCharacter
{
	EMCC_INVALID                                       = 0,
	EMCC_USEMC                                         = 1,
	EMCC_NONMC                                         = 2,
	EMCC_MAX                                           = 3
};*/

// Enum SFGame.SFTypes.EMissionItemType
/*enum EMissionItemType
{
	EMIT_None                                          = 0,
	EMIT_Blasting                                      = 1,
	EMIT_Semtex                                        = 2,
	EMIT_Radar                                         = 3,
	EMIT_LaserInductor                                 = 4,
	EMIT_ZombieInteraction                             = 5,
	EMIT_MAX                                           = 6
};*/

// Enum SFGame.SFTypes.EHUD_KDACount_HideType
/*enum EHUD_KDACount_HideType
{
	EHUD_KDACount_HideNone                             = 0,
	EHUD_KDACount_HideAll                              = 1,
	EHUD_KDACount_HideDeath                            = 2,
	EHUD_KDACount_MAX                                  = 3
};*/

// Enum SFGame.SFTypes.eActionMessageType
/*enum eActionMessageType
{
	eActionMessageType_Normal                          = 0,
	eActionMessageType_NotInputBiding                  = 1,
	eActionMessageType_AniIcon                         = 2,
	eActionMessageType_MAX                             = 3
};*/

// Enum SFGame.SFTypes.EHUDActionMsg
/*enum EHUDActionMsg
{
	EHUDActionMsg_TriggerUse                           = 0,
	EHUDActionMsg_DroppedPicup                         = 1,
	EHUDActionMsg_SelectWeapon                         = 2,
	EHUDActionMsg_Sprint                               = 3,
	EHUDActionMsg_MouseSensitivity                     = 4,
	EHUDActionMsg_NoStrIconMsg                         = 5,
	EHUDActionMsg_Stun                                 = 6,
	EHUDActionMsg_RevivalMsg                           = 7,
	EHUDActionMsg_BarricadeMsg                         = 8,
	EHUDActionMsg_KillingZombieAI                      = 9,
	EHUDActionMsg_KillingZombiePlayer                  = 10,
	EHUDActionMsg_None                                 = 11,
	EHUDActionMsg_Max                                  = 12
};*/

// Enum SFGame.SFTypes.EGFxHUDMessage
/*enum EGFxHUDMessage
{
	EHUDMSG_None                                       = 0,
	EHUDMSG_SystemNotice                               = 1,
	EHUDMSG_Kill                                       = 2,
	EHUDMSG_Promotion                                  = 3,
	EHUDMSG_ScoreUp                                    = 4,
	EHUDMSG_GameSystem                                 = 5,
	EHUDMSG_Action                                     = 6,
	EHUDMSG_KilledUserInfo                             = 7,
	EHUDMSG_GameState                                  = 8,
	EHUDMSG_LuckyPoint                                 = 9,
	EHUDMSG_LastManStanding                            = 10,
	EHUDMSG_MessageByKismet                            = 11,
	EHUDMSG_KeyMessage                                 = 12,
	EHUDMSG_Warning                                    = 13,
	EHUDMSG_BeginnerTip                                = 14,
	EHUDMSG_BonusScore                                 = 15,
	EHUDMSG_HeroKill                                   = 16,
	EHUDMSG_HeroLevelUp                                = 17,
	EHUDMSG_HeroMoneyUp                                = 18,
	EHUDMSG_HeroAlienControllerDestroy                 = 19,
	EHUDMSG_HeroTurretDestroy                          = 20,
	EHUDMSG_HeroDeathReward                            = 21,
	EHUDMSG_KillDeathReward                            = 22,
	EHUDMSG_LastStand                                  = 23,
	EHUDMSG_BombSP                                     = 24,
	EHUDMSG_Max                                        = 25
};*/

// Enum SFGame.SFTypes.EWeapSet
/*enum EWeapSet
{
	EWS_TYPE_A                                         = 0,
	EWS_TYPE_B                                         = 1,
	EWS_TYPE_C                                         = 2,
	EWS_TYPE_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.ERecoilState
/*enum ERecoilState
{
	ERecoilState_None                                  = 0,
	ERecoilState_Inc                                   = 1,
	ERecoilState_Dec                                   = 2,
	ERecoilState_MAX                                   = 3
};*/

// Enum SFGame.SFTypes.eHUDClockType
/*enum eHUDClockType
{
	eHUDClockType_LimitTimeGame                        = 0,
	eHUDClockType_InfiniteTimeGame                     = 1,
	eHUDClockType_MAX                                  = 2
};*/

// Enum SFGame.SFTypes.ECustomPartType
/*enum ECustomPartType
{
	CP_CHAR_FACE                                       = 0,
	CP_CHAR_GLASS                                      = 1,
	CP_CHAR_SHEMAGH                                    = 2,
	CP_CHAR_ARM                                        = 3,
	CP_CHAR_WRIST                                      = 4,
	CP_CHAR_PANTS1                                     = 5,
	CP_CHAR_PANTS2                                     = 6,
	CP_CHAR_PANTS3                                     = 7,
	CP_CHAR_HAND                                       = 8,
	CP_CHAR_CLANMARK                                   = 9,
	CP_CHAR_LEVELMARK                                  = 10,
	CP_CHAR_SHOUL2                                     = 11,
	CP_CHAR_VEST1                                      = 12,
	CP_CHAR_VEST2                                      = 13,
	CP_CHAR_VEST3                                      = 14,
	CP_CHAR_VEST4                                      = 15,
	CP_CHAR_VEST5                                      = 16,
	CP_CHAR_FOOT                                       = 17,
	CP_CHAR_POUCH                                      = 18,
	CP_CHAR_CANTEEN                                    = 19,
	CP_CHAR_GASBAG                                     = 20,
	CP_CHAR_MAGAZINE                                   = 21,
	CP_CHAR_PANTS5                                     = 22,
	CP_CHAR_SHOUL1                                     = 23,
	CP_CHAR_HAIR                                       = 24,
	CP_HELMET_BODY                                     = 25,
	CP_HELMET_GOGGLE                                   = 26,
	CP_HELMET_NSCOPE                                   = 27,
	CP_HELMET_EARSET                                   = 28,
	CP_HELMET_STRAP                                    = 29,
	CP_1ST_ARM                                         = 30,
	CP_1ST_HAND                                        = 31,
	CP_1ST_WRIST                                       = 32,
	CP_WEAP_GROUP_0_BODY                               = 33,
	CP_WEAP_GROUP_0_MAGAZINE                           = 34,
	CP_WEAP_GROUP_0_LASER                              = 35,
	CP_WEAP_GROUP_0_SILENCER                           = 36,
	CP_WEAP_GROUP_0_SCOPE                              = 37,
	CP_WEAP_GROUP_0_STOCK                              = 38,
	CP_WEAP_GROUP_0_GLAUNCHER                          = 39,
	CP_WEAP_GROUP_0_BARREL                             = 40,
	CP_WEAP_GROUP_1_BODY                               = 41,
	CP_WEAP_GROUP_1_MAGAZINE                           = 42,
	CP_WEAP_GROUP_1_LASER                              = 43,
	CP_WEAP_GROUP_1_SILENCER                           = 44,
	CP_MAX                                             = 45
};*/

// Enum SFGame.SFTypes.EWeapItemType
/*enum EWeapItemType
{
	WIT_PRI_WEAPON                                     = 0,
	WIT_PRI_BODY                                       = 1,
	WIT_PRI_MAGAZINE                                   = 2,
	WIT_PRI_SCOPE                                      = 3,
	WIT_PRI_STOCK                                      = 4,
	WIT_PRI_BARREL                                     = 5,
	WIT_PRI_SILENCER                                   = 6,
	WIT_PRI_LASER                                      = 7,
	WIT_PRI_TRIGGER                                    = 8,
	WIT_PRI_GRIP                                       = 9,
	WIT_PRI_WEAPONTAG                                  = 10,
	WIT_PRI_CAMO                                       = 11,
	WIT_PRI_MUZZLEFLASH                                = 12,
	WIT_PRI_MUZZLEFLASH_COLOR                          = 13,
	WIT_SEC_WEAPON                                     = 14,
	WIT_SEC_BODY                                       = 15,
	WIT_SEC_MAGAZINE                                   = 16,
	WIT_SEC_SCOPE                                      = 17,
	WIT_SEC_STOCK                                      = 18,
	WIT_SEC_BARREL                                     = 19,
	WIT_SEC_SILENCER                                   = 20,
	WIT_SEC_LASER                                      = 21,
	WIT_SEC_TRIGGER                                    = 22,
	WIT_SEC_GRIP                                       = 23,
	WIT_SEC_CAMO                                       = 24,
	WIT_THIRD                                          = 25,
	WIT_THIRD_1_CAMO                                   = 26,
	WIT_THIRD01                                        = 27,
	WIT_THIRD_2_CAMO                                   = 28,
	WIT_THIRD02                                        = 29,
	WIT_THIRD_3_CAMO                                   = 30,
	WIT_KNIFE                                          = 31,
	WIT_KNIFE_CAMO                                     = 32,
	WIT_SPECIAL                                        = 33,
	WIT_SPECIAL_CAMO                                   = 34,
	WIT_MAX                                            = 35
};*/

// Enum SFGame.SFTypes.EWEAPON_SLOT
/*enum EWEAPON_SLOT
{
	EWEAPON_SLOT_PRIMARY                               = 0,
	EWEAPON_SLOT_SECONDARY                             = 1,
	EWEAPON_SLOT_THIRD                                 = 2,
	EWEAPON_SLOT_THIRD01                               = 3,
	EWEAPON_SLOT_THIRD02                               = 4,
	EWEAPON_SLOT_SPECIAL                               = 5,
	EWEAPON_SLOT_EXIGENCY                              = 6,
	EWEAPON_SLOT_MAX                                   = 7
};*/

// Enum SFGame.SFTypes.ECUSTOMMODE_WEAPONTYPE
/*enum ECUSTOMMODE_WEAPONTYPE
{
	ECUSTOMMODE_WEAPONTYPE_NONE                        = 0,
	ECUSTOMMODE_WEAPONTYPE_BASIC                       = 1,
	ECUSTOMMODE_WEAPONTYPE_SNIPER                      = 2,
	ECUSTOMMODE_WEAPONTYPE_SHOTGUN                     = 3,
	ECUSTOMMODE_WEAPONTYPE_REVOLVER                    = 4,
	ECUSTOMMODE_WEAPONTYPE_KNIFE                       = 5,
	ECUSTOMMODE_WEAPONTYPE_SPECIALWEAPON               = 6,
	ECUSTOMMODE_WEAPONTYPE_1VS1BASIC                   = 7,
	ECUSTOMMODE_WEAPONTYPE_1VS1SPECIALWEAPON           = 8,
	ECUSTOMMODE_WEAPONTYPE_1VS1RANDOM                  = 9,
	ECUSTOMMODE_WEAPONTYPE_MAX                         = 10
};*/

// Enum SFGame.SFTypes.EGFxChatType
/*enum EGFxChatType
{
	EGFxChat_Team                                      = 0,
	EGFxChat_All                                       = 1,
	EGFxChat_Clan                                      = 2,
	EGFxChat_Whisper                                   = 3,
	EGFxChat_None                                      = 4,
	EGFxChat_MAX                                       = 5
};*/

// Enum SFGame.SFTypes.EChatSendType
/*enum EChatSendType
{
	EChatSend_Channel                                  = 0,
	EChatSend_WaitingRoom                              = 1,
	EChatSend_InGameAll                                = 2,
	EChatSend_InGameSpectator                          = 3,
	EChatSend_InGameTeam                               = 4,
	EChatSend_Clan                                     = 5,
	EChatSend_Whisper                                  = 6,
	EChatSend_MAX                                      = 7
};*/

// Enum SFGame.SFTypes.EChatType
/*enum EChatType
{
	EChat_Normal                                       = 0,
	EChat_Team                                         = 1,
	EChat_System                                       = 2,
	EChat_GameResult                                   = 3,
	EChat_ServerNotice                                 = 4,
	EChat_GM                                           = 5,
	EChat_Messenger                                    = 6,
	EChat_Clan                                         = 7,
	EChat_Whisper                                      = 8,
	EChat_RadioMsg                                     = 9,
	EChat_ServerNoticeCritical                         = 10,
	EChat_ClanInvite                                   = 11,
	EChat_RoomCountDown                                = 12,
	EChat_HandOverHost                                 = 13,
	EChat_MatchingDenied                               = 14,
	EChat_HeroReward                                   = 15,
	EChat_MAX                                          = 16
};*/

// Enum SFGame.SFTypes.EChatCmds
/*enum EChatCmds
{
	CCMD_NONE                                          = 0,
	CCMD_WHISP                                         = 1,
	CCMD_HELP                                          = 2,
	CCMD_NORMALCHAT                                    = 3,
	CCMD_CLANCHAT                                      = 4,
	CCMD_TEAMCHAT                                      = 5,
	CCMD_HUDTGL                                        = 6,
	CCMD_INVITE                                        = 7,
	CCMD_WHISPBLOCK                                    = 8,
	CCMD_BLOCKCLEAR                                    = 9,
	CCMD_TrainingTargetName                            = 10,
	CCMD_VoteToKickStart                               = 11,
	CCMD_Accept                                        = 12,
	CCMD_Refuse                                        = 13,
	CCMD_SHOWUSN                                       = 14,
	CCMD_HIDECHATLOG                                   = 15,
	CCMD_CHATBLOCK                                     = 16,
	CCMD_GMKICK                                        = 17,
	CCMD_NOTICE                                        = 18,
	CCMD_BAN                                           = 19,
	CCMD_MUTE                                          = 20,
	CCMD_MAX                                           = 21
};*/

// Enum SFGame.SFTypes.ECodeNameState
/*enum ECodeNameState
{
	ECodeNameState_None                                = 0,
	ECodeNameState_Normal                              = 1,
	ECodeNameState_Dead                                = 2,
	ECodeNameState_MAX                                 = 3
};*/

// Enum SFGame.SFTypes.EObjectIconState
/*enum EObjectIconState
{
	EOIS_Hide                                          = 0,
	EOIS_Normal                                        = 1,
	EOIS_Ani                                           = 2,
	EOIS_Ani1                                          = 3,
	EOIS_Ani2                                          = 4,
	EOIS_Ani3                                          = 5,
	EOIS_Ani4                                          = 6,
	EOIS_MAX                                           = 7
};*/

// Enum SFGame.SFTypes.EObjectIconTypes
/*enum EObjectIconTypes
{
	EOIT_TriggerTeam                                   = 0,
	EOIT_TriggerEnemy                                  = 1,
	EOIT_InstallSiteTeamA                              = 2,
	EOIT_InstallSiteTeamB                              = 3,
	EOIT_InstallSiteEnemyA                             = 4,
	EOIT_InstallSiteEnemyB                             = 5,
	EOIT_TakeItemRed                                   = 6,
	EOIT_TakeItemBlue                                  = 7,
	EOIT_GoalIcon                                      = 8,
	EOIT_ThunderRunA                                   = 9,
	EOIT_ThunderRunB                                   = 10,
	EOIT_ThunderRunC                                   = 11,
	EOIT_FrontLineA                                    = 12,
	EOIT_FrontLineB                                    = 13,
	EOIT_FrontLineC                                    = 14,
	EOIT_PvEShop                                       = 15,
	EOIT_PvEManDown                                    = 16,
	EOIT_PvESuppressor                                 = 17,
	EOIT_PvEBarricade                                  = 18,
	EOIT_HeroAlienCtrl_Friend                          = 19,
	EOIT_HeroTurret_Friend                             = 20,
	EOIT_HeroAlienCtrl_Enemy                           = 21,
	EOIT_HeroTurret_Enemy                              = 22,
	EOIT_HeroShop1                                     = 23,
	EOIT_HeroShop2                                     = 24,
	EOIT_CaptureTower                                  = 25,
	EOIT_MiniSpore                                     = 26,
	EOIT_ConvoyanceTarget                              = 27,
	EOIT_ConvoyanceStore                               = 28,
	EOIT_MAX                                           = 29
};*/

// Enum SFGame.SFTypes.EPawnOutlineType
/*enum EPawnOutlineType
{
	EPawnOutlineType_Killer                            = 0,
	EPawnOutlineType_Enemy                             = 1,
	EPawnOutlineType_OutlineVolume                     = 2,
	EPawnOutlineType_NearestPawnForThunderRun          = 3,
	EPawnOutlineType_PVEDBNO                           = 4,
	EPawnOutlineType_KillCam                           = 5,
	EPawnOutlineType_ShowCloakingRipper                = 6,
	EPawnOutlineType_Comrade                           = 7,
	EPawnOutLineType_TargetSeeker                      = 8,
	EPawnOutlineType_SpectatorRed                      = 9,
	EPawnOutlinetype_SpectatorBlue                     = 10,
	EPawnOutlineType_MAX                               = 11
};*/

// Enum SFGame.SFTypes.ERadarIconType
/*enum ERadarIconType
{
	ROIT_None                                          = 0,
	ROIT_Bomb_Normal                                   = 1,
	ROIT_Bomb_Ready                                    = 2,
	ROIT_Seizure_Normal                                = 3,
	ROIT_Seizure_Ready                                 = 4,
	ROIT_Trigger_Normal                                = 5,
	ROIT_Trigger_Ready                                 = 6,
	ROIT_Goal                                          = 7,
	ROIT_ThunderRun_Normal                             = 8,
	ROIT_ThunderRun_Ready                              = 9,
	ROIT_FrontLine_Normal                              = 10,
	ROIT_FrontLine_RedOccupying                        = 11,
	ROIT_FrontLine_RedOccupied                         = 12,
	ROIT_FrontLine_BlueOccupying                       = 13,
	ROIT_FrontLine_BlueOccupied                        = 14,
	ROIT_PvEShop                                       = 15,
	ROIT_PvEManDown                                    = 16,
	ROIT_PvESuppressor                                 = 17,
	ROIT_PvEBarricade                                  = 18,
	ROIT_HeroAlienCtrl_Friend                          = 19,
	ROIT_HeroTurret_Friend                             = 20,
	ROIT_HeroAlienCtrl_Enemy                           = 21,
	ROIT_HeroTurret_Enemy                              = 22,
	ROIT_HeroShop1                                     = 23,
	ROIT_HeroShop2                                     = 24,
	ROIT_CaptureTowerNormal                            = 25,
	ROIT_CaptureTowerRed                               = 26,
	ROIT_CaptureTowerBlue                              = 27,
	ROIT_ConvoyanceTarget                              = 28,
	ROIT_ConvoyanceStore                               = 29,
	ROIT_MAX                                           = 30
};*/

// Enum SFGame.SFTypes.EPawnIconState
/*enum EPawnIconState
{
	EPIS_None                                          = 0,
	EPIS_Normal                                        = 1,
	EPIS_Seizured                                      = 2,
	EPIS_MAX                                           = 3
};*/

// Enum SFGame.SFTypes.ENameTag
/*enum ENameTag
{
	ENameTag_Spectator                                 = 0,
	ENameTag_KillCam                                   = 1,
	ENameTag_Die                                       = 2,
	ENameTag_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.EObjectInterpDir
/*enum EObjectInterpDir
{
	EObjecInterpDir_Small                              = 0,
	EObjecInterpDir_Large                              = 1,
	EObjecInterpDir_None                               = 2,
	EObjecInterpDir_MAX                                = 3
};*/

// Enum SFGame.SFTypes.ETeam
/*enum ETeam
{
	ETEAM_RED                                          = 0,
	ETEAM_BLUE                                         = 1,
	ETEAM_Third                                        = 2,
	ETEAM_Fourth                                       = 3,
	ETEAM_Fifth                                        = 4,
	ETEAM_Sixth                                        = 5,
	ETEAM_Seventh                                      = 6,
	ETEAM_Eighth                                       = 7,
	ETEAM_EVERYONE                                     = 8,
	ETEAM_NONE                                         = 9,
	ETEAM_MAX                                          = 10
};*/

// Enum SFGame.SFTypes.EBuffState
/*enum EBuffState
{
	EBuffState_Off                                     = 0,
	EBuffState_On                                      = 1,
	EBuffState_EffectOnly                              = 2,
	EBuffState_Failed                                  = 3,
	EBuffState_MAX                                     = 4
};*/

// Enum SFGame.SFTypes.EObjectIconInterplateType
/*enum EObjectIconInterplateType
{
	EObjIconInterpType_Screen                          = 0,
	EObjIconInterpType_Rect                            = 1,
	EObjIconInterpType_RectToScreen                    = 2,
	EObjIconInterpType_ScreenToRect                    = 3,
	EObjIconInterpType_MAX                             = 4
};*/

// Enum SFGame.SFTypes.ESkinTextureType
/*enum ESkinTextureType
{
	SKIN_WHITE                                         = 0,
	SKIN_BLACK                                         = 1,
	SKIN_YELLOW                                        = 2,
	SKIN_MAX                                           = 3
};*/

// Enum SFGame.SFTypes.EGender
/*enum EGender
{
	EG_MALE                                            = 0,
	EG_FEMALE                                          = 1,
	EG_MAIDEN                                          = 2,
	EG_COMMON                                          = 3,
	EG_MAX                                             = 4
};*/

// Enum SFGame.SFTypes.EMagAnimType
/*enum EMagAnimType
{
	EMAT_None                                          = 0,
	EMAT_SPW                                           = 1,
	EMAT_P90                                           = 2,
	EMAT_MAX                                           = 3
};*/

// Enum SFGame.SFTypes.ESpecialSoundType
/*enum ESpecialSoundType
{
	SST_FOOTSTEP                                       = 0,
	SST_FOOTSTEPDASH                                   = 1,
	SST_LANDING                                        = 2,
	SST_KILL                                           = 3,
	SST_MAX                                            = 4
};*/

// Enum SFGame.SFTypes.EPawnEffectGroupType
/*enum EPawnEffectGroupType
{
	PEG_FOOTSTEP                                       = 0,
	PEG_FOOTSTEPDASH                                   = 1,
	PEG_LANDING                                        = 2,
	PEG_RUSTLE                                         = 3,
	PEG_RADIOMESSAGE                                   = 4,
	PEG_PAWNSOUND                                      = 5,
	PEG_MAX                                            = 6
};*/

// Enum SFGame.SFTypes.EPossibleVideoSettings
/*enum EPossibleVideoSettings
{
	PVS_ScreenPercentage                               = 0,
	PVS_TextureDetail                                  = 1,
	PVS_WorldDetail                                    = 2,
	PVS_FXDetail                                       = 3,
	PVS_DecalQuality                                   = 4,
	PVS_LightingQuality                                = 5,
	PVS_ShadowQuality                                  = 6,
	PVS_MSAA                                           = 7,
	PVS_PostProcessQuality                             = 8,
	PVS_VSyncValue                                     = 9,
	PVS_SmoothFramerate                                = 10,
	PVS_PlayerFOV                                      = 11,
	PVS_Antialiasing                                   = 12,
	PVS_LightSpreadEffect                              = 13,
	PVS_DynamicShadows                                 = 14,
	PVS_DepthOfField                                   = 15,
	PVS_ExploRadialBlur                                = 16,
	PVS_EnemyDefaultUnit                               = 17,
	PVS_MAX                                            = 18
};*/

// Enum SFGame.SFTypes.EGameChannelType
/*enum EGameChannelType
{
	EGCT_Unknown                                       = 0,
	EGCT_Rookie                                        = 1,
	EGCT_Normal                                        = 2,
	EGCT_Clan                                          = 3,
	EGCT_MAX                                           = 4
};*/

// Enum SFGame.SFTypes.ENDGAME_STATE
/*enum ENDGAME_STATE
{
	ENDGAME_STATE_End                                  = 0,
	ENDGAME_STATE_Stop                                 = 1,
	ENDGAME_STATE_MAX                                  = 2
};*/

// Enum SFGame.SFTypes.ERoomUserState
/*enum ERoomUserState
{
	ERoomUserState_Normal                              = 0,
	ERoomUserState_Ready                               = 1,
	ERoomUserState_Setting                             = 2,
	ERoomUserState_Playing                             = 3,
	ERoomUserState_MAX                                 = 4
};*/

// Enum SFGame.SFTypes.EGamePlayModeType
/*enum EGamePlayModeType
{
	GAMETYPE_NONE                                      = 0,
	GAMETYPE_TEAM                                      = 1,
	GAMETYPE_MISSION                                   = 2,
	GAMETYPE_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.EARMSTYPE
/*enum EARMSTYPE
{
	EARMSTYPE_A                                        = 0,
	EARMSTYPE_B                                        = 1,
	EARMSTYPE_C                                        = 2,
	EARMSTYPE_MAX                                      = 3
};*/

// Enum SFGame.SFTypes.EClipDirection
/*enum EClipDirection
{
	EClipDirection_None                                = 0,
	EClipDirection_InScreen                            = 1,
	EClipDirection_Left                                = 2,
	EClipDirection_Right                               = 3,
	EClipDirection_Top                                 = 4,
	EClipDirection_Bottom                              = 5,
	EClipDirection_MAX                                 = 6
};*/

// Enum SFGame.SFTypes.ENoticeBtnType
/*enum ENoticeBtnType
{
	ENoticeBtnType_none                                = 0,
	ENoticeBtnType_Ok                                  = 1,
	ENoticeBtnType_Ok_NO                               = 2,
	ENoticeBtnType_YesAndCancel                        = 3,
	ENoticeBtnType_MAX                                 = 4
};*/

// Enum SFGame.SFTypes.EModeItemType
/*enum EModeItemType
{
	EModeItemType_None                                 = 0,
	EModeItemType_Passive                              = 1,
	EModeItemType_Active                               = 2,
	EModeItemType_MAX                                  = 3
};*/

// Enum SFGame.SFTypes.ECamoType
/*enum ECamoType
{
	ECAMOT_NONE                                        = 0,
	ECAMOT_TEXTURE                                     = 1,
	ECAMOT_MATERIAL                                    = 2,
	ECAMOT_REMOVAL                                     = 3,
	ECAMOT_MAX                                         = 4
};*/

// Enum SFGame.SFTypes.EFuncItemType
/*enum EFuncItemType
{
	EFuncItemType_Normal                               = 0,
	EFuncItemType_ResetRecord                          = 1,
	EFuncItemType_Camo                                 = 2,
	EFuncItemType_Spray                                = 3,
	EFuncItemType_PMC                                  = 4,
	EFuncITemType_Coupon                               = 5,
	EFuncITemType_CombinePart                          = 6,
	EFuncItemType_MAX                                  = 7
};*/

// Enum SFGame.SFTypes.EWeapPartType
/*enum EWeapPartType
{
	EWeapPart_Body                                     = 0,
	EWeapPart_Magazine                                 = 1,
	EWeapPart_Scope                                    = 2,
	EWeapPart_Stock                                    = 3,
	EWeapPart_Barrel                                   = 4,
	EWeapPart_Silencer                                 = 5,
	EWeapPart_LaserPoint                               = 6,
	EWeapPart_Trigger                                  = 7,
	EWeapPart_Grip                                     = 8,
	EWeapPart_WeaponTag                                = 9,
	EWeapPart_Camo                                     = 10,
	EWeapPart_MuzzleFlash                              = 11,
	EWeapPart_MuzzleFlashColor                         = 12,
	EWeapPart_BombSP                                   = 13,
	EWeapPart_MAX                                      = 14
};*/

// Enum SFGame.SFTypes.EWeaponType
/*enum EWeaponType
{
	EWeapType_WeapAR                                   = 0,
	EWeapType_WeapSMG                                  = 1,
	EWeapType_WeapSR                                   = 2,
	EWeapType_WeapMG                                   = 3,
	EWeapType_WeapSG                                   = 4,
	EWeapType_WeapPST                                  = 5,
	EWeapType_WeapThrow                                = 6,
	EWeapType_WeapKnife                                = 7,
	EWeapType_WeapSpecial                              = 8,
	EWeapType_Arrow                                    = 9,
	EWeapType_ThrowingKnife                            = 10,
	EWeapType_WeapMG_Turret                            = 11,
	EWeapType_None                                     = 12,
	EWeapType_MAX                                      = 13
};*/

// Enum SFGame.SFTypes.EPostEffectDirection
/*enum EPostEffectDirection
{
	PED_Front                                          = 0,
	PED_Side                                           = 1,
	PED_Back                                           = 2,
	PED_None                                           = 3,
	PED_MAX                                            = 4
};*/

// Enum SFGame.SFTypes.EDefensePriority
/*enum EDefensePriority
{
	DEFPRI_Low                                         = 0,
	DEFPRI_High                                        = 1,
	DEFPRI_MAX                                         = 2
};*/

// Enum SFGame.SFTypes.EWeapMeshCompGroup
/*enum EWeapMeshCompGroup
{
	WMC_GROUP                                          = 0,
	WMC_GROUP01                                        = 1,
	WMC_GROUP_MAX                                      = 2
};*/

// Enum SFGame.SFTypes.ERadarType
/*enum ERadarType
{
	ERadar_FixedNone                                   = 0,
	ERadar_FixedRotation                               = 1,
	ERadar_FixedLocationRotation                       = 2,
	ERadar_MAX                                         = 3
};*/

// Enum SFGame.SFTypes.ESFPCState
/*enum ESFPCState
{
	ESFPCState_Def                                     = 0,
	ESFPCState_Spectator                               = 1,
	ESFPCState_Interlude                               = 2,
	ESFPCState_MAX                                     = 3
};*/

// Enum SFGame.SFTypes.ETeamChangeType
/*enum ETeamChangeType
{
	ETEAMCHANGE_HOLD                                   = 0,
	ETEAMCHANGE_HALF                                   = 1,
	ETEAMCHANGE_TUTORIAL                               = 2,
	ETEAMCHANGE_NOTUSE0                                = 3,
	ETEAMCHANGE_NOTUSE1                                = 4,
	ETEAMCHANGE_NOTUSE2                                = 5,
	ETEAMCHANGE_MAX                                    = 6
};*/

// Enum SFGame.SFTypes.EMatchType
/*enum EMatchType
{
	EMatchType_None                                    = 0,
	EMatchType_Round                                   = 1,
	EMatchType_Point                                   = 2,
	EMatchType_Wave                                    = 3,
	EMatchType_TimeLimit                               = 4,
	EMatchType_MAX                                     = 5
};*/

// Enum SFGame.SFTypes.EGameMode
/*enum EGameMode
{
	EGameMode_EntryGame                                = 0,
	EGameMode_TutorialGame                             = 1,
	EGameMode_DeathGame                                = 2,
	EGameMode_TeamDeathGame                            = 3,
	EGameMode_BlastingGame                             = 4,
	EGameMode_EscapeGame                               = 5,
	EGameMode_SeizureGame                              = 6,
	EGameMode_StrongHoldGame                           = 7,
	EGameMode_RescueGame                               = 8,
	EGameMode_ScenarioGame                             = 9,
	EGameMode_CaptureGame                              = 10,
	EGameMode_TestGame                                 = 11,
	EGameMode_Observer                                 = 12,
	EGameMode_ThunderRunGame                           = 13,
	EGameMode_FrontLineGame                            = 14,
	EGameMode_SnowballFightGame                        = 15,
	EGameMode_TrainingGame                             = 16,
	EGameMode_SurvivalGame                             = 17,
	EGameMode_BeginnerGame                             = 18,
	EGameMode_HardcoreTeamDeathGame                    = 19,
	EGameMode_HardcoreEscapeGame                       = 20,
	EGameMode_HardcoreBlastingGame                     = 21,
	EGameMode_HardcoreSeizureGame                      = 22,
	EGameMode_DuelGame                                 = 23,
	EGameMode_CoupleGame                               = 24,
	EGameMode_BeastGame                                = 25,
	EGameMode_BeastGame2                               = 26,
	EGameMode_SniperGame                               = 27,
	EGameMode_SniperTDMGame                            = 28,
	EGameMode_ShooterGame                              = 29,
	EGameMode_GlassGame                                = 30,
	EGameMode_DefenceGame                              = 31,
	EGameMode_ShooterCTFGame                           = 32,
	EGameMode_ShooterDefenceGame                       = 33,
	EGameMode_WarriorGame                              = 34,
	EGameMode_ShooterThunderRunGame                    = 35,
	EGameMode_AITeamDeathGame                          = 36,
	EGameMode_None                                     = 37,
	EGameMode_GrenadeGame                              = 38,
	EGameMode_ShotgunGame                              = 39,
	EGameMode_GlowTDMGame                              = 40,
	EGameMode_ShotgunTDMGame                           = 41,
	EGameMode_AISniperTDMGame                          = 42,
	EGameMode_SpecialWeaponGame                        = 43,
	EGameMode_RevolverGame                             = 44,
	EGameMode_RoundTDMGame                             = 45,
	EGameMode_ConvoyanceGame                           = 46,
	EGameMode_KnifeGame                                = 47,
	EGameMode_DeathTestOneGame                         = 48,
	EGameMode_DeathTestTwoGame                         = 49,
	EGameMode_TeamTestOneGame                          = 50,
	EGameMode_TeamTestTwoGame                          = 51,
	EGameMode_TeamDeathTestOneGame                     = 52,
	EGameMode_TeamDeathTestTwoGame                     = 53,
	EGameMode_CTCTeamDeathGame                         = 54,
	EGameMode_ZombieSurvivalGame                       = 55,
	EGameMode_ZombieSurvivalGameTwo                    = 56,
	EGameMode_ZombieHideSeekGame                       = 57,
	EGameMode_AITeamDeathGameVs16                      = 58,
	EGameMode_HorrorGame                               = 59,
	EGameMode_CaptureTheFlagGame                       = 60,
	EGameMode_BlastingGameSecond                       = 61,
	EGameMode_OnetoOneGame                             = 62,
	EGameMode_SeizureGameSpy                           = 63,
	EGameMode_TeamDeathGameVs16                        = 64,
	EGameMode_BlastingGameVs16                         = 65,
	EGameMode_EscapeGameVs16                           = 66,
	EGameMode_SeizureGameVs16                          = 67,
	EGameMode_MAX                                      = 68
};*/

// Enum SFGame.SFTypes.ESFStrongHoldArea
/*enum ESFStrongHoldArea
{
	ESFStrongHoldArea                                  = 0,
	ESFStrongHoldArea01                                = 1,
	ESFStrongHoldArea02                                = 2,
	ESFStrongHoldArea03                                = 3,
	ESFStrongHoldArea_Any                              = 4,
	ESFStrongHoldArea_MAX                              = 5
};*/

// Enum SFGame.SFTypes.EBreakableActorFlag
/*enum EBreakableActorFlag
{
	EBreakableActorFlag_InstallBomb                    = 0,
	EBreakableActorFlag_Opened                         = 1,
	EBreakableActorFlag_Closed                         = 2,
	EBreakableActorFlag_MAX                            = 3
};*/

// Enum SFGame.SFTypes.EHAITYPE
/*enum EHAITYPE
{
	EAIT_RIFLE                                         = 0,
	EAIT_SMG                                           = 1,
	EAIT_SHOTGUN                                       = 2,
	EAIT_MG                                            = 3,
	EAIT_SNIPER                                        = 4,
	EAIT_CIVILIAN                                      = 5,
	EAIT_NOSNIPER                                      = 6,
	EAIT_ALL                                           = 7,
	EAIT_MAX                                           = 8
};*/

// Enum SFGame.SFTypes.EAILevel
/*enum EAILevel
{
	EAIL_PROBIE                                        = 0,
	EAIL_SOLDIER                                       = 1,
	EAIL_PRO                                           = 2,
	EAIL_GURU                                          = 3,
	EAIL_ALL                                           = 4,
	EAIL_MAX                                           = 5
};*/

// Enum SFGame.SFTypes.EGameClanBuffType
/*enum EGameClanBuffType
{
	EGameClanBuffType_None                             = 0,
	EGameClanBuffType_LPRatio                          = 1,
	EGameClanBuffType_ExpRatio                         = 2,
	EGameClanBuffType_Max                              = 3
};*/

// Enum SFGame.SFTypes.EOnetoOneUserType
/*enum EOnetoOneUserType
{
	E1VS1_PLAYER_RED                                   = 0,
	E1VS1_PLAYER_BLUE                                  = 1,
	E1VS1_OBSERVER                                     = 2,
	E1VS1_TEAMTYPE                                     = 3,
	E1VS1_MAX                                          = 4
};*/

// Enum SFGame.SFTypes.ESpeedDirection
/*enum ESpeedDirection
{
	SPD_Forward                                        = 0,
	SPD_Backward                                       = 1,
	SPD_Sideward                                       = 2,
	SPD_BackOblique                                    = 3,
	SPD_None                                           = 4,
	SPD_MAX                                            = 5
};*/

// Enum SFGame.SFTypes.EFaceMorph
/*enum EFaceMorph
{
	MorphFace_Zoom                                     = 0,
	MorphFace_Angry                                    = 1,
	MorphFace_Death                                    = 2,
	MorphFace_Breath                                   = 3,
	MorphFace_MAX                                      = 4
};*/

// Enum SFGame.SFTypes.ESkelRotControl
/*enum ESkelRotControl
{
	SRCTRL_Spine                                       = 0,
	SRCTRL_Pelvis                                      = 1,
	SRCTRL_MAX                                         = 2
};*/

// Enum SFGame.SFTypes.EFallDirection
/*enum EFallDirection
{
	FALLDIR_F                                          = 0,
	FALLDIR_B                                          = 1,
	FALLDIR_L                                          = 2,
	FALLDIR_R                                          = 3,
	FALLDIR_MAX                                        = 4
};*/

// Enum SFGame.SFTypes.EPawnAnimSet
/*enum EPawnAnimSet
{
	EAnimSet_Death                                     = 0,
	EAnimSet_AIPawn                                    = 1,
	EAnimSet_Cover                                     = 2,
	EAnimSet_BlindCover                                = 3,
	EAnimSet_Weapon                                    = 4,
	EAnimSet_WeaponProfile                             = 5,
	EAnimSet_Emotion                                   = 6,
	EAnimSet_Revival                                   = 7,
	EAnimSet_Extra                                     = 8,
	EAnimSet_Extra2                                    = 9,
	EAnimSet_Vehicle                                   = 10,
	EAnimSet_MAX                                       = 11
};*/

// Enum SFGame.SFTypes.EBodyParts
/*enum EBodyParts
{
	EBODY_None                                         = 0,
	EBODY_Head                                         = 1,
	EBODY_Chest                                        = 2,
	EBODY_Stomach                                      = 3,
	EBODY_Lower                                        = 4,
	EBODY_Upper                                        = 5,
	EBODY_HeadPoint                                    = 6,
	EBODY_AI_VeryStrong                                = 7,
	EBODY_AI_Strong                                    = 8,
	EBODY_AI_Normal                                    = 9,
	EBODY_AI_Weak                                      = 10,
	EBODY_ExtraParts                                   = 11,
	EBODY_MAX                                          = 12
};*/

// Enum SFGame.SFTypes.EHitType
/*enum EHitType
{
	EHitType_None                                      = 0,
	EHitType_Normal                                    = 1,
	EHitType_FlashBang                                 = 2,
	EHitType_Gas                                       = 3,
	EHitType_MAX                                       = 4
};*/

// Enum SFGame.SFTypes.eAITARGETTYPE
/*enum eAITARGETTYPE
{
	TIS_NONE                                           = 0,
	TIS_PRIMARYOBJ                                     = 1,
	TIS_OBSTACLES                                      = 2,
	TIS_ENEMYS                                         = 3,
	TIS_Weak                                           = 4,
	TIS_Skillful                                       = 5,
	TIS_Nearst                                         = 6,
	TIS_MAX                                            = 7
};*/

// Enum SFGame.SFTypes.eDMGEFCTID
/*enum eDMGEFCTID
{
	DMGEFCTID_Death                                    = 0,
	DMGEFCTID_Weak                                     = 1,
	DMGEFCTID_Normal                                   = 2,
	DMGEFCTID_Strong                                   = 3,
	DMGEFCTID_MAX                                      = 4
};*/

// Enum SFGame.SFTypes.EExposureType
/*enum EExposureType
{
	ExposureNone                                       = 0,
	ExposureIn                                         = 1,
	ExposureOut                                        = 2,
	ExposureAlways                                     = 3,
	EExposureType_MAX                                  = 4
};*/

// Enum SFGame.SFTypes.EAlienPlayerDefaultSpawnSlot
/*enum EAlienPlayerDefaultSpawnSlot
{
	EAlienPlayerDefaultSpawnSlot                       = 0,
	EAlienPlayerDefaultSpawnSlot01                     = 1,
	EAlienPlayerDefaultSpawnSlot02                     = 2,
	EAlienPlayerDefaultSpawnSlot_MAX                   = 3
};*/

// Enum SFGame.SFTypes.ECameraAnim
/*enum ECameraAnim
{
	ECamAni_NORMALFIRE                                 = 0,
	ECamAni_CHARGEFIRE                                 = 1,
	ECamAni_NORMALHIT                                  = 2,
	ECamAni_CHARGEHIT                                  = 3,
	ECamAni_MAX                                        = 4
};*/

// Enum SFGame.SFTypes.EOBSTACLE_RES
/*enum EOBSTACLE_RES
{
	OBSTACLE_SETOK                                     = 0,
	OBSTACLE_HPALREADYFULL                             = 1,
	OBSTACLE_NEEDMORECOIN                              = 2,
	OBSTACLE_OUTRANGE                                  = 3,
	OBSTACLE_SETERROR                                  = 4,
	OBSTACLE_MAX                                       = 5
};*/

// Enum SFGame.SFTypes.eCBRT
/*enum eCBRT
{
	CBRT_DAMAGE                                        = 0,
	CBRT_KILL                                          = 1,
	CBRT_ROUNDEND                                      = 2,
	CBRT_RESPAWN                                       = 3,
	CBRT_MAX                                           = 4
};*/

// Enum SFGame.SFTypes.eCOMBATREPORT
/*enum eCOMBATREPORT
{
	CBRPT_NONE                                         = 0,
	CBRPT_ROUNDSTANDBY                                 = 1,
	CBRPT_DEADSHORTTIME                                = 2,
	CBRPT_MAX                                          = 3
};*/

// Enum SFGame.SFTypes.EIFF
/*enum EIFF
{
	EFOE_NONE                                          = 0,
	EFOE_FRIEND                                        = 1,
	EFOE_ENEMY                                         = 2,
	EFOE_MAX                                           = 3
};*/

// Enum SFGame.SFTypes.eGAMERULE
/*enum eGAMERULE
{
	GRULE_CONTINUE                                     = 0,
	GRULE_END                                          = 1,
	GRULE_REDEXTERM                                    = 2,
	GRULE_BLUEEXTERM                                   = 3,
	GRULE_ALLEXTERM                                    = 4,
	GRULE_LASTMAN                                      = 5,
	GRULE_UNKOWN                                       = 6,
	GRULE_MAX                                          = 7
};*/

// Enum SFGame.SFTypes.EWeaponEffectState
/*enum EWeaponEffectState
{
	EWES_Reload                                        = 0,
	EWES_Kill                                          = 1,
	EWES_MAX                                           = 2
};*/

// Enum SFGame.SFTypes.EGunTrailMode
/*enum EGunTrailMode
{
	EGunTrail_1st                                      = 0,
	EGunTrail_3rd                                      = 1,
	EGunTrail_TopView                                  = 2,
	EGunTrail_MAX                                      = 3
};*/

// Enum SFGame.SFTypes.EAINOISE_TYPE
/*enum EAINOISE_TYPE
{
	EAINOISE_NONE                                      = 0,
	EAINOISE_RUN                                       = 1,
	EAINOISE_SPRINT                                    = 2,
	EAINOISE_SILENCEFIRE                               = 3,
	EAINOISE_FIRE                                      = 4,
	EAINOISE_MAX                                       = 5
};*/

// Enum SFGame.SFTypes.eAGGROLEVEL
/*enum eAGGROLEVEL
{
	AGGRO_PEACE                                        = 0,
	AGGRO_CAUTION                                      = 1,
	AGGRO_ATTACK                                       = 2,
	AGGRO_MAX                                          = 3
};*/

// Enum SFGame.SFTypes.eSPAWNPOINTSORTTYPE
/*enum eSPAWNPOINTSORTTYPE
{
	SPAWNPOINTSORTTYPE_BYDIST                          = 0,
	SPAWNPOINTSORTTYPE_BYUSEDTIME                      = 1,
	SPAWNPOINTSORTTYPE_MAX                             = 2
};*/

// Enum SFGame.SFTypes.eNAVPointType
/*enum eNAVPointType
{
	NAVPT_NORMAL                                       = 0,
	NAVPT_HOLD                                         = 1,
	NAVPT_SNIPER                                       = 2,
	NAVPT_MAX                                          = 3
};*/

// Enum SFGame.SFTypes.eExtraBodyPart
/*enum eExtraBodyPart
{
	eExtPart_None                                      = 0,
	eExtPart_Back                                      = 1,
	eExtPart_Front                                     = 2,
	eExtPart_MAX                                       = 3
};*/

// Enum SFGame.SFTypes.eSpecialAI
/*enum eSpecialAI
{
	eSAI_None                                          = 0,
	eSAI_ItemCarrier                                   = 1,
	eSAI_MAX                                           = 2
};*/

// Enum SFGame.SFTypes.EClanAreaDlgType
/*enum EClanAreaDlgType
{
	EClanAreaDlg_Normal                                = 0,
	EClanAreaDlg_ListSelect                            = 1,
	EClanAreaDlg_Search                                = 2,
	EClanAreaDlg_MAX                                   = 3
};*/

// Enum SFGame.SFTypes.EClanRankType
/*enum EClanRankType
{
	EClanRankType_ThisWeek                             = 0,
	EClanRankType_LastWeek                             = 1,
	EClanRankType_MAX                                  = 2
};*/

// Enum SFGame.SFTypes.ECamoMaskType
/*enum ECamoMaskType
{
	ECMT_NONE                                          = 0,
	ECMT_NORMAL                                        = 1,
	ECMT_METALIC                                       = 2,
	ECMT_SOLID                                         = 3,
	ECMT_MAX                                           = 4
};*/

// Enum SFGame.SFTypes.eCamoCopyType
/*enum eCamoCopyType
{
	ECCT_None                                          = 0,
	ECCT_Copy                                          = 1,
	ECCT_ResetCopy                                     = 2,
	ECCT_SetOnly                                       = 3,
	ECCT_MAX                                           = 4
};*/

// Enum SFGame.SFTypes.eShooterPowerUpType
/*enum eShooterPowerUpType
{
	ESPU_NONE                                          = 0,
	ESPU_ATT                                           = 1,
	ESPU_DEF                                           = 2,
	ESPU_AGL                                           = 3,
	ESPU_SPECL                                         = 4,
	ESPU_MAX                                           = 5
};*/

// Enum SFGame.SFTypes.eMOUSEMode
/*enum eMOUSEMode
{
	MOUSEMODE_FULL_SCR                                 = 0,
	MOUSEMODE_ROUND_SCR                                = 1,
	MOUSEMODE_MAX                                      = 2
};*/

// Enum SFGame.SFTypes.eMOUSECLICK
/*enum eMOUSECLICK
{
	CLICK_NONE                                         = 0,
	CLICK_LEFT                                         = 1,
	CLICK_RIGHT                                        = 2,
	CLICK_MAX                                          = 3
};*/

// Enum SFGame.SFTypes.eMuzzleSocketName
/*enum eMuzzleSocketName
{
	MUZZLE_SOCKET_NORMAL                               = 0,
	MUZZLE_SOCKET_SILENCER                             = 1,
	MUZZLE_SOCKET_DUAL_LEFT                            = 2,
	MUZZLE_SOCKET_DUAL_RIGHT                           = 3,
	MUZZLE_SOCKET_MAX                                  = 4
};*/

// Enum SFGame.SFSquad.ELocationType
/*enum ELocationType
{
	LT_Known                                           = 0,
	LT_Exact                                           = 1,
	LT_InterpVisibility                                = 2,
	LT_MAX                                             = 3
};*/

// Enum SFGame.SFSquad.EPerceptionType
/*enum EPerceptionType
{
	PT_Sight                                           = 0,
	PT_Heard                                           = 1,
	PT_HurtBy                                          = 2,
	PT_Force                                           = 3,
	PT_SightPlayer                                     = 4,
	PT_MAX                                             = 5
};*/

// Enum SFGame.CombatZone.EMoveOverride
/*enum EMoveOverride
{
	EMO_None                                           = 0,
	EMO_Fast                                           = 1,
	EMO_MAX                                            = 2
};*/

// Enum SFGame.CombatZone.ECombatZoneType
/*enum ECombatZoneType
{
	CZT_Normal                                         = 0,
	CZT_Ambush                                         = 1,
	CZT_MAX                                            = 2
};*/

// Enum SFGame.SeqAct_AIMove.EAIMoveStyle
/*enum EAIMoveStyle
{
	EMS_Normal                                         = 0,
	EMS_Slow                                           = 1,
	EMS_Fast                                           = 2,
	EMS_MAX                                            = 3
};*/

// Enum SFGame.SFSeqAct_AIFactory.EInventoryTypes
/*enum EInventoryTypes
{
	WEAP_AK103                                         = 0,
	WEAP_AI_MELEE_CRAWLER                              = 1,
	WEAP_AI_MELEE_RIPPER                               = 2,
	WEAP_AI_RANGE_LIBERTINE                            = 3,
	WEAP_AI_EXPLODE_STUNNER                            = 4,
	WEAP_AI_MELEE_TYRANT                               = 5,
	WEAP_AI_CHARGE_TYRANT                              = 6,
	WEAP_AI_RANGE_RIPPER                               = 7,
	WEAP_AI_EXPLODE_GASSTUNNER                         = 8,
	WEAP_ST10                                          = 9,
	WEAP_AI_MELEE_ZOMBIE                               = 10,
	WEAP_AI_RANGE_ZOMBIE                               = 11,
	WEAP_AI_EXPLODE_ZOMBIE                             = 12,
	WEAP_AI_BREATH_ZOMBIE                              = 13,
	WEAP_MAX                                           = 14
};*/

// Enum SFGame.SFSeqAct_AIFactory.ESpawnPointSelectionMethod
/*enum ESpawnPointSelectionMethod
{
	SPSM_Shuffle                                       = 0,
	SPSM_Linear                                        = 1,
	SPSM_MAX                                           = 2
};*/

// Enum SFGame.SFInventoryManager.EWaitAction
/*enum EWaitAction
{
	WA_None                                            = 0,
	WA_SwitchToBestWeapon                              = 1,
	WA_MAX                                             = 2
};*/

// Enum SFGame.SFAISpawnManager.ESpawnPointTypeMethod
/*enum ESpawnPointTypeMethod
{
	SPTM_AllNavPoint                                   = 0,
	SPTM_AllNavPointInCombatZone                       = 1,
	SPTM_MAX                                           = 2
};*/

// Enum SFGame.SFPlayerReplicationInfo.EMultiKillLevel
/*enum EMultiKillLevel
{
	EKill_None                                         = 0,
	EKill_Double                                       = 1,
	EKill_Multi                                        = 2,
	EKill_SpecialForce                                 = 3,
	EKill_MAX                                          = 4
};*/

// Enum SFGame.SFPlayerController.EColorationType
/*enum EColorationType
{
	EColorationType_Default                            = 0,
	EColorationType_PreRound                           = 1,
	EColorationType_RoundEnd                           = 2,
	EColorationType_Dead                               = 3,
	EColorationType_KillCam                            = 4,
	EColorationType_Hostmig                            = 5,
	EColorationType_Stun                               = 6,
	EColorationType_Beast                              = 7,
	EColorationType_HeroDead                           = 8,
	EColorationType_Max                                = 9
};*/

// Enum SFGame.SFPlayerController.EMaterialEffectData
/*enum EMaterialEffectData
{
	EMaterialEffect_Flashbang                          = 0,
	EMaterialEffect_Coloration                         = 1,
	EMaterialEffect_Reserved                           = 2,
	EMaterialEffect_Distortion                         = 3,
	EMaterialEffect_MAX                                = 4
};*/

// Enum SFGame.SFGameScore.ELadderBasisIndex
/*enum ELadderBasisIndex
{
	ELadderBasis_Kill                                  = 0,
	ELadderBasis_Assist                                = 1,
	ELadderBasis_Death                                 = 2,
	ELadderBasis_SpecialForce                          = 3,
	ELadderBasis_Suicide                               = 4,
	ELadderBasis_LuckyPoint                            = 5,
	ELadderBasis_Critical                              = 6,
	ELadderBasis_MAX                                   = 7
};*/

// Enum SFGame.SFGameScore.EClanPointBasisIndex
/*enum EClanPointBasisIndex
{
	ECPB_KillRate                                      = 0,
	ECPB_AssistRate                                    = 1,
	ECPB_MissionRate                                   = 2,
	ECPB_RoundWinRate                                  = 3,
	ECPB_MatchingRate                                  = 4,
	ECPB_MAX                                           = 5
};*/

// Enum SFGame.SFSeqAct_ModeState.EModeState
/*enum EModeState
{
	Active                                             = 0,
	Use                                                = 1,
	Reactive                                           = 2,
	Inactive                                           = 3,
	Neutrality                                         = 4,
	RedTryToOccupy                                     = 5,
	BlueTryToOccupy                                    = 6,
	RedOccupied                                        = 7,
	BlueOccupied                                       = 8,
	EModeState_MAX                                     = 9
};*/

// Enum SFGame.SFAnimBlendByDirection.EDirection
/*enum EDirection
{
	DIR_Forward                                        = 0,
	DIR_Right                                          = 1,
	DIR_Backward                                       = 2,
	DIR_Left                                           = 3,
	DIR_MAX                                            = 4
};*/

// Enum SFGame.SFAnimBlendByDirection.ESkelControlRotation
/*enum ESkelControlRotation
{
	SKELROT_Normal                                     = 0,
	SKELROT_ForwardRight                               = 1,
	SKELROT_BackwardRight                              = 2,
	SKELROT_BackwardLeft                               = 3,
	SKELROT_ForwardLeft                                = 4,
	SKELROT_MAX                                        = 5
};*/

// Enum SFGame.SFAnimBlendByFall.EBlendFallTypes
/*enum EBlendFallTypes
{
	FBT_JumpUp                                         = 0,
	FBT_JumpDown                                       = 1,
	FBT_JumpLand                                       = 2,
	FBT_Falling                                        = 3,
	FBT_None                                           = 4,
	FBT_MAX                                            = 5
};*/

// Enum SFGame.SFAnimBlendByLobbyWeapon.ELobbyWeapAnimStep
/*enum ELobbyWeapAnimStep
{
	ELobbyWeapAnimStep_Idle                            = 0,
	ELobbyWeapAnimStep_UnequipIdle                     = 1,
	ELobbyWeapAnimStep_Ready                           = 2,
	ELobbyWeapAnimStep_Inventory                       = 3,
	ELobbyWeapAnimStep_ReadyToIdle                     = 4,
	ELobbyWeapAnimStep_IdleToReady                     = 5,
	ELobbyWeapAnimStep_WeaponChanged                   = 6,
	ELobbyWeapAnimStep_IdleFromInventory               = 7,
	ELobbyWeapAnimStep_MAX                             = 8
};*/

// Enum SFGame.SFAnimBlendByPosture.EPawnPosture
/*enum EPawnPosture
{
	PAWN_Standing                                      = 0,
	PAWN_Crouched                                      = 1,
	PAWN_Stunned                                       = 2,
	PAWN_MAX                                           = 3
};*/

// Enum SFGame.SFBreakableGlassActor.EGlassDir
/*enum EGlassDir
{
	EGD_Front                                          = 0,
	EGD_Back                                           = 1,
	EGD_FrontAndBack                                   = 2,
	EGD_MAX                                            = 3
};*/

// Enum SFGame.SFBreakableGlassSyncState.EGlassState
/*enum EGlassState
{
	EGlassState_Default                                = 0,
	EGlassState_Crack                                  = 1,
	EGlassState_Broken                                 = 2,
	EGlassState_MAX                                    = 3
};*/

// Enum SFGame.SFBuffInfo.EBuffBonusType
/*enum EBuffBonusType
{
	EBuffBonusType_None                                = 0,
	EBuffBonusType_AttackPoint                         = 1,
	EBuffBonusType_AttackPointRatio                    = 2,
	EBuffBonusType_DefencePoint                        = 3,
	EBuffBonusType_DefencePointRatio                   = 4,
	EBuffBonusType_MovePoint                           = 5,
	EBuffBonusType_MovePointRatio                      = 6,
	EBuffBonusType_HealthPoint                         = 7,
	EBuffBonusType_HealthPointRatio                    = 8,
	EBuffBonusType_BonusDamage                         = 9,
	EBuffBonusType_BonusDamageRatio                    = 10,
	EBuffBonusType_ReduceDamage                        = 11,
	EBuffBonusType_ReduceDamageRatio                   = 12,
	EBuffBonusType_BonusHealth                         = 13,
	EBuffBonusType_BonusHealthRatio                    = 14,
	EBuffBonusType_MoveSpeedRatio                      = 15,
	EBuffBonusType_MAX                                 = 16
};*/

// Enum SFGame.SFCameraModifier_ShakeByDamage.EDamageShakeState
/*enum EDamageShakeState
{
	EDmgShake_None                                     = 0,
	EDmgShake_Slide                                    = 1,
	EDmgShake_Return                                   = 2,
	EDmgShake_MAX                                      = 3
};*/

// Enum SFGame.SFChallengeListCondition.EChallengeMedalType
/*enum EChallengeMedalType
{
	EChallengeMedalType_None                           = 0,
	EChallengeMedalType_Bronze                         = 1,
	EChallengeMedalType_Silver                         = 2,
	EChallengeMedalType_Gold                           = 3,
	EChallengeMedalType_MAX                            = 4
};*/

// Enum SFGame.SFMeshBuilder.EMeshGroup
/*enum EMeshGroup
{
	MESHGROUP_NONE                                     = 0,
	MESHGROUP_CHARACTER_BODY1                          = 1,
	MESHGROUP_CHARACTER_BODY2                          = 2,
	MESHGROUP_CHARACTER_HELMET                         = 3,
	MESHGROUP_CHARACTER_1STVIEWHAND                    = 4,
	MESHGROUP_WEAPON_1STVIEW                           = 5,
	MESHGROUP_WEAPON_3RDVIEW                           = 6,
	MESHGROUP_EXTRA                                    = 7,
	MESHGROUP_MAX                                      = 8
};*/

// Enum SFGame.SFMeshBuilder.EMeshCompositionType
/*enum EMeshCompositionType
{
	MESHCOMPOSITIONTYPE_COMPONENT                      = 0,
	MESHCOMPOSITIONTYPE_MERGE                          = 1,
	MESHCOMPOSITIONTYPE_MERGE_ONLYMESH                 = 2,
	MESHCOMPOSITIONTYPE_BLEND                          = 3,
	MESHCOMPOSITIONTYPE_MAX                            = 4
};*/

// Enum SFGame.SFMeshParts.EPartType
/*enum EPartType
{
	PARTTYPE_CHAR_FACE                                 = 0,
	PARTTYPE_CHAR_GLASS                                = 1,
	PARTTYPE_CHAR_SHEMAGH                              = 2,
	PARTTYPE_CHAR_ARM                                  = 3,
	PARTTYPE_CHAR_WRIST                                = 4,
	PARTTYPE_CHAR_PANTS1                               = 5,
	PARTTYPE_CHAR_PANTS2                               = 6,
	PARTTYPE_CHAR_PANTS3                               = 7,
	PARTTYPE_CHAR_HAND                                 = 8,
	PARTTYPE_CHAR_CLANMARK                             = 9,
	PARTTYPE_CHAR_LEVELMARK                            = 10,
	PARTTYPE_CHAR_SHOUL2                               = 11,
	PARTTYPE_CHAR_VEST1                                = 12,
	PARTTYPE_CHAR_VEST2                                = 13,
	PARTTYPE_CHAR_VEST3                                = 14,
	PARTTYPE_CHAR_VEST4                                = 15,
	PARTTYPE_CHAR_VEST5                                = 16,
	PARTTYPE_CHAR_FOOT                                 = 17,
	PARTTYPE_CHAR_POUCH                                = 18,
	PARTTYPE_CHAR_CANTEEN                              = 19,
	PARTTYPE_CHAR_GASBAG                               = 20,
	PARTTYPE_CHAR_MAGAZINE                             = 21,
	PARTTYPE_CHAR_PANTS5                               = 22,
	PARTTYPE_CHAR_SHOUL1                               = 23,
	PARTTYPE_CHAR_HAIR                                 = 24,
	PARTTYPE_HELMET_BODY                               = 25,
	PARTTYPE_HELMET_GOGGLE                             = 26,
	PARTTYPE_HELMET_NSCOPE                             = 27,
	PARTTYPE_HELMET_EARSET                             = 28,
	PARTTYPE_HELMET_STRAP                              = 29,
	PARTTYPE_1ST_ARM                                   = 30,
	PARTTYPE_1ST_HAND                                  = 31,
	PARTTYPE_1ST_WRIST                                 = 32,
	PARTTYPE_WEAPON_1ST_BODY                           = 33,
	PARTTYPE_WEAPON_1ST_MAGAZINE                       = 34,
	PARTTYPE_WEAPON_1ST_LASER                          = 35,
	PARTTYPE_WEAPON_1ST_LIGHT                          = 36,
	PARTTYPE_WEAPON_1ST_SILENCER                       = 37,
	PARTTYPE_WEAPON_1ST_SCOPE                          = 38,
	PARTTYPE_WEAPON_1ST_STOCK                          = 39,
	PARTTYPE_WEAPON_1ST_GLAUNCHER                      = 40,
	PARTTYPE_WEAPON_1ST_BARREL                         = 41,
	PARTTYPE_WEAPON_1ST_TRIGGER                        = 42,
	PARTTYPE_WEAPON_1ST_GRIP                           = 43,
	PARTTYPE_WEAPON_3RD_BODY                           = 44,
	PARTTYPE_WEAPON_3RD_MAGAZINE                       = 45,
	PARTTYPE_WEAPON_3RD_LASER                          = 46,
	PARTTYPE_WEAPON_3RD_LIGHT                          = 47,
	PARTTYPE_WEAPON_3RD_SILENCER                       = 48,
	PARTTYPE_WEAPON_3RD_SCOPE                          = 49,
	PARTTYPE_WEAPON_3RD_STOCK                          = 50,
	PARTTYPE_WEAPON_3RD_GLAUNCHER                      = 51,
	PARTTYPE_WEAPON_3RD_BARREL                         = 52,
	PARTTYPE_WEAPON_3RD_TRIGGER                        = 53,
	PARTTYPE_WEAPON_3RD_GRIP                           = 54,
	PARTTYPE_HELMET_CLANMARK                           = 55,
	PARTTYPE_HELMET_LEVELMARK                          = 56,
	PARTTYPE_HELMET_HAIR                               = 57,
	PARTTYPE_WEAPON_1ST_CODETAG                        = 58,
	PARTTYPE_CHAR_VEST_CLANMARK1                       = 59,
	PARTTYPE_CHAR_VEST_CLANMARK2                       = 60,
	PARTTYPE_MAX                                       = 61
};*/

// Enum SFGame.SFMeshBuilder.EPatternColorsType
/*enum EPatternColorsType
{
	PATTERNCOLORSTYPE_EPAULET                          = 0,
	PATTERNCOLORSTYPE_BACKGROUND                       = 1,
	PATTERNCOLORSTYPE_NONE                             = 2,
	PATTERNCOLORSTYPE_MAX                              = 3
};*/

// Enum SFGame.SFMeshBuilder.ETextureType
/*enum ETextureType
{
	TEX_DIFFUSE                                        = 0,
	TEX_NORMAL                                         = 1,
	TEX_SPECULAR                                       = 2,
	TEX_MASK                                           = 3,
	TEX_MAX                                            = 4
};*/

// Enum SFGame.SFMeshBuilder.EMergedTextureType
/*enum EMergedTextureType
{
	MERGEDTEXTURETYPE_DIFFUSE                          = 0,
	MERGEDTEXTURETYPE_NORMAL                           = 1,
	MERGEDTEXTURETYPE_SPECULAR                         = 2,
	MERGEDTEXTURETYPE_MASK                             = 3,
	MERGEDTEXTURETYPE_MAX                              = 4
};*/

// Enum SFGame.SFMeshParts.EPartResourceIndex
/*enum EPartResourceIndex
{
	EPartResourceIndex_Mesh                            = 0,
	EPartResourceIndex_Material                        = 1,
	EPartResourceIndex_Diffuse                         = 2,
	EPartResourceIndex_Normal                          = 3,
	EPartResourceIndex_Specular                        = 4,
	EPartResourceIndex_Mask                            = 5,
	EPartResourceIndex_Symbol_Mask                     = 6,
	EPartResourceIndex_Pattern_Mask                    = 7,
	EPartResourceIndex_MAX                             = 8
};*/

// Enum SFGame.SFCustomPreview.EPendingItemType
/*enum EPendingItemType
{
	PENDING_NONE                                       = 0,
	PENDING_CHARACTER                                  = 1,
	PENDING_WEAPON                                     = 2,
	PENDING_MAX                                        = 3
};*/

// Enum SFGame.SFCustomPreview.EMoverType
/*enum EMoverType
{
	MT_CustomPreview                                   = 0,
	MT_Camera                                          = 1,
	MT_MAX                                             = 2
};*/

// Enum SFGame.SFCustomPreview.ECustomZoomState
/*enum ECustomZoomState
{
	ZS_Stop                                            = 0,
	ZS_ZoomIn                                          = 1,
	ZS_ZoomOut                                         = 2,
	ZS_ZoomInStep                                      = 3,
	ZS_ZoomOutStep                                     = 4,
	ZS_MAX                                             = 5
};*/

// Enum SFGame.SFWeapon.EWeaponStateDataPickUpType
/*enum EWeaponStateDataPickUpType
{
	EWSDT_Random                                       = 0,
	EWSDT_InOrder                                      = 1,
	EWSDT_MAX                                          = 2
};*/

// Enum SFGame.SFWeapon.EWeaponHoldType
/*enum EWeaponHoldType
{
	EWHT_RIGHT                                         = 0,
	EWHT_LEFT                                          = 1,
	EWHT_BOTH                                          = 2,
	EWHT_MAX                                           = 3
};*/

// Enum SFGame.SFEntryGame.EPreviewType
/*enum EPreviewType
{
	PVT_FULL                                           = 0,
	PVT_MAX                                            = 1
};*/

// Enum SFGame.SFFacebookManager.EFacebookUploadEvent
/*enum EFacebookUploadEvent
{
	EFacebookUploadEvent_Interlock                     = 0,
	EFacebookUploadEvent_CodeNameChange                = 1,
	EFacebookUploadEvent_Promote                       = 2,
	EFacebookUploadEvent_RareGashaReward               = 3,
	EFacebookUploadEvent_ClanCreate                    = 4,
	EFacebookUploadEvent_ClanMatchWin                  = 5,
	EFacebookUploadEvent_MAX                           = 6
};*/

// Enum SFGame.SFFacebookManager.EFacebookUploadType
/*enum EFacebookUploadType
{
	EFacebookUpload_Message                            = 0,
	EFacebookUpload_Link                               = 1,
	EFacebookUpload_Image                              = 2,
	EFacebookUpload_Movie                              = 3,
	EFacebookDownload_FriendsList                      = 4,
	EFacebookUploadType_MAX                            = 5
};*/

// Enum SFGame.SFFlagActor.LastFlagAction
/*enum LastFlagAction
{
	eNone                                              = 0,
	eDropped                                           = 1,
	eReturned                                          = 2,
	eTaken                                             = 3,
	eCaptured                                          = 4,
	LastFlagAction_MAX                                 = 5
};*/

// Enum SFGame.SFPhysicalMaterialProperty.EPenetrateType
/*enum EPenetrateType
{
	Penetrate_Normal                                   = 0,
	Penetrate_Always                                   = 1,
	Penetrate_Never                                    = 2,
	Penetrate_MAX                                      = 3
};*/

// Enum SFGame.SFGameStateMessage.eGameStateMessageType
/*enum eGameStateMessageType
{
	eGameStateMessageType_Deffend                      = 0,
	eGameStateMessageType_Attack                       = 1,
	eGameStateMessageType_MAX                          = 2
};*/

// Enum SFGame.SFGameViewportClient.EBGTEXType
/*enum EBGTEXType
{
	EBGTEX_FILL                                        = 0,
	EBGTEX_ORG                                         = 1,
	EBGTEX_FULLAll                                     = 2,
	EBGTEX_FULLClip                                    = 3,
	EBGTEX_MAX                                         = 4
};*/

// Enum SFGame.SFGFxUIView.EChatComboType
/*enum EChatComboType
{
	EChatCombo_Normal                                  = 0,
	EChatCombo_Clan                                    = 1,
	EChatCombo_MAX                                     = 2
};*/

// Enum SFGame.SFGFxUIView.EShopPart
/*enum EShopPart
{
	EShop_Weapon                                       = 0,
	EShop_Equip                                        = 1,
	EShop_FuncItem                                     = 2,
	EShop_ModeItem                                     = 3,
	EShop_HotAndNewItem                                = 4,
	EShop_FeverItem                                    = 5,
	EShop_MAX                                          = 6
};*/

// Enum SFGame.SFGFxDialog_Repair.ERapairDialog_BtnType
/*enum ERapairDialog_BtnType
{
	ERapairDialog_BtnType_OK                           = 0,
	ERapairDialog_BtnType_Cancel                       = 1,
	ERapairDialog_BtnType_Close                        = 2,
	ERapairDialog_BtnType_Coupon_OK                    = 3,
	ERapairDialog_BtnType_MAX                          = 4
};*/

// Enum SFGame.SFGFxDialog_BuyOne.ETabCategory
/*enum ETabCategory
{
	ENUM_TAB_CLAN                                      = 0,
	ENUM_TAB_FRIEND                                    = 1,
	ENUM_TAB_MAX                                       = 2
};*/

// Enum SFGame.SFGFxDialog_RewardItem.ERewardMessage
/*enum ERewardMessage
{
	EReward_Challenge                                  = 0,
	EReward_Package                                    = 1,
	EReward_Coupon                                     = 2,
	EReward_GiftUse                                    = 3,
	EReward_PromoEvent                                 = 4,
	EReward_GashaBonus                                 = 5,
	EReward_ModeReward                                 = 6,
	EReward_SerialReward                               = 7,
	EReward_MAX                                        = 8
};*/

// Enum SFGame.SFUIDataStore_GashaList.EGashaGraphType
/*enum EGashaGraphType
{
	EGashaGraphType_Normal                             = 0,
	EGashaGraphType_ALLInOne                           = 1,
	EGashaGraphType_PVE                                = 2,
	EGashaGraphType_SP                                 = 3,
	EGashaGraphType_ALLInOnePVE                        = 4,
	EGashaGraphType_Zombie                             = 5,
	EGashaGraphType_Disable                            = 6,
	EGashaGraphType_Hexa                               = 7,
	EGashaGraphType_SpyMode                            = 8,
	EGashaGraphType_16VS16                             = 9,
	EGashaGraphType_MAX                                = 10
};*/

// Enum SFGame.SFGFxDialog_ClanJoin.EClanJoinDlgWidgetType
/*enum EClanJoinDlgWidgetType
{
	EClanJoinDlgWidgetType_TextInput0                  = 0,
	EClanJoinDlgWidgetType_TextInput1                  = 1,
	EClanJoinDlgWidgetType_TextInput2                  = 2,
	EClanJoinDlgWidgetType_TextInput3                  = 3,
	EClanJoinDlgWidgetType_MAX                         = 4
};*/

// Enum SFGame.SFGFxDialog_ClanMake.EClanMakeTextAni
/*enum EClanMakeTextAni
{
	EClanMakeTextAni_Find                              = 0,
	EClanMakeTextAni_Error                             = 1,
	EClanMakeTextAni_Success                           = 2,
	EClanMakeTextAni_MoreChar                          = 3,
	EClanMakeTextAni_Filtering                         = 4,
	EClanMakeTextAni_MAX                               = 5
};*/

// Enum SFGame.SFGFxDialog_ClanMake.EClanMakeText
/*enum EClanMakeText
{
	EClanMakeText_Name                                 = 0,
	EClanMakeText_Address                              = 1,
	EClanMakeText_Intro                                = 2,
	EClanMakeText_MAX                                  = 3
};*/

// Enum SFGame.SFGFxDialog_EventList.eEventPart
/*enum eEventPart
{
	eEventPart_EVENT                                   = 0,
	eEventPart_GIFT                                    = 1,
	eEventPart_MAX                                     = 2
};*/

// Enum SFGame.SFGFxDialog_GameResult.EGameReult
/*enum EGameReult
{
	EGameResult_All                                    = 0,
	EGameResult_Me                                     = 1,
	EGameResult_MAX                                    = 2
};*/

// Enum SFGame.SFGFxDialog_GameResult_Hero.EHeroGameResultPage
/*enum EHeroGameResultPage
{
	EHeroGameResultPage_All                            = 0,
	EHeroGameResultPage_Statistics                     = 1,
	EHeroGameResultPage_MAX                            = 2
};*/

// Enum SFGame.SFGFxDialog_InGameShop.EInGameStoreSlotType
/*enum EInGameStoreSlotType
{
	EIGSSlotType_PVE                                   = 0,
	EIGSSlotType_Hero_Green                            = 1,
	EIGSSlotType_Hero_Blue                             = 2,
	EIGSSlotType_Hero_Brown                            = 3,
	EIGSSlotType_MAX                                   = 4
};*/

// Enum SFGame.SFGFxDialog_InGameShop.EMagazinUpItemUsability
/*enum EMagazinUpItemUsability
{
	EMUIUS_None                                        = 0,
	EMUIUS_UnUsable                                    = 1,
	EMUIUS_Usable                                      = 2,
	EMUIUS_MAX                                         = 3
};*/

// Enum SFGame.SFGFxDialog_InGameShop.EIngameShopItemDisplayType
/*enum EIngameShopItemDisplayType
{
	EIngameShopItemDisplayType_None                    = 0,
	EIngameShopItemDisplayType_WeaponType              = 1,
	EIngameShopItemDisplayType_MAX                     = 2
};*/

// Enum SFGame.SFGFxDialog_SpectatorDeco.ECommentFilterMessage
/*enum ECommentFilterMessage
{
	ECommentFilterMessage_Search                       = 0,
	ECommentFilterMessage_Unusable                     = 1,
	ECommentFilterMessage_Usable                       = 2,
	ECommentFilterMessage_Limit                        = 3,
	ECommentFilterMessage_MAX                          = 4
};*/

// Enum SFGame.SFGFxDialog_SysSetting.ESysSettingPart
/*enum ESysSettingPart
{
	ESysSetting_VIDEO                                  = 0,
	ESysSetting_CONTROLL                               = 1,
	ESysSetting_AUDIO                                  = 2,
	ESysSetting_CAPTURE                                = 3,
	ESysSetting_RECORD                                 = 4,
	ESysSetting_Whisper                                = 5,
	ESysSetting_MAX                                    = 6
};*/

// Enum SFGame.SFGFxDialog_TagSystem.E_TAG_TYPE
/*enum E_TAG_TYPE
{
	E_TAG_TYPE_NONE                                    = 0,
	E_TAG_TYPE_LOCAL                                   = 1,
	E_TAG_TYPE_HIGHSCHOOL                              = 2,
	E_TAG_TYPE_FREETEXT                                = 3,
	E_TAG_TYPE_MAX                                     = 4
};*/

// Enum SFGame.SFGFxDialog_TagSystem.ETagState
/*enum ETagState
{
	ETagState_None                                     = 0,
	ETagState_Wrong                                    = 1,
	ETagState_AllRight                                 = 2,
	ETagState_MAX                                      = 3
};*/

// Enum SFGame.SFGFxDialog_UseChangeClanmark.ClanMakrLayerType
/*enum ClanMakrLayerType
{
	ClanMakrLayerType_Layer1                           = 0,
	ClanMakrLayerType_Layer2                           = 1,
	ClanMakrLayerType_Layer3                           = 2,
	ClanMakrLayerType_Max                              = 3
};*/

// Enum SFGame.SFGFxDialog_UseFiringRangeScoreInitial.eBoxType
/*enum eBoxType
{
	eBoxType                                           = 0,
	eBoxType01                                         = 1,
	eBoxType02                                         = 2,
	eBoxType_MAX                                       = 3
};*/

// Enum SFGame.SFItem_Base.EItemType
/*enum EItemType
{
	EIT_NONE                                           = 0,
	EIT_CHAR                                           = 1,
	EIT_WEAP                                           = 2,
	EIT_WEAP_OPTION                                    = 3,
	EIT_FUNCTIONAL                                     = 4,
	EIT_MAX                                            = 5
};*/

// Enum SFGame.SFGFxHUDWidget_CodeName.ESFHUDHeadUpUIStats
/*enum ESFHUDHeadUpUIStats
{
	STAT_EnemyTeam                                     = 0,
	STAT_SameTeam                                      = 1,
	STAT_ShooterMine                                   = 2,
	STAT_ShooterSameTeam                               = 3,
	STAT_ShooterAI                                     = 4,
	STAT_ShooterBossAI                                 = 5,
	STAT_MAX                                           = 6
};*/

// Enum SFGame.SFGFxHUDWidget_CombatMsg.ECombatMsgColor
/*enum ECombatMsgColor
{
	ECombatMsgColor_RED                                = 0,
	ECombatMsgColor_BLUE                               = 1,
	ECombatMsgColor_GRAY                               = 2,
	ECombatMsgColor_MAX                                = 3
};*/

// Enum SFGame.SFGFxHUDWidget_Message.EMessageDisplayType
/*enum EMessageDisplayType
{
	EMsgDispType_SystemNotice                          = 0,
	EMsgDispType_Kill                                  = 1,
	EMsgDispType_ScoreUp                               = 2,
	EMsgDispType_GameSystem                            = 3,
	EMsgDispType_Action                                = 4,
	EMsgDispType_GameState                             = 5,
	EMsgDispType_Max                                   = 6
};*/

// Enum SFGame.SFGFxHUDWidget_Timer.ETimerType
/*enum ETimerType
{
	ETimerType_SEC                                     = 0,
	ETimerType_CENTISEC                                = 1,
	ETimerType_WHITESEC                                = 2,
	ETimerType_MAX                                     = 3
};*/

// Enum SFGame.SFGFxHUDWidget_UserCondition.EConditionIcon
/*enum EConditionIcon
{
	EConditionIcon_None                                = 0,
	EConditionIcon_UP                                  = 1,
	EConditionIcon_Down                                = 2,
	EConditionIcon_Normal                              = 3,
	EConditionIcon_MAX                                 = 4
};*/

// Enum SFGame.SFGFxLobby.EQuestingType
/*enum EQuestingType
{
	EQuestingType_LowSp                                = 0,
	EQuestingType_Normal                               = 1,
	EQuestingType_LowSpRepairFail                      = 2,
	EQuestingType_RepairOk                             = 3,
	EQuestingType_MaxDurability                        = 4,
	EQuestingType_MaxDurabilityError                   = 5,
	EQuestingType_MaxRepairOk                          = 6,
	EQuestingType_LowSpRepairAllFail                   = 7,
	EQuestingType_LowSpAndLowCoupon                    = 8,
	EQuestingType_LogCouponFail                        = 9,
	EQuestingType_MAX                                  = 10
};*/

// Enum SFGame.SFGFxLobby_Album.EAlbumPart
/*enum EAlbumPart
{
	EAlbum_Screenshot                                  = 0,
	EAlbum_TwitchTV                                    = 1,
	EAlbum_MAX                                         = 2
};*/

// Enum SFGame.SFGFxLobby_BaseRoom.ERBtnMenu
/*enum ERBtnMenu
{
	ERBtnMenu_ChangeRoomMaster                         = 0,
	ERBtnMenu_AddBuddy                                 = 1,
	ERBtnMenu_KickOut                                  = 2,
	ERBtnMenu_ClanHome                                 = 3,
	ERBtnMenu_ClanInvite                               = 4,
	ERBtnMenu_ClanRecommend                            = 5,
	ERBtnMenu_MAX                                      = 6
};*/

// Enum SFGame.SFUIDataStore_RoomList.ERoomSort
/*enum ERoomSort
{
	ERoomSort_Number                                   = 0,
	ERoomSort_Name                                     = 1,
	ERoomSort_Players                                  = 2,
	ERoomSort_State                                    = 3,
	ERoomSort_Mode                                     = 4,
	ERoomSort_Map                                      = 5,
	ERoomSort_Enable                                   = 6,
	ERoomSort_FastRun                                  = 7,
	ERoomSort_MAX                                      = 8
};*/

// Enum SFGame.SFGFxLobby_CHNLoginView.eCHNModuleState
/*enum eCHNModuleState
{
	eCHNModuleState_None                               = 0,
	eCHNModuleState_CodeImage                          = 1,
	eCHNModuleState_MatrixImage                        = 2,
	eCHNModuleState_Login                              = 3,
	eCHNModuleState_MAX                                = 4
};*/

// Enum SFGame.SFGFxLobby_Clan.EClanPart
/*enum EClanPart
{
	EClanPart_Home                                     = 0,
	EClanPart_List                                     = 1,
	EClanPart_Rank                                     = 2,
	EClanPart_MAX                                      = 3
};*/

// Enum SFGame.SFGFxLobby_ClanLeague.EClanLeagueMainTab
/*enum EClanLeagueMainTab
{
	EClanLeagueMainTab_MyClan                          = 0,
	EClanLeagueMainTab_ClanRank                        = 1,
	EClanLeagueMainTab_PersonalRank                    = 2,
	EClanLeagueMainTab_RewardGuide                     = 3,
	EClanLeagueMainTab_LeagueGuide                     = 4,
	EClanLeagueMainTab_MAX                             = 5
};*/

// Enum SFGame.SFGFxLobby_ClanLeague.EClanLeagueSubTab
/*enum EClanLeagueSubTab
{
	EClanLeagueSubTab_ClanInfo                         = 0,
	EClanLeagueSubTab_PersonalInfo                     = 1,
	EClanLeagueSubTab_MAX                              = 2
};*/

// Enum SFGame.SFGFxLobby_ClanLeague.EShowClanLeagueListType
/*enum EShowClanLeagueListType
{
	EShowClanLeagueListType_NONE                       = 0,
	EShowClanLeagueListType_MyClanList                 = 1,
	EShowClanLeagueListType_MyClanMemberList           = 2,
	EShowClanLeagueListType_ClanList                   = 3,
	EShowClanLeagueListType_PersonalList               = 4,
	EShowClanLeagueListType_RewardGuide                = 5,
	EShowClanLeagueListType_LeagueGuide                = 6,
	EClanLeagueMainTab_PunishmentGuide                 = 7,
	EShowClanLeagueListType_MAX                        = 8
};*/

// Enum SFGame.SFGFXLobby_Combine.ECombineDialogState
/*enum ECombineDialogState
{
	ECombineDialogState_None                           = 0,
	ECombineDialogState_Open                           = 1,
	ECombineDialogState_PacketSend                     = 2,
	ECombineDialogState_AniStart                       = 3,
	ECombineDialogState_AniEnd                         = 4,
	ECombineDialogState_MAX                            = 5
};*/

// Enum SFGame.SFGFXLobby_Combine.ECombinePart
/*enum ECombinePart
{
	ECombinePart_Class                                 = 0,
	ECombinePart_Badge                                 = 1,
	ECombinePart_Special                               = 2,
	ECombinePart_Dogtag                                = 3,
	ECombinePart_BluePrint                             = 4,
	ECombinePart_CASH                                  = 5,
	ECombinePart_SP                                    = 6,
	ECombinePart_MAX                                   = 7
};*/

// Enum SFGame.SFUIDataStore_ItemList.EModeItemSlot
/*enum EModeItemSlot
{
	EModeItemSlot_Active                               = 0,
	EModeItemSlot_Active01                             = 1,
	EModeItemSlot_Active02                             = 2,
	EModeItemSlot_Passive                              = 3,
	EModeItemSlot_Passive01                            = 4,
	EModeItemSlot_Passive02                            = 5,
	EModeItemSlot_MAX                                  = 6
};*/

// Enum SFGame.SFGFxLobby_Community.ECommunityNoBuddy
/*enum ECommunityNoBuddy
{
	ECommunityNoBuddy_NoTag                            = 0,
	ECommunityNoBuddy_NoTagMatch                       = 1,
	ECommunityNoBuddy_MaxBuddy                         = 2,
	ECommunityNoBuddy_MAX                              = 3
};*/

// Enum SFGame.SFGFxLobby_CreateCodeName.ECreateCodenameResultTYPE
/*enum ECreateCodenameResultTYPE
{
	ECCRES_CHECKING                                    = 0,
	ECCRES_ALREADYUSING                                = 1,
	ECCRES_REGISTBTN                                   = 2,
	ECCRES_MORECHAR                                    = 3,
	ECCRES_MAX                                         = 4
};*/

// Enum SFGame.SFGFxLobby_FeverTime.EFeverTimeMainTab
/*enum EFeverTimeMainTab
{
	EFeverTimeMainTab_FeverGuide                       = 0,
	EFeverTimeMainTab_FeverProgress                    = 1,
	EFeverTimeMainTab_FeverOrgel                       = 2,
	EFeverTimeMainTab_FeverSale                        = 3,
	EFeverTimeMainTab_MAX                              = 4
};*/

// Enum SFGame.SFGFxLobby_FeverTime.EFeverTimeSubTab
/*enum EFeverTimeSubTab
{
	EFeverTimeSubTab_FeverProgress                     = 0,
	EFeverTimeSubTab_FeverAdditionalReward             = 1,
	EFeverTimeSubTab_MAX                               = 2
};*/

// Enum SFGame.SFGFxLobby_FeverTime.EShowFeverDisplayType
/*enum EShowFeverDisplayType
{
	EShowFeverDisplayType_NONE                         = 0,
	EShowFeverDisplayType_FeverGuide                   = 1,
	EShowFeverDisplayType_FeverProgress                = 2,
	EShowFeverDisplayType_FeverAdditionalReward        = 3,
	EShowFeverDisplayType_FeverOrgel                   = 4,
	EShowFeverDisplayType_FeverSale                    = 5,
	EShowFeverDisplayType_MAX                          = 6
};*/

// Enum SFGame.SFGFxLobby_FeverTime.EFeverProgressInfoType
/*enum EFeverProgressInfoType
{
	EFeverProgressInfoType_Image                       = 0,
	EFeverProgressInfoType_Text                        = 1,
	EFeverProgressInfoType_MAX                         = 2
};*/

// Enum SFGame.SFGFxLobby_GashaOrgelBox.EEnterEventType
/*enum EEnterEventType
{
	EEnterEventType_None                               = 0,
	EEnterEventType_OpenBallPopup                      = 1,
	EEnterEventType_CloseRewardPopup                   = 2,
	EEnterEventType_SkipAnimation                      = 3,
	EEnterEventType_OpenBallProgress                   = 4,
	EEnterEventType_MAX                                = 5
};*/

// Enum SFGame.SFGFxLobby_GashaSelect.EClearListType
/*enum EClearListType
{
	AllList                                            = 0,
	ToolTipList                                        = 1,
	GachaList                                          = 2,
	EClearListType_MAX                                 = 3
};*/

// Enum SFGame.SFGFxLobby_Inventory.EInvenPart
/*enum EInvenPart
{
	EInven_Weapon                                      = 0,
	EInven_Equip                                       = 1,
	EInven_FuncItem                                    = 2,
	EInven_ModeItem                                    = 3,
	EInven_Recycle                                     = 4,
	EInven_PMCItem                                     = 5,
	EInven_MAX                                         = 6
};*/

// Enum SFGame.SFGFxLobby_MessengerBuddyList.eOpendBuddyNotice
/*enum eOpendBuddyNotice
{
	EOBN_None                                          = 0,
	EOBN_inputBuddyName                                = 1,
	EOBN_AddBuddy                                      = 2,
	EOBN_invitedBuddy                                  = 3,
	EOBN_Error                                         = 4,
	EOBN_findProfile                                   = 5,
	EOBN_Disconnected                                  = 6,
	EOBN_DelBuddy                                      = 7,
	EOBN_NeedBuy                                       = 8,
	EOBN_BlockBuddy                                    = 9,
	EOBN_RemoveBlockBuddy                              = 10,
	EOBN_DelBuddyWithBlock                             = 11,
	EOBN_MAX                                           = 12
};*/

// Enum SFGame.SFUIDataStore_Messenger.EMsgrNotice
/*enum EMsgrNotice
{
	EMsgrNotice_Gift                                   = 0,
	EMsgrNotice_PlayTime                               = 1,
	EMsgrNotice_InviteBuddy                            = 2,
	EMsgrNotice_DeleteBuddy                            = 3,
	EMsgrNotice_InviteGame                             = 4,
	EMsgrNotice_BlockBuddy                             = 5,
	EMsgrNotice_NoBlockBuddy                           = 6,
	EMsgrNotice_WeeklyClanRank                         = 7,
	EMsgrNotice_ClanRecommen                           = 8,
	EMsgrNotice_NONE                                   = 9,
	EMsgrNotice_MAX                                    = 10
};*/

// Enum SFGame.SFGFxLobby_MiniGame.eFiringRangeScoreWeaponType
/*enum eFiringRangeScoreWeaponType
{
	eFiringRangeScoreWeaponType_AR                     = 0,
	eFiringRangeScoreWeaponType_SR                     = 1,
	eFiringRangeScoreWeaponType_SW                     = 2,
	eFiringRangeScoreWeaponType_MAX                    = 3
};*/

// Enum SFGame.SFGFxLobby_MiniGame.eMiniGameMainTabType
/*enum eMiniGameMainTabType
{
	eMiniGameMainTabType_MiniGame                      = 0,
	eMiniGameMainTabType_Ranking                       = 1,
	eMiniGameMainTabType_MAX                           = 2
};*/

// Enum SFGame.SFGFxLobby_MiniGame.eFiringRangeSubTabType
/*enum eFiringRangeSubTabType
{
	eFiringRangeSubTabType_Type                        = 0,
	eFiringRangeSubTabType_Friend                      = 1,
	eFiringRangeSubTabType_Clan                        = 2,
	eFiringRangeSubTabType_MAX                         = 3
};*/

// Enum SFGame.SFGFxLobby_MiniGame.eFiringRangeTabType
/*enum eFiringRangeTabType
{
	eFiringRangeTabType_AR                             = 0,
	eFiringRangeTabType_SR                             = 1,
	eFiringRangeTabType_SW                             = 2,
	eFiringRangeTabType_MAX                            = 3
};*/

// Enum SFGame.SFGFxLobby_MyInfo.EMyInfoPart
/*enum EMyInfoPart
{
	EMyInfo_Profile                                    = 0,
	EMyInfo_WeaponLog                                  = 1,
	EMyInfo_Challenge                                  = 2,
	EMyInfo_Vip                                        = 3,
	EMyInfo_VipMapRotation                             = 4,
	EMyInfo_MonthlyReward                              = 5,
	EMyInfo_MAX                                        = 6
};*/

// Enum SFGame.SFGFxLobby_Shop.HotNewShowDispType
/*enum HotNewShowDispType
{
	HotNewShowDispType_NONE                            = 0,
	HotNewShowDispType_HOTNEW                          = 1,
	HotNewShowDispType_FeverOn                         = 2,
	HotNewShowDispType_FeverOff                        = 3,
	HotNewShowDispType_MAX                             = 4
};*/

// Enum SFGame.SFGFxLobby_VideoPlayer.EIntroVideoType
/*enum EIntroVideoType
{
	EIntroVideo_Video                                  = 0,
	EIntroVideo_Image                                  = 1,
	EIntroVideo_MAX                                    = 2
};*/

// Enum SFGame.SFGFxLobby_WaitingRoom_1VS1.EUserListType
/*enum EUserListType
{
	EUserListType_UnLock                               = 0,
	EUserListType_Lock                                 = 1,
	EUserListType_Observer                             = 2,
	EUserListType_MAX                                  = 3
};*/

// Enum SFGame.SFGFxLobby_WaitingRoom_AITDM.EUserListType
/*enum EUserListType
{
	EUserListType_UnLock                               = 0,
	EUserListType_Lock                                 = 1,
	EUserListType_Player                               = 2,
	EUserListType_AI                                   = 3,
	EUserListType_MAX                                  = 4
};*/

// Enum SFGame.SFGFxLobby_WaitingRoom_PVE.EPVEListType
/*enum EPVEListType
{
	EPVEListType_None                                  = 0,
	EPVEListType_Lock                                  = 1,
	EPVEListType_UnLock                                = 2,
	EPVEListType_MAX                                   = 3
};*/

// Enum SFGame.SFGFxLobbyPart_SysSetting.EOnOff
/*enum EOnOff
{
	On                                                 = 0,
	Off                                                = 1,
	CHECKBOX_COUNT                                     = 2,
	EOnOff_MAX                                         = 3
};*/

// Enum SFGame.SFGFxLobbyPart_AlbumScreenShot.EAlbumState
/*enum EAlbumState
{
	EAlbumState_None                                   = 0,
	EAlbumState_View                                   = 1,
	EAlbumState_Rename                                 = 2,
	EAlbumState_MAX                                    = 3
};*/

// Enum SFGame.SFUIDataStore_ClanBase.EClanOptionType
/*enum EClanOptionType
{
	EClanOptionType_Age                                = 0,
	EClanOptionType_Sex                                = 1,
	EClanOptionType_Position                           = 2,
	EClanOptionType_PlayType                           = 3,
	EClanOptionType_ConnectTime                        = 4,
	EClanOptionType_VoiceTalk                          = 5,
	EClanOptionType_NickChange                         = 6,
	EClanOptionType_MAX                                = 7
};*/

// Enum SFGame.SFUIDataStore_ClanHome.EClanMemberSortType
/*enum EClanMemberSortType
{
	EClanMemberSortType_Check                          = 0,
	EClanMemberSortType_Rank                           = 1,
	EClanMemberSortType_UserImage                      = 2,
	EClanMemberSortType_CodeName                       = 3,
	EClanMemberSortType_GameCount                      = 4,
	EClanMemberSortType_Level                          = 5,
	EClanMemberSortType_RegDate                        = 6,
	EClanMemberSortType_MAX                            = 7
};*/

// Enum SFGame.SFGFxLobbyPart_ClanHome.ClanBtnShowType
/*enum ClanBtnShowType
{
	ClanBtnShowType_Master                             = 0,
	ClanBtnShowType_Manager                            = 1,
	ClanBtnShowType_Normal                             = 2,
	ClanBtnShowType_WaitMember                         = 3,
	ClanBtnShowType_NotMember                          = 4,
	ClanBtnShowType_CreateClan                         = 5,
	ClanBtnShowType_MAX                                = 6
};*/

// Enum SFGame.SFGFxLobbyPart_ClanHome.EClanHomeListType
/*enum EClanHomeListType
{
	EClanHomeListType_MemberList                       = 0,
	EClanHomeListType_WaitPeopleLIst                   = 1,
	EClanHomeListType_MAX                              = 2
};*/

// Enum SFGame.SFGFxLobbyPart_ClanHome.ESubTabType
/*enum ESubTabType
{
	ESubTabType_Notice                                 = 0,
	ESubTabType_ClanInfo                               = 1,
	ESubTabType_RecentRecord                           = 2,
	ESubTabType_MonthlyRecord                          = 3,
	ESubTabType_ClanMember                             = 4,
	ESubTabType_JoinWaitMember                         = 5,
	ESubTabType_MAX                                    = 6
};*/

// Enum SFGame.SFGFxLobbyPart_ClanHome.EClanNotifyWarningMsg
/*enum EClanNotifyWarningMsg
{
	EClanNotifyWarningMsg_MemberOut                    = 0,
	EClanNotifyWarningMsg_GiveMaster                   = 1,
	EClanNotifyWarningMsg_MAX                          = 2
};*/

// Enum SFGame.SFGFxLobbyPart_ClanManagerTab.EClanManagerTab
/*enum EClanManagerTab
{
	EClanManagerTab_MemberList                         = 0,
	EClanManagerTab_WaitPeopleLIst                     = 1,
	EClanManagerTab_Destroy                            = 2,
	EClanManagerTab_MAX                                = 3
};*/

// Enum SFGame.SFGFxLobbyPart_ClanManagerTab.EClanManagerMsg
/*enum EClanManagerMsg
{
	EClanManagerMsg_Destroy                            = 0,
	EClanManagerMsg_MemberOut                          = 1,
	EClanManagerMsg_GiveMaster                         = 2,
	EClanManagerMsg_MAX                                = 3
};*/

// Enum SFGame.SFUIDataStore_ClanList.EClanListType
/*enum EClanListType
{
	EClanListType_ClanPoint                            = 0,
	EClanListType_Member                               = 1,
	EClanListType_RegDate                              = 2,
	EClanListType_Monthly                              = 3,
	EClanListType_Search                               = 4,
	EClanListType_Recommend                            = 5,
	EClanListType_MAX                                  = 6
};*/

// Enum SFGame.SFGFxLobbyPart_ClanList.EListSubTabType
/*enum EListSubTabType
{
	EListSubTabType_ClanList                           = 0,
	EListSubTabType_InviteList                         = 1,
	EListSubTabType_MAX                                = 2
};*/

// Enum SFGame.SFGFxLobbyPart_ClanRank.ERankSubTabType
/*enum ERankSubTabType
{
	ERankSubTabType_ThisWeek                           = 0,
	ERankSubTabType_LastWeek                           = 1,
	ERankSubTabType_MAX                                = 2
};*/

// Enum SFGame.SFGFxLobbyPart_ClanUserTab.EClanUserTab
/*enum EClanUserTab
{
	EClanUserTab_MemberList                            = 0,
	EClanUserTab_WaitPeopleList                        = 1,
	EClanUserTab_MAX                                   = 2
};*/

// Enum SFGame.SFGFxLobbyPart_Rank.ELobbyRank
/*enum ELobbyRank
{
	ELobbyRank_WeeklyClanRank                          = 0,
	ELobbyRank_PCRoomUserRank                          = 1,
	ELobbyRank_MAX                                     = 2
};*/

// Enum SFGame.SFGFxLobbyPart_GameResult_HeroStatistics.EResultStatisticsType
/*enum EResultStatisticsType
{
	EResultST_Seperator                                = 0,
	EResultST_Kill_ByRifle                             = 1,
	EResultST_Kill_BySpecialWeapon                     = 2,
	EResultST_Kill_ByDefaultWeapon                     = 3,
	EResultST_Death                                    = 4,
	EResultST_Assist                                   = 5,
	EResultST_DamageToEnemy                            = 6,
	EResultST_BackAttackToEnemy                        = 7,
	EResultST_DamageByEnemy                            = 8,
	EResultST_BackAttackByEnemy                        = 9,
	EResultST_DamageToTower                            = 10,
	EResultST_GainModeMoney                            = 11,
	EResultST_SpendForWeapon                           = 12,
	EResultST_SpendForStat                             = 13,
	EResultST_SpendForHealing                          = 14,
	EResultST_SpendForSummon                           = 15,
	EResultST_SpendForEtc                              = 16,
	EResultST_DestroyedTurrets                         = 17,
	EResultST_DestroyedTowers                          = 18,
	EResultST_CS                                       = 19,
	EResultST_NeutralCS                                = 20,
	EResultST_CriticalCS                               = 21,
	EResultST_MAX                                      = 22
};*/

// Enum SFGame.SFGFxLobbyPart_InvenPMCItem.EInvenPMCSubTab
/*enum EInvenPMCSubTab
{
	EInvenPMCSubTab_Equp                               = 0,
	EInvenPMCSubTab_Character                          = 1,
	EInvenPMCSubTab_MAX                                = 2
};*/

// Enum SFGame.SFGFxLobbyPart_MyInfoChallenge.EMyInfoChallengeSubTab
/*enum EMyInfoChallengeSubTab
{
	EMyInfoChallengeSubTab_Progress                    = 0,
	EMyInfoChallengeSubTab_Complete                    = 1,
	EMyInfoChallengeSubTab_MAX                         = 2
};*/

// Enum SFGame.SFGFxLobbyPart_Notice.eEventType
/*enum eEventType
{
	EventType_NONE                                     = 0,
	EventType_EVENT                                    = 1,
	EventType_RECEIVED                                 = 2,
	EventType_SEND                                     = 3,
	EventType_MAX                                      = 4
};*/

// Enum SFGame.SFGFxLobbyPart_Notice_Event.EventState
/*enum EventState
{
	EventState_None                                    = 0,
	EventState_Clear                                   = 1,
	EventState_Waiting                                 = 2,
	EventState_Progress                                = 3,
	EventState_MAX                                     = 4
};*/

// Enum SFGame.SFGFxLobbyPart_Notice_Gift.EGiftSubTab
/*enum EGiftSubTab
{
	ENUM_SUBTAB_RECEIVED                               = 0,
	ENUM_SUBTAB_SEND                                   = 1,
	ENUM_SUBTAB_MAX                                    = 2
};*/

// Enum SFGame.SFGFxLobbyPart_Shop.EShopItemListSeperator
/*enum EShopItemListSeperator
{
	EShopItemListSeperator_None                        = 0,
	EShopItemListSeperator_AlreadyHave                 = 1,
	EShopItemListSeperator_Special                     = 2,
	EShopItemListSeperator_Normal                      = 3,
	EShopItemListSeperator_MAX                         = 4
};*/

// Enum SFGame.SFGFxLobbyPart_ShopModeItem.EModeItemType
/*enum EModeItemType
{
	EModeItem_None                                     = 0,
	EModeItem_Active                                   = 1,
	EModeItem_Passive                                  = 2,
	EModeItem_MAX                                      = 3
};*/

// Enum SFGame.SFGFxLobbyPart_SysSetting_Whisper.EChkBlockWhisperType
/*enum EChkBlockWhisperType
{
	EChkBlockWhisperType_All                           = 0,
	EChkBlockWhisperType_General                       = 1,
	EChkBlockWhisperType_Friend                        = 2,
	EChkBlockWhisperType_ClanMember                    = 3,
	EChkBlockWhisperType_MAX                           = 4
};*/

// Enum SFGame.SFGoldDiggerGame.EOverTimeCheckType
/*enum EOverTimeCheckType
{
	EOverTimeCheck_BlueWin                             = 0,
	EOverTimeCheck_RedWin                              = 1,
	EOverTimeCheck_CompareScore                        = 2,
	EOverTimeCheck_MAX                                 = 3
};*/

// Enum SFGame.SFGrowUpPlayerReplicationInfo.ModeStatApplyType
/*enum ModeStatApplyType
{
	EModeStatApplyType_None                            = 0,
	EModeStatApplyType_PlayerOnly                      = 1,
	EModeStatApplyType_PlayerAndPetOnly                = 2,
	EModeStatApplyType_All                             = 3,
	EModeStatApplyType_MAX                             = 4
};*/

// Enum SFGame.SFInGameStore.InGameStorePurchaseStat
/*enum InGameStorePurchaseStat
{
	IGSPS_DEFAULT                                      = 0,
	IGSPS_CURRENT                                      = 1,
	IGSPS_MAX                                          = 2
};*/

// Enum SFGame.SFItem_Func_RandomBox.eRandomBoxType
/*enum eRandomBoxType
{
	A_TYPE                                             = 0,
	B_TYPE                                             = 1,
	C_TYPE                                             = 2,
	D_TYPE                                             = 3,
	E_TYPE                                             = 4,
	SPECIAL_TYPE                                       = 5,
	eRandomBoxType_MAX                                 = 6
};*/

// Enum SFGame.SFItemManager.ECookingVariableType
/*enum ECookingVariableType
{
	COOKINGVARIABLETYPE_UnSet                          = 0,
	COOKINGVARIABLETYPE_Include                        = 1,
	COOKINGVARIABLETYPE_Exclude                        = 2,
	COOKINGVARIABLETYPE_ExcludeCauseLightnessCheck     = 3,
	COOKINGVARIABLETYPE_MAX                            = 4
};*/

// Enum SFGame.SFLogCondition.EAILogCondition
/*enum EAILogCondition
{
	AILC_None                                          = 0,
	AILC_STATE                                         = 1,
	AILC_LOOP                                          = 2,
	AILC_COMBAT                                        = 3,
	AILC_COVER                                         = 4,
	AILC_MOVE                                          = 5,
	AILC_SCRIPTED                                      = 6,
	AILC_ROUTE                                         = 7,
	AILC_COMBATZONE                                    = 8,
	AILC_ENEMY                                         = 9,
	AILC_WEAPON                                        = 10,
	AILC_WARNING                                       = 11,
	AILC_MAX                                           = 12
};*/

// Enum SFGame.SFLogCondition.ELogCondition
/*enum ELogCondition
{
	LC_None                                            = 0,
	LC_MCSTEP                                          = 1,
	LC_MCWARN                                          = 2,
	LC_TUTORIAL                                        = 3,
	LC_Mission                                         = 4,
	LC_Halo8                                           = 5,
	LC_olo                                             = 6,
	LC_Junno1                                          = 7,
	LC_ssh                                             = 8,
	LC_MAX                                             = 9
};*/

// Enum SFGame.SFLogCondition.ELogColor
/*enum ELogColor
{
	COLOR_BLACK                                        = 0,
	COLOR_DARK_RED                                     = 1,
	COLOR_DARK_GREEN                                   = 2,
	COLOR_DARK_BLUE                                    = 3,
	COLOR_DARK_YELLOW                                  = 4,
	COLOR_DARK_CYAN                                    = 5,
	COLOR_DARK_PURPLE                                  = 6,
	COLOR_DARK_WHITE                                   = 7,
	COLOR_RED                                          = 8,
	COLOR_GREEN                                        = 9,
	COLOR_BLUE                                         = 10,
	COLOR_YELLOW                                       = 11,
	COLOR_CYAN                                         = 12,
	COLOR_PURPLE                                       = 13,
	COLOR_WHITE                                        = 14,
	COLOR_MAX                                          = 15
};*/

// Enum SFGame.SFMaterialImpactEffect.ImpactEffect_Type
/*enum ImpactEffect_Type
{
	Hit_BulletMicro                                    = 0,
	Hit_BulletMiddle                                   = 1,
	Hit_BulletBig                                      = 2,
	Hit_HandGrenade                                    = 3,
	Hit_KNife                                          = 4,
	Hit_Knife_Throw                                    = 5,
	Hit_Arrow                                          = 6,
	Hit_Snowball                                       = 7,
	Hit_ToyHammer                                      = 8,
	Hit_MetalHammer                                    = 9,
	Hit_Electronic                                     = 10,
	Hit_Flame                                          = 11,
	Hit_Breath                                         = 12,
	Explo_Smoke                                        = 13,
	Explo_Gas                                          = 14,
	Explo_Frag                                         = 15,
	Explo_FBang                                        = 16,
	Explo_Libertine_Sputum                             = 17,
	Explo_Ripper_Sputum                                = 18,
	AlienSpawnSmall                                    = 19,
	AlienSpawnMiddle                                   = 20,
	AlienSpawnBig                                      = 21,
	ImpactEffect_Type_MAX                              = 22
};*/

// Enum SFGame.SFMCResourceManager.EAsyncRequestType
/*enum EAsyncRequestType
{
	RequestType_Mesh                                   = 0,
	RequestType_Material                               = 1,
	RequestType_Texture_SymbolCamo                     = 2,
	RequestType_Texture_SymbolMask                     = 3,
	RequestType_Texture_PatternCamo                    = 4,
	RequestType_Texture_PatternMask                    = 5,
	RequestType_Texture_WeaponCamo                     = 6,
	RequestType_Texture_Diffuse                        = 7,
	RequestType_Texture_Normal                         = 8,
	RequestType_Texture_Specular                       = 9,
	RequestType_Texture_Mask                           = 10,
	RequestType_MAX                                    = 11
};*/

// Enum SFGame.SFMeshBlendingScheduler.EMeshBlendingSchedulerState
/*enum EMeshBlendingSchedulerState
{
	MESHBLENDINGSCHEDULER_NONE                         = 0,
	MESHBLENDINGSCHEDULER_SLEEP                        = 1,
	MESHBLENDINGSCHEDULER_WAKEUP                       = 2,
	MESHBLENDINGSCHEDULER_WORKING                      = 3,
	MESHBLENDINGSCHEDULER_MAX                          = 4
};*/

// Enum SFGame.SFOnlineSubsystemInternet.ESF2InfoURL
/*enum ESF2InfoURL
{
	ESF2Info_GetClan                                   = 0,
	ESF2Info_ApplyClan                                 = 1,
	ESF2Info_CheckDuplication                          = 2,
	ESF2Info_CreateClan                                = 3,
	ESF2Info_UpdateClan                                = 4,
	ESF2Info_GetClanList                               = 5,
	ESF2Info_GetClanMember                             = 6,
	ESF2Info_UpdateLevel                               = 7,
	ESF2Info_SearchClan                                = 8,
	ESF2Info_RemoveMember                              = 9,
	ESF2Info_GiveMaster                                = 10,
	ESF2Info_CloseClan                                 = 11,
	ESF2Info_InsertClanNote                            = 12,
	ESF2Info_RemoveClanNote                            = 13,
	ESF2Info_GetClanNoteList                           = 14,
	ESF2Info_GetClanMemberList                         = 15,
	ESF2Info_GetClanWarListList                        = 16,
	ESF2Info_GetArmsPlayList                           = 17,
	ESF2Info_AcceptMember                              = 18,
	ESF2Info_CommunityBoardsNew                        = 19,
	ESF2Info_CommunityBoardsDelete                     = 20,
	ESF2Info_CommunityBoardsList                       = 21,
	ESF2Info_CommunityBoardsFeedback                   = 22,
	ESF2Info_CommunityRecommandFriend                  = 23,
	ESF2Info_CommunityBoardsUnRead                     = 24,
	ESF2Info_CommunityBoardsFeedbackFrom               = 25,
	ESF2Info_GetClanInventoryList                      = 26,
	ESF2Info_GetClanRankTop60Monthly                   = 27,
	ESF2Info_GetClanRankLast6Months                    = 28,
	ESF2Info_GetClanRecommendList                      = 29,
	ESF2Info_RemoveClanRecommend                       = 30,
	ESF2Info_GetLeagueMyClanRank                       = 31,
	ESF2Info_GetLeagueMyClanUserRank                   = 32,
	ESF2Info_GetLeagueSeasonClanRank                   = 33,
	ESF2Info_GetLeagueSeasonClanUserRank               = 34,
	ESF2Info_GetFiringRangeScoreRank                   = 35,
	ESF2Info_Get1VS1ModeUserRank                       = 36,
	ESF2Info_MAX                                       = 37
};*/

// Enum SFGame.SFOnlineSubsystemInternet.sf2_m
/*enum sf2_m
{
	reqGet                                             = 0,
	reqPost                                            = 1,
	reqPut                                             = 2,
	reqDelete                                          = 3,
	sf2_m_MAX                                          = 4
};*/

// Enum SFGame.SFOnlineSubsystemInternet.sf2_t
/*enum sf2_t
{
	http                                               = 0,
	sf2_t_MAX                                          = 1
};*/

// Enum SFGame.SFParticleModuleResistance.EResistanceMethod
/*enum EResistanceMethod
{
	EResistanceMethod_Velocity                         = 0,
	EResistanceMethod_VelocitySqr                      = 1,
	EResistanceMethod_MAX                              = 2
};*/

// Enum SFGame.SFPawn.EServePartEvents
/*enum EServePartEvents
{
	ESPE_None                                          = 0,
	ESPE_LimitedPeriod                                 = 1,
	ESPE_MAX                                           = 2
};*/

// Enum SFGame.SFPawn.EHelmetStatus
/*enum EHelmetStatus
{
	EHMS_None                                          = 0,
	EHMS_Equipped                                      = 1,
	EHMS_DroppedAll                                    = 2,
	EHMS_DroppedOnlyEnemy                              = 3,
	EHMS_MAX                                           = 4
};*/

// Enum SFGame.SFPawnEquipment.EProtectiveEquipment
/*enum EProtectiveEquipment
{
	PRCT_Distance                                      = 0,
	PRCT_Minimum                                       = 1,
	PRCT_Maximum                                       = 2,
	PRCT_MAX                                           = 3
};*/

// Enum SFGame.SFTemporaryObjectPool.EPawnHitType
/*enum EPawnHitType
{
	EPawnHitType_Normal                                = 0,
	EPawnHitType_Head                                  = 1,
	EPawnHitType_Helmet                                = 2,
	EPawnHitType_MAX                                   = 3
};*/

// Enum SFGame.SFProfileSettings.EDigitalButtonActions
/*enum EDigitalButtonActions
{
	DBA_None                                           = 0,
	DBA_Fire                                           = 1,
	DBA_AltFire                                        = 2,
	DBA_Reload                                         = 3,
	DBA_ExigencyAttack                                 = 4,
	DBA_Jump                                           = 5,
	DBA_Use                                            = 6,
	DBA_ToggleMelee                                    = 7,
	DBA_ShowScores                                     = 8,
	DBA_ShowMap                                        = 9,
	DBA_FeignDeath                                     = 10,
	DBA_ToggleSpeaking                                 = 11,
	DBA_ToggleMinimap                                  = 12,
	DBA_WeaponPicker                                   = 13,
	DBA_NextWeapon                                     = 14,
	DBA_BestWeapon                                     = 15,
	DBA_PrevWeapon                                     = 16,
	DBA_LatestWeapon                                   = 17,
	DBA_Duck                                           = 18,
	DBA_MoveForward                                    = 19,
	DBA_MoveBackward                                   = 20,
	DBA_StrafeLeft                                     = 21,
	DBA_StrafeRight                                    = 22,
	DBA_Walk                                           = 23,
	DBA_Sprint                                         = 24,
	DBA_TurnLeft                                       = 25,
	DBA_TurnRight                                      = 26,
	DBA_SwitchWeapon1                                  = 27,
	DBA_SwitchWeapon2                                  = 28,
	DBA_SwitchWeapon3                                  = 29,
	DBA_SwitchWeapon4                                  = 30,
	DBA_SwitchWeapon5                                  = 31,
	DBA_SwitchWeapon6                                  = 32,
	DBA_SwitchWeapon7                                  = 33,
	DBA_SwitchWeapon8                                  = 34,
	DBA_SwitchWeapon9                                  = 35,
	DBA_SwitchWeapon10                                 = 36,
	DBA_ShrinkHUD                                      = 37,
	DBA_GrowHUD                                        = 38,
	DBA_Taunt                                          = 39,
	DBA_Taunt2                                         = 40,
	DBA_Talk                                           = 41,
	DBA_TeamTalk                                       = 42,
	DBA_ShowCommandMenu                                = 43,
	DBA_ShowMenu                                       = 44,
	DBA_JumpPC                                         = 45,
	DBA_BestWeaponPC                                   = 46,
	DBA_Horn                                           = 47,
	DBA_InGameChat                                     = 48,
	DBA_ShowScoreBoard                                 = 49,
	DBA_ShowRadioMsgMission                            = 50,
	DBA_ShowRadioMsgCommunity                          = 51,
	DBA_ShowRadioMsgCommand                            = 52,
	DBA_Spray                                          = 53,
	DBA_Recall                                         = 54,
	DBA_MissionPingAttack                              = 55,
	DBA_MissionPingRetreat                             = 56,
	DBA_TurnBack                                       = 57,
	DBA_HoldZoom                                       = 58,
	DBA_MAX                                            = 59
};*/

// Enum SFGame.SFProfileSettings.ESFBindableKeys
/*enum ESFBindableKeys
{
	SFBND_Unbound                                      = 0,
	SFBND_MouseX                                       = 1,
	SFBND_MouseY                                       = 2,
	SFBND_MouseScrollUp                                = 3,
	SFBND_MouseScrollDown                              = 4,
	SFBND_LeftMouseButton                              = 5,
	SFBND_RightMouseButton                             = 6,
	SFBND_MiddleMouseButton                            = 7,
	SFBND_ThumbMouseButton                             = 8,
	SFBND_ThumbMouseButton2                            = 9,
	SFBND_BackSpace                                    = 10,
	SFBND_Tab                                          = 11,
	SFBND_Enter                                        = 12,
	SFBND_Pause                                        = 13,
	SFBND_CapsLock                                     = 14,
	SFBND_Escape                                       = 15,
	SFBND_SpaceBar                                     = 16,
	SFBND_PageUp                                       = 17,
	SFBND_PageDown                                     = 18,
	SFBND_End                                          = 19,
	SFBND_Home                                         = 20,
	SFBND_Left                                         = 21,
	SFBND_Up                                           = 22,
	SFBND_Right                                        = 23,
	SFBND_Down                                         = 24,
	SFBND_Insert                                       = 25,
	SFBND_Delete                                       = 26,
	SFBND_Zero                                         = 27,
	SFBND_One                                          = 28,
	SFBND_Two                                          = 29,
	SFBND_Three                                        = 30,
	SFBND_Four                                         = 31,
	SFBND_Five                                         = 32,
	SFBND_Six                                          = 33,
	SFBND_Seven                                        = 34,
	SFBND_Eight                                        = 35,
	SFBND_Nine                                         = 36,
	SFBND_A                                            = 37,
	SFBND_B                                            = 38,
	SFBND_C                                            = 39,
	SFBND_D                                            = 40,
	SFBND_E                                            = 41,
	SFBND_F                                            = 42,
	SFBND_G                                            = 43,
	SFBND_H                                            = 44,
	SFBND_I                                            = 45,
	SFBND_J                                            = 46,
	SFBND_K                                            = 47,
	SFBND_L                                            = 48,
	SFBND_M                                            = 49,
	SFBND_N                                            = 50,
	SFBND_O                                            = 51,
	SFBND_P                                            = 52,
	SFBND_Q                                            = 53,
	SFBND_R                                            = 54,
	SFBND_S                                            = 55,
	SFBND_T                                            = 56,
	SFBND_U                                            = 57,
	SFBND_V                                            = 58,
	SFBND_W                                            = 59,
	SFBND_X                                            = 60,
	SFBND_Y                                            = 61,
	SFBND_Z                                            = 62,
	SFBND_NumPadZero                                   = 63,
	SFBND_NumPadOne                                    = 64,
	SFBND_NumPadTwo                                    = 65,
	SFBND_NumPadThree                                  = 66,
	SFBND_NumPadFour                                   = 67,
	SFBND_NumPadFive                                   = 68,
	SFBND_NumPadSix                                    = 69,
	SFBND_NumPadSeven                                  = 70,
	SFBND_NumPadEight                                  = 71,
	SFBND_NumPadNine                                   = 72,
	SFBND_Multiply                                     = 73,
	SFBND_Add                                          = 74,
	SFBND_Subtract                                     = 75,
	SFBND_Decimal                                      = 76,
	SFBND_Divide                                       = 77,
	SFBND_F1                                           = 78,
	SFBND_F2                                           = 79,
	SFBND_F3                                           = 80,
	SFBND_F4                                           = 81,
	SFBND_F5                                           = 82,
	SFBND_F6                                           = 83,
	SFBND_F7                                           = 84,
	SFBND_F8                                           = 85,
	SFBND_F9                                           = 86,
	SFBND_F10                                          = 87,
	SFBND_F11                                          = 88,
	SFBND_F12                                          = 89,
	SFBND_NumLock                                      = 90,
	SFBND_ScrollLock                                   = 91,
	SFBND_LeftShift                                    = 92,
	SFBND_RightShift                                   = 93,
	SFBND_LeftControl                                  = 94,
	SFBND_RightControl                                 = 95,
	SFBND_LeftAlt                                      = 96,
	SFBND_RightAlt                                     = 97,
	SFBND_Semicolon                                    = 98,
	SFBND_Equals                                       = 99,
	SFBND_Comma                                        = 100,
	SFBND_Underscore                                   = 101,
	SFBND_Period                                       = 102,
	SFBND_Slash                                        = 103,
	SFBND_Tilde                                        = 104,
	SFBND_LeftBracket                                  = 105,
	SFBND_Backslash                                    = 106,
	SFBND_RightBracket                                 = 107,
	SFBND_Quote                                        = 108,
	SFBND_PrintScreen                                  = 109,
	SFBND_Hangul                                       = 110,
	SFBND_Junja                                        = 111,
	SFBND_Hanja                                        = 112,
	SFBND_Convert                                      = 113,
	SFBND_NonConvert                                   = 114,
	SFBND_LeftStickX                                   = 115,
	SFBND_LeftStickY                                   = 116,
	SFBND_LeftStick_Click                              = 117,
	SFBND_RightStick_X                                 = 118,
	SFBND_RightStick_Y                                 = 119,
	SFBND_RightStick_Click                             = 120,
	SFBND_ButtonA                                      = 121,
	SFBND_ButtonB                                      = 122,
	SFBND_ButtonX                                      = 123,
	SFBND_ButtonY                                      = 124,
	SFBND_LeftShoulder                                 = 125,
	SFBND_RightShoulder                                = 126,
	SFBND_LeftTrigger                                  = 127,
	SFBND_RightTrigger                                 = 128,
	SFBND_Start                                        = 129,
	SFBND_Select                                       = 130,
	SFBND_DPad_Up                                      = 131,
	SFBND_DPad_Down                                    = 132,
	SFBND_DPad_Left                                    = 133,
	SFBND_DPad_Right                                   = 134,
	SFBND_SpecialX                                     = 135,
	SFBND_SpecialY                                     = 136,
	SFBND_SpecialZ                                     = 137,
	SFBND_SpecialW                                     = 138,
	SFBND_OEM_AX                                       = 139,
	SFBND_OEM                                          = 140,
	SFBND_MAX                                          = 141
};*/

// Enum SFGame.SFProfileSettings.ESFKeySetting
/*enum ESFKeySetting
{
	KEYSET_Forward                                     = 0,
	KEYSET_Back                                        = 1,
	KEYSET_Left                                        = 2,
	KEYSET_Right                                       = 3,
	KEYSET_Jump                                        = 4,
	KEYSET_Dash                                        = 5,
	KEYSET_Down                                        = 6,
	KEYSET_Walk                                        = 7,
	KEYSET_Shot                                        = 8,
	KEYSET_Zoom                                        = 9,
	KEYSET_Attack                                      = 10,
	KEYSET_Charge                                      = 11,
	KEYSET_Behavior                                    = 12,
	KEYSET_PrevWeapon                                  = 13,
	KEYSET_PrevSlot                                    = 14,
	KEYSET_NextSlot                                    = 15,
	KEYSET_MainWeapon                                  = 16,
	KEYSET_ReserveWeapon                               = 17,
	KEYSET_SpecialWapon                                = 18,
	KEYSET_ThrowWeapon                                 = 19,
	KEYSET_ScoreBoard                                  = 20,
	KEYSET_MissionMsg                                  = 21,
	KEYSET_OrderMsg                                    = 22,
	KEYSET_RequireMsg                                  = 23,
	KEYSET_MAX                                         = 24
};*/

// Enum SFGame.SFProfileSettings.ELanguadge
/*enum ELanguadge
{
	SFPID_LANGUAGE_KOREAN                              = 0,
	SFPID_LANGUAGE_ENGLISH                             = 1,
	SFPID_LANGUAGE_MAX                                 = 2
};*/

// Enum SFGame.SFProfileSettings.EGenericYesNo
/*enum EGenericYesNo
{
	SFPID_VALUE_NO                                     = 0,
	SFPID_VALUE_YES                                    = 1,
	SFPID_VALUE_MAX                                    = 2
};*/

// Enum SFGame.SFProjectile.EIndicateType
/*enum EIndicateType
{
	EIndicateType_All                                  = 0,
	EIndicateType_DamageTakerOnly                      = 1,
	EIndicateType_SameTeamOnly                         = 2,
	EIndicateType_OtherTeamOnly                        = 3,
	EIndicateType_MAX                                  = 4
};*/

// Enum SFGame.SFShooterDefencePlayerController.GrowUpType
/*enum GrowUpType
{
	GUT_Attack                                         = 0,
	GUT_Defence                                        = 1,
	GUT_Move                                           = 2,
	GUT_MAX                                            = 3
};*/

// Enum SFGame.SFSpawner.EHoleEmergeAnim
/*enum EHoleEmergeAnim
{
	EHEA_Random                                        = 0,
	EHEA_CrawlUp                                       = 1,
	EHEA_Jump                                          = 2,
	EHEA_MAX                                           = 3
};*/

// Enum SFGame.SFSpectatorCam_AutoFraming.EAutoFramingPawnTracePoint
/*enum EAutoFramingPawnTracePoint
{
	PawnTrace_Head                                     = 0,
	PawnTrace_Above                                    = 1,
	PawnTrace_Left                                     = 2,
	PawnTrace_Right                                    = 3,
	PawnTrace_MAX                                      = 4
};*/

// Enum SFGame.SFSpectatorPoint.ESpecPointCameraMode
/*enum ESpecPointCameraMode
{
	SPCAMERAMODE_Manual                                = 0,
	SPCAMERAMODE_AutoTracking                          = 1,
	SPCAMERAMODE_MAX                                   = 2
};*/

// Enum SFGame.SFSquadFormation.ESFSquadFormationType
/*enum ESFSquadFormationType
{
	SFSF_None                                          = 0,
	SFSF_Column                                        = 1,
	SFSF_Line                                          = 2,
	SFSF_MAX                                           = 3
};*/

// Enum SFGame.SFTrigger_ReplaceMesh.EMaterialType
/*enum EMaterialType
{
	EMatType_Material                                  = 0,
	EMatType_MIC                                       = 1,
	EMatType_MITV                                      = 2,
	EMatType_MAX                                       = 3
};*/

// Enum SFGame.SFUIHelper.eClanMarkType
/*enum eClanMarkType
{
	eClanMarkType_AllInOne                             = 0,
	eClanMarkType_Set                                  = 1,
	eClanMarkType_MAX                                  = 2
};*/

// Enum SFGame.SFUIMinimapRadar.EZoomType
/*enum EZoomType
{
	ZoomType_None                                      = 0,
	ZoomType_In                                        = 1,
	ZoomType_Out                                       = 2,
	ZoomType_MAX                                       = 3
};*/

// Enum SFGame.SFUIMinimapRadarGFxValue.EIconType
/*enum EIconType
{
	ICONTYPE_Friend                                    = 0,
	ICONTYPE_Enemy                                     = 1,
	ICONTYPE_DeadBody                                  = 2,
	ICONTYPE_Object                                    = 3,
	ICONTYPE_Me                                        = 4,
	ICONTYPE_Compass                                   = 5,
	ICONTYPE_RedBase                                   = 6,
	ICONTYPE_BlueBase                                  = 7,
	ICONTYPE_Ping_Attack                               = 8,
	ICONTYPE_Ping_Retreat                              = 9,
	ICONTYPE_Cursor                                    = 10,
	ICONTYPE_FriendAI                                  = 11,
	ICONTYPE_EnemyAI                                   = 12,
	ICONTYPE_FriendTyrant                              = 13,
	ICONTYPE_EnemyTyrant                               = 14,
	ICONTYPE_MAX                                       = 15
};*/

// Enum SFGame.SFWeap_Melee.MeleeWeaponDetectType
/*enum MeleeWeaponDetectType
{
	MWDT_LeftToRight                                   = 0,
	MWDT_RightToLeft                                   = 1,
	MWDT_LeftTopToRightBottom                          = 2,
	MWDT_LeftBottomToRightTop                          = 3,
	MWDT_RightTopToLeftBottom                          = 4,
	MWDT_RightBottomToLeftTop                          = 5,
	MWDT_TopToBottom                                   = 6,
	MWDT_BottomToTop                                   = 7,
	MWDT_Thrust                                        = 8,
	MWDT_MAX                                           = 9
};*/

// Enum SFGame.SFWeaponFlamer.EFlameType
/*enum EFlameType
{
	EFlameType_3rd                                     = 0,
	EFlameType_1st                                     = 1,
	EFlameType_Max                                     = 2
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class SFGame.ActorFactorySFBreakableActor
// 0x0015 (0x0071 - 0x005C)
class UActorFactorySFBreakableActor : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      CollisionType;                                    		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2949 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFBreakableActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFBreakableCarPart
// 0x0004 (0x0060 - 0x005C)
class UActorFactorySFBreakableCarPart : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2951 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFBreakableCarPart::pClassPointer = NULL;

// Class SFGame.ActorFactorySFCustomPreview
// 0x0000 (0x006C - 0x006C)
class UActorFactorySFCustomPreview : public UActorFactorySkeletalMeshCinematic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2953 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFCustomPreview::pClassPointer = NULL;

// Class SFGame.ActorFactorySFCustomWeaponPreview
// 0x0000 (0x006C - 0x006C)
class UActorFactorySFCustomWeaponPreview : public UActorFactorySkeletalMeshCinematic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2955 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFCustomWeaponPreview::pClassPointer = NULL;

// Class SFGame.ActorFactorySFElevatorActor
// 0x0000 (0x0071 - 0x0071)
class UActorFactorySFElevatorActor : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2957 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFElevatorActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFKActorNoSync
// 0x0000 (0x0071 - 0x0071)
class UActorFactorySFKActorNoSync : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2959 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFKActorNoSync::pClassPointer = NULL;

// Class SFGame.ActorFactorySFPawnAI_Sentinel
// 0x0014 (0x0070 - 0x005C)
class UActorFactorySFPawnAI_Sentinel : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          AdditionalAnimSet;                                		// 0x0064 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2961 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFPawnAI_Sentinel::pClassPointer = NULL;

// Class SFGame.ActorFactorySFSceneCaptureActor
// 0x0000 (0x006C - 0x006C)
class UActorFactorySFSceneCaptureActor : public UActorFactorySkeletalMeshCinematic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2963 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFSceneCaptureActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFSpectatorEmitter
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFSpectatorEmitter : public UActorFactoryEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2965 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFSpectatorEmitter::pClassPointer = NULL;

// Class SFGame.ActorFactorySFStaticMeshActor
// 0x0000 (0x006C - 0x006C)
class UActorFactorySFStaticMeshActor : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2967 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFStaticMeshActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_Use
// 0x0004 (0x0060 - 0x005C)
class UActorFactorySFTrigger_Use : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2969 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_Use::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_Elevator
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_Elevator : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2971 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_Elevator::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_ReplaceMesh
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_ReplaceMesh : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2973 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_ReplaceMesh::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_Seizure
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_Seizure : public UActorFactorySFTrigger_ReplaceMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2975 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_Seizure::pClassPointer = NULL;

// Class SFGame.ActorFactoryStaticMeshActorForBlastingGame
// 0x0000 (0x006C - 0x006C)
class UActorFactoryStaticMeshActorForBlastingGame : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2977 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryStaticMeshActorForBlastingGame::pClassPointer = NULL;

// Class SFGame.ActorFactoryStaticMeshByDamage
// 0x0000 (0x006C - 0x006C)
class UActorFactoryStaticMeshByDamage : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2979 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryStaticMeshByDamage::pClassPointer = NULL;

// Class SFGame.AIReactChannel
// 0x0018 (0x0054 - 0x003C)
class UAIReactChannel : public UObject
{
public:
	struct FName                                       ChannelName;                                      		// 0x003C (0x0008) [0x0000000000000000]              
	unsigned long                                      bNeedsPoll : 1;                                   		// 0x0044 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bChannelSuppressed : 1;                           		// 0x0044 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< class UAIReactCondition_Base* >            Reactions;                                        		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2981 ];

		return pClassPointer;
	};

	void eventUnSuppress ( );
	void eventSuppress ( );
	void NudgeChannel ( class AActor* Instigator );
	class UAIReactCondition_Base* FindReactionByType ( class UClass* Type );
	class UAIReactCondition_Base* UnSuppressReactionByType ( class UClass* Type );
	class UAIReactCondition_Base* SuppressReactionByType ( class UClass* Type );
	bool UnSubscribe ( class UAIReactCondition_Base* Condition );
	void Subscribe ( class UAIReactCondition_Base* Condition );
};

UClass* UAIReactChannel::pClassPointer = NULL;

// Class SFGame.AIReactChan_Timer
// 0x0000 (0x0054 - 0x0054)
class UAIReactChan_Timer : public UAIReactChannel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2983 ];

		return pClassPointer;
	};

	void Subscribe ( class UAIReactCondition_Base* Condition );
};

UClass* UAIReactChan_Timer::pClassPointer = NULL;

// Class SFGame.SFAIController
// 0x0230 (0x0654 - 0x0424)
class ASFAIController : public AGameAIController
{
public:
	class UAIReactionManager*                          ReactionManager;                                  		// 0x0424 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAIReactCondition_Base* >            DefaultReactConditions;                           		// 0x0428 (0x000C) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UClass* >                            DefaultReactConditionClasses;                     		// 0x0434 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFAICommand*                                CachedAICommand;                                  		// 0x0440 (0x0004) [0x0000000000000000]              
	unsigned long                                      RelayAICommandWhenNotify : 1;                     		// 0x0444 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReachedMoveGoal : 1;                             		// 0x0444 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMoveGoalInterruptable : 1;                       		// 0x0444 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMovingToGoal : 1;                                		// 0x0444 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMovingToTether : 1;                              		// 0x0444 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bReachedTether : 1;                               		// 0x0444 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWantsLedgeCheck : 1;                             		// 0x0444 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAlwaysSkipLedgeChecks : 1;                       		// 0x0444 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bReevaluatePath : 1;                              		// 0x0444 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIgnoreStepAside : 1;                             		// 0x0444 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreSquadPosition : 1;                         		// 0x0444 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bAllowCombatTransitions : 1;                      		// 0x0444 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bShouldSprint : 1;                                		// 0x0444 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      EnemyFriendly : 1;                                		// 0x0444 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      Freeze : 1;                                       		// 0x0444 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bDoingMeleeAttack : 1;                            		// 0x0444 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCombatResult : 1;                                		// 0x0444 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bAttacked : 1;                                    		// 0x0444 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bNeverDie : 1;                                    		// 0x0444 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bIgnoreInTeamMember : 1;                          		// 0x0444 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIsTargeting : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bDebugHeard : 1;                                  		// 0x0444 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bIgnoreFireRange : 1;                             		// 0x0444 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bAdjustFlashBangEffect : 1;                       		// 0x0444 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bTargetInsight : 1;                               		// 0x0444 (0x0004) [0x0000000000000000] [0x01000000] 
	class UClass*                                      DefaultAttackClass;                               		// 0x0448 (0x0004) [0x0000000000000000]              
	class USeqAct_AIMove*                              MoveAction;                                       		// 0x044C (0x0004) [0x0000000000000000]              
	class AActor*                                      StepAsideGoal;                                    		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              MaxStepAsideDist;                                 		// 0x0454 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      MoveGoal;                                         		// 0x0458 (0x0004) [0x0000000000000000]              
	struct FBasedPosition                              MovePosition;                                     		// 0x045C (0x0034) [0x0000000000000000]              
	class AActor*                                      MoveFocus;                                        		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              MoveOffset;                                       		// 0x0494 (0x0004) [0x0000000000000000]              
	float                                              IntermediatePointArrivalDist;                     		// 0x0498 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FBasedPosition                              TetherPosition;                                   		// 0x049C (0x0034) [0x0000000000000000]              
	float                                              LastObstructionTime;                              		// 0x04D0 (0x0004) [0x0000000000000000]              
	float                                              LastDetourCheckTime;                              		// 0x04D4 (0x0004) [0x0000000000000000]              
	float                                              LastMoveFinishTime;                               		// 0x04D8 (0x0004) [0x0000000000000000]              
	float                                              LastFailedToFindStepAsideLocation;                		// 0x04DC (0x0004) [0x0000000000000000]              
	struct FRotator                                    Debug_StepRot;                                    		// 0x04E0 (0x000C) [0x0000000000000000]              
	struct FBasedPosition                              Debug_StepLoc;                                    		// 0x04EC (0x0034) [0x0000000000000000]              
	float                                              EnemyAquisitionTime;                              		// 0x0520 (0x0004) [0x0000000000000000]              
	float                                              LastShotAtTime;                                   		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              ChanceToEvade;                                    		// 0x0528 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ChanceToEvadeGrenade;                             		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFSquad*                                    Squad;                                            		// 0x0530 (0x0004) [0x0000000000000000]              
	struct FVector                                     LastSquadLeaderPosition;                          		// 0x0534 (0x000C) [0x0000000000000000]              
	float                                              LastActionTransitionTime;                         		// 0x0540 (0x0004) [0x0000000000000000]              
	float                                              TargetAquisitionTime;                             		// 0x0544 (0x0004) [0x0000000000000000]              
	float                                              DamageReceivedInAction;                           		// 0x0548 (0x0004) [0x0000000000000000]              
	float                                              LastDamageReceivedTime;                           		// 0x054C (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultCommand;                                   		// 0x0550 (0x0004) [0x0000000000000000]              
	float                                              LastEnterIdleTime;                                		// 0x0554 (0x0004) [0x0000000000000000]              
	unsigned char                                      Difficulty;                                       		// 0x0558 (0x0001) [0x0000000000000000]              
	float                                              SearchLaneMultiplier;                             		// 0x055C (0x0004) [0x0000000000000000]              
	TArray< struct FLocalEnemyInfo >                   LocalEnemyList;                                   		// 0x0560 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FInvalidAnchorItem >                InvalidAnchorList;                                		// 0x056C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              Response_MinEnemySeenTime;                        		// 0x0578 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_MinEnemyHearTime;                        		// 0x057C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_MinEnemyHurtTime;                        		// 0x0580 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              Response_EnemyTooLongNoSeeTime;                   		// 0x0584 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      FireTarget;                                       		// 0x0588 (0x0004) [0x0000000000000000]              
	class AActor*                                      SavedTarget;                                      		// 0x058C (0x0004) [0x0000000000000000]              
	class AActor*                                      BumpedActor;                                      		// 0x0590 (0x0004) [0x0000000000000000]              
	class AActor*                                      RoamingTarget;                                    		// 0x0594 (0x0004) [0x0000000000000000]              
	struct FVector                                     RoamingTargetLoc;                                 		// 0x0598 (0x000C) [0x0000000000000000]              
	class ASFPawn_AI*                                  MySFAIPawn;                                       		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              EnemyDistance_Short;                              		// 0x05A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyDistance_Medium;                             		// 0x05AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyDistance_Long;                               		// 0x05B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyDistance_Melee;                              		// 0x05B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFSeqAct_AIFactory*                         SpawnFactory;                                     		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              fGoalDistance;                                    		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              LastTimeCheckNearstEnemy;                         		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              GrenadeEvadeAwayRatio;                            		// 0x05C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class APawn*                                       LastestOffendEnemy;                               		// 0x05C8 (0x0004) [0x0000000000000000]              
	float                                              LastUnderFire;                                    		// 0x05CC (0x0004) [0x0000000000000000]              
	float                                              RecognizeRadius;                                  		// 0x05D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FsCandidateTarget >                 CandidateTargets;                                 		// 0x05D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      PendingMovetoTarget;                              		// 0x05E0 (0x0004) [0x0000000000000000]              
	class AActor*                                      PendingAttacker;                                  		// 0x05E4 (0x0004) [0x0000000000000000]              
	float                                              TargetMovedReactionDist;                          		// 0x05E8 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            UnreachableTargets;                               		// 0x05EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                FailSetTarget;                                    		// 0x05F8 (0x0004) [0x0000000000000000]              
	float                                              fCommandElapsedTime;                              		// 0x05FC (0x0004) [0x0000000000000000]              
	int                                                AIID;                                             		// 0x0600 (0x0004) [0x0000000000000000]              
	float                                              LastEvadeTime;                                    		// 0x0604 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinTimeBetweenEvades;                             		// 0x0608 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       OldMessageType;                                   		// 0x060C (0x0008) [0x0000000000000000]              
	float                                              OldMessageTime;                                   		// 0x0614 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedTarget;                                   		// 0x0618 (0x0004) [0x0000000000000000]              
	class AActor*                                      TemporaryFocus;                                   		// 0x061C (0x0004) [0x0000000000000000]              
	class ACombatZone*                                 PendingCombatZone;                                		// 0x0620 (0x0004) [0x0000000000000000]              
	class ACombatZone*                                 CurrentCombatZone;                                		// 0x0624 (0x0004) [0x0000000000000000]              
	struct FName                                       NOISETYPE_FootStep;                               		// 0x0628 (0x0008) [0x0000000000000000]              
	struct FRotator                                    GrenadeThrowDirection;                            		// 0x0630 (0x000C) [0x0000000000000000]              
	float                                              SimProjectileExtraGravity;                        		// 0x063C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoolTimeBombingSupport;                           		// 0x0640 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFAggroSystem*                              AggroSys;                                         		// 0x0644 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultAggroSystemClass;                          		// 0x0648 (0x0004) [0x0000000000000000]              
	float                                              LureProjectileAggroDist;                          		// 0x064C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LureProjectileAttackDist;                         		// 0x0650 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2985 ];

		return pClassPointer;
	};

	void CheckWanderingPlaySound ( );
	float GetWanderingSprintDistanceRatio ( unsigned long bNewSprint );
	bool ShouldWanderingSprint ( );
	void LureProjectileExploded ( class AProjectile* Projectile );
	void NotifyTargetInsight ( );
	void NotifyTargetLost ( );
	void eventCheckInsightTarget ( );
	unsigned char GetBattleLevel ( );
	void ResetAILevel ( int newLevel );
	bool IsCachedInsightPawn ( class APawn* Target );
	void InitAggroSys ( );
	void DebugDrawSimulateThrow ( TArray< struct FVector > StepLoc );
	bool AwareGrenade ( );
	void SuppressiveFireEnd ( );
	bool IsThrowableWeapon ( class ASFWeapon* W );
	void ChangeThrowableWeapon ( );
	void CommandBombingSupport ( class AActor* EventInstigator );
	void RequestBombingSupport ( class AActor* Target );
	bool HasThrowableWeapon ( );
	bool eventPassSpecialBombEffect ( );
	float GetSpreadTargetDistSq ( );
	void UpdateFlashBangEffect ( );
	void eventNotifyStartFlashBangEffect ( );
	void eventNotifyEndFlashBangEffect ( );
	float GetSpreadAdjust ( );
	bool IsCampingPoint ( class AActor* Target );
	unsigned char GetNeededNavPointType ( );
	void RoammingTargetReached ( class AActor* Target );
	bool NeedChangeFireTarget ( class AActor* NewTarget );
	void SurpriseNewEnemy ( class AActor* SeenEnemy );
	bool CheckLureProjectileTarget ( class AActor* NewTarget );
	void eventNotifyEnemyPerceptionRange ( class AActor* NewTarget );
	class AActor* GetFocusTarget ( );
	float GetTacticMoveDir ( );
	struct FVector GetPointCampingDist ( struct FVector vOrg );
	float GetPointCampingTime ( );
	float GetTacticMoveDelay ( );
	float GetRecommRange ( );
	float GetWeaponRange ( );
	void OnAILookAt ( class USFSeqAct_AILookAt* inAction );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void ReachedMoveGoal ( );
	bool Stopped ( );
	bool LoseEnemy ( );
	void ClearMovementInfo ( unsigned long bSkipCombatZones );
	void eventSetCurrentCombatZone ( class ACombatZone* NewCZ );
	void eventSetPendingCombatZone ( class ACombatZone* NewCZ );
	void ClearCombatZones ( );
	void OnAIFreeze ( class USFSeqAct_AIFreeze* FreezeAction );
	struct FRotator DefaultGetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void Restart ( unsigned long bVehicleTransition );
	void eventSoakStop ( struct FString problem );
	bool IsReloading ( );
	bool IsFiring ( );
	void Initialize ( float InSkill );
	void Reset ( );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	void TurnoffHeard ( );
	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	void OnAIStopFire ( class USFSeqAct_AIStopFire* FireAction );
	void StopFiring ( );
	void eventStartFiring ( float InBurstsToFire );
	void TimedFireWeaponAtScriptedTarget ( );
	void OnAIStartFireAt ( class USFSeqAct_AIStartFireAt* FireAction );
	bool FireWeaponAt ( class AActor* A );
	void ReadyForLift ( );
	void eventSpawnedByKismet ( );
	void Destroyed ( );
	float GetFireInterval ( );
	void eventSeePlayer ( class APawn* Seen );
	void DebugDrawAnchorPoly ( );
	void DoJump ( );
	bool NeedWeapon ( );
	void DoFireTargetTest ( int Level );
	void ShouldCrouch ( unsigned long bNewCrouch );
	bool ReadyToFire ( );
	bool ObstructionPawn ( class ASFPawn* Other, struct FVector vBumpDir );
	struct FWeaponInventorySet GetWeaponInventoryInfo ( int myInvSetSlot );
	bool IsUseHumanInventory ( );
	void UpdateTeamIndex ( unsigned char NewTeamIndex );
	bool PostRestartPlayer ( class ASFGameInfo* newGameInfo );
	bool PreRestartPlayer ( unsigned long IsMatchInProgress );
	void InitPlayerReplicationInfo ( );
	void MoveCommandPopped ( );
	bool HeadShotSuccess ( );
	void ActiveBossSkill ( unsigned long bSel );
	void TryChangeMoveTarget ( class AActor* OldTarget );
	bool TargetIsAliveAndWell ( class AActor* TargetActor );
	void EndCombat ( );
	void FailCombat ( );
	void SuccessCombat ( );
	bool CheckCombatContinue ( );
	bool CheckValideTarget ( );
	void PrepareCombat ( );
	bool ShouldWalk ( struct FVector IntermediatePoint, unsigned long bFinalApproach );
	bool SetLogInfoInit ( int nSet );
	bool IsPawnVisibleViaTrace ( class AActor* ActorToCheck );
	bool CanSeePawn ( class APawn* Seen );
	bool CheckAttackFrustum ( class AActor* TargetActor );
	void UnlockMovement ( );
	void UnregUnreachableTarget ( class AActor* myTarget );
	void RegUnreachableTarget ( class AActor* myTarget );
	void ClearUnreachableTargets ( );
	bool IsUnreachableTarget ( class AActor* Target );
	bool IsValidTarget ( class AActor* NewTarget );
	bool NeedReload ( );
	int GetAIEnemyIndex ( );
	bool CheckInterruptCombatTransitions ( );
	void CommandAttack ( );
	float GetEnemyDistancePreference ( class AActor* TargetActor );
	bool TryTargetChange ( class AActor* NewTarget );
	void Celebrate ( class AActor* Target, float MinTime );
	void TargetMoved ( class AActor* MovedTarget, class UAIReactChannel* OrigChannel );
	void AddReactionsTargetMoved ( class ASFAIController* AI, float Distance );
	float GetExtraRollingDistance ( );
	void RollingAttackCommandEnd ( unsigned long bResult );
	void RollingAttackStart ( );
	void SearchFallbackPath ( class AActor* myTarget );
	void SearchOtherTarget ( class AActor* myTarget );
	bool CheckTooCloseTarget ( );
	bool TargetDie ( );
	void NotifyDmgFromOtherEnemy ( class AActor* Attacker );
	void NotifyEnemyTooNear ( );
	void NotifyEnemyOutOfRange ( );
	void RequestSquadChange ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	void NotifyCombatResult ( unsigned long bSuccess );
	bool CheckAIWeaponActive ( );
	int GetNewSelectedWeapon ( );
	int ChangeAIWeapon ( );
	int SelectBestWeapon ( );
	bool SetToRandomEnemy ( );
	bool SetToWeakEnemy ( );
	bool SetToSkillfulEnemy ( );
	bool SetToNearstEnemy ( unsigned long bChkRange, unsigned long bIgnoreSquadCharge );
	bool SetToLastestOffendEnemy ( );
	class ASFHeadQuarters* GetHeadQuarter ( );
	void NotifyFinalApproach ( float fTime, struct FVector vLoc );
	bool MoveToTarget ( class AActor* TargettoMove );
	void ClearAICommand ( );
	int GetUniqueCandidateTarget ( unsigned char SwitchCond );
	void GetRandomLiveEnemy ( class APawn** BestP );
	void GetWeakPlayer ( class APawn** Best );
	void GetSkillfulEnemy ( class APawn** Best );
	bool IsTargetablePawn ( class APawn* P );
	void GetNearestEnemy ( float myRecognizeRadius, unsigned long bIgnoreSquadCharge, class APawn** Best );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void SetMyFirstTarget ( );
	bool CanAttackByTrace ( class AActor* Other );
	bool CanAttack ( class AActor* Other );
	bool ShouldAltAttack ( );
	void StopMovement ( );
	void DoTaunt ( class AActor* NewViewTarget, float MinTime );
	void DoDashStun ( class AActor* NewViewTarget, float MinTime );
	void DoStun ( class AActor* NewViewTarget, float MinTime );
	void StartEvadeGrenade ( class ASFProjectile* Proj );
	void PostJumpAttack ( );
	void PostAttack ( );
	void PreAttack ( );
	void NotifyDBNO ( class AController* InstigatedBy, class AController* Victim, unsigned char DBNOLevelNew );
	float eventPlayFullBodyAnim ( struct FName AnimName, int AnimIndex, float fWanaPlayTime );
	bool SetFullBodyAnim ( unsigned char AnimType, class AActor* AnimFocusActor, struct FVector AnimFocus, unsigned long AnimIgnoreNotifies, float fWanaPlayTime );
	bool GetFullBodyAnim ( unsigned char InAnimType, struct FName* OutName, int* OutIndex );
	void DoEvade ( struct FVector EvadeDir, unsigned long bClearActionDamage );
	float eventGetEvadeChanceScale ( );
	bool CanEvade ( unsigned long bCheckChanceToEvade, float InChanceToEvade, float ChanceToEvadeScale );
	void EvadeAwayFromPoint ( struct FVector DangerPoint, class APawn* Attacker, struct FVector EvadeDir );
	class UClass* GetDefaultCommand ( );
	void ReturnToIdle ( );
	bool ShouldReturnToIdle ( );
	void CheckNoticedEnemy ( );
	void BeginCombatCommand ( class UClass* CmdClass, struct FString Reason, unsigned long bForced );
	bool SelectTarget ( );
	void OptoutSquad ( class ASFSquad* mySquad );
	bool ValidEnemy ( class APawn* NewEnemy );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool SelectWeapon ( unsigned long bForceADifferentWeapon );
	bool IsRecycleDeadController ( );
	void PawnDied ( class APawn* P );
	void eventSetSquadName ( struct FName NewSquadName, unsigned long bLeader );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	bool IsMyTarget ( class APawn* TargetPawn );
	void LostTarget ( );
	bool SelectEnemy ( );
	void SetEnemy ( class AActor* NewTarget, float fNewDist );
	void eventNoticedEnemySeen ( class APawn* SeenEnemy );
	void eventNoticedEnemy ( class APawn* NewEnemy );
	void eventNoticedEnemyHeard ( class APawn* HeardEnemy, struct FName NoiseType );
	void ForceUpdateOfEnemies ( );
	void CallMoveToDir ( float Dist, struct FVector NewMoveDir );
	void CallMoveToGoal ( class AActor* NewMoveGoal, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bAllowPartialPath );
	void eventSetMoveGoal ( class AActor* NewMoveGoal, class AActor* NewMoveFocus, unsigned long bInterruptable, float OffsetDist, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bForce, unsigned long bAllowPartialPath );
	bool eventGeneratePathToLocation ( struct FVector Goal, float WithinDistance, unsigned long bAllowPartialPath );
	void AddBasePathConstraints ( );
	bool MoveIsInterruptable ( unsigned long bForce );
	bool ShouldDelayStepAside ( class APawn* GoalPawn );
	bool eventStepAsideFor ( class AActor* ChkActor );
	float GetMoveTimeOutDuration ( struct FVector Dest );
	float GetEstimatedGroundSpeedForMoveTimeout ( );
	void LogPathFailure_Internal ( class AActor* ActorPathTarget, struct FString Reason );
	void DebugLogRoute ( );
	bool IsMediumRange ( struct FVector TestLocation );
	bool IsShortRange ( struct FVector TestLocation );
	bool IsMeleeRange ( struct FVector TestLocation );
	void HandleFailedPathFind ( class AActor* MoveToActor );
	void ClearMoveAction ( );
	void NotifyNeedRepath ( );
	void StoppingMovement ( );
	void StartingMovement ( );
	bool CanSpecialAttack ( );
	bool CanEngageMelee ( );
	bool IsValidMeleeTarget ( class AActor* TargetActor );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	bool ChangeTarget ( class AActor* Other );
	bool EnableChangeTarget ( class AActor* Other );
	void InvalidateAnchor ( class ANavigationPoint* Nav );
	struct FVector eventGetAimLocation ( struct FVector StartLoc, unsigned long bActuallyFiring, class AActor* AimTarget );
	bool ReceivedDamage ( int Damage, class APawn* DamageInstigator, unsigned long bDirectDamage, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void NotifyTakeDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void WarnProjExplode ( class AProjectile* Proj );
	void ReceiveProjectileWarning ( class AProjectile* Proj );
	void eventNotifyLostEnemyVisibility ( class APawn* LostEnemy );
	void eventNotifyEnemyBecameVisible ( class APawn* VisibleEnemy, float TimeSinceLastVisible );
	void SetFailedPathToEnemy ( class APawn* TestEnemy, float Offset );
	bool FailedPathToEnemyRecently ( class APawn* TestEnemy );
	float GetEnemyVisibleDuration ( class APawn* EnemyPawn );
	float TimeSinceLastSeenEnemy ( class APawn* EnemyPawn, unsigned long bUnseenIfNotFound );
	void SetLevelOfDifficulty ( unsigned char InDifficulty );
	void GetInventory ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	void AddReactionsOutOfRange ( class ASFAIController* AI, float Range );
	void AddReactions ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	bool IsFriendly ( class AController* TestPlayer );
	bool IsFriendlyPawn ( class APawn* TestPlayer );
	bool ReachedDestination ( struct FVector Start, struct FVector Dest );
	struct FVector GetEnemyLocation ( class APawn* TestPawn, unsigned char LT );
	struct FVector GetFireTargetLocation ( unsigned char LT );
	class AActor* eventGetTetherActor ( );
	bool ProcessStimulus ( class APawn* E, unsigned char Type, struct FName EventName );
	bool IgnoreNotifies ( );
	bool IsEnemyVisible ( class APawn* EnemyPawn );
	bool HasValidTarget ( class AActor* TestTarget );
	bool ShouldCheckToSeeEnemy ( class APawn* E, struct FVector* LineChkStasrt, struct FVector* LineChkEnd );
	bool GetNavigationPointsNear ( struct FVector chkLocation, float ChkDistance, TArray< class ANavigationPoint* >* Nodes );
	bool AbortCommand ( class UGameAICommand* AbortCmd, class UClass* AbortClass );
	void PopCommand ( class UGameAICommand* ToBePoppedCommand );
	void PushCommand ( class UGameAICommand* NewCommand );
	void NotifyEndGame ( );
	bool GameMatchInProgress ( );
	void PostBeginPlay ( );
};

UClass* ASFAIController::pClassPointer = NULL;

// Class SFGame.AIReactCondition_Base
// 0x0024 (0x0060 - 0x003C)
class UAIReactCondition_Base : public UObject
{
public:
	TArray< struct FName >                             AutoSubscribeChannels;                            		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             SubscribedChannels;                               		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSuppressed : 1;                                  		// 0x0054 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAlwaysNotify : 1;                                		// 0x0054 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActivateWhenBasedOnInterpActor : 1;              		// 0x0054 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bActivateWhenBasedOnPawn : 1;                     		// 0x0054 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOneTimeOnly : 1;                                 		// 0x0054 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              TimerInterval;                                    		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimerLastActivationTime;                          		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2987 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	void eventUnSuppress ( );
	void eventSuppress ( );
	void eventInitialize ( );
	void UnsubscribeAll ( );
	void SubscribeToMyChannels ( );
};

UClass* UAIReactCondition_Base::pClassPointer = NULL;

// Class SFGame.AIReactCond_Conduit_Base
// 0x001C (0x007C - 0x0060)
class UAIReactCond_Conduit_Base : public UAIReactCondition_Base
{
public:
	struct FName                                       OutputChannelName;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              MinTimeBetweenActivations;                        		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              LastActivationTime;                               		// 0x006C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OutputFunction__Delegate;                       		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2989 ];

		return pClassPointer;
	};

	void Output ( class AActor* InInstigator, class UAIReactChannel* InOriginatingChannel );
	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	void OutputFunction ( class AActor* EventInstigator, class UAIReactChannel* OrigChannel );
};

UClass* UAIReactCond_Conduit_Base::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyMoved
// 0x0014 (0x0090 - 0x007C)
class UAIReactCond_EnemyMoved : public UAIReactCond_Conduit_Base
{
public:
	float                                              DistanceThreshold;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLastThreshPosPair >                EnemyTreshList;                                   		// 0x0080 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                RingBufIndex;                                     		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2991 ];

		return pClassPointer;
	};

	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool IsEnemyInNewLocation ( class APawn* TestEnemy );
};

UClass* UAIReactCond_EnemyMoved::pClassPointer = NULL;

// Class SFGame.AIReactionManager
// 0x0068 (0x00A4 - 0x003C)
class UAIReactionManager : public UObject
{
public:
	TArray< struct FIntrinsicChannel >                 IntrinsicChannels;                                		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0048 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.AIReactionManager.ChannelMap
	class UClass*                                      DefaultChannelClass;                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAIReactChannel* >                   PollChannels;                                     		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAllReactionsSuppressed : 1;                      		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UAIReactChannel* >                   BasicPerceptionChannels;                          		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2993 ];

		return pClassPointer;
	};

	void IncomingDamage ( class APawn* DamageInstigator, unsigned long bDirectDamage, class UClass* DamageType, struct FTraceHitInfo HitInfo, struct FVector LastInstigatorLoc, int DamageAmt, struct FName ChannelName );
	class UAIReactChannel* GetChannelFor ( struct FName ChannelName );
	void Wipe ( );
	void Initialize ( );
	void NudgeChannel ( class AActor* EventInstigator, struct FName ChannelName );
	void NudgePerceptionChannel ( class AActor* EventInstigator, unsigned char Pt );
	class UAIReactCondition_Base* FindReactionByType ( class UClass* Type, unsigned long bDeepSearch );
	void UnSuppressReaction ( class UAIReactCondition_Base* ReactCondition );
	void UnSuppressReactionsByType ( class UClass* Type, unsigned long bDeepSearch );
	void SuppressReaction ( class UAIReactCondition_Base* ReactCondition );
	void UnSuppressChannel ( struct FName ChannelName );
	void SuppressChannel ( struct FName ChannelName );
	void eventUnSuppressAll ( );
	void eventSuppressAll ( );
	void UnSuppressAllChannels ( );
	void SuppressAllChannels ( );
	void SuppressReactionsByType ( class UClass* Type, unsigned long bDeepSearch );
	bool UnSubscribe ( class UAIReactCondition_Base* Condition, struct FName ChannelName );
	void Subscribe ( class UAIReactCondition_Base* Condition, struct FName ChannelName );
};

UClass* UAIReactionManager::pClassPointer = NULL;

// Class SFGame.Checkpoint
// 0x0078 (0x00B4 - 0x003C)
class UCheckpoint : public UObject
{
public:
	TArray< struct FLevelRecord >                      LevelRecords;                                     		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            KismetData;                                       		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FActorRecord >                      ActorRecords;                                     		// 0x0054 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FActorRecord >                      LoginActorRecords;                                		// 0x0060 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FInstigatorActorRecord >            InstigatorActorRecords;                           		// 0x006C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            ActorClassesToDestroy;                            		// 0x0078 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UClass* >                            LoginActorClasses;                                		// 0x0084 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UClass* >                            PauseActorClasses;                                		// 0x0090 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UClass* >                            ExcludeInstigatorClasses;                         		// 0x009C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UClass* >                            DontSpawnClasses;                                 		// 0x00A8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2995 ];

		return pClassPointer;
	};

	void eventPostSaveCheckpoint ( );
	void eventPreSaveCheckpoint ( );
	void eventPostLoadCheckpoint ( );
	void eventPreLoadCheckpoint ( );
};

UClass* UCheckpoint::pClassPointer = NULL;

// Class SFGame.CombatZone
// 0x00A4 (0x0304 - 0x0260)
class ACombatZone : public AVolume
{
public:
	struct FString                                     ZoneName;                                         		// 0x0260 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                WavePointsRemaining;                              		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ZoneGuid;                                         		// 0x0270 (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      MaxOccupants;                                     		// 0x0280 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MaxResidents;                                     		// 0x0281 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DelayMovesForTeam;                                		// 0x0282 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ZoneType;                                         		// 0x0283 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovementModeOverride;                             		// 0x0284 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APawn* >                             PendingOccupants;                                 		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APawn* >                             Occupants_RED;                                    		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APawn* >                             Occupants_BLUE;                                   		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APawn* >                             Residents_RED;                                    		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APawn* >                             Residents_BLUE;                                   		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Priority_RED;                                     		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Priority_BLUE;                                    		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDelayMovesAtMaxOccupancy : 1;                    		// 0x02CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FActorReference >                   CoverSlotRefs;                                    		// 0x02D0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FActorReference >                   MyNavRefs;                                        		// 0x02DC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class AFauxPathNode*                               NetworkNode;                                      		// 0x02E8 (0x0004) [0x0000000004020003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_EditInline )
	struct FVector                                     ZoneCenter;                                       		// 0x02EC (0x000C) [0x0000000000000002]              ( CPF_Const )
	TArray< class AActor* >                            AmbushTargets;                                    		// 0x02F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2997 ];

		return pClassPointer;
	};

	struct FString GetHumanReadableName ( );
	bool CheckForMovementDelay ( class ASFAIController* AI );
	void SetEnabled ( unsigned long bNewEnabled );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void eventRemoveResident ( class APawn* OldResident );
	void eventAddResident ( class APawn* NewResident );
	void eventRemoveOccupant ( class APawn* OldOccupant );
	void eventAddOccupant ( class APawn* NewOccupant );
	void SetMaxResidents ( unsigned char NewMax );
	bool IsResident ( class APawn* P );
	bool IsOccupant ( class APawn* P );
	bool IsValidZoneFor ( class ASFAIController* AI, unsigned long bResidenceQuery );
	float GetPriority ( class ASFAIController* AI );
	void PostBeginPlay ( );
};

UClass* ACombatZone::pClassPointer = NULL;

// Class SFGame.DrawSphereComponentWhenSelecting
// 0x0000 (0x0200 - 0x0200)
class UDrawSphereComponentWhenSelecting : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2999 ];

		return pClassPointer;
	};

};

UClass* UDrawSphereComponentWhenSelecting::pClassPointer = NULL;

// Class SFGame.FauxPathNode
// 0x0000 (0x02FC - 0x02FC)
class AFauxPathNode : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3001 ];

		return pClassPointer;
	};

};

UClass* AFauxPathNode::pClassPointer = NULL;

// Class SFGame.Goal_SquadFormation
// 0x0018 (0x0064 - 0x004C)
class UGoal_SquadFormation : public UPathGoalEvaluator
{
public:
	TArray< struct FFormationEvalInfo >                PositionList;                                     		// 0x004C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class ASFAIController*                             SeekerAI;                                         		// 0x0058 (0x0004) [0x0000000000000000]              
	int                                                PositionIdx;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	class ASFSquadFormation*                           Formation;                                        		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3003 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool SquadFormation ( class APawn* P, class ASFAIController* inSeekerAI, class ASFSquadFormation* inFormation, int inPositionIdx );
	void ClearPositionList ( );
};

UClass* UGoal_SquadFormation::pClassPointer = NULL;

// Class SFGame.Helicopter
// 0x0008 (0x02BC - 0x02B4)
class AHelicopter : public AInterpActor
{
public:
	struct FName                                       currState;                                        		// 0x02B4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3005 ];

		return pClassPointer;
	};

	void InitLocation ( );
	struct FName GetState ( );
	void SetVisible ( unsigned long bFlag );
	void Init ( );
	void ClientReset ( );
	void Reset ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AHelicopter::pClassPointer = NULL;

// Class SFGame.LeapReachSpec
// 0x0010 (0x00A0 - 0x0090)
class ULeapReachSpec : public UAdvancedReachSpec
{
public:
	struct FVector                                     CachedVelocity;                                   		// 0x0090 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              RequiredJumpZ;                                    		// 0x009C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3007 ];

		return pClassPointer;
	};

};

UClass* ULeapReachSpec::pClassPointer = NULL;

// Class SFGame.SFAirPathNode
// 0x0000 (0x0304 - 0x0304)
class ASFAirPathNode : public AVolumePathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3009 ];

		return pClassPointer;
	};

};

UClass* ASFAirPathNode::pClassPointer = NULL;

// Class SFGame.SFAISpawnManager
// 0x0104 (0x0328 - 0x0224)
class ASFAISpawnManager : public AActor
{
public:
	unsigned char                                      SpawnPointType;                                   		// 0x0224 (0x0001) [0x0000000000000000]              
	unsigned char                                      Difficulty;                                       		// 0x0225 (0x0001) [0x0000000000000000]              
	unsigned char                                      BeSpawnTeam;                                      		// 0x0226 (0x0001) [0x0000000000000000]              
	class ACombatZone*                                 CurrentCombatZone;                                		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StandardLocation;                                 		// 0x022C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxWaves;                                         		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      ArrivedMaxWaves : 1;                              		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bUseRandomRespawn : 1;                            		// 0x023C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseAllyAI : 1;                                   		// 0x023C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      InitializeWave : 1;                               		// 0x023C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      Freeze : 1;                                       		// 0x023C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPauseWhenAllSpawn : 1;                           		// 0x023C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              DefaultEndOfRoundDelay;                           		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              EndOfLastRoundDelay;                              		// 0x0244 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EliminateAllEnemyTime;                            		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentWave;                                      		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                WavePointsRemaining;                              		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                OldWavePointsRemaining;                           		// 0x0254 (0x0004) [0x0000000000000000]              
	TArray< struct FsWaveInfo >                        WaveInfoList;                                     		// 0x0258 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                VeryHardLevelMaxWave;                             		// 0x0264 (0x0004) [0x0000000000000000]              
	TArray< int >                                      EnemyListAliveCount;                              		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              WaveSpawningStartTime;                            		// 0x0274 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            LastEnemyStartSpot;                               		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FVector                                     SpawningEnemySize;                                		// 0x027C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinStartRating;                                   		// 0x0288 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  EnemyStartSpots;                                  		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDummyMemory >                      DummyRegister;                                    		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DummyCountMax;                                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	struct FString                                     DummyName;                                        		// 0x02A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxAlive;                                         		// 0x02B4 (0x0004) [0x0000000000000000]              
	class ASFTeamInfo*                                 SFTI[ 0x8 ];                                      		// 0x02B8 (0x0020) [0x0000000000000000]              
	int                                                MultipleProportions;                              		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                ConcurrentMinAICount;                             		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              PauseSpawnTime;                                   		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              PauseSpawnTimeNew;                                		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                PassedWaveCounter;                                		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceMaxAliveRatio;                               		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceEndOfRoundDelay;                             		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MultiplyValueForAliveRatio;                       		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAIClassInfo >                      arrAIClass;                                       		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AIPawnScaleRate;                                  		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       EventExtermination;                               		// 0x0308 (0x0008) [0x0000000000000000]              
	TArray< class APawn* >                             WaveAIs;                                          		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClearPassedWave__Delegate;                    		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3011 ];

		return pClassPointer;
	};

	void eventOnToggle ( int nToggle );
	void DisplayWaveInfo ( );
	bool SetForceWaveValue ( float NewMaxAliveRatio, float NewEndOfRoundDelay, float NewMultiplyValueForAliveRatio, unsigned long bToggle );
	void OnPvEWaveInfo ( class USFSeqAct_PvEWaveInfo* Action );
	void PauseSpawn ( float fTime );
	unsigned char GetGameDifficulty ( );
	void OnChangedEnemyList ( );
	void ChangeEnemyCount ( int Index, int Value );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void ProcessServerTravel ( );
	void UpdateBOTCount ( );
	int CalculateMaxEnemiesInSameTime ( );
	void SpawnBOT ( int MaxNum, unsigned long bUseCheat, unsigned char InTeamIndex, struct FString AIName, int Choice );
	bool GetAIClass ( int* AIType, class UClass** PawnClass, class UClass** ControllerClass );
	int LoadAIClass ( int AIType );
	void InitAIClassInfo ( );
	bool SpawnDummy ( int MaxNum, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bCrouch, unsigned long bJump );
	class ASFAIController* SpawnInstantAI ( unsigned char SpawnAIType, struct FVector SpawnLoc, struct FRotator SpawnRot, class AActor* SpawnOwner );
	int GetCurrentDummyCount ( );
	void RemoveAllDummy ( );
	void RemoveDummy ( class AController* InDummy );
	bool GetDummyStruct ( class AController* InDummy, struct FDummyMemory* Dummy );
	void RegisterDummy ( class AController* InDummy, struct FVector InLocation, struct FRotator InRotation, unsigned long InCrouch, unsigned long InJump );
	void SetCurrentWaveInfos ( );
	int GetPlayerCounter ( );
	void ClearPassedWave ( );
	void StartNextWave ( );
	int GetPassedWaveCounter ( );
	void PassedWave ( struct FScriptDelegate InOnClearPassedWave );
	void NotifyBossClear ( class ASFPlayerController* PCBossKiller );
	void NotifyBossSpawned ( );
	void ForceGC ( );
	void NotifyEndCurrentWave ( );
	void NotifyStartCurrentWave ( );
	void NotifyArriveMaxWave ( );
	float AssessNearbyEnemies ( class ANavigationPoint* N, unsigned long bDoTraceCheck );
	float RateEnemyStart ( class ANavigationPoint* N, unsigned long bDoTraceCheck );
	class ANavigationPoint* FindSpawnPoint ( class UClass* PawnClass, unsigned char InTeam, int AIType );
	void SetStandardLocation ( class AActor* InStandardActor );
	class ACombatZone* GetUsableCombatZone ( struct FVector TargetLocation );
	class ANavigationPoint* PickSpawnPoint ( unsigned long bSkipChecks, struct FVector SpawnExtent );
	bool CheckUniqueness ( class UClass* PawnClass );
	void CheckValidSpawn ( unsigned long bUseCheat, TArray< int >* ValidSpawn );
	int CheckValidSpawnIndex ( );
	void NotifyMatchInProgress ( );
	void NotifyBeginPendingMatch ( );
	void SetDefaultDummyName ( struct FString NewName );
	void SetWaveInfos ( );
	void PostBeginPlay ( );
	void OnClearPassedWave ( );
};

UClass* ASFAISpawnManager::pClassPointer = NULL;

// Class SFGame.SFAIWaveInfo_DataStoreBase
// 0x0000 (0x003C - 0x003C)
class USFAIWaveInfo_DataStoreBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3013 ];

		return pClassPointer;
	};

	void GetAllResourceAISpawnInfoDataStores ( class UClass* DataStoreClass, TArray< class USFAIWaveInfo_DataStoreBase* >* DataStores );
};

UClass* USFAIWaveInfo_DataStoreBase::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByRandom
// 0x0000 (0x012C - 0x012C)
class USFAnimBlendByRandom : public UAnimNodeRandom
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3015 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByRandom::pClassPointer = NULL;

// Class SFGame.SFAwardManager
// 0x000C (0x0048 - 0x003C)
class USFAwardManager : public UObject
{
public:
	TArray< class UClass* >                            AwardClassList;                                   		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3017 ];

		return pClassPointer;
	};

	void PROCESSEVENT ( struct FName EventType, int Param1, int Param2, class UObject* Obj );
	void ProcessAward ( class UClass* AwardClass, struct FASValue AwardValue );
	void AWARDEARNED ( struct FName AwardName, struct FASValue AwardValue );
	class UClass* FindAwardClass ( struct FName AwardName );
	void release ( );
	void Init ( );
	void ReleaseAwardData ( );
	void InitAwardData ( );
};

UClass* USFAwardManager::pClassPointer = NULL;

// Class SFGame.SFBaseAward
// 0x0008 (0x0044 - 0x003C)
class USFBaseAward : public UObject
{
public:
	struct FName                                       AwardName;                                        		// 0x003C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3019 ];

		return pClassPointer;
	};

	void AWARDEARNED ( struct FASValue AwardValue );
};

UClass* USFBaseAward::pClassPointer = NULL;

// Class SFGame.SFBaseCondition
// 0x000C (0x0048 - 0x003C)
class USFBaseCondition : public UObject
{
public:
	TArray< struct FName >                             AwardList;                                        		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3021 ];

		return pClassPointer;
	};

	void PROCESSEVENT ( struct FName EventType, int Param1, int Param2, class UObject* Obj );
	void eventrelease ( );
	void eventInit ( );
};

UClass* USFBaseCondition::pClassPointer = NULL;

// Class SFGame.SFAppraisalCondition
// 0x0078 (0x00C0 - 0x0048)
class USFAppraisalCondition : public USFBaseCondition
{
public:
	TArray< struct FAppraisalData >                    ARAppraisalInfo;                                  		// 0x0048 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    SNAppraisalInfo;                                  		// 0x0054 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    MGAppraisalInfo;                                  		// 0x0060 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    SMGAppraisalInfo;                                 		// 0x006C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    SGAppraisalInfo;                                  		// 0x0078 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    KnifeAppraisalInfo;                               		// 0x0084 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    ThrowingKnifeAppraisalInfo;                       		// 0x0090 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    ArrowAppraisalInfo;                               		// 0x009C (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    GrenadeAppraisalInfo;                             		// 0x00A8 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAppraisalData >                    ETCAppraisalInfo;                                 		// 0x00B4 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3023 ];

		return pClassPointer;
	};

	int GetGrade ( TArray< struct FName > EventType, int RealRank, int Score, unsigned char WeaponType, int ScoreIndex, struct FAppraisalData* ResultData );
	int GetNearestRealRank ( TArray< struct FName > EventType, int RealRank, unsigned char WeaponType, int ScoreIndex );
	int GetGoalScore ( struct FAppraisalData InAppraisalData, int nEventIndex );
	bool IsMatchedEventType ( TArray< struct FName > EventType, struct FAppraisalData InAppraisalData, int nEventIndex );
	void PROCESSEVENT ( struct FName EventType, int Param1, int Param2, class UObject* Obj );
	bool CanOverrideGrade ( int CurrentGrade, int NewGrade );
	void release ( );
	void Init ( );
};

UClass* USFAppraisalCondition::pClassPointer = NULL;

// Class SFGame.SFChallengeListCondition
// 0x0154 (0x019C - 0x0048)
class USFChallengeListCondition : public USFBaseCondition
{
public:
	TArray< struct FSChallengeMedalRange >             MedalRangeList;                                   		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FChallengeData >                    AllChallengeDataList;                             		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FChallengeLocalized >               AllChallengeLocalizedList;                        		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x006C (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFChallengeListCondition.ChallengeListByEvent
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x00A8 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFChallengeListCondition.DefaultChallengeListByEvent
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00E4 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFChallengeListCondition.EventNameBySupplyCode
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0120 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFChallengeListCondition.SavedScoreBySupplyCode
	TArray< struct FChallengeProgressData >            CompleteChallengeTotalList;                       		// 0x015C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FChallengeProgressData >            InvalidateChallengeList;                          		// 0x0168 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FChallengeData >                    CompleteMessageList;                              		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                GameModeID;                                       		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MapID;                                            		// 0x0184 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TotalPlayerCounter;                               		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RecvWeaponProgressionTask;                        		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSWeaponProgressionTask >           WeaponProgressionTaskArray;                       		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3025 ];

		return pClassPointer;
	};

	void GetWeaponProgressionUnlockItem ( struct FName SupplyCode, int TaskIndex, TArray< int >* OutItemArray );
	void GetWeaponProgressionTaskBySupplyCode ( struct FString ItemCode, TArray< struct FSWeaponProgressionTask >* OutWeaponProgressionTaskArray );
	void PKT_GetWeaponProgressionTask_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetWeaponProgressionTask_REQ_OK ( class UPacket* recvPacket );
	bool IsWeaponProgressionRewardItem ( int ItemId );
	bool IsWeaponProgressionItem ( struct FString ItemCode, struct FName* OutSupplyCode );
	int eventGetGamingRoomPlayingUserCounter ( );
	int eventGetMapID ( );
	int eventGetGameModeID ( );
	bool GetChellengeLocalizedByEmblemID ( int emblem_id, struct FChallengeLocalized* Challenge_Localized );
	bool GetChellengeDataByEmblemID ( int emblem_id, struct FChallengeData* ChallengeData );
	int GetEmblemID ( struct FName SupplyCode, int task_index );
	bool IsCompletedChallenge ( struct FName SupplyCode, int TaskIndex );
	unsigned char GetMedalType ( int challenge_point );
	struct FChallengeProgressData GetCompleteChallengeData ( struct FName SupplyCode, int task_index );
	void InitChallengeEventData ( struct FName SupplyCode, int CurrScore );
	void NotifyChallengeUpdated ( struct FName SupplyCode, int TaskIndex, int CurrScore, unsigned long IsCompleted );
	void UpdateAccomplishedList ( struct FName SupplyCode, int TaskIndex, struct FTime_t Date, int CurrScore, unsigned long bIgnoreCheckScore );
	void AddCompleteChallengeTotalList ( struct FChallengeProgressData InChallengeData );
	struct FChallengeProgressData GetChallengeProgressData ( struct FName SupplyCode, int TaskIndex );
	struct FChallengeProgressData GetWorkInProgressChallengeList ( struct FName SupplyCode );
	void AddInvalidateChallengeList ( struct FChallengeData currData, int CurrScore );
	void SendToServerInvalidateChallengeList ( unsigned long bInLobby );
	void ClearChallengeListData ( );
	void PROCESSEVENT ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	void CheckRankData ( );
	void NotifyCompleteMessage ( struct FChallengeData* CompeteData );
	void UpdateCompleteChallengeList ( struct FName EventType, int Param1, int Param2, class UObject* Obj, TArray< struct FChallengeData >* UpdateList );
	void HACKChallengeScore ( struct FName SupplyCode, int Score, unsigned long bForceUpdate );
	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	void Init ( );
	bool IsPointInChallengeRange ( struct FName EventType, int CurPoint );
	int GetEventKeyFromChallengeData ( struct FChallengeData* ChallengeEventData );
	void AddSavedScore ( struct FName SupplyCode, int Value );
	void SetSavedScore ( struct FName SupplyCode, int Value );
	int GetSavedScore ( struct FName SupplyCode );
	void ClearSavedScore ( );
	void GetMatchedEvent ( struct FName EventType, int Param1, int Param2, struct FString strWeaponType, struct FString strWeaponCode, TArray< struct FChallengeData >* UpdateList );
	int GetLastTaskIndex ( struct FName SupplyCode );
	int GetLastInCompleteTask ( struct FName SupplyCode );
	struct FChallengeLocalized GetChallengeLocalized ( struct FName SupplyCode, int TaskIndex );
	struct FChallengeData GetChallengeData ( struct FName SupplyCode, int TaskIndex );
	struct FName GetEventTypeFromSupplyCode ( struct FName SupplyCode );
	struct FChallengeData RemoveChallengeListBySupplyCode ( struct FName SupplyCode, int TaskIndex );
	void InitChallengeList ( );
};

UClass* USFChallengeListCondition::pClassPointer = NULL;

// Class SFGame.SFBaseEventData
// 0x0104 (0x0140 - 0x003C)
class USFBaseEventData : public UObject
{
public:
	struct FName                                       EventType;                                        		// 0x003C (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             SupportedEventsType;                              		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0050 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFBaseEventData.SavedINTData
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x008C (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFBaseEventData.InvalidINTData
	unsigned char                                      UnknownData02[ 0x3C ];                            		// 0x00C8 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFBaseEventData.SavedStringData
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0104 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFBaseEventData.InvalidStringData

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3027 ];

		return pClassPointer;
	};

	int MakeDword ( int HiWord, int LowWord );
	unsigned char GetPrimaryWeapType ( class UClass* dmgType );
	void DisplayAllData ( );
	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	bool IsMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	void eventPROCESSEVENT ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	int GetChallengeDataInvalidValue ( struct FChallengeData* ChallengeData );
	void ReturnToLobby ( );
	void eventInitEventData ( int Param1, int Param2 );
	void DecreaseINTData ( int Key, unsigned char DataType );
	void IncreaseINTData ( int Key, unsigned char DataType );
	void eventInit ( );
	unsigned char GetWeaponTypeByItemCode ( struct FName ItemCode );
	void DisplayStringData ( );
	void DisplayINTData ( );
	void AddInvalidStringData ( );
	void ClearStringData ( unsigned char DataType );
	void SetStringData ( int Key, struct FString Value, unsigned char DataType );
	struct FString GetStringData ( int Key, unsigned char DataType );
	int GetAllINTData ( unsigned char DataType );
	void AddInvalidINTData ( );
	void ClearINTData ( unsigned char DataType );
	void AddINTData ( int Key, int Value, unsigned char DataType );
	void SetINTData ( int Key, int Value, unsigned char DataType );
	int GetINTDataByHiWord ( int HiWordKey, unsigned char DataType );
	int GetINTDataByLoWord ( int LoWordKey, unsigned char DataType );
	int GetINTData ( int Key, unsigned char DataType );
};

UClass* USFBaseEventData::pClassPointer = NULL;

// Class SFGame.SFWeaponEventData
// 0x007C (0x01BC - 0x0140)
class USFWeaponEventData : public USFBaseEventData
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0140 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFWeaponEventData.SavedINTDataByWeapType
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x017C (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFWeaponEventData.InvalidINTDataByWeapType
	class USFChallengeListCondition*                   ChallengeCondition;                               		// 0x01B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3029 ];

		return pClassPointer;
	};

	int GetChallengeDataInvalidValue ( struct FChallengeData* ChallengeData );
	void eventPROCESSEVENT ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	void InitEventData ( int Param1, int Param2 );
	void ReturnToLobby ( );
	struct FName GetWeaponItemCodeBySameClass ( struct FName InEventType, struct FName ItemCode );
	void DisplayINTData ( );
	int GetAllINTData ( unsigned char DataType );
	void AddInvalidINTData ( );
	void ClearINTData ( unsigned char DataType );
	void AddINTData ( int Key, int Value, unsigned char DataType );
	void SetINTData ( int Key, int Value, unsigned char DataType );
	int GetINTData ( int Key, unsigned char DataType );
};

UClass* USFWeaponEventData::pClassPointer = NULL;

// Class SFGame.SFSpecialKillEventData
// 0x0008 (0x01C4 - 0x01BC)
class USFSpecialKillEventData : public USFWeaponEventData
{
public:
	int                                                KM_Type;                                          		// 0x01BC (0x0004) [0x0000000000000000]              
	int                                                WeaponKM_Type;                                    		// 0x01C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3031 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	bool IsMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSpecialKillEventData::pClassPointer = NULL;

// Class SFGame.SFBreakableActor
// 0x00C8 (0x02EC - 0x0224)
class ASFBreakableActor : public AActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0224 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        DefaultMeshComponent;                             		// 0x0228 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        BreakMeshComponent;                               		// 0x022C (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< class AEmitter* >                          ExplosionEmitters;                                		// 0x0230 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          ExplosionDecal;                                   		// 0x023C (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class USoundCue*                                   ExplosionSound;                                   		// 0x0240 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class URadialBlurComponent*                        RadialBlur;                                       		// 0x0244 (0x0004) [0x0000000024082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline | CPF_Deprecated )
	class USFExplosionLight*                           ExplosionLight;                                   		// 0x0248 (0x0004) [0x0000000024082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline | CPF_Deprecated )
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x024C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bDirectionalExplosion : 1;                        		// 0x0250 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	class UDrawSphereComponent*                        DamageRadiusSphere;                               		// 0x0254 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     DamageRadiusSpherePosition;                       		// 0x0258 (0x000C) [0x0000000000000000]              
	struct FName                                       currState;                                        		// 0x0264 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class ASFTrigger_PlasticBomb* >            arrPlasticBomb;                                   		// 0x026C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PassedTime;                                       		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vTriggerDmgLoc;                                   		// 0x027C (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     vTriggerDmgDir;                                   		// 0x0288 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FSModeInfo >                        FlagOfDefualtMode;                                		// 0x0294 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< struct FSModeInfo >                        FlagOfMissionMode;                                		// 0x02A0 (0x000C) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FVector                                     InitialLocation;                                  		// 0x02AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x02B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                Step1DelayTime;                                   		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Step2DelayTime;                                   		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Step3DelayTime;                                   		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 DamageCauser;                                     		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FOriginMtrlData >                   DefaultMeshOriginMtrlDatas;                       		// 0x02D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FOriginMtrlData >                   BreakMeshOriginMtrlDatas;                         		// 0x02E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3033 ];

		return pClassPointer;
	};

	void NotifyAttachedPawn ( );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void OnSetOutLine ( class USeqAct_SetOutLine* Action );
	void PlaySFSeqEvent ( int DamageAmount, struct FName EventName );
	void OnReset ( class USFSeqAct_Reset* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void HideBombEffects ( unsigned long bInit );
	void ShowBombEffects ( );
	void ShowEmitter ( class AEmitter* InEmitter, unsigned long bFlag );
	void SetTriggerState ( struct FName TriggerState );
	bool RegisterTrigger ( class ASFTrigger_PlasticBomb* Trigger );
	void Installed ( struct FVector vDamageLoc, struct FVector vDamageDir, class AController* Installer );
	void UpdateTrigger ( );
	unsigned char GetBreakableActorFlag ( );
	void Init ( );
	void Reset ( );
	void ChangedMaterial ( int MaterialIndex, class UMaterialInterface* Material, class UStaticMeshComponent* Mesh, TArray< struct FOriginMtrlData >* MaterialDatas );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void InitMeshComponent ( class UStaticMeshComponent* Mesh, struct FVector InLoc, struct FRotator InRot );
	void eventPreBeginPlay ( );
	void SetDefaultMesh ( unsigned long bFlag );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFBreakableActor::pClassPointer = NULL;

// Class SFGame.SFBreakableActorByDamage
// 0x0041 (0x032D - 0x02EC)
class ASFBreakableActorByDamage : public ASFBreakableActor
{
public:
	class UClass*                                      IgnoredDamageType;                                		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BombDamageThreshold;                              		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FireDamageThreshold;                              		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentDamage;                                    		// 0x02F8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class AEmitter* >                          FireEmitters;                                     		// 0x02FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USFFlickerLightByPeriod*                     FireLight;                                        		// 0x0308 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     FireLightPosition;                                		// 0x030C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExplodeTime;                                      		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FirstDamageTime;                                  		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSFBreakPartsInfo >                 arrBreakParts;                                    		// 0x0320 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      DamageIgnoreTeamIndex;                            		// 0x032C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3035 ];

		return pClassPointer;
	};

	void KillCamRestore ( class AActor* OriginalActor );
	void ShowTriggers ( unsigned long bShow );
	unsigned char GetBreakableActorFlag ( );
	bool AddDamage ( int DamageAmount );
	void ReplicatedEvent ( struct FName VarName );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* InDamageCauser );
	void PostBeginPlay ( );
};

UClass* ASFBreakableActorByDamage::pClassPointer = NULL;

// Class SFGame.SFBreakableCarPart
// 0x0004 (0x0234 - 0x0230)
class ASFBreakableCarPart : public ANote
{
public:
	class UStaticMeshComponent*                        MeshComponent;                                    		// 0x0230 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3037 ];

		return pClassPointer;
	};

};

UClass* ASFBreakableCarPart::pClassPointer = NULL;

// Class SFGame.SFBreakableGlassActor
// 0x0060 (0x0314 - 0x02B4)
class ASFBreakableGlassActor : public AInterpActor
{
public:
	unsigned char                                      NormalCollisionType;                              		// 0x02B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BrokenCollisionType;                              		// 0x02B5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      GlassDir;                                         		// 0x02B6 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UMaterialInterface*                          NormalMaterial;                                   		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMesh*                                 NormalStaticMesh;                                 		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AccumulatedDamage;                                		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       currState;                                        		// 0x02C4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class UStaticMesh* >                       BrokenStaticMeshs;                                		// 0x02CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                CrackedMaterials;                                 		// 0x02D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinCrackingDamage;                                		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBreakingDamage;                                		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleSystem* >                   BreakingParticleTemplates;                        		// 0x02EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         BreakingSounds;                                   		// 0x02F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BrokenTime;                                       		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DamageDir;                                        		// 0x0308 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3039 ];

		return pClassPointer;
	};

	bool ShouldSaveForCheckpoint ( );
	void HideAttachedProjectile ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool IsBroken ( );
	bool IsCracked ( );
	void ClientReset ( );
	void Reset ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFBreakableGlassActor::pClassPointer = NULL;

// Class SFGame.SFBreakableGlassSyncActor
// 0x0018 (0x032C - 0x0314)
class ASFBreakableGlassSyncActor : public ASFBreakableGlassActor
{
public:
	int                                                GlassSyncActorIndex;                              		// 0x0314 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UMaterialInterface*                          NormalTouchedMaterial;                            		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          CrackedTouchedMaterial;                           		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   TouchedSoundCue;                                  		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          CrackedMaterial;                                  		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bOnlyShowEnemyTouchedMaterial : 1;                		// 0x0328 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPaidBrokenScore : 1;                             		// 0x0328 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3041 ];

		return pClassPointer;
	};

	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void CheckAttachedPawn ( );
	void SetTouchedMaterial ( unsigned long bTouched );
	void SetForceFloorCheckForAttachedPawn ( );
	void PlayTouchedSound ( );
	bool eventRegisterGlassActor ( );
	void UpdateGlassState ( );
	bool IsEnemyTouchedGlass ( class AController* Attacker );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool IsSameTeam ( class AActor* TargetA, class AActor* TargetB );
	int eventGetUniqueIndex ( );
};

UClass* ASFBreakableGlassSyncActor::pClassPointer = NULL;

// Class SFGame.SFBreakableGlassSyncState
// 0x0510 (0x0734 - 0x0224)
class ASFBreakableGlassSyncState : public AReplicationInfo
{
public:
	TArray< struct FGlassStateName >                   GlassStateTable;                                  		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      GlassState[ 0xFF ];                               		// 0x0230 (0x00FF) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bNetDirtyGlassState;                              		// 0x032F (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ASFBreakableGlassSyncActor*                  GlassActors[ 0xFF ];                              		// 0x0330 (0x03FC) [0x0000000000002000]              ( CPF_Transient )
	class ASFBreakableGlassSyncState*                  NextGlassSyncState;                               		// 0x072C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bRegisterGlassActor : 1;                          		// 0x0730 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3043 ];

		return pClassPointer;
	};

	void SetGlassActorState ( class ASFBreakableGlassSyncActor* GlassActor );
	void UpdateGlassActor ( );
	class ASFBreakableGlassSyncActor* GetGlassActor ( int Index );
	void SetGlassActor ( int Index, class ASFBreakableGlassSyncActor* GlassActor );
	unsigned char eventGetGlassEnumFromStateName ( struct FName StateName );
	struct FName eventGetStateNameFromGlassEnum ( unsigned char EnumValue );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFBreakableGlassSyncState::pClassPointer = NULL;

// Class SFGame.SFCCTV_DataStoreBase
// 0x0000 (0x003C - 0x003C)
class USFCCTV_DataStoreBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3045 ];

		return pClassPointer;
	};

	void GetAllResourceCCTVDataStores ( class UClass* DataStoreClass, TArray< class USFCCTV_DataStoreBase* >* DataStores );
};

UClass* USFCCTV_DataStoreBase::pClassPointer = NULL;

// Class SFGame.SFConditionManager
// 0x000C (0x0048 - 0x003C)
class USFConditionManager : public UObject
{
public:
	TArray< class USFBaseCondition* >                  ConditionList;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3047 ];

		return pClassPointer;
	};

	class USFBaseCondition* GetCondition ( struct FName ClassName );
	void PROCESSEVENT ( struct FName EventType, int Param1, int Param2, class UObject* Obj );
	void release ( );
	void Init ( );
	void ReleaseConditionList ( );
	void InitConditionList ( );
};

UClass* USFConditionManager::pClassPointer = NULL;

// Class SFGame.SFConvoyanceTargetVolume
// 0x0000 (0x0260 - 0x0260)
class ASFConvoyanceTargetVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3049 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFConvoyanceTargetVolume::pClassPointer = NULL;

// Class SFGame.SFConvoyTargetPathNode
// 0x000C (0x0308 - 0x02FC)
class ASFConvoyTargetPathNode : public APathNode
{
public:
	int                                                OrderNumber;                                      		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PathGroup;                                        		// 0x0300 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              PrevPointDistance;                                		// 0x0304 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3051 ];

		return pClassPointer;
	};

};

UClass* ASFConvoyTargetPathNode::pClassPointer = NULL;

// Class SFGame.SFCustomPreview
// 0xB2D0 (0xB538 - 0x0268)
class ASFCustomPreview : public ASkeletalMeshCinematicActor
{
public:
	TArray< struct FCustomPreviewAnimInfo >            FullBodyAnimTypes;                                		// 0x0268 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FRotator                                    RollMin;                                          		// 0x0274 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FRotator                                    RollMax;                                          		// 0x0280 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       PlayingAnim;                                      		// 0x028C (0x0008) [0x0000000000000000]              
	unsigned long                                      bMatchresultAnimPlaying : 1;                      		// 0x0294 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSettedBoneLoc : 1;                               		// 0x0294 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsZoomingOut : 1;                                 		// 0x0294 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceHightQuality : 1;                           		// 0x0294 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bMouseMove : 1;                                   		// 0x0294 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bEnableBreathMorphing : 1;                        		// 0x0294 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bValidFaceMorphSet : 1;                           		// 0x0294 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0294 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bForceOnlySceneCaptureSee : 1;                    		// 0x0294 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	struct FString                                     PreviewName;                                      		// 0x0298 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BlinkTime;                                        		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              BlinkInterval;                                    		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetOrigLoc;                                    		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MoverOrigLoc;                                     		// 0x02B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ZoomVelocity;                                     		// 0x02C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ZoomState;                                        		// 0x02D0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MoverType;                                        		// 0x02D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreViewWeaponGroupLabel;                          		// 0x02D2 (0x0001) [0x0000000000000000]              
	unsigned char                                      Gender;                                           		// 0x02D3 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveDistMax;                                      		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveDistLimit;                                    		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      Mover;                                            		// 0x02DC (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              DeltaAccum;                                       		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TargetBoneName;                                   		// 0x02E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ZoomLimit;                                        		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomSpeed;                                        		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomStepLength;                                   		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Camera;                                           		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFAnimNodeSlotQueuing*                      FullBodyQueue;                                    		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      HelmetComp;                                       		// 0x0308 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      WeaponComp;                                       		// 0x030C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       WeaponSocketName;                                 		// 0x0310 (0x0008) [0x0000000000000000]              
	class USkeletalMeshSocket*                         WeaponSocket;                                     		// 0x0318 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	struct FName                                       HelmetSocketName;                                 		// 0x031C (0x0008) [0x0000000000000000]              
	class USkeletalMeshSocket*                         HelmetSocket;                                     		// 0x0324 (0x0004) [0x0000000000000000]              
	struct FName                                       WeaponRepairBaseSocketName;                       		// 0x0328 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    PrevMousePos;                                     		// 0x0330 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    MouseDelta;                                       		// 0x033C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      PendingCharItems;                                 		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PrevPendingCharItems;                             		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PendingWeapItems;                                 		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PrevPendingWeapItems;                             		// 0x036C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMeshInfoTable                       PendingCharacterMeshInfoTable[ 0x3D ];            		// 0x0378 (0x1D8C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMeshInfoTable                       NewCharacterMeshInfoTable[ 0x3D ];                		// 0x2104 (0x1D8C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMeshInfoTable                       PendingHelmetMeshInfoTable[ 0x3D ];               		// 0x3E90 (0x1D8C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMeshInfoTable                       NewHelmetMeshInfoTable[ 0x3D ];                   		// 0x5C1C (0x1D8C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMeshInfoTable                       PendingWeaponMeshInfoTable[ 0x3D ];               		// 0x79A8 (0x1D8C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPendingMeshInfoTable                       NewWeaponMeshInfoTable[ 0x3D ];                   		// 0x9734 (0x1D8C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTextureRenderTarget2D*                      MarkRenderTarget;                                 		// 0xB4C0 (0x0004) [0x0000000000000000]              
	class UTextureRenderTarget2D*                      ClanRenderTarget;                                 		// 0xB4C4 (0x0004) [0x0000000000000000]              
	int                                                PreViewWeaponPartMeshindex;                       		// 0xB4C8 (0x0004) [0x0000000000000000]              
	float                                              BreathMinPeriod;                                  		// 0xB4CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BreathMaxPeriod;                                  		// 0xB4D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BreathTime;                                       		// 0xB4D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             BreathParticle;                                   		// 0xB4D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BreathSocketName;                                 		// 0xB4DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMorphNodeWeight*                            MorphBreathNode;                                  		// 0xB4E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    BreathPSC;                                        		// 0xB4E8 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FRotator                                    CameraDefaultRotation;                            		// 0xB4EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      DualWeaponComp;                                   		// 0xB4F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       DualWeaponSocketName;                             		// 0xB4FC (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      AccessoryComponent;                               		// 0xB504 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       AccessorySocketName;                              		// 0xB508 (0x0008) [0x0000000000000000]              
	TArray< class USkeletalMeshComponent* >            AdditionalDualWeaponComponents;                   		// 0xB510 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class USkeletalMeshComponent*                      HairComp;                                         		// 0xB51C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0xB520 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0xB524 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PreviewWeaponID;                                  		// 0xB530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    EquipmentEffectPSC;                               		// 0xB534 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3053 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void SetDefaultCamera ( );
	struct FVector GetWeaponRepairBaseLoc ( );
	void ShowCustomPreviewDefaultMesh ( unsigned long bShow );
	int GetRotationMove ( );
	void RotationClamp ( struct FRotator* localRot );
	void MouseMove ( float fDeltaTime );
	void RotateStop ( int nPos );
	void RotateMove ( struct FRotator rPos );
	void RotateStart ( struct FRotator rPos );
	void ZoomReset ( );
	void ZoomOut ( int nPos );
	void ZoomIn ( int nPos );
	void ZoomOutMax ( );
	void ZoomInMax ( );
	void Show ( unsigned long bShow );
	void MorphBreath ( float DeltaTime );
	void CamZoom ( float DeltaTime );
	void Blink ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void SetMoverAndTarget ( );
	void UpdateWeaponComponentPostion ( float DeltaTime );
	void UpdateDualWeapon ( class USFMeshBuilder* MeshBuilderParam );
	void SetPendingWeaponItems ( TArray< int >* MCItemArray );
	class USkeletalMesh* GetWeaponAccessoryMesh ( );
	void eventAttachComponentsToSoket ( struct FName NewWeaponSocketName, class UAnimTree* WeapAnimTree, class UAnimSet* WeapAnimSet );
	void SetWeaponDetachMeshGroup ( TArray< struct FMeshGroup >* OwnerMeshGroups, TArray< struct FDetachMeshGroupInfo >* DetachMeshGroups );
	void SetNewWeaponMeshInfoTable ( TArray< struct FMeshGroup >* OwnerMeshGroups );
	void SetHelmetDetachMeshGroup ( TArray< struct FMeshGroup >* OwnerMeshGroups, TArray< struct FDetachMeshGroupInfo >* DetachMeshGroups );
	void SetNewHelmetMeshInfoTable ( TArray< struct FMeshGroup >* OwnerMeshGroups );
	void SetCharcterDetachMeshGroup ( TArray< struct FMeshGroup >* OwnerMeshGroups, TArray< struct FDetachMeshGroupInfo >* DetachMeshGroups );
	void SetNewCharacterMeshInfoTable ( TArray< struct FMeshGroup >* OwnerMeshGroups );
	void SetDetachMeshGroup ( TArray< struct FMeshGroup >* OwnerMeshGroups, TArray< struct FDetachMeshGroupInfo >* DetachMeshGroups );
	void DetachComponentsFromMeshGroups ( class USFMeshBuilder* MeshBuilder, class USkeletalMeshComponent* OwnerComponent, TArray< struct FMeshGroup >* MeshGroups );
	void SetCurrentMuzzleColor ( int CurColor );
	void CheckAttachment ( class USkeletalMeshComponent* OwnerComponent );
	void SetHair ( TArray< struct FMeshGroup > HelmetMeshGroups, TArray< struct FMeshGroup > HairMeshGroups );
	void SetHelmetHair ( TArray< struct FMeshGroup >* BodyMeshGroups );
	void eventUpdateWeaponAnimset ( );
	void ClearEffectItemAttachedComponent ( );
	void SetupEquipmentEffectPreview ( TArray< int > MCItemArray );
	void SetPendingCharacterItems ( TArray< int >* MCItemArray );
	void SetPendingItems ( TArray< int > NewItems, TArray< int >* PendingItems );
	bool CheckPendingItems ( TArray< int > PendingItems, TArray< int > NewItems, unsigned char PendingType );
	void AddFullBodyQueueAnimation ( struct FName AnimType );
	bool IsPlayingMatchResultAnim ( );
	void OnMatchresultAnimEnd ( );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void BreathEnd ( );
	void BreathStart ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void DetachComponentRecursive ( class USkeletalMeshComponent* MeshCom );
	void SetLightChannelsRecursive ( class USkeletalMeshComponent* MeshCom, struct FLightingChannelContainer Lighting_Channels );
	void SetForcedLodModelRecursive ( class USkeletalMeshComponent* MeshCom, int LODLevel );
	void eventUpdateGenderAnimSet ( unsigned char InGender, unsigned long bForceUpdate );
	void UpdateSceneCaptureOptions ( );
	void eventPostBeginPlay ( );
};

UClass* ASFCustomPreview::pClassPointer = NULL;

// Class SFGame.SFCustomWeaponPreview
// 0x0048 (0xB580 - 0xB538)
class ASFCustomWeaponPreview : public ASFCustomPreview
{
public:
	TArray< class USFParticleSystemComponent* >        MuzzleFlashPSCPreviewList;                        		// 0xB538 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FsAttachedMesh >                    AttachedMeshs;                                    		// 0xB544 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              WeaponRotationSpeed;                              		// 0xB550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentMuzzleColorIndex;                          		// 0xB554 (0x0004) [0x0000000000000000]              
	struct FString                                     CurrentMuzzleStyleID;                             		// 0xB558 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsWeaponTag : 1;                                 		// 0xB564 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsMuzzleFlash : 1;                               		// 0xB564 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsHiddenMuzzleFlash : 1;                         		// 0xB564 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                ItemId;                                           		// 0xB568 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HideBoneName;                                     		// 0xB56C (0x0008) [0x0000000000000000]              
	int                                                HideBoneIndex;                                    		// 0xB574 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayMuzzleFlashTime;                              		// 0xB578 (0x0004) [0x0000000000000000]              
	float                                              CurrentDeltaTime;                                 		// 0xB57C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3055 ];

		return pClassPointer;
	};

	void InitParticlSystemComponent ( class UClass* WeaponClass );
	void SetCurrentMuzzleColor ( int CurColor );
	void AttachMuzzleFlash ( TArray< struct FName > SocketName );
	bool SetSocketName ( unsigned long bDual, unsigned long bSilencer, TArray< struct FName >* OutSocketNameList );
	void SetupMuzzleFlash ( TArray< int > MCItemArray );
	float SetupPlayMuzzleFlashTime ( class UClass* WeapClass, int WeapType );
	void UpdatePlayMuzzleFlash ( float DeltaTime );
	void ZoomOut ( int nPos );
	void ZoomIn ( int nPos );
	void UpdateDualWeapon ( class USFMeshBuilder* MeshBuilderParam );
	void UpdateZoom ( unsigned long bIsZoomIn );
	void ClearWeaponAttachedComponent ( );
	bool GetWeaponAccessoryInfo ( class UClass* WeaponClass, struct FName* SocketName );
	void MakeAddMeshList ( TArray< int > MCItemArray );
	void GetSocketWorldLocationAndRotation ( struct FName SocketName, struct FVector* OutLocation, struct FRotator* OutRotation );
	void MakeWeaponTag ( int WeaponBodyID, int WeaponTagID );
	void SetAdditionalMeshs ( TArray< int > MCItemArray );
	void HideUnnecessaryBone ( );
	void SetFieldOfView ( float fFov );
	void ClearFieldOfView ( );
	void ClearParticlSystemComponent ( );
	void SetWeaponTagView ( );
	void UpdateWeaponTagView ( float DeltaTime );
	void MouseMove ( float fDeltaTime );
	void eventTick ( float DeltaTime );
	void SetViewCorrection ( struct FVector vLoc, struct FVector vLocZoom, struct FVector vStepLoc, struct FRotator rOrgRot, struct FRotator rStepRot, float fScale );
	void AttachComponentsToSoket ( struct FName NewWeaponSocketName, class UAnimTree* WeapAnimTree, class UAnimSet* WeapAnimSet );
	void SetHelmetHair ( TArray< struct FMeshGroup >* BodyMeshGroups );
	void SetPendingCharacterItems ( TArray< int >* MCItemArray );
};

UClass* ASFCustomWeaponPreview::pClassPointer = NULL;

// Class SFGame.SFDBProperty
// 0x0000 (0x003C - 0x003C)
class USFDBProperty : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3057 ];

		return pClassPointer;
	};

};

UClass* USFDBProperty::pClassPointer = NULL;

// Class SFGame.SFDecal
// 0x0004 (0x0318 - 0x0314)
class USFDecal : public UDecalComponent
{
public:
	float                                              LifeSpan;                                         		// 0x0314 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3059 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};

UClass* USFDecal::pClassPointer = NULL;

// Class SFGame.SFSprayDecal
// 0x0010 (0x0328 - 0x0318)
class USFSprayDecal : public USFDecal
{
public:
	float                                              fFadeTime;                                        		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            IgnoreActorClass;                                 		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3061 ];

		return pClassPointer;
	};

	bool IsIgnoreActorClass ( class UClass* ActorClass );
	void eventTick ( float DeltaTime );
	bool HasSameReceiver ( class USFSprayDecal* OtherSprayDecal );
};

UClass* USFSprayDecal::pClassPointer = NULL;

// Class SFGame.SFDecalManager
// 0x0000 (0x0254 - 0x0254)
class ASFDecalManager : public ADecalManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3063 ];

		return pClassPointer;
	};

	float GetViewAlignDecalRotation ( struct FRotator ViewRotation, struct FRotator DecalOrientation, unsigned long bBackFace );
	void Reset ( );
};

UClass* ASFDecalManager::pClassPointer = NULL;

// Class SFGame.SFDropOnlyHelmet
// 0x001C (0x0240 - 0x0224)
class ASFDropOnlyHelmet : public AActor
{
public:
	class USkeletalMeshComponent*                      HelmetMesh;                                       		// 0x0224 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0228 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     DropOffImpulse;                                   		// 0x022C (0x000C) [0x0000000000000000]              
	struct FName                                       HeadBoneName;                                     		// 0x0238 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3065 ];

		return pClassPointer;
	};

	void TakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetMeshProperties ( struct FVector ApplyImpulse, class UPhysicsAsset* NewPhyAsset, struct FVector SpawnLoc, struct FRotator SpawnRot );
	void ClientReset ( );
	void Reset ( );
};

UClass* ASFDropOnlyHelmet::pClassPointer = NULL;

// Class SFGame.SFDroppableParts
// 0x001C (0x0240 - 0x0224)
class ASFDroppableParts : public AActor
{
public:
	class USkeletalMeshComponent*                      DropMesh;                                         		// 0x0224 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0228 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     DropOffImpulse;                                   		// 0x022C (0x000C) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x0238 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3067 ];

		return pClassPointer;
	};

	void TakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void SetMeshProperties ( struct FVector ApplyImpulse, class UPhysicsAsset* NewPhyAsset, struct FVector SpawnLoc, struct FRotator SpawnRot );
	void ClientReset ( );
	void Reset ( );
};

UClass* ASFDroppableParts::pClassPointer = NULL;

// Class SFGame.SFDroppedPickupEx
// 0x002F (0x0263 - 0x0234)
class ASFDroppedPickupEx : public ADroppedPickup
{
public:
	int                                                MaxBounceCount;                                   		// 0x0234 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                BounceCount;                                      		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Bounciness;                                       		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VelocityDampingFactor;                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopSimulatingVelocityThreshhold;                 		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0248 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPickUpState : 1;                                 		// 0x0248 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bRegisterIndicator : 1;                           		// 0x0248 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              MaxFloatingValue;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatingFreq;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatingSeed;                                     		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMeshComponent*                        PickupComp;                                       		// 0x0258 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                Point;                                            		// 0x025C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      Team;                                             		// 0x0260 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      IconType;                                         		// 0x0261 (0x0001) [0x0000000000000000]              
	unsigned char                                      IconState;                                        		// 0x0262 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3069 ];

		return pClassPointer;
	};

	void PickedUpBy ( class APawn* P );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void StopSimulating ( );
	void StopBounce ( struct FVector HitNormal );
	void Bounce ( struct FVector HitLocation, struct FVector HitNormal, class AActor* Other );
	bool HandleCollision ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool ShouldBounce ( class AActor* Touched, struct FVector HitNormal, class UPrimitiveComponent* HitComponent );
	void Throw ( struct FVector ThrowVel );
	void PostBeginPlay ( );
	void NotifyPointUpdated ( );
	void eventDestroyed ( );
	void RegisterObjectIcon ( );
	void NotifyTeamChanged ( );
	void SetTeam ( unsigned char InTeam );
	void setPoint ( int nPoint );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFDroppedPickupEx::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_Health
// 0x000D (0x0270 - 0x0263)
class ASFDroppedPickup_Health : public ASFDroppedPickupEx
{
public:
	float                                              InitialSpeed;                                     		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutLineIndex;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlayerID;                                         		// 0x026C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3071 ];

		return pClassPointer;
	};

	void PickedUpBy ( class APawn* P );
	void UpdateOutLine ( );
	bool IsValidPawn ( class APawn* TargetPawn );
	void NotifyTeamChanged ( );
	void Init ( class ASFPlayerController* SFPCOwner, struct FRotator InitialRotation );
};

UClass* ASFDroppedPickup_Health::pClassPointer = NULL;

// Class SFGame.SFElevatorActor
// 0x0034 (0x02E8 - 0x02B4)
class ASFElevatorActor : public AInterpActor
{
public:
	struct FName                                       RopeMICParam;                                     		// 0x02B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AStaticMeshActor*                            RopeMeshActor;                                    		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RopeMaterialIndex;                                		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ASFTrigger_Elevator* >               arrElevatorTrigger;                               		// 0x02C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   RopeMIC;                                          		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       currState;                                        		// 0x02D4 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bPeriodicRecordingForKillCam : 1;                 		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              RecordingPeriod;                                  		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PerioicRecordingDeltaTime;                        		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3073 ];

		return pClassPointer;
	};

	void NotifyEncroachingOn ( class AActor* Other );
	void SetTriggerMIC ( unsigned long bUpButton );
	bool UsedTrigger ( );
	struct FName GetState ( );
	void SetState ( struct FName NewStateName, unsigned long bForce );
	void Init ( );
	void PostBeginPlay ( );
	void OnReset ( class USFSeqAct_Reset* Action );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFElevatorActor::pClassPointer = NULL;

// Class SFGame.SFEmitter
// 0x0008 (0x0250 - 0x0248)
class ASFEmitter : public AEmitter
{
public:
	class USoundCue*                                   Sound;                                            		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ParticleSystem;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3075 ];

		return pClassPointer;
	};

	void HideBecauseFinished ( class UParticleSystemComponent* FinishedComponent );
	void OnReset ( class USFSeqAct_Reset* Action );
	void SetLightEnvironment ( class ULightEnvironmentComponent* Light );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	void HideSelf ( );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void PostBeginPlay ( );
};

UClass* ASFEmitter::pClassPointer = NULL;

// Class SFGame.SFReplicatedEmitter
// 0x0008 (0x0258 - 0x0250)
class ASFReplicatedEmitter : public ASFEmitter
{
public:
	class UParticleSystem*                             EmitterTemplate;                                  		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              ServerLifeSpan;                                   		// 0x0254 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3077 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};

UClass* ASFReplicatedEmitter::pClassPointer = NULL;

// Class SFGame.SFSpawnedEmitter
// 0x0000 (0x0250 - 0x0250)
class ASFSpawnedEmitter : public ASFEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3079 ];

		return pClassPointer;
	};

};

UClass* ASFSpawnedEmitter::pClassPointer = NULL;

// Class SFGame.SFEmitterCameraLensEffectBase
// 0x0000 (0x0260 - 0x0260)
class ASFEmitterCameraLensEffectBase : public AEmitterCameraLensEffectBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3081 ];

		return pClassPointer;
	};

	void UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot );
	void SetCameraEffectPS ( class UParticleSystem* PS, unsigned long bDestroyOnFinish );
	void SetLifeSpan ( float InLifeSpan );
	void HideSelf ( );
};

UClass* ASFEmitterCameraLensEffectBase::pClassPointer = NULL;

// Class SFGame.SFEmitterNoSync
// 0x0018 (0x0260 - 0x0248)
class ASFEmitterNoSync : public AEmitter
{
public:
	struct FScriptDelegate                             OnFinishedCallBack;                               		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFinished__Delegate;                           		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3083 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	bool StopsProjectile ( class AProjectile* P );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnReset ( class USFSeqAct_Reset* Action );
	void Reset ( );
	void ClientReset ( );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void OnFinished ( class ASFEmitterNoSync* Emitter );
};

UClass* ASFEmitterNoSync::pClassPointer = NULL;

// Class SFGame.SFEmitterNoSync_WaterSplash
// 0x000C (0x026C - 0x0260)
class ASFEmitterNoSync_WaterSplash : public ASFEmitterNoSync
{
public:
	class APawn*                                       BasePawn;                                         		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   LocationOffset;                                   		// 0x0264 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3085 ];

		return pClassPointer;
	};

	class APawn* GetBasePawn ( );
	void Init ( class UParticleSystem* Particle, class APawn* InBasePawn, struct FVector2D InLocationOffset );
	void Reset ( );
};

UClass* ASFEmitterNoSync_WaterSplash::pClassPointer = NULL;

// Class SFGame.SFEmitterPool
// 0x000C (0x0288 - 0x027C)
class ASFEmitterPool : public AEmitterPool
{
public:
	TArray< struct FAttachedExplosionLight >           RelativeExplosionLights;                          		// 0x027C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3087 ];

		return pClassPointer;
	};

	class USFExplosionLight* SpawnExplosionLight ( class UClass* LightClass, struct FVector SpawnLocation, class AActor* AttachToActor, unsigned long bNeedExtension, struct FColor InLightColor, float InLightRadius );
	void OnExplosionLightFinished ( class USFExplosionLight* Light );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, unsigned long bInheritScaleFromBase );
	void Reset ( );
};

UClass* ASFEmitterPool::pClassPointer = NULL;

// Class SFGame.SFEmitterSpawnable
// 0x0000 (0x0248 - 0x0248)
class ASFEmitterSpawnable : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3089 ];

		return pClassPointer;
	};

	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void ClientReset ( );
	void Reset ( );
};

UClass* ASFEmitterSpawnable::pClassPointer = NULL;

// Class SFGame.SFEventDataManager
// 0x0048 (0x0084 - 0x003C)
class USFEventDataManager : public UObject
{
public:
	TArray< class USFBaseEventData* >                  EventDataList;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0048 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFEventDataManager.EventDataTable

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3091 ];

		return pClassPointer;
	};

	void SetINTData ( struct FName EventDataName, int Key, int Value, unsigned char DataType );
	int GetAllINTData ( struct FName EventDataName, unsigned char DataType );
	int GetChallengeDataInvalidValue ( struct FName EventDataName, struct FChallengeData* ChallengeData );
	int GetINTDataByHiWord ( struct FName EventDataName, int HiWordKey, unsigned char DataType );
	int GetINTDataByLoWord ( struct FName EventDataName, int LoWordKey, unsigned char DataType );
	int GetINTData ( struct FName EventDataName, int Key, unsigned char DataType );
	void ClearAllIntData ( unsigned char DataType );
	void DisplayAllData ( );
	void release ( );
	void Init ( );
	void InitEventData ( struct FName NewEventType, int Param1, int Param2 );
	void PROCESSEVENT ( struct FName EventType, int Param1, int Param2, class UObject* Obj );
	class USFBaseEventData* GetEventData ( struct FName EventDataName );
	void ReleaseEventDataList ( );
	void InitEventDataList ( );
};

UClass* USFEventDataManager::pClassPointer = NULL;

// Class SFGame.SFExplosionLight
// 0x0024 (0x0248 - 0x0224)
class USFExplosionLight : public UPointLightComponent
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0224 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              Lifetime;                                         		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TimeShiftIndex;                                   		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLightValues >                      TimeShift;                                        		// 0x0230 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLightFinished__Delegate;                      		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3093 ];

		return pClassPointer;
	};

	void OnLightFinished ( class USFExplosionLight* Light );
	void ResetLight ( );
};

UClass* USFExplosionLight::pClassPointer = NULL;

// Class SFGame.SFFlickerLightByPeriod
// 0x001C (0x0240 - 0x0224)
class USFFlickerLightByPeriod : public UPointLightComponent
{
public:
	float                                              LightPeriod;                                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightPeriodOffset;                                		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightMinBrightness;                               		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              orgBrightness;                                    		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadePassedTime;                                   		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bFading : 1;                                      		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3095 ];

		return pClassPointer;
	};

	void eventSetFadeInLight ( unsigned long bFlag );
	void SetPeriod ( float NewPeriod );
	void InitTimer ( );
	void SetLightColor ( struct FColor InNewColor );
};

UClass* USFFlickerLightByPeriod::pClassPointer = NULL;

// Class SFGame.SFGameDatabase
// 0x0000 (0x003C - 0x003C)
class USFGameDatabase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3097 ];

		return pClassPointer;
	};

	void PrintGameLog ( struct FSFGameLog GameLog );
	void PrintPlayerLog ( struct FSFPlayerLog PlayerLog, struct FString PlayerName );
};

UClass* USFGameDatabase::pClassPointer = NULL;

// Class SFGame.SFGameExplosion
// 0x0054 (0x013C - 0x00E8)
class USFGameExplosion : public UGameExplosion
{
public:
	struct FName                                       EffectType;                                       		// 0x00E8 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          ExplosionDecal;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   ExplosionDecalSize;                               		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionDecalThickness;                          		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionDecalLifeTime;                           		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ExplosionDecalDissolveParamName;                  		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ExplosionEmitterRotator;                          		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionSoundModeDuration;                       		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreMaterialbyLeaning : 1;                     		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IgnoreBehindExplosion : 1;                        		// 0x011C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTraceDownardForDecal : 1;                        		// 0x011C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              fIgnoreMaterialLeaning;                           		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector2D >                         ExplosionDecalDissolvePoints;                     		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           ExplosionColor;                                   		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3099 ];

		return pClassPointer;
	};

};

UClass* USFGameExplosion::pClassPointer = NULL;

// Class SFGame.SFGameExplosionActor
// 0x0070 (0x02F0 - 0x0280)
class ASFGameExplosionActor : public AGameExplosionActor
{
public:
	struct FVector                                     DecalTraceDirections[ 0x6 ];                      		// 0x0280 (0x0048) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     GoDirection;                                      		// 0x02C8 (0x000C) [0x0000000000000000]              
	class UParticleSystemComponent*                    ExplosionPSC;                                     		// 0x02D4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< struct FName >                             IgnoreDamageBlockActors;                          		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HurtRadiusExtraEffectTo__Delegate;              		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3101 ];

		return pClassPointer;
	};

	bool IsDamageBlockable ( class AActor* HitActor, class AActor* Victim, struct FTraceHitInfo HitInfo );
	bool IgnoreMaterialbyLeaning ( struct FVector VDir );
	void ActuallyDoExplosionCameraEffects ( class UPhysicalMaterial* PhysMtrl );
	void SetCameraLensEffectParameters ( class UParticleSystemComponent* PSC );
	void SpawnCameraLensEffects ( class UPhysicalMaterial* PhysMtrl );
	struct FVector GetBoundingBoxCengerForDamageBlock ( class AActor* Victim );
	bool IsIgnoreDamageBlockActor ( class AActor* HitActor );
	float ReduceDamage ( class AActor* Victim, class AController** outModController );
	void TakeDamageFromHurtExplosion ( class AActor* Victim, struct FVector ExploOrigin, unsigned long bBlocked );
	void AddExplosionDecalDissolveParam ( class USFGameExplosion* SFExploTemplate, TArray< struct FInterpCurvePointFloat >* Points );
	void SpawnExplosionDecal ( );
	struct FImpactInfo GetCurrentImpact ( struct FVector RayDir, float RayDistance );
	void UpdateExplosionTemplateWithPerMaterialFX ( class UPhysicalMaterial* PhysMaterial );
	void SpawnExplosionParticleSystem ( class UParticleSystem* Template );
	bool IsIgnoreDamage ( class AActor* HitActor );
	bool IsBehindExplosion ( class AActor* A );
	void ClientReset ( );
	void Reset ( );
	void HurtRadiusExtraEffectTo ( class ASFPawn* Victim, struct FVector vOrigin, float Dist, unsigned long bBlocked );
};

UClass* ASFGameExplosionActor::pClassPointer = NULL;

// Class SFGame.SFGameExplosionActor_Spawnable
// 0x0004 (0x02F4 - 0x02F0)
class ASFGameExplosionActor_Spawnable : public ASFGameExplosionActor
{
public:
	class UGameExplosion*                              RepExplosionTemplate;                             		// 0x02F0 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3103 ];

		return pClassPointer;
	};

	void eventExplode ( class UGameExplosion* NewExplosionTemplate, struct FVector Direction );
	void ShutDown ( );
	void ClientReset ( );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFGameExplosionActor_Spawnable::pClassPointer = NULL;

// Class SFGame.SFGameInfo
// 0x0484 (0x0844 - 0x03C0)
class ASFGameInfo : public AGameInfo
{
public:
	TArray< struct FSCustomModeWeapon >                CustomModeWeaponGroup;                            		// 0x03C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                CustomModeType;                                   		// 0x03CC (0x0004) [0x0000000000000000]              
	int                                                EnablePickUpWeapon;                               		// 0x03D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseRandomRespawn : 1;                            		// 0x03D4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bRandomRespawnAtFirstSpawn : 1;                   		// 0x03D4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bUseBaseWeaponDisappearTime : 1;                  		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bNotUsingInventoryInfo : 1;                       		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDrawOutLineWhenGivePrimaryWeapon : 1;            		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDrawOutlineDroppedWeapon : 1;                    		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUpdateTeamScoreFromKill : 1;                     		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseObserver : 1;                                 		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseAI : 1;                                       		// 0x03D4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bUseInGameStore : 1;                              		// 0x03D4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bDisablePlayerStoppingPower : 1;                  		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000400] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDisableAIStoppingPower : 1;                      		// 0x03D4 (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDisableLandedStopping : 1;                       		// 0x03D4 (0x0004) [0x0000000000004001] [0x00001000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAllowLoveShot : 1;                               		// 0x03D4 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAllowWinningKill : 1;                            		// 0x03D4 (0x0004) [0x0000000000004001] [0x00004000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bEnableThirdPerson : 1;                           		// 0x03D4 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bUseAllyAI : 1;                                   		// 0x03D4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSpectateOtherTeam : 1;                           		// 0x03D4 (0x0004) [0x0000000000004001] [0x00020000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSpectatorAtInterlude : 1;                        		// 0x03D4 (0x0004) [0x0000000000004001] [0x00040000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseWarmupRound : 1;                              		// 0x03D4 (0x0004) [0x0000000000004001] [0x00080000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseWinningRoundForMatchEnd : 1;                  		// 0x03D4 (0x0004) [0x0000000000004001] [0x00100000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIsSpawnProtectionVisible : 1;                    		// 0x03D4 (0x0004) [0x0000000000004001] [0x00200000] ( CPF_Edit | CPF_Config )
	unsigned long                                      StartCountDownWhenMatchStart : 1;                 		// 0x03D4 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bPIEMode : 1;                                     		// 0x03D4 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      ShowMatchAnimation : 1;                           		// 0x03D4 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bUseDataStoreUserInfo : 1;                        		// 0x03D4 (0x0004) [0x0000000000004001] [0x02000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bTestChattingMessage : 1;                         		// 0x03D4 (0x0004) [0x0000000000004001] [0x04000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIgnoreCheckMaxLives : 1;                         		// 0x03D4 (0x0004) [0x0000000000004001] [0x08000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDisplayKillMessage : 1;                          		// 0x03D4 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bUseKillCam : 1;                                  		// 0x03D4 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bInfiniteAmmoMod : 1;                             		// 0x03D4 (0x0004) [0x0000000000004001] [0x40000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bInfiniteMagazineMod : 1;                         		// 0x03D4 (0x0004) [0x0000000000004001] [0x80000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bInfiniteAmmoFromKismet : 1;                      		// 0x03D8 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInfiniteMagazineFromKismet : 1;                  		// 0x03D8 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInfiniteGameTime : 1;                            		// 0x03D8 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bHardCoreMode : 1;                                		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCheckDediValidation : 1;                         		// 0x03D8 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bUseDBNO : 1;                                     		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCanUseInstantRespawn : 1;                        		// 0x03D8 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bShowRespawnGauge : 1;                            		// 0x03D8 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIgnoreChallengeList : 1;                         		// 0x03D8 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      bCanUseInGameKick : 1;                            		// 0x03D8 (0x0004) [0x0000000000004001] [0x00000200] ( CPF_Edit | CPF_Config )
	unsigned long                                      bEnableMassBoneScaling : 1;                       		// 0x03D8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bExplicitPlayerStart : 1;                         		// 0x03D8 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bCanDropWeaponOnDeath : 1;                        		// 0x03D8 (0x0004) [0x0000000000004001] [0x00001000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bExceptAIMemberScore : 1;                         		// 0x03D8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanUsePingNotice : 1;                            		// 0x03D8 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bHoldRotationInPingBoard : 1;                     		// 0x03D8 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      IgnoreBombingSupport : 1;                         		// 0x03D8 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      IsIngameChangeWeaponHUD : 1;                      		// 0x03D8 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned char                                      RandomRespawnType;                                		// 0x03DC (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      TimeOverWinningTeam;                              		// 0x03DD (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      TeamChangeType;                                   		// 0x03DE (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      GameModeType;                                     		// 0x03DF (0x0001) [0x0000000000000000]              
	unsigned char                                      SubGameModeType;                                  		// 0x03E0 (0x0001) [0x0000000000000000]              
	unsigned char                                      InfiniteMagazineWeaponGroup[ 0x9 ];               		// 0x03E1 (0x0009) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      VoterTargetCond;                                  		// 0x03EA (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      RunningChannel;                                   		// 0x03EB (0x0001) [0x0000000000000000]              
	class USFRandomRespawn*                            RandomRespawn;                                    		// 0x03EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpawnProtectionTime;                              		// 0x03F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              WeaponDisappearTime;                              		// 0x03F4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< unsigned char >                            NoUsableWeaponGroup;                              		// 0x03F8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            OnlyUsablePrimaryWeaponType;                      		// 0x0404 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           OnlyUsableSpecialWeaponClassName;                 		// 0x0410 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      ExtraUsableWeaponID;                              		// 0x041C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      PlayerProvideWeaponID;                            		// 0x0428 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSTeamPlayerProvideWeapon >         TeamPlayerProvideWeapon;                          		// 0x0434 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     EndGameReason;                                    		// 0x0440 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MultiKillCheckTime;                               		// 0x044C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                NetWaitDelay;                                     		// 0x0450 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                CurrentNetWaitDelay;                              		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentCountDown;                                 		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatchOverDelay;                                   		// 0x045C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                RoundOverDelay;                                   		// 0x0460 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                WinningKillDelay;                                 		// 0x0464 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PreRoundOverDelay;                                		// 0x0468 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PostRoundOverDelay;                               		// 0x046C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MatchInProgressDelay;                             		// 0x0470 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PreMatchInProgressDelay_Tournament;               		// 0x0474 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PreMatchInProgressDelay;                          		// 0x0478 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PreMatchIntroDelay;                               		// 0x047C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                CountDownDelay;                                   		// 0x0480 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                PreCountDownDelay;                                		// 0x0484 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      FadeColor;                                        		// 0x0488 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DesaturationFadeInTime;                           		// 0x048C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinRespawnDelay;                                  		// 0x0490 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxMissionScore;                                  		// 0x0494 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FSKillDeathStreakBuffInfo >         KillDeathStreakList;                              		// 0x0498 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            ApplyKilldeathStreakChannelList;                  		// 0x04A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      StreakMessageClass;                               		// 0x04B0 (0x0004) [0x0000000000000000]              
	int                                                MinimumCountForPerfectRound;                      		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaximumDiffCountForPerfectRound;                  		// 0x04B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MinimumCountForAllKill;                           		// 0x04BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      EndGameFocus;                                     		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            LastStartSpot[ 0x8 ];                             		// 0x04C4 (0x0020) [0x0000000000000000]              
	struct FString                                     DefaultTeamClassName;                             		// 0x04E4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USFGameMessage*                              GameMessage;                                      		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AnnouncerMessageClass;                            		// 0x04F4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     KillDeathMessageClass;                            		// 0x0500 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ASFAIVisibleControl*                         AIVisibleControl;                                 		// 0x050C (0x0004) [0x0000000000000000]              
	class UClass*                                      BotClass;                                         		// 0x0510 (0x0004) [0x0000000000000000]              
	class AActor*                                      DebuggingAIActor;                                 		// 0x0514 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFAISpawnManager*                           SpawnManager;                                     		// 0x0518 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AISpawnManagerClassName;                          		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AIVisibleControlClassName;                        		// 0x0528 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPendingKillInfo >                  arrPendingKillInfo;                               		// 0x0534 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LoveShotCheckDelay;                               		// 0x0540 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                nGoalRound;                                       		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFGameReplicationInfo*                      SFGRI;                                            		// 0x0548 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DefaultPlayerStartClassName;                      		// 0x054C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      DefaultPlayerStartClass;                          		// 0x0558 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EnableSpectorModeMaxPlayingUser;                  		// 0x055C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GameStatDeltaTime;                                		// 0x0560 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UClass*                                      GameScoreClass;                                   		// 0x0564 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPawnClassName[ 0x9 ];                      		// 0x0568 (0x006C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultAIPawnClassName[ 0x9 ];                    		// 0x05D4 (0x006C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      DefaultPawnClasses[ 0x9 ];                        		// 0x0640 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      DefaultAIPawnClasses[ 0x9 ];                      		// 0x0664 (0x0024) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AutoBalancebyAIClassName;                         		// 0x0688 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      AutoBalancebyAIClass;                             		// 0x0694 (0x0004) [0x0000000000000000]              
	TArray< class ACameraActor* >                      CamActors;                                        		// 0x0698 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              DropChance;                                       		// 0x06A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MagazineCountChance;                              		// 0x06A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FString                                     MagazineBoxName;                                  		// 0x06AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PreMatchInProgressBGM_RED;                        		// 0x06B8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PreMatchInProgressBGM_BLUE;                       		// 0x06C4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MatchEndBGM_WIN;                                  		// 0x06D0 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MatchEndBGM_LOSE;                                 		// 0x06DC (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MatchInProgressBGM_RED;                           		// 0x06E8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MatchInProgressBGM_BLUE;                          		// 0x06F4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PostRoundOverBGM;                                 		// 0x0700 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              PreMatchInProgress_FadeInTime;                    		// 0x070C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PreMatchInProgress_FadeOutTime;                   		// 0x0710 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PreMatchInProgress_Duration;                      		// 0x0714 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MatchEndBGM_FadeInTime;                           		// 0x0718 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MatchEndBGM_FadeOutTime;                          		// 0x071C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MatchEndBGM_Duration;                             		// 0x0720 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MatchInProgress_FadeInTime;                       		// 0x0724 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MatchInProgress_FadeOutTime;                      		// 0x0728 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MatchInProgress_Duration;                         		// 0x072C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                ShareLivesPerUser;                                		// 0x0730 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                ShareLivesPerTeam;                                		// 0x0734 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                CountForSaveSituation;                            		// 0x0738 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              WaitingForNextMissionDelay;                       		// 0x073C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SelfShutDownWaitTime;                             		// 0x0740 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                StartingPlayers;                                  		// 0x0744 (0x0004) [0x0000000000000000]              
	class UClass*                                      ObserverPlayerControllerClass;                    		// 0x0748 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            InfiniteAmmoWeaponGroup;                          		// 0x074C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FWeaponAmmo >                       WeaponAmmoInfo;                                   		// 0x0758 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	int                                                AIDifficulty;                                     		// 0x0764 (0x0004) [0x0000000000000000]              
	float                                              fUseFriendlyFireDamage;                           		// 0x0768 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              fAllowSelfInjury;                                 		// 0x076C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              fPauseSpawnTime;                                  		// 0x0770 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DamageModifier;                                   		// 0x0774 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              BackAttackDamageModifier;                         		// 0x0778 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FString >                           MutatorName;                                      		// 0x077C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            AIHitableTargetClass;                             		// 0x0788 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                ExtraOption;                                      		// 0x0794 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ModeExpTable;                                     		// 0x0798 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      InstantRespawnSP;                                 		// 0x07A4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	int                                                InstantRespawnMinimumHoldingSP;                   		// 0x07B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InstantRespawnActiveDelay;                        		// 0x07B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                InGameKickSP;                                     		// 0x07B8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                InGameKickMinimumHoldingSP;                       		// 0x07BC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ASFInGameKickState*                          InGameKickState;                                  		// 0x07C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                nUniqueAIID;                                      		// 0x07C4 (0x0004) [0x0000000000000000]              
	TArray< struct FsTrafficNav >                      TrafficNavs;                                      		// 0x07C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsAjdPawnProp >                     AjdPawnProps;                                     		// 0x07D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AISpawnBiasPlayerCount;                           		// 0x07E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ProjectileDOTPeriod;                              		// 0x07E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinAgreeRateToKick;                               		// 0x07E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VotePeriod;                                       		// 0x07EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VoteCoolTime;                                     		// 0x07F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxProposerPerPlayer;                             		// 0x07F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MinVoteMemberCount;                               		// 0x07F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PingDelay;                                        		// 0x07FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlowTransitionTime;                               		// 0x0800 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class USFUIDataProvider_MapInfo* >         MapDataProvider;                                  		// 0x0804 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_ModeInfo* >        ModeDataProvider;                                 		// 0x0810 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            DefaultSuppressHackTypes;                         		// 0x081C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class ASFObstaclesActor*                           ObstaclesActorList;                               		// 0x0828 (0x0004) [0x0000000000000000]              
	TArray< class ASFProjectile* >                     LureProjectileArray;                              		// 0x082C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                channelType;                                      		// 0x0838 (0x0004) [0x0000000000000000]              
	int                                                ChannelId;                                        		// 0x083C (0x0004) [0x0000000000000000]              
	int                                                ClanConnectBuffMinPlayer;                         		// 0x0840 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3105 ];

		return pClassPointer;
	};

	void OnNotiChangePlayerStart ( class USFSeqAct_NotiChangePlayerStart* inAction );
	class ASFObstaclesActor* GetObstaclesActor ( class ASFObstaclesActor* preActor );
	void UnregistObstaclesActor ( class ASFObstaclesActor* TargetActor );
	void RegistObstaclesActor ( class ASFObstaclesActor* NewActor );
	bool IgnoreGameModeBombingSupport ( );
	void OnUpdateItemCarrierPathNode ( class USFSeqAct_UpdateItemCarrierPathNode* inAction );
	float GetSpawnProtectionTime ( struct FString MapName );
	void DebugString ( struct FString DebugStr );
	int GetGameMapIdx ( struct FString MapName );
	int GetGameModeID ( );
	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	struct FString UpdatePlayInfoDS ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bAbnormalEnd, struct FString GameIndex, int GameModeIdx, int GameMapIdx, int InGamePlayer, float PlayTime );
	struct FString UpdateAllPlayInfoDS ( );
	float GetExpRate ( int AILevel );
	class ASFTeamInfo* GetWinningTeam ( );
	int GetNumScoreTargetPlayers ( );
	int GetAIDifficulty ( unsigned char TargetTeam );
	bool IsValideSpawnPoint ( class ASFGamePlayerStart* RespawnPoint );
	unsigned char GetSpawnPointSortCondition ( );
	bool CanGameStart ( int MinPlayerCount, int MyTeamIndex, unsigned long bIntrusion, unsigned long bEnableTeamBalance, int* ErrorNo );
	bool IsCheckInvalidHackType ( );
	bool IsSuppressedHackType ( unsigned char InHackType );
	unsigned char GetExceptionAIClass ( int OrgType );
	void OnClientExitGame ( int newUSN );
	int GetAISpawnBiasPlayerCount ( );
	bool EnableStoppingPower ( class ASFPawn* Target );
	bool AllPawnReactionToFlashbang ( );
	void UpdateAdjustAIPawnProperties ( class USFSeqAct_AdjustAIPawnProperties* AdjSeq );
	void eventOnAdjustAIPawnProperties ( class USFSeqAct_AdjustAIPawnProperties* AdjSeq );
	void AdjustAIPawnProperties ( class ASFPawn_AI* AdjTarget, int AIType );
	void VoteToKick ( class ASFPlayerController* VoteUser, unsigned char eResult );
	void ServerToSendInGameKickSP ( class ASFPlayerController* SFPC );
	bool EnableKickVoteState ( );
	unsigned char StartInGameKickVote ( class ASFPlayerController* ProposerController, struct FString VoteTarget );
	class ASFInGameKickState* GetInGameKickState ( );
	class ASFHeadQuarters* GetHeadQuarter ( class AActor* Inst );
	void SendSystemPing ( struct FVector TargetLocation, int TargetTeam, unsigned char PingType );
	int GetUniqueAIID ( );
	int GetTeamMemberCount ( unsigned long bIgnorePlayer, unsigned long bIgnoreAI, TArray< int >* MemberCounts );
	int GetModeLevelByModeExp ( int TargetExp );
	void RestartAutoTurretControllers ( );
	void CheckDediValidation ( class ASFPlayerController* TargetPC );
	void PauseSpawn ( );
	void NotifyBeaconActivated ( class ASFProjectileBeacon* BeaconProj );
	void NotifyToInGameStore ( unsigned long bEnabled, int CurrentWave );
	void ActiveSeqEventWithParameters ( class UClass* SeqEventClass, class AActor* InOriginator, class AActor* InInstigator, int ActiveIndex, unsigned long bTest );
	void ActiveSeqEvent ( class UClass* SeqEventClass, int ActiveIndex );
	float GetMinRespawnDelay ( class ASFPlayerController* TargetPC, unsigned long bShowKillCam );
	float GetRespawnDelayFromDamageType ( class ASFPlayerController* TargetPC );
	bool SetPvEWaveInfo ( float NewMaxAliveRatio, float NewEndOfRoundDelay, float MultiplyValueForAliveRatio );
	void OnPvEWaveInfo ( class USFSeqAct_PvEWaveInfo* Action );
	void OnReset ( class USFSeqAct_Reset* Action );
	void OnAddRemainingTime ( class USFSeqAct_AddRemainingTime* Action );
	void OnAreaIndex ( class USFSeqAct_AreaIndex* Action );
	void OnSHAreaIndex ( class USFSeqAct_SHAreaIndex* Action );
	void OnScoreUp ( class USFSeqAct_ScoreUp* Action );
	void OnCaptured ( class USFSeqAct_Captured* Action );
	void OnEndGame ( class USFSeqAct_EndGame* Action );
	void OnBroadcastMessageEx ( class USFSeqAct_BroadcastMessageByType* Action );
	void OnBroadcastAnnouncer ( class USFSeqAct_BroadcastAnnouncer* Action );
	void BroadcastAnnouncer ( struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bCheckMatchInProgress, unsigned char TeamIndex, unsigned long bPlayVoice );
	bool AllowPausing ( class APlayerController* PC );
	bool PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup );
	void DropMagazine ( struct FVector SpawnLocation );
	void OnSetIntermissionCutScene ( class USFSeqAct_SetIntermissionCutScene* Action );
	void OnSetWeaponAmmo ( class USFSeqAct_SetWeaponAmmo* Action );
	void OnSetInfiniteAmmo ( class USFSeqAct_SetInfiniteAmmo* Action );
	void OnWakeRigidBody ( class USFSeqAct_WakeRigidBody* Action );
	void OnAllowVictimType ( class USFSeqAct_AllowVictimType* Action );
	void OnSetViewTarget ( class USFSeqAct_SetViewTarget* Action );
	void OnCameraScore ( class USFSeqAct_CameraScore* Action );
	void AddCamActorScore ( struct FVector CheckLocation, float AddScore, struct FString CamTag );
	void InitCameActorScore ( );
	class ACameraActor* GetHighestCamActor ( );
	void InitCameraActor ( );
	bool IsUnlimitedSpawnMode ( );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void OnMissionSuccess ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnBossClear ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnWaveEnd ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnTouchDown ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnCaptureTrigger_Use ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnEarnOccupyScore ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnOccupied ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnRescued ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnSHTriggerUsed ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnEscaped ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnBombSuccess ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnBombDefused ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnBombPlanted ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnCaptureObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnDropObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnReturnObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnSecureObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnChangeStandardActorForCombatZone ( class USeqAct_ChangeStandardActorForCombatZone* inAction );
	void OnChangeAIWave ( class USFSeqAct_ChangeAIWave* inAction );
	void CheckMissionScore ( class AController* Scorer, struct FName MissionName, unsigned char ScorerTeam, unsigned long bCheckMatchInProgressMessage, unsigned long bMissionSuccess, unsigned long bPlayMessage );
	struct FString GetSiteName ( unsigned char ObjectIconType );
	void SetEventAfterArrivedAt ( );
	void SetEventAfterExplosion ( );
	void AddTeamScore ( unsigned char TeamIndex, struct FName MissionName );
	void ScoreDefendedByTime ( unsigned char nTeamIndex );
	void AddScore ( class ASFPlayerReplicationInfo* SFPRI, struct FName MissionName );
	void GetTeamPRIArray ( unsigned char nTeamIndex, TArray< class APlayerReplicationInfo* >* TeamPRIArray );
	void CheckGRI ( );
	int GetInterludePlayers ( );
	void eventReCalculateNumPlayers ( );
	void BaseScoreLuckyPoint ( class ASFPlayerReplicationInfo* TargetPRI );
	void ScoreAssist ( class ASFPlayerReplicationInfo* AssistPRI, class ASFPlayerReplicationInfo* VictimPRI, int LadderDiff );
	void BaseScoreAssist ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, class APawn* KilledPawn );
	void BaseScoreDeath ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, class UClass* DamageType );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI );
	int CalculateScore ( class ASFPlayerReplicationInfo* Scorer, unsigned char ScoreType, int LadderDiff, class ASFPlayerReplicationInfo* VictimPRI );
	void ScoreKill ( class AController* Killer, class AController* Other );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType );
	bool IsLivePlayer ( class ASFPlayerController* SFPC );
	bool IsValidePlayerController ( class ASFPlayerController* SFPC );
	void CheckPlayerCounter ( TArray< class ASFPlayerReplicationInfo* >* SFLastPRI, int* nTotLives, int* nTotPlayers, TArray< int >* arrTeamMember, TArray< int >* arrTeamLive );
	bool AllowCheats ( class APlayerController* P );
	void ShowPathTo ( class APlayerController* P, int TeamNum );
	unsigned char CheckSurvivor ( );
	unsigned char CheckExtermination ( );
	unsigned char CheckMission ( class APlayerReplicationInfo* LastDeath );
	unsigned char CheckCheatRule ( );
	bool CheckMaxLives ( class APlayerReplicationInfo* LastDeath );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	bool IsLoveshotGameEnd ( );
	void RecordDamage ( class AController* EventInstigator, class UClass* DamageType, class AController* Target, int Damage );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	class ASFPlayerReplicationInfo* GetLiveMember ( unsigned char CheckTeam, int* Count );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	bool CheckWelcomeBack ( class ASFPlayerReplicationInfo* KillerSFPRI );
	bool CheckSpecialList ( class ASFPlayerReplicationInfo* KillerSFPRI );
	bool CheckMultiKill ( class ASFPlayerReplicationInfo* KillerSFPRI, class ASFPlayerReplicationInfo* KilledSFPRI );
	bool CheckFirstKill ( class AController* KillerC );
	bool CheckRevengeShot ( class AController* KillerC, class AController* KilledC );
	bool CheckLoveShot ( class AController* KillerC, class AController* KilledC );
	void ProcessKillType ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* KilledPRI, class UClass* dmgType );
	void InitPendingKill ( );
	void UpdatePendingKill ( );
	void AddPendingKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	class APlayerStart* BaseChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class UClass* GetPlayerStartClass ( );
	bool CheckPlayerStartByMode ( class AController* Player, unsigned char InTeam, class ASFGamePlayerStart* SFPS );
	bool DoesReachedGoalRound ( );
	class ASFPlayerReplicationInfo* CheckAllKillWin ( unsigned char WinTeam );
	bool IsMatchPoint ( unsigned char Team );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void ChangePlayerTeam ( );
	void SetAllPlayerGameInfoState ( struct FName currStateName );
	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
	void UpdateRoundWinType ( );
	void IncreateTeamRoundForGameLog ( );
	void IncreaseRound ( );
	void UpdateEndReason ( unsigned long bRoundOver );
	unsigned char GetLoseTeamIndex ( unsigned char WinnerTeam );
	bool IsStopCountDown ( );
	bool IsWinningKill ( );
	void CheckMatchWinningTeam ( );
	void UpdateAdditionalScore ( );
	void ServerUpdateAddtionalScore ( );
	void SetDefaultDummyName ( struct FString NewName );
	int GetPassedWaveCounter ( );
	void StartNextWave ( class ASFPlayerReplicationInfo* InstigatorPRI );
	void RestartFromWave ( int NewWave );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	void RoundEndByTime ( );
	bool IsMatchInProgress ( );
	bool NeedCountDown ( );
	bool IsTeamChangeAtHalfTime ( );
	bool IsTeamChangedForInterlude ( );
	bool SetSpectator ( class APlayerController* NewPlayer );
	void AllPCChatMessage ( unsigned char Type, struct FString msg );
	void DiscardKillDeathStreakBuff ( class ASFPlayerReplicationInfo* SFPRI );
	void StreakLocalizeMessage ( class ASFPlayerController* SFPC, class UClass* Message, int Switch, int Counter, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ApplyKillDeathStreakBuff ( class ASFPlayerReplicationInfo* SFPRI );
	void KillDeathStreakBuff ( class ASFPlayerReplicationInfo* SFPRI );
	int GetPlayginUserCount ( );
	void eventSetInitialState ( );
	bool CanUseRandomRespawn ( );
	class USFRandomRespawn* GetRandomRespawn ( );
	bool ShouldReset ( class AActor* ActorToReset );
	void ResetLevel ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason, unsigned long bForce );
	void CheckAllTeamOmnicide ( );
	bool IsLastManStanding ( struct FString Reason );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool IsAWinner ( class ASFPlayerController* PC );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void ReleaseGamePlayEventsWriter ( );
	void InitGamePlayEventsWriter ( );
	unsigned char GetShareLives ( class APlayerController* aPlayer );
	void ResetShareLives ( );
	void StartMatch ( );
	bool AICanRestart ( class ASFAIController* aPlayer );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	void CustomModeWeaponRand ( );
	void CustomModeReplication ( );
	void InitGameReplicationInfo ( );
	void Destroyed ( );
	bool HasAssumeMutator ( struct FString EventName );
	void AddMutator ( struct FString mutname, unsigned long bUserAdded );
	void InitMutator ( );
	void InitGameWeaponType ( );
	void SetCustomModeInventoryInfo ( );
	void eventPostBeginPlay ( );
	void PreBeginPlay ( );
	void BroadCastClanCSN ( );
	void UpdateClanCSN ( int RedCSN, int BlueCSN, struct FString RedClanName, struct FString BlueClanName );
	class ASFTeamInfo* GetTeam ( unsigned char TeamIndex );
	void StartBots ( );
	void KillBots ( );
	void Logout ( class AController* Exiting );
	void RegisterServer ( );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void AddDefaultInventory ( class APawn* PlayerPawn );
	void RestartPlayer ( class AController* aPlayer );
	void UpdateInfiniteAmmo ( class ASFPlayerController* SFPC );
	bool IsInfiniteMagazine ( );
	bool IsInfiniteAmmo ( );
	void InitBombSPData ( class ASFPlayerController** PC );
	void SetPlayerFunctionalItemList ( class ASFPlayerController** PC );
	void GenericPlayerInitialization ( class AController* C );
	bool AtCapacity ( unsigned long bSpectator );
	class ASFPlayerReplicationInfo* FindWinner ( struct FString Reason );
	bool TooManyBots ( class AController* botToRemove );
	float SpawnWait ( class AAIController* B );
	void DeactiveClanBuff ( class ASFPlayerReplicationInfo* SFPRI, unsigned char BuffType, float* BuffValue );
	void ActiveClanBuff ( class ASFPlayerReplicationInfo* SFPRI, unsigned char BuffType, float* BuffValue );
	void ClanBuffTargetUserStateLogOut ( TArray< class ASFPlayerReplicationInfo* > ClanPRIList, int ExitPlayerID, TArray< class ASFPlayerReplicationInfo* >* TargetUserList );
	void ClanBuffTargetUserStateLogIn ( TArray< class ASFPlayerReplicationInfo* > ClanPRIList, TArray< class ASFPlayerReplicationInfo* >* TargetUserList );
	void GetClanBuffTargetUserList ( int ExitPlayerID, TArray< class ASFPlayerReplicationInfo* >* TargetUserList );
	void UpdateClanLuckyPointBuff ( );
	void UpdateClanBuff ( unsigned char BuffType );
	void UpdateClanConnectBuffByLogOut ( int ExitPlayerID );
	bool IsEnableApplyClanBuffGame ( );
	void UpdateVipLuckyPoint ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	unsigned char GetLoginTeamIndex ( struct FString LoginOptions );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bIsObserverController );
	int GetCCTVIndexByGameMode ( );
	void InstantRespawnUseSP ( class ASFPlayerController* SFPC );
	void InstantRespawn ( class ASFPlayerController* SFPC );
	void InitDediGameServerConnection ( struct FString Options );
	int GetRandomProvideWeapon ( int CustomModeTypeIdx );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	bool IsApplyKillDeathStreak ( );
	void SetAIDifficulty ( unsigned char eDifficulty, unsigned char TargetTeam );
	void InitGameMessage ( );
	void NotifyDBNO ( class AController* InstigatedBy, class AController* Victim, unsigned char DBNOLevelNew );
	void Reset ( );
	void ResetRemainTime ( );
	bool SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate );
	void AISpawned ( int AIType, class AController* AIController, class APawn* AIPawn );
	void eventActorTouched ( class USFSeqEvent_Touch* TouchEvent );
	void eventAIFactoryDisabled ( int NumUnspawnedPawns, class USFSeqAct_AIFactory* AIFactory );
	void eventSpawnFromAIFactoryHasDied ( class APawn* KilledSpawn, class USFSeqAct_AIFactory* AIFactory );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	struct FString ParseOption ( struct FString Options, struct FString InKey );
	float GetFloatOption ( struct FString Options, struct FString ParseString, float CurrentValue );
	unsigned char GetByteOption ( struct FString Options, struct FString ParseString, unsigned char CurrentValue );
	int GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );
	void SetPauseKismet ( unsigned long bPause );
	struct FString NativeParseOption ( struct FString Options, struct FString InKey );
};

UClass* ASFGameInfo::pClassPointer = NULL;

// Class SFGame.SFDeathGame
// 0x0000 (0x0844 - 0x0844)
class ASFDeathGame : public ASFGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3107 ];

		return pClassPointer;
	};

	void ResetLevel ( );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	unsigned char CheckSurvivor ( );
	unsigned char CheckExtermination ( );
	unsigned char CheckMission ( class APlayerReplicationInfo* LastDeath );
	unsigned char PickTeam ( unsigned char num, class AController* C );
};

UClass* ASFDeathGame::pClassPointer = NULL;

// Class SFGame.SFTeamGameInfo
// 0x0000 (0x0844 - 0x0844)
class ASFTeamGameInfo : public ASFGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3109 ];

		return pClassPointer;
	};

	void UpdateTeamScoreFromAssist ( class ASFTeamInfo* team_info, float Score );
	void ScoreAssist ( class ASFPlayerReplicationInfo* AssistPRI, class ASFPlayerReplicationInfo* OtherPRI, int LadderDiff );
	void UpdateTeamScoreFromKill ( class ASFTeamInfo* team_info, float Score );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void ChangePlayerTeamIndex ( );
	void ChangePlayerTeam ( );
	void ShowPathTo ( class APlayerController* P, int TeamNum );
	bool IsWinningTeam ( class ATeamInfo* T );
	bool IsAWinner ( class ASFPlayerController* C );
	void ScoreDefendedByTime ( unsigned char nTeamIndex );
	bool AttainedGoalScore ( unsigned char* WinTeamIndex );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	unsigned char CheckWinninigTeam ( int Index );
	float GetTeamScoreFromIndex ( int nTeamIndex, int Index );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	void NotifySetTeam ( class AController* Other, class ASFTeamInfo* NewTeam );
	void SetTeam ( class AController* Other, class ASFTeamInfo* NewTeam, unsigned long bNewTeam );
	bool ChangeTeam ( class AController* Other, int num, unsigned long bNewTeam );
	unsigned char PickTeam ( unsigned char num, class AController* C );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void CheckAllTeamOmnicide ( );
	bool IsMissionActorWin ( unsigned char* WinningTeam );
	unsigned char CheckSurvivor ( );
	unsigned char CheckExtermination ( );
	unsigned char CheckMission ( class APlayerReplicationInfo* LastDeath );
	unsigned char GetLargestTeamIndex ( );
	void CreateTeam ( int TeamIndex );
	void PostBeginPlay ( );
};

UClass* ASFTeamGameInfo::pClassPointer = NULL;

// Class SFGame.SFBaseTeamDeathGame
// 0x0000 (0x0844 - 0x0844)
class ASFBaseTeamDeathGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3111 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	class ASFTeamInfo* GetWinningTeam ( );
	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
};

UClass* ASFBaseTeamDeathGame::pClassPointer = NULL;

// Class SFGame.SFAITeamDeathGame
// 0x00FC (0x0940 - 0x0844)
class ASFAITeamDeathGame : public ASFBaseTeamDeathGame
{
public:
	int                                                DefaultAIMemberCount;                             		// 0x0844 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            DefaultAICount;                                   		// 0x0848 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            DefaultPlayerCount;                               		// 0x0854 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUseRandomAIWeaponSystem : 1;                     		// 0x0860 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUseAutoAILevel : 1;                              		// 0x0860 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      SendedNearEndGameScore : 1;                       		// 0x0860 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      SendedTimelessChat : 1;                           		// 0x0860 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< int >                                      UsableUnitIDList;                                 		// 0x0864 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHumanAIClassNames >                AIClassNames;                                     		// 0x0870 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultWeaponClassList;                           		// 0x087C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           UnuseCharClassList;                               		// 0x0888 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           UnuseWeaponClassList;                             		// 0x0894 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FWeaponIDData >                     WeaponList;                                       		// 0x08A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultAIWeapon;                                  		// 0x08AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultUnitClass;                                 		// 0x08B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            AICount;                                          		// 0x08C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            AITeamDifficulty;                                 		// 0x08D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      KDCountCheckNext;                                 		// 0x08DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsTeamMember >                      TeamMembers;                                      		// 0x08E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                CheeringEnableLevel;                              		// 0x08F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CheeringChatLimitKD;                              		// 0x08F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FirstCheeringCount;                               		// 0x08FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NextCheeringCount;                                		// 0x0900 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                JeetingEnableLevel;                               		// 0x0904 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JeetingChatStartTime;                             		// 0x0908 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JeetingChatUnLimitKD;                             		// 0x090C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FirstJeetingCount;                                		// 0x0910 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NextJeetingCount;                                 		// 0x0914 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SendTimelessTiming;                               		// 0x0918 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SendNearEndGameScoreRate;                         		// 0x091C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SendNearEndGameScore;                             		// 0x0920 (0x0004) [0x0000000000000000]              
	TArray< float >                                    ExpRate;                                          		// 0x0924 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AINameCount;                                      		// 0x0930 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FUsedBotNameInfo >                  UsedBotNames;                                     		// 0x0934 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3113 ];

		return pClassPointer;
	};

	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	float GetExpRate ( int AILevel );
	int GetBiggestTeamScore ( );
	bool SendWinningCheckChat ( );
	float GetKDRate ( class AController* Target );
	int GetJeetingChat ( class AController* Victim, class ASFAITDPlayerController** reciver );
	int GetCheeringChat ( class AController* Killer, class AController** Sender, class ASFAITDPlayerController** reciver );
	bool SendBattleSituationAIChat ( class AController* Killer, class AController* Victim );
	int GetNumScoreTargetPlayers ( );
	unsigned char GetTeamAILevel ( unsigned char newTeamNum );
	int GetOtherTeamMemberCount ( unsigned char excepteam );
	void AutoAdjustAILevel ( );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void GetTeamKDRate ( unsigned long OnlyPlayer, unsigned long OnlyAI, TArray< int >* KDCount, TArray< float >* KDRate );
	int GetAIDifficulty ( unsigned char TargetTeam );
	void SetAIDifficulty ( unsigned char eDifficulty, unsigned char TargetTeam );
	unsigned char GetSpawnPointSortCondition ( );
	void ResetAILevel ( int newLevel, unsigned char TargetTeam );
	unsigned char PickTeam ( unsigned char num, class AController* C );
	void SetDefaultAIWeapon ( TArray< struct FString >* TargetWeapons );
	bool GetAIProerWeapon ( unsigned char AIType, int TargetSlot, int* NewItem, class UClass** WeaponClass );
	void GetAIProperWeaponSet ( class ASFAIController_Human* TargetAI, TArray< int >* WeaponItemSet, struct FWeaponInventorySet* NewInvenInfo );
	unsigned char GetWeaponTypeFromAI ( unsigned char AIType );
	void GetRandomWeaponCandidateList ( unsigned char WeaponType, int* WeaponID );
	bool eventIsUsableAIWeaponClass ( class UClass* WeaponClass, int ItemId );
	void MakeAllAvailableWeaponList ( TArray< struct FWeaponIDData >* OutWeaponList );
	void MakeDefaultWeaponList ( TArray< struct FWeaponIDData >* OutWeaponList );
	void MakeUsableWeaponList ( );
	void GetRandomAIPawnCharItem ( TArray< int >* PawnItemList );
	bool IsUsableAICharClass ( class UClass* CharClass );
	void MakeUsableUnitList ( );
	int DropOverAIMembers ( class AController* NewMember );
	void AutoSpawnHumanAI ( );
	unsigned char CheckSurvivor ( );
	unsigned char CheckExtermination ( );
	void PostBeginPlay ( );
	void GetOverAITeamMember ( int TeamNum, int NeedDropCount, TArray< class ASFAIController* >* OverMembers );
	TArray< class ASFAIController* > GetOverAIMember ( class AController* NewMember );
	class ASFAIController* GetSameCodenameAI ( class AController* NewMember );
	struct FString GetAINameByPlayerID ( int PlayerID );
	void SpawnHumanPawnAI ( int needTeamNum, int NeedCount, struct FString NeedClassName );
	bool IsHumanPawnPlayingTeam ( int myTeamNum );
	struct FString GetAIClassName ( int TeamNum, int MemberCount );
	void AIBotSpawnbyModeArgs ( );
	void AutoBiasedbyAIBot ( unsigned char BiasTeam );
	void AutoBalancebyAIBot ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	bool CanGameStart ( int MinPlayerCount, int MyTeamIndex, unsigned long bIntrusion, unsigned long bEnableTeamBalance, int* ErrorNo );
};

UClass* ASFAITeamDeathGame::pClassPointer = NULL;

// Class SFGame.SFConvoyanceGame
// 0x008C (0x08D0 - 0x0844)
class ASFConvoyanceGame : public ASFTeamGameInfo
{
public:
	TArray< struct FSConvoyanceSpeedInfo >             SpeedInfo;                                        		// 0x0844 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              MinRespawnDelayForRed;                            		// 0x0850 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinRespawnDelayForBlue;                           		// 0x0854 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FString                                     ConvoyanceItemClass;                              		// 0x0858 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< class APathNode* >                         ConvoyPathNodeArray;                              		// 0x0864 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFTrigger_ConvoyanceItem* >         ConvoyanceItemArray;                              		// 0x0870 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFPlayerController* >               ControllerArrayNearCar;                           		// 0x087C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFConvoyanceTargetVolume*                   ConvoyanceTargetVolume;                           		// 0x0888 (0x0004) [0x0000000000000000]              
	class ASFConvoyanceGameReplicationInfo*            SFConvoyanceGRI;                                  		// 0x088C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ConvoyanceStartLocation;                          		// 0x0890 (0x000C) [0x0000000000000000]              
	int                                                TotalMoney;                                       		// 0x089C (0x0004) [0x0000000000000000]              
	int                                                RemainMoney;                                      		// 0x08A0 (0x0004) [0x0000000000000000]              
	int                                                SeizureMoney;                                     		// 0x08A4 (0x0004) [0x0000000000000000]              
	int                                                PathNodeOrderNumber;                              		// 0x08A8 (0x0004) [0x0000000000000000]              
	float                                              ConvoyanceDistance[ 0x3 ];                        		// 0x08AC (0x000C) [0x0000000000000000]              
	float                                              MovedDistance;                                    		// 0x08B8 (0x0004) [0x0000000000000000]              
	float                                              ConvoyVehicleSpeedRate;                           		// 0x08BC (0x0004) [0x0000000000000000]              
	unsigned long                                      IsConvoyanceMoving : 1;                           		// 0x08C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsNotiRemainRemainThreeQuater : 1;                		// 0x08C0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsNotiRemainRemainHalf : 1;                       		// 0x08C0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsNotiRemainRemainQuater : 1;                     		// 0x08C0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsNotiRemainRemainZero : 1;                       		// 0x08C0 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FScriptDelegate                             __SortConvoyPathNodeArrayDelegate__Delegate;      		// 0x08C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3115 ];

		return pClassPointer;
	};

	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	void GetPathNodeOrderNumber ( );
	float ComputeMovedDistance ( int OrderNumber );
	void UpdateConvoyanceTargetDistance ( );
	void CheckMatchWinningTeam ( );
	void AddScoreForConvoyanceGame ( class ASFPlayerReplicationInfo* SFPRI, struct FName MissionName, int AmountMoney );
	float GetMinRespawnDelay ( class ASFPlayerController* TargetPC, unsigned long bShowKillCam );
	void NotifyChangeMoneyMessage ( class ASFPlayerReplicationInfo* PerformerPRI, int MoneyAmount, unsigned long IsReturnMoney );
	void CheckGRI ( );
	void CheckRoundWinByItemAmount ( );
	void ReturnItem ( class ASFConvoyancePlayerReplicationInfo* PerformerPRI, int ReturnAmount );
	void LoseItem ( class ASFConvoyancePlayerReplicationInfo* PerformerPRI, int LoseAmount );
	void ClearMessage ( int PlayerID );
	int GetSeizureMoneyAmount ( int PlayerID );
	void RemoveConvoyanceItem ( class AController* InstigatedBy, unsigned long IsSuccessSeizure );
	void AttachConvoyanceItem ( class AController* Ctrl, int MoneyAmount, unsigned long IsCompleteAttach );
	void SetConvoyVehicleSpeed ( );
	void PushScoreUp ( class ASFPlayerController* SFPC );
	void SubtractUserCountInVolume ( class ASFPlayerController* SFPC );
	void SetInVolumeStartTime ( class ASFPlayerController* SFPC );
	void AddUserCountInVolume ( class ASFPlayerController* SFPC );
	int GetUserCountInVolume ( );
	void OnReachedLastConvoyMoveTarget ( );
	void GetDistancePathNode ( );
	int SortConvoyPathNodeArrayDelegate ( class APathNode* Item1, class APathNode* Item2 );
	void GetConvoyanceTargetVolume ( );
	void GatherConvoyPathNode ( );
	void SubRemainMoney ( int SubMoneyAmount );
	void SetRemainMoney ( int SetMoenyValue );
	int GetRemainMoney ( );
	void ResetMoney ( );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void Reset ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason, unsigned long bForce );
	void GetConvoyanceMoveTarget ( );
	void StartMatch ( );
};

UClass* ASFConvoyanceGame::pClassPointer = NULL;

// Class SFGame.SFStrongHoldGame
// 0x0010 (0x0854 - 0x0844)
class ASFStrongHoldGame : public ASFTeamGameInfo
{
public:
	int                                                RespawnPeriod;                                    		// 0x0844 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bForceRespawnNextArea : 1;                        		// 0x0848 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bCanRespawn : 1;                                  		// 0x0848 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                MaxMissionWinCount;                               		// 0x084C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFStrongHoldGameReplicationInfo*            SFSHGRI;                                          		// 0x0850 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3117 ];

		return pClassPointer;
	};

	bool CheckPlayerStartByMode ( class AController* Player, unsigned char InTeam, class ASFGamePlayerStart* SFPS );
	void OnMissionSuccess ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void RoundEndByTime ( );
	void OnSetStrongHoldRoundTime ( float Time );
	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void CheckRespawnTime ( );
	void RestartPlayer ( class AController* aPlayer );
	bool GetEnableRespawn ( class ASFPlayerController* SFPC );
	void RespawnNextArea ( );
	void ChangeSHAreaIndex ( unsigned char nNewAreaIndex, class AController* CompletePlayer );
	void CheckGRI ( );
};

UClass* ASFStrongHoldGame::pClassPointer = NULL;

// Class SFGame.SFSurvivalGame
// 0x0028 (0x086C - 0x0844)
class ASFSurvivalGame : public ASFTeamGameInfo
{
public:
	TArray< struct FsReservedBeaconTarget >            ReservedBeaconTargets;                            		// 0x0844 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DBNOCount;                                        		// 0x0850 (0x0004) [0x0000000000000000]              
	float                                              RespawnDelayForRIP;                               		// 0x0854 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RespawnPriceForRIP;                               		// 0x0858 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      PrimaryTargetNow;                                 		// 0x085C (0x0004) [0x0000000000000000]              
	class ASFSurvivalGameReplicationInfo*              SFSurvivalGRI;                                    		// 0x0860 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AllowedTimeToUseNextWaveTrigger;                  		// 0x0864 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MaxWaveCounterToPass;                             		// 0x0868 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3119 ];

		return pClassPointer;
	};

	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	struct FString UpdatePlayInfoDS ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bAbnormalEnd, struct FString GameIndex, int GameModeIdx, int GameMapIdx, int InGamePlayer, float PlayTime );
	bool IsSuppressedHackType ( unsigned char InHackType );
	void OnAddMoneyToAllPlayer ( class USFSeqAct_AddMoneyToAllPlayer* inAction );
	void SetActiveNextWaveTrigger ( unsigned long bActive );
	void InactiveNextWaveTrigger ( );
	void StartNextWave ( class ASFPlayerReplicationInfo* InstigatorPRI );
	void OnClearPassedWave ( );
	void OnBroadcastMessageEx ( class USFSeqAct_BroadcastMessageByType* Action );
	bool IsLivePlayer ( class ASFPlayerController* SFPC );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason, unsigned long bForce );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	int GetMemberDBNOCount ( int TeamNum );
	int GetMemberRevivalCount ( int TeamNum );
	int GetMemberDeathCount ( int TeamNum );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	float GetMinRespawnDelayRIP ( class ASFPlayerController* SFPC );
	float GetMinRespawnDelay ( class ASFPlayerController* TargetPC, unsigned long bShowKillCam );
	void NotifyPrimaryTargetChanged ( class AActor* OldTarget, class AActor* NewTarget );
	void eventOnSetPrimaryTarget ( class USFSeqAct_SetPrimaryTarget* Action );
	void OnChangedAIList ( );
	void BaseScoreLuckyPoint ( class ASFPlayerReplicationInfo* TargetPRI );
	void ScoreAssist ( class ASFPlayerReplicationInfo* AssistPRI, class ASFPlayerReplicationInfo* OtherPRI, int LadderDiff );
	void AccumulateAllMoney ( int Money );
	void CalculatePVEMoney ( class ASFPlayerReplicationInfo* Scorer, unsigned char ScoreType, class ASFPlayerReplicationInfo* OtherPRI );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void BaseScoreDeath ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI, class UClass* DamageType );
	unsigned char CheckSurvivor ( );
	unsigned char CheckExtermination ( );
	unsigned char CheckMission ( class APlayerReplicationInfo* LastDeath );
	bool CheckWaveEnd ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void NotifySetTeam ( class AController* Other, class ASFTeamInfo* NewTeam );
	void SpawnBeaconTarget ( class APawn* Inst, struct FVector Beaconlocation, class UClass* BeaconTargetClass );
	void CheckReservedBecon ( );
	void NotifyBeaconActivated ( class ASFProjectileBeacon* BeaconProj );
	bool IsUnlimitedSpawnMode ( );
	int GetDBNOMemberCount ( );
	void NotifyDBNO ( class AController* Inst, class AController* Victim, unsigned char DBNOLevelNew );
	void CheckGRI ( );
	void ClearAllRespawnTimers ( );
	void RespawnDeadPlayers ( );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	void SetMaxWaves ( );
	void eventPostBeginPlay ( );
};

UClass* ASFSurvivalGame::pClassPointer = NULL;

// Class SFGame.SFGameItem
// 0x0018 (0x0054 - 0x003C)
class USFGameItem : public UObject
{
public:
	TArray< struct FSFItemData >                       GameItemInfo;                                     		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemClassLoaded__Delegate;                    		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3121 ];

		return pClassPointer;
	};

	void OnItemClassLoaded ( class UObject* LoadedObject, int ItemId );
};

UClass* USFGameItem::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart
// 0x0054 (0x0358 - 0x0304)
class ASFGamePlayerStart : public APlayerStart
{
public:
	unsigned long                                      bHumanStart : 1;                                  		// 0x0304 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyUseToRespawn : 1;                            		// 0x0304 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              EnemyRadiusForRespawn;                            		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnemeyRadiusCenterOffsetForRespawn;               		// 0x030C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLastReSpawnTime;                                 		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FriendLocation;                                   		// 0x031C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     EnemeyRadiusCenterInWorldSpace;                   		// 0x0328 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTexture2D* >                        TeamSprites;                                      		// 0x0334 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  DefaultSprite;                                    		// 0x0340 (0x0004) [0x0000000000000000]              
	class UDrawSphereComponentWhenSelecting*           SphereComp;                                       		// 0x0344 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UClass* >                            ExceptionGameModes;                               		// 0x0348 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                GorupNumber;                                      		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3123 ];

		return pClassPointer;
	};

	int GetAreaIndex ( );
	struct FVector GetLocationForEnemyDistance ( );
	unsigned char eventScriptGetTeamNum ( );
};

UClass* ASFGamePlayerStart::pClassPointer = NULL;

// Class SFGame.SFGameAIStart
// 0x000C (0x0364 - 0x0358)
class ASFGameAIStart : public ASFGamePlayerStart
{
public:
	TArray< unsigned char >                            SuppressAITypes;                                  		// 0x0358 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3125 ];

		return pClassPointer;
	};

};

UClass* ASFGameAIStart::pClassPointer = NULL;

// Class SFGame.SFGameConvoyTargetAIStart
// 0x0000 (0x0364 - 0x0364)
class ASFGameConvoyTargetAIStart : public ASFGameAIStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3127 ];

		return pClassPointer;
	};

};

UClass* ASFGameConvoyTargetAIStart::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_DM
// 0x0000 (0x0358 - 0x0358)
class ASFGamePlayerStart_DM : public ASFGamePlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3129 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStart_DM::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_Mission
// 0x0000 (0x0358 - 0x0358)
class ASFGamePlayerStart_Mission : public ASFGamePlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3131 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStart_Mission::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_Mission_vs16
// 0x0000 (0x0358 - 0x0358)
class ASFGamePlayerStart_Mission_vs16 : public ASFGamePlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3133 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStart_Mission_vs16::pClassPointer = NULL;

// Class SFGame.SFGameWarriorAIStart
// 0x0030 (0x0388 - 0x0358)
class ASFGameWarriorAIStart : public ASFGamePlayerStart
{
public:
	TArray< unsigned char >                            SpawnAITypes;                                     		// 0x0358 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SpawnGroup;                                       		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrengthenRate;                                   		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrengthenRateMax;                                		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFlexibleScale : 1;                               		// 0x0370 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreBase : 1;                                  		// 0x0370 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowRespawnWhenAllChildPawnDead : 1;            		// 0x0370 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       SquadName;                                        		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class APawn* >                             SpawnedPawns;                                     		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3135 ];

		return pClassPointer;
	};

	bool IsSpawnable ( );
	void OnSpawnedPawnKilled ( class APawn* TargetPawn );
	void AddSpawnedPawn ( class APawn* TargetPawn );
};

UClass* ASFGameWarriorAIStart::pClassPointer = NULL;

// Class SFGame.SFGameplayEventsWriter
// 0x0010 (0x0140 - 0x0130)
class USFGameplayEventsWriter : public UGameplayEventsWriter
{
public:
	struct FString                                     UploadPath;                                       		// 0x0130 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUploadFile : 1;                                  		// 0x013C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bActiveEventsWriter : 1;                          		// 0x013C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3137 ];

		return pClassPointer;
	};

	bool IsActived ( );
	struct FString GetUniqueFilename ( );
	void EndLogging ( );
	void StartLogging ( float HeartbeatDelta );
	void Poll ( );
};

UClass* USFGameplayEventsWriter::pClassPointer = NULL;

// Class SFGame.SFTournamentResultWriterBase
// 0x0018 (0x0158 - 0x0140)
class USFTournamentResultWriterBase : public USFGameplayEventsWriter
{
public:
	struct FString                                     ResultDirectory;                                  		// 0x0140 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SavedString;                                      		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3139 ];

		return pClassPointer;
	};

	void eventAddTournamentLogPlayerStringEvent ( int EventID, struct FString Player, struct FString EventString );
	void TournamentLogPlayerStringEvent ( int EventID, struct FString Player, struct FString EventString );
	void eventAddLogPlayerIntEvent ( int EventID, class AController* Player, int Value );
	void LogPlayerIntEvent ( int EventID, class AController* Player, int Value );
	void eventAddTournamentLogPlayerKillDeath ( int EventID, int KillType, struct FString Killer, struct FString WeaponName, struct FString Dead );
	void TournamentLogPlayerKillDeath ( int EventID, int KillType, struct FString Killer, struct FString WeaponName, struct FString Dead );
	void eventAddLogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void eventAddTournamentLogPlayerSpawnEvent ( int EventID, class APawn* PlayerPawn, class UClass* PawnClass, int TeamID );
	void TournamentLogPlayerSpawnEvent ( int EventID, class APawn* PlayerPawn, class UClass* PawnClass, int TeamID );
	void eventAddLogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void eventAddLogGameStringEvent ( int EventID, struct FString Value );
	void LogGameStringEvent ( int EventID, struct FString Value );
	void release ( );
	void Init ( );
	void eventCloseTournamentResult ( );
	void eventOpenTournamentResult ( );
	struct FString GetUniqueFilename ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};

UClass* USFTournamentResultWriterBase::pClassPointer = NULL;

// Class SFGame.SFGameReplicationInfo
// 0x0230 (0x04A8 - 0x0278)
class ASFGameReplicationInfo : public AGameReplicationInfo
{
public:
	TArray< struct FsDeadPawnObject >                  DeadPawnList;                                     		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFirstKillAchieved : 1;                           		// 0x0284 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bChangePlayerTeam : 1;                            		// 0x0284 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUseRandomRespawn : 1;                            		// 0x0284 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsTutorialGame : 1;                              		// 0x0284 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRoundEnded : 1;                                  		// 0x0284 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsLobby : 1;                                     		// 0x0284 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bStartMatchInTournamentGame : 1;                  		// 0x0284 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bTournamentGame : 1;                              		// 0x0284 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bFreeTournamentGame : 1;                          		// 0x0284 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bWakeRigidBody : 1;                               		// 0x0284 (0x0004) [0x0000000000002020] [0x00000200] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIsMatchInProgress : 1;                           		// 0x0284 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bNeedTeamScoreForShop : 1;                        		// 0x0284 (0x0004) [0x0000000000004001] [0x00000800] ( CPF_Edit | CPF_Config )
	unsigned long                                      bEnableGrenadeIndicator : 1;                      		// 0x0284 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      UseExtendDamageDepiction : 1;                     		// 0x0284 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      ForceAllWeaponPlayExtendDamageDepiction : 1;      		// 0x0284 (0x0004) [0x0000000000004001] [0x00004000] ( CPF_Edit | CPF_Config )
	unsigned long                                      IsTopViewGame : 1;                                		// 0x0284 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bVoteTargetIsMe : 1;                              		// 0x0284 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      PassAISpawnAnim : 1;                              		// 0x0284 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      UseAISpawnEffect : 1;                             		// 0x0284 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bFirePitchFixed : 1;                              		// 0x0284 (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      bDisablePrimaryMagazineUpItem : 1;                		// 0x0284 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bUsedPrimaryWeapon : 1;                           		// 0x0284 (0x0004) [0x0000000000000020] [0x00200000] ( CPF_Net )
	unsigned long                                      bUsedSecondaryWeapon : 1;                         		// 0x0284 (0x0004) [0x0000000000000020] [0x00400000] ( CPF_Net )
	unsigned long                                      bNeedRequestUserCondition : 1;                    		// 0x0284 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      DedicateLog : 1;                                  		// 0x0284 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bWaitingForGameExit : 1;                          		// 0x0284 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned char                                      nCurrRound;                                       		// 0x0288 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bIsNeedToTeamChange;                              		// 0x0289 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bMatchEnded;                                      		// 0x028A (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      WinningTeam;                                      		// 0x028B (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      RoundWinType[ 0x8 ];                              		// 0x028C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      nWorldProjectileID;                               		// 0x0294 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      channelType;                                      		// 0x0295 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UpdateInstantBGM;                                 		// 0x0296 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      IFFMode;                                          		// 0x0297 (0x0001) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      TypeCombatReport;                                 		// 0x0298 (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      CurrentInfiniteAmmoWeaponGroup[ 0x9 ];            		// 0x0299 (0x0009) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RandomProvideWeapon;                              		// 0x02A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CustomModeType;                                   		// 0x02A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     HostPlayerName;                                   		// 0x02AC (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	class ASFPlayerController*                         SFPCOwner;                                        		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       GameInfoState;                                    		// 0x02BC (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       PrevGameInfoState;                                		// 0x02C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       EndReason[ 0x8 ];                                 		// 0x02CC (0x0040) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RoundScore[ 0x8 ];                                		// 0x030C (0x0020) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AActor*                                      EndGameFocus;                                     		// 0x032C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class USFOnlineSubsystemPC*                        SFOnlineSub;                                      		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      AnnouncerMsgClass;                                		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFProj_HG_Gas* >                    EffectualityGasBombs;                             		// 0x0338 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ASFProj_HG_Function* >               FunctionalProj;                                   		// 0x0344 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFTemporaryObjectPool*                      tempObjPool;                                      		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFSpectatorEmitter* >               arrSFSpectatorEmitters;                           		// 0x0354 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FReplicatedWeatherData                      ReplicatedWeather;                                		// 0x0360 (0x0010) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class AActor* >                            MissionActors;                                    		// 0x0370 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                AliveMissionActors[ 0xA ];                        		// 0x037C (0x0028) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             IgnoreInputGameInfoState;                         		// 0x03A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class ASFPlayerReplicationInfo*                    WinningKillerPRI;                                 		// 0x03B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ASFPlayerReplicationInfo*                    WinningKilledPRI;                                 		// 0x03B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     LogUniqueID;                                      		// 0x03B8 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           UsageLimitItemClassList;                          		// 0x03C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            UsageLimitItemClassArray;                         		// 0x03D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFTournamentResultWriterBase*               TournamentResultWriter;                           		// 0x03DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UnPauserID;                                       		// 0x03E0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ASFInGameStore*                              InGameStore;                                      		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageModifier;                                   		// 0x03E8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              BackAttackDamageModifier;                         		// 0x03EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AIDifficulty;                                     		// 0x03F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              fUseFriendlyFireDamage;                           		// 0x03F4 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              fAllowSelfInjury;                                 		// 0x03F8 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	class ASFBreakableGlassSyncState*                  GlassSyncStateList;                               		// 0x03FC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FInstantBGM >                       InstantBGMList;                                   		// 0x0400 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       InstantBGMName;                                   		// 0x040C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AreaIndex;                                        		// 0x0414 (0x0004) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	class UClass*                                      HardcoreOption;                                   		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              ExtendDamageDepictionColorMax;                    		// 0x041C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ExtendDamageDepictionMeshMax;                     		// 0x0420 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ExtendDamageDepictionTransMax;                    		// 0x0424 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                VoteProposerPID;                                  		// 0x0428 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                VoteTargetPID;                                    		// 0x042C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                VoteStartTrigger;                                 		// 0x0430 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AIAutoBalanceMode;                                		// 0x0434 (0x0004) [0x0000000000004021]              ( CPF_Edit | CPF_Net | CPF_Config )
	int                                                DefaultMeshUseAILevel;                            		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                defaultModePointedColor;                          		// 0x043C (0x0010) [0x0000000000000000]              
	struct FRotator                                    CameraBaseRotation;                               		// 0x044C (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                ChangePlayerStartGroupNumber;                     		// 0x0458 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                GameModeID;                                       		// 0x045C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GameMapID;                                        		// 0x0460 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     GameRule;                                         		// 0x0464 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	class UParticleSystem*                             ProjectilePS;                                     		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FProjectileEmitterData >            ProjectileEmitterList;                            		// 0x0474 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FVector >                           ProjectileTeamColor;                              		// 0x0480 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FUserConditionData >                UserConditionList;                                		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                UserConditionMinPlaytime;                         		// 0x0498 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FSFeverValues                               FeverValues;                                      		// 0x049C (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3141 ];

		return pClassPointer;
	};

	void RequestInGameBombSPInfo ( class ASFPlayerReplicationInfo* SFPRI, int SlotIndex );
	void SetFeverValues ( );
	void RequestUserConditionInfo ( class ASFPlayerReplicationInfo* SFPRI );
	void RequestAllUserConditionInfo ( );
	bool IsExistAllUserConditionInfo ( );
	bool FindUserCondition ( class ASFPlayerReplicationInfo* SFPRI, struct FUserConditionData* UserCondition );
	void AddUserCondition ( struct FUserConditionData* UserCondition );
	bool IsUsageLimitItem ( class UClass* ItemClass );
	void SetUserBombSPData ( struct FSBombSPData UserBombSPData );
	class ASFEmitterNoSyncSpawnable* AddProjectileEmitter ( class ASFProjectile* NewProj, struct FString ProjectileTrailName );
	void DestroyedProjectile ( class AProjectile* NewProj );
	void SpawnedProjectile ( class ASFProjectile* NewProj, struct FString ProjTrailName );
	void SetHideAllPawn ( unsigned long bHide );
	int GetMatineeMeshChangingTeam ( );
	int GetGameAggroMultiplier ( );
	bool TeamCaptainChoice ( class AController* Other, int CurrTeamIndex );
	struct FLinearColor GetModePointedColor ( int newCase );
	void UpdateItemCarrierPathNode ( );
	class AController* GetControllerbyPlayerID ( int PlayerID );
	bool IsDefaultMeshUseAILevel ( );
	void SendInGameMatchOver ( class USFOnlineSubsystemPCDedi* SFOSPCDedi, struct FString UniqueKey, int OverMatch );
	void MatchOverDediLog ( class USFOnlineSubsystemPCDedi* SFOSPCDedi, struct FSFGameLog GameLog, struct FString UniqueKey );
	void MatchOverLog ( class USFOnlineSubsystemPC* SFOSPC, struct FSFGameLog GameLog );
	float GetPingDelay ( );
	bool IsHoldRotationInPingBoard ( );
	bool IsPingNoticeUsable ( );
	bool IsEnableVoteKickWithTeam ( class ASFPlayerReplicationInfo* PlayerPRI, class ASFPlayerReplicationInfo* TargetPRI, unsigned long bCheckOwner );
	void ClientActivatedInGameKickVote ( );
	void ActivatedInGameKickVote ( );
	bool IsPlayerVoteKickTarget ( int TargetPlayerID );
	void SetKickVoteInfo ( int NewProposerPID, int NewTargetPID );
	bool IsValidVotePlayerInfo ( );
	bool ForceUsingAISpawnAnim ( );
	bool IsNeutralTeam ( int TeamNum );
	int GetHumanPlayerCount ( );
	int GetTeamPlayerCount ( class ASFPlayerController* Inst );
	bool HasAnyRareWeapon ( class ASFPlayerController* Inst, class USFSeqAct_GiveWeaponbyCondition* giveWeaponSeq );
	bool TeamHasThisweapon ( class ASFPlayerController* Inst, class UClass* WeaponClass );
	bool AnyPlayerHasThisweapon ( class UClass* WeaponClass );
	int GetMyRank ( class ASFPlayerController* Inst );
	int GetRandomforGiveItemCondition ( class ASFPlayerController* Inst, class USFSeqAct_GiveWeaponbyCondition* giveWeaponSeq );
	class ASFHeadQuarters* GetHeadQuarter ( class AActor* Target );
	void SetAdditionalGameLog ( TArray< struct FAdditionalModeResult >* LogList );
	void NotifyMissionActorDestroyed ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyMissionActorDamaged ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam, int DamageAmount );
	bool ShowRespawnGauge ( );
	bool CanUseInstantRespawn ( );
	void UpdatedStreamingLevel ( );
	class USFCCTV* GetCCTVInfo ( );
	void GetAIHitableTargetClass ( TArray< class UClass* >* TargetClass );
	float eventGetShowCloakingRipperTime ( );
	void SetShowCloakingRipperTime ( float Value );
	bool eventIsFastWave ( );
	void SetFastWave ( unsigned long bFlag );
	bool eventShouldShowGore ( );
	bool GetPawnOutlineInfo ( unsigned char PawnOutlineType, struct FPawnOutlineInfo* NewOutlineInfo );
	bool CanHideHitIndicator ( );
	bool CanHideCrossHair ( );
	bool CanUseArmBand ( );
	bool CanUseEnemyCharacter ( );
	float GetBackAttackDamageModifier ( class APlayerReplicationInfo* AssaulterPRI, class APlayerReplicationInfo* VictimPRI, float DefaultWeaponMul );
	float GetDamageModifier ( );
	void SetBackAttackDamageModifier ( float NewValue );
	void SetDamageModifier ( float NewValue );
	bool IsIgnoreChallengeList ( );
	bool IsHardCoreMode ( );
	void SetSliceState ( int MeshID, float X, float Y, float Z, float W );
	bool RegisterGlassActor ( class ASFBreakableGlassSyncActor* GlassActor );
	void UpdateGlassState ( class ASFBreakableGlassSyncActor* GlassActor );
	class ASFBreakableGlassSyncState* GetGlassSyncState ( int GlassActorIndex );
	class ASFBreakableGlassSyncState* SpawnBreakableGlassSyncState ( );
	void AddWallet ( class APlayerReplicationInfo* TargetPRI, int nAdd );
	bool ConsumeWalletAmounts ( class APlayerReplicationInfo* TargetPRI, unsigned char ForWhat, float NeedScore, unsigned long bForWaveEnd );
	int GetWalletAmounts ( class APlayerReplicationInfo* TargetPRI );
	class ASFPlayerReplicationInfo* GetPRIbyName ( struct FString PlayerName );
	class ASFPlayerReplicationInfo* GetPRIbyPlayerID ( int PlayerID );
	int GetTeamScore ( class APawn* User );
	bool TotalDestruction ( unsigned char Team );
	class UClass* GetGameScoreClass ( );
	void WakeRigidBody ( );
	bool eventGetShowMatchAnimation ( );
	void SetRemainingTime ( float InRemainingTime );
	void AddRemainingTime ( float AddTime );
	void RemoveAllDeadPawnList ( );
	void AddDeadPawnList ( struct FVector Loc, int TeamNum, struct FString PlayerName, float TimeofDeath );
	void MatchEndSequence ( unsigned long bWinnerCutScene );
	void GetPlayerCounter ( int* nPlayer, int* nSpectator );
	void SetUnPauserID ( int PlayerID );
	void ChangeSHAreaIndex ( unsigned char nNewAreaIndex, unsigned long bForce );
	int GetAreaIndex ( );
	void SetAreaIndex ( int nNewAreaIndex );
	void SetStartMatchInTournamentGame ( unsigned long bCanStart );
	bool CanStartMatchInTournamentGame ( );
	struct FVector GetTeamBaseLocationByGroupNumber ( unsigned char TeamIndex, int GroupNumber );
	struct FVector GetTeamBaseLocation ( unsigned char TeamIndex );
	bool eventIsTrainingGame ( );
	bool IsFirstRound ( );
	struct FString GetHostPlayerName ( );
	void UpdateHostPlayerName ( struct FString NewHostPlayerName );
	void StartMatch ( );
	float GetElapsedTime ( );
	float GetRemainingTime ( );
	bool IsValidTeam ( int CurrTeamIndex, int ValidTeamIndex );
	void UpdateFunctionalProj ( );
	void ClearFunctionalProj ( );
	void RemoveFunctionalProj ( class ASFProj_HG_Function* Proj );
	void AddFunctionalProj ( class ASFProj_HG_Function* Proj );
	void RemoveGasBomb ( class ASFProj_HG_Gas* Proj );
	void AddGasBomb ( class ASFProj_HG_Gas* Proj );
	class USFTemporaryObjectPool* GetTempObjPool ( );
	unsigned char GetSHArea ( );
	void UpdateClanDisConnectBuff ( int ExitPlayerID );
	void eventLogout ( int nPlayerID );
	bool NeedSetAtropine ( class ASFPlayerReplicationInfo* SFPRI );
	bool CanThrowC4 ( );
	bool IsAttacker ( unsigned char TeamNum );
	unsigned char GetProjectileID ( );
	void eventSetWeatherLODLevel ( int Level );
	void eventSetWeatherEmitterHeight ( float Height );
	void eventSetCurrentWeather ( class UClass* WeatherClass, unsigned long UseCameraLensEffect );
	void SetAllowSelfInjury ( float newfloat );
	float AllowSelfInjury ( );
	void SetUserFriendlyFireDamage ( float newfloat );
	float UseFriendlyFireDamage ( class AActor* InInstigator, class AActor* injured );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, class UClass* DamageType, int* Damage );
	void MissionObjectiveComplete ( unsigned char MissionType );
	int GetMissionActorCount ( int TeamIndex );
	void RemoveMissionActor ( class AActor* TargetActor );
	void AddMissionActor ( class AActor* NewMissionActor );
	class AActor* GetMissionActor ( int Index );
	void StartCountDown ( unsigned long bStart );
	void SeqEventLevelLoaded ( );
	void ResetGameSequence ( );
	void ClientReset ( );
	void Reset ( );
	void GetMapLoadingUserList ( TArray< struct FString >* arrUserNames );
	void GetMeshProcessingUserList ( TArray< struct FString >* arrUserNames );
	bool InitialProcessingIsComplete ( int* nCompletedPC );
	void SetSpectatorCamera ( unsigned long bSpectator );
	void InitSpectatorEmitters ( );
	void SetIgnoreCullDistanceVolume ( unsigned long bIgnore );
	class ASFPlayerController* GetCachedLocalPC ( );
	void SetChannelType ( );
	void eventDestroyed ( );
	void CheckMapLoaded ( );
	bool CanAcquireLuckyPoint ( );
	bool CanProcessHitInfoLog ( );
	bool eventCouldSendGameScore ( );
	bool CouldSendWeaponTime ( );
	bool CouldSendWeaponLog ( );
	bool eventCouldSendPlayerLog ( );
	bool CouldSendEndGame ( );
	bool CouldSendMapLoaded ( );
	bool CouldSendGameLog ( );
	unsigned char GetAIDifficulty ( );
	void SetAIDifficulty ( unsigned char eDifficulty );
	void eventOnMapLoaded ( );
	void eventPostBeginPlay ( );
	void ReleaseTournamentResultWriter ( );
	void InitTournamentResultWriter ( );
	void TournamentChangePlayerTeam ( );
	void TournamentPlayerStringStat ( struct FString Player, struct FString EventString );
	void TournamentKillEvent ( struct FString KillerName, struct FString WeaponName, struct FString KilledName );
	void TournamentPlayerSpawn ( class APawn* PlayerPawn, int nTeamIndex );
	void TournamentLoginChange ( class AController* ctr, struct FString PlayerName, struct FUniqueNetId UniqueId );
	void SetTeam ( int Index, class ATeamInfo* TI );
	bool IsFreeTournamentGame ( );
	bool IsTournamentGame ( );
	void SetFreeTournamentGame ( unsigned long bFlag );
	void SetTournamentGame ( unsigned long bFlag );
	void UpdateRegisterGlassActor ( );
	bool IsCanInGameKickChannel ( );
	void CheckTournamentGame ( );
	class ASFTeamInfo* GetTeam ( unsigned char TeamIndex );
	void Init ( );
	void ForceUpdateRemainingTime ( unsigned long bForceUpdate );
	void ReSettingTimer ( int newRemainingTime );
	void eventTimer ( );
	void IncreaseElapsedTime ( );
	void WaitingForGameExit ( );
	void RequestEndGame_GameExit ( );
	void NotifyEndGametoAllController ( );
	void EndGame ( );
	unsigned char GetGameMode ( );
	void OnMatchOver ( float Duration, class UClass* SFGameClass );
	void OnMatchInProgress ( float Duration, class UClass* SFGameClass );
	void NotifyRoundStarted ( );
	void OnPreMatchIntro ( float Duration, class UClass* SFGameClass );
	void OnPreMatchInProgress ( float Duration, class UClass* SFGameClass );
	void OnWinningKill ( float Duration, class UClass* SFGameClass );
	void OnStartSwitchingSide ( float Duration, class UClass* SFGameClass );
	void OnRoundOver ( float Duration, class UClass* SFGameClass );
	void OnPreRoundOver ( float Duration, class UClass* SFGameClass );
	void OnPreCountDown ( float Duration, class UClass* SFGameClass );
	void OnCountDown ( float Duration, class UClass* SFGameClass );
	void OnPendingMatch ( class UClass* SFGameClass );
	void UpdateIgnoreInput ( );
	bool IsIgnoreInput ( struct FName GIStateName );
	void ChangedGameInfoState ( );
	bool NotUsingInventoryInfo ( );
	bool IsUnlimitedSpawnMode ( );
	float GetWeaponDisappearTime ( class AActor* Caller );
	void ClearBGM ( );
	void PlayBGM ( struct FString SoundCueName, float FadeInTime, float FadeOutTime, float Duration );
	void PlayBGMBySoundCue ( class USoundCue* SoundCue, float FadeInTime, float FadeOutTime, float Duration );
	void PlayInstantBGM ( struct FName InInstantBGMName );
	void GetInstantBGMInfo ( struct FName InInstantBGMName, struct FInstantBGM* BGMInfo );
	bool IsUseRandomRespawn ( unsigned long bCheckAllStartPoint );
	void SetUseRandomRespawn ( unsigned long bFlag );
	struct FName GetGameInfoState ( );
	void SetGameInfoState ( struct FName CurrentState );
	bool IsPVEMode ( );
	void ReceivedGameClass ( );
	unsigned char GetIFFMode ( );
	void SetIFFMode ( unsigned char NewMode );
	void ChangedIFFMode ( );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateMatchInProgress ( );
	bool IsMatchInProgress ( );
	bool IsTeamGame ( );
	void GetTouchingTeamPawns ( class AActor* TargetActor, unsigned char CheckTeamNum, TArray< class ASFPawn* >* arrPawns );
	int GetTouchingPawnCounter ( class AActor* TargetActor, int* RedTeamUserCounter, int* BlueTeamUserCounter, int* AICounter );
	TArray< class ASFPawn* > FindAllSFPByPlayerID ( int nPlayerID );
	class ASFPawn* FindSFPByPlayerID ( int nPlayerID, unsigned long bExceptKillCamDummy );
	class ASFPlayerReplicationInfo* FindSFPRIByPlayerName ( struct FString PlayerName );
	class ASFPlayerReplicationInfo* FindSFPRIByPlayerID ( int nPlayerID );
	class ASFPlayerController* FindSFPCByPlayerID ( int nPlayerID );
	void AllNetRelevantActor ( class UClass* BaseClass, class AActor** netActor );
	void AllCollidingPlayerStarts ( class UClass* BaseClass, struct FVector CheckLoc, float CheckRadius, class ANavigationPoint** Nav, float* Dist2D );
	void AllCollidingSFPawns ( struct FVector CheckLoc, float CheckRadius, class ASFPawn** SFP );
	void AllActorWithInterface ( class UClass* InterfaceClass, class AActor** Actor );
};

UClass* ASFGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFBeastGameReplicationInfo
// 0x0001 (0x04A9 - 0x04A8)
class ASFBeastGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	unsigned char                                      BeastTeam;                                        		// 0x04A8 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3143 ];

		return pClassPointer;
	};

};

UClass* ASFBeastGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFCaptureGameReplicationInfo
// 0x0010 (0x04B8 - 0x04A8)
class ASFCaptureGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	int                                                CapturedPlayerID;                                 		// 0x04A8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ECaptureTeam;                                     		// 0x04AC (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PassedCaptureTime;                                		// 0x04B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                CompleteCaptureTime;                              		// 0x04B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3145 ];

		return pClassPointer;
	};

	int GetEnableCaptureRemainTime ( );
	bool IsEnableCaptureVolume ( );
	void UpdateChangedTime ( );
	unsigned char GetCaptureTeam ( );
	void CaptureTeamChanged ( );
	void SetCaptureTeam ( unsigned char NewTeam, int PlayerID );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFCaptureGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFConvoyanceGameReplicationInfo
// 0x001C (0x04C4 - 0x04A8)
class ASFConvoyanceGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	int                                                SeizureMoney;                                     		// 0x04A8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RemainMoney;                                      		// 0x04AC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                TotalMoney;                                       		// 0x04B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ClearMessagePlayerID;                             		// 0x04B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              MovedDistance;                                    		// 0x04B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      IsConvoyanceMoving : 1;                           		// 0x04BC (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	class AInterpActor*                                MoveTarget;                                       		// 0x04C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3147 ];

		return pClassPointer;
	};

	void eventLogout ( int nPlayerID );
	void NotifyChangeMoneyMessage ( class ASFPlayerReplicationInfo* PerformerPRI, int MoneyAmount, unsigned long IsReturnMoney );
	void ClearMessage ( int PlayerID );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFConvoyanceGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFFrontLineGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFFrontLineGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3149 ];

		return pClassPointer;
	};

};

UClass* ASFFrontLineGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFScenarioGameReplicationInfo
// 0x0020 (0x04C8 - 0x04A8)
class ASFScenarioGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	TArray< class ASFPawn* >                           DBNOPawns;                                        		// 0x04A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TotalLives;                                       		// 0x04B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentServerArea;                                		// 0x04B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AHelicopter*                                 hel;                                              		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFTrigger_Seizure*                          BlackBox;                                         		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InitialRevivalTime;                               		// 0x04C4 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3151 ];

		return pClassPointer;
	};

	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, class UClass* DamageType, int* Damage );
	bool NeedSetAtropine ( class ASFPlayerReplicationInfo* SFPRI );
	bool IsCoopMultiplayerGame ( );
	int GetNextEvent ( );
	void SetBlackBox ( );
	void eventPostBeginPlay ( );
};

UClass* ASFScenarioGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFStrongHoldGameReplicationInfo
// 0x0002 (0x04AA - 0x04A8)
class ASFStrongHoldGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	unsigned char                                      nCurrentAreaIndex;                                		// 0x04A8 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      RespawnTime;                                      		// 0x04A9 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3153 ];

		return pClassPointer;
	};

	void eventTimer ( );
	void Reset ( );
	bool CanThrowC4 ( );
	bool IsFirstRound ( );
	unsigned char GetSHArea ( );
	void OnWaitingForNextMission ( float Duration );
	void ChangeSHAreaIndex ( unsigned char nNewAreaIndex, unsigned long bForce );
	void ChangedGameInfoState ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFStrongHoldGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFSurvivalGameReplicationInfo
// 0x0038 (0x04E0 - 0x04A8)
class ASFSurvivalGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	int                                                CurrentWave;                                      		// 0x04A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                MaxWaves;                                         		// 0x04AC (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class USFSeqAct_Explode* >                 ShockWaveSeqs;                                    		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                VeryHardMaxWave;                                  		// 0x04BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bFastWave : 1;                                    		// 0x04C0 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	float                                              ShowCloakingRipperTime;                           		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AIKillExp;                                        		// 0x04C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RevivalExp;                                       		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WaveClearExp;                                     		// 0x04D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< float >                                    DifficultyExpRatioArray;                          		// 0x04D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3155 ];

		return pClassPointer;
	};

	int GetWaveScore ( int CurWave, int MaxWave );
	float CalculateExp ( class ASFSurvivalPlayerReplicationInfo* SFSurvPRI );
	void CalculateExpAllPri ( class ASFSurvivalPlayerReplicationInfo* SFSurvPRI );
	bool CanUseEnemyCharacter ( );
	float GetShowCloakingRipperTime ( );
	void SetShowCloakingRipperTime ( float fValue );
	void eventTimer ( );
	bool CanAcquireLuckyPoint ( );
	void SetShockWaveSeq ( );
	void SetShockWaveOrigin ( class AActor* OriginActor );
	void ActivateShockWave ( );
	void eventPostBeginPlay ( );
	void AddWallet ( class APlayerReplicationInfo* TargetPRI, int nAdd );
	int GetWalletAmounts ( class APlayerReplicationInfo* TargetPRI );
	bool ConsumeWalletAmounts ( class APlayerReplicationInfo* TargetPRI, unsigned char ForWhat, float NeedScore, unsigned long bForce );
	void eventSetCurrentWave ( int current_wave );
	void UpdateAliveEnemyCount ( TArray< int > enemy_count );
	void UpdateFastWaveKismet ( );
	bool IsFastWave ( );
	void SetFastWave ( unsigned long bFlag );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFSurvivalGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFZombieGameReplicationInfo
// 0x0014 (0x04F4 - 0x04E0)
class ASFZombieGameReplicationInfo : public ASFSurvivalGameReplicationInfo
{
public:
	TArray< struct FSGameAggroMultiplier >             GameAggroMultiplierArray;                         		// 0x04E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AllPlayerEarnedMoney;                             		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              GameAggroMultiplier;                              		// 0x04F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3157 ];

		return pClassPointer;
	};

	int GetWaveScore ( int CurWave, int MaxWave );
	int GetMatineeMeshChangingTeam ( );
	bool CouldSendWeaponLog ( );
	void UpdateGameAggroMultiplier ( );
	void AccumulateAllMoney ( int Money );
	int GetGameAggroMultiplier ( );
};

UClass* ASFZombieGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFThunderRunGameReplicationInfo
// 0x0008 (0x04B0 - 0x04A8)
class ASFThunderRunGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	class ASFPawn*                                     NearestPawn;                                      		// 0x04A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NearestPawnOutlineIndex;                          		// 0x04AC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3159 ];

		return pClassPointer;
	};

	void eventSetNearestPawn ( class ASFPawn* NewPawn );
	void FadeInOnStartSwitchingSide ( );
	void OnStartSwitchingSide ( float Duration, class UClass* SFGameClass );
	void OnMatchOver ( float Duration, class UClass* SFGameClass );
	void OnPreRoundOver ( float Duration, class UClass* SFGameClass );
	void Reset ( );
	bool CanThrowC4 ( );
	bool IsFirstRound ( );
	int GetGoalTime ( unsigned char TeamIndex );
	unsigned char GetSHArea ( );
	void OnWaitingForNextMission ( float Duration );
	void OnMatchInProgress ( float Duration, class UClass* SFGameClass );
	void ChangeSHAreaIndex ( unsigned char nNewAreaIndex, unsigned long bForce );
	void ChangedGameInfoState ( );
	void IncreaseElapsedTime ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFThunderRunGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFZombieHideSeekGameReplicationInfo
// 0x0014 (0x04BC - 0x04A8)
class ASFZombieHideSeekGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	int                                                FeverTimeLevel;                                   		// 0x04A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CountDownStartTime;                               		// 0x04AC (0x0004) [0x0000000000000000]              
	int                                                FeverTimeDuration;                                		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FeverTimeCountDown;                               		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FeverMessageCnt;                                  		// 0x04B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3161 ];

		return pClassPointer;
	};

	bool IsAttacker ( unsigned char TeamNum );
	bool IsFeverTime ( );
	float UseFriendlyFireDamage ( class AActor* InInstigator, class AActor* injured );
	void ShowFeverMessage ( );
	void ShowCountDownMessage ( );
	void FeverCountDownMessage ( );
	void FeverCountDown ( );
	void eventTimer ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetFeverTimeLevel ( unsigned char newLevel );
	int GetFeverTimeLevel ( );
};

UClass* ASFZombieHideSeekGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGashaItem
// 0x000C (0x0048 - 0x003C)
class USFGashaItem : public UObject
{
public:
	TArray< struct FSFGashaItemData >                  GashaItemInfo;                                    		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3163 ];

		return pClassPointer;
	};

};

UClass* USFGashaItem::pClassPointer = NULL;

// Class SFGame.SFInGameStore
// 0x0130 (0x0354 - 0x0224)
class ASFInGameStore : public AActor
{
public:
	TArray< struct FPurchaseItemListData >             OnSaleItemList;                                   		// 0x0224 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFUIDataProvider_InGameStore*               InGameStoreItemList;                              		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x0234 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bOnlyPurchaseUsableLevel : 1;                     		// 0x0234 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FPurchaseInfo                               PurchaseItemInfo;                                 		// 0x0238 (0x000C) [0x0000000000000000]              
	int                                                RepCurrentLevel;                                  		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CurrentItemCount[ 0x3C ];                         		// 0x0248 (0x00F0) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FSAccountBook >                     AccountBook;                                      		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurrentMapName;                                   		// 0x0344 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentShopLevel;                                 		// 0x0350 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3165 ];

		return pClassPointer;
	};

	void SetShopLevelItemList ( );
	void eventServerSetShopLevel ( int NewShopLevel );
	void GetShopItemEffect ( int ItemId, class UParticleSystem** PS, class USoundCue** Snd );
	bool IsInstantBuyItem ( int ItemId );
	bool IsInstantBuyShop ( int SelShopIdx );
	int GetInstantBuyItem ( int SelShopIdx );
	void CalculatePurchasePrice ( int ItemCountIndex );
	int GetShopItemLogData ( int ItemId );
	void NotifyResultToPlayer ( class ASFPlayerController* InPlayerController, int Price );
	void RecordPurchaseData ( int PlayerID, int ItemId, int Amount );
	void SucceedPurchaseTo ( int PlayerID, int ItemId );
	void PerformPurchase ( int PlayerID, int ItemId, int GroupIndex );
	int GetChargedItemCount ( int PlayerID, int ItemId );
	int GetShopItemPrice ( int ItemId, int PlayerID, int GroupIndex );
	bool CanPurchaseItem ( int PlayerID, int ItemId );
	bool IsItemSaleOnStore ( int item_id );
	bool IsStoreActivated ( );
	void FilterPurchaseItems ( int UsableLevel );
	int GetOnSaleItemCount ( );
	void AddPurchaseItems ( int CurrentLevel );
	struct FString GetShopTitleMsg ( );
	void eventPostBeginPlay ( );
	void UpdateAccountBook ( int ItemId );
	void eventReplicatedEventEx ( struct FName VarName, int ElementIndexInArray );
	void eventReplicatedEvent ( struct FName VarName );
	void GetInGameStoreData ( struct FName MapName, class USFUIDataProvider_InGameStore** InGameStoreItemProvider );
};

UClass* ASFInGameStore::pClassPointer = NULL;

// Class SFGame.SFInventoryManager
// 0x00FC (0x033C - 0x0240)
class ASFInventoryManager : public AInventoryManager
{
public:
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bInfiniteMagazine : 1;                            		// 0x0240 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bDirtyWeaponAmmo : 1;                             		// 0x0240 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	TArray< struct FAmmoStore >                        AmmoStorage;                                      		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFWeapon* >                         PreviousWeaponList;                               		// 0x0250 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFWeapon*                                   PendingSwitchWeapon;                              		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              LastAdjustWeaponTime;                             		// 0x0260 (0x0004) [0x0000000000000000]              
	class ASFWeap_Exigency*                            ExigencyWeapon;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned char                                      WaitAction;                                       		// 0x0268 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InfiniteAmmoWeaponGroup[ 0x9 ];                   		// 0x0269 (0x0009) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	unsigned char                                      InfiniteMagazineWeaponGroup[ 0x9 ];               		// 0x0272 (0x0009) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	float                                              WeaponTossMaxSpeed;                               		// 0x027C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              WeaponTossMinSpeed;                               		// 0x0280 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FWeaponAmmo                                 WeaponAmmoInfo[ 0x9 ];                            		// 0x0284 (0x00B4) [0x0000000000002021]              ( CPF_Edit | CPF_Net | CPF_Transient )
	int                                                ShooterExigencySlot;                              		// 0x0338 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3167 ];

		return pClassPointer;
	};

	void ClearExigencyWeaponData ( );
	class ASFWeap_Projectile_exigency* GetCurrentExigencyWeapon ( );
	void ExigencyAttackTopView ( );
	void GetShooterWeaponList ( TArray< class ASFWeapon* >* OutPutWeaponList );
	void PrePendingWeapon ( );
	class AWeapon* HasWeapon ( class UClass* WeaponClass );
	bool IsInfiniteMagazineWeaponGroup ( unsigned char InWeaponGroup );
	bool IsInfiniteAmmoWeaponGroup ( unsigned char InWeaponGroup );
	void SetInfiniteMagazineWeaponGroup ( unsigned char* InWeaponGroup );
	void SetInfiniteAmmoWeaponGroup ( unsigned char* InWeaponGroup );
	void StartFire ( unsigned char FireModeNum );
	void SetDefaultInventory ( int nInvenGroup, int nSlot );
	class ASFWeapon* GetSpecialWeaponByIndicis ( int InvenGroup, int Slot );
	class ASFWeapon* GetWeaponByIndicis ( int InvenGroup, int Slot );
	void NextCheckForInstigator ( );
	class ASFWeapon* GetWeapon ( struct FString SpecificClassName );
	class UClass* GetWeaponClass ( struct FString SpecificClassName );
	float GetWeaponRatingFor ( class AWeapon* W );
	void ServerChangeExigencyWeapon ( );
	void ChangeExigencyWeapon ( );
	void ReturnWeaponforExigency ( );
	class ASFWeap_Exigency* GetExigencyWeapon ( );
	void ExigencyAttack ( );
	void ActiveIndirectWeapon ( unsigned char NewGroup, unsigned char eMissionType, class ASFTrigger_Use* UseTrigger );
	void ActiveMissionWeapon ( class ASFTrigger_Use* UseTrigger, unsigned char eMissionType );
	void MagazineCharge ( int Count );
	void AmmoCharge ( float Percent );
	void ReturnPrevWeapon ( unsigned long bForMissionWeapon, unsigned long bForce );
	void SetInfiniteMagazine ( unsigned long bInfi );
	void SetInfiniteAmmo ( unsigned long bInfi );
	bool IsInfiniteAmmo ( unsigned char InventoryGroup );
	void ClientResetAdditionalWeaponTypes ( );
	void FillAllAmmo ( unsigned char WeaponGroup );
	bool GetWeaponClassFromID ( int nMainBody, class UClass** WeapClass );
	void AsyncPendingWeaponClassFromID ( int nMainBody, struct FScriptDelegate OnLoaded );
	void RestorePRIWeaponInfo ( TArray< int > OptionsBackup );
	void UpdateWeaponMeshCache ( );
	void EncodeWeaponInfo ( int nMainId, class UClass* ClassName, TArray< int >* EncodedInfo );
	class UClass* SetCustomPRIWeaponInfo ( TArray< int > WeaponPartList, TArray< int >* InventorySetBackup );
	bool CustomWeaponChange ( TArray< int > WeaponPartList );
	void SetPRIWeaponInfo ( int nMainId, TArray< int >* InventorySetBackup );
	void SetPRIWeaponInfoWithOption ( int nMainId, int mOptionIdx, int mOptionID, TArray< int >* InventorySetBackup );
	void RemoveFromInventoryByGroup ( unsigned char nWeaponGroup, class ASFWeapon* ExpWeap, unsigned long bNeedToDestroy, TArray< class ASFWeapon* >* RemovedItems );
	void ClearInventory ( );
	bool ExistWeapon ( class UClass* NewWeaponClass );
	bool ChangeOption ( class ASFWeapon* UsingWeapon, class UClass* MyOption, int nOptionID, TArray< int >* nOptions );
	bool ReplaceWeapon ( class ASFWeapon* NewWeapon, unsigned long bDropOldWeapon );
	bool FreeOptionChange ( class ASFWeapon* UsingWeapon, int nOptionID, unsigned long bSwitchWeap );
	bool GiveWeapon ( class UClass* NewWeaponClass );
	void OnWeaponClassPrepared ( class UObject* LoadedObject, int WeaponID );
	bool FreeWeaponChange ( int nMainBody );
	void GetSFWeaponByInvenGroup ( int nInventoryGroup, TArray< class ASFWeapon* > WeapList, class ASFWeapon** SFWP );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void SwitchToPreviousWeapon ( );
	float CalculateInventoryWeight ( class ASFWeapon* CurrentWeapon );
	void InfiniteAmmoExceptionGameMode ( );
	void ChangedWeapon ( );
	class ASFWeapon* GetQueuedLastWeapon ( );
	class AInventory* HasInventoryOfClass ( class UClass* InvClass );
	void AddAmmoToWeapon ( int AmountToAdd, class UClass* WeaponClassToAddTo );
	bool NeedsAmmo ( class UClass* TestWeapon );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	void DiscardInventory ( );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	void CheckSwitchTo ( class ASFWeapon* NewWeapon );
	void RetrySwitchTo ( class ASFWeapon* NewWeapon );
	void ProcessRetrySwitch ( );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void UpdateWeaponAmmo ( class ASFWeapon* sfWeap );
	void SetWeaponAmmo ( TArray< struct FWeaponAmmo > InWeaponAmmoInfo );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ServerHadleFlashOnOff ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void AllAmmo ( unsigned long bAmmoForSuperWeapons );
	void NextWeapon ( );
	void PrevWeapon ( );
	void AdjustWeapon ( int NewOffset );
	void SwitchWeapon ( unsigned char NewGroup );
	void GetWeaponListwithAmmo ( unsigned long bFilter, int GroupFilter, unsigned long bNoEmpty, TArray< class ASFWeapon* >* WeaponList );
	void GetWeaponList ( unsigned long bFilter, int GroupFilter, unsigned long bDirectSelectable, unsigned long bNoEmpty, TArray< class ASFWeapon* >* WeaponList );
	class AInventory* FindInventoryByMotherClass ( class UClass* InvClass );
	class AInventory* FindInventoryByClass ( class UClass* InvClass, int InvGroup, unsigned char ExpandAdditional, unsigned long bIgnoreNotAvailable );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFInventoryManager::pClassPointer = NULL;

// Class SFGame.SFItem_Base
// 0x0124 (0x0160 - 0x003C)
class USFItem_Base : public UObject
{
public:
	TArray< struct FsUIItemStat >                      UIItemStats;                                      		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FItemColorVariationValue >          ColorVariationVelues;                             		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OptionSlot;                                       		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned char                                      ItemType;                                         		// 0x0058 (0x0001) [0x0000000000000000]              
	unsigned char                                      UsableGender;                                     		// 0x0059 (0x0001) [0x0000000000000000]              
	unsigned char                                      DialogIndex;                                      		// 0x005A (0x0001) [0x0000000000000000]              
	struct FString                                     SpecificClassName;                                		// 0x005C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SpecificTargetClassName;                          		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      CommonItem : 1;                                   		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      SingleUse : 1;                                    		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSingleUseButNeedPawn : 1;                        		// 0x0074 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUsePreviewDialog : 1;                            		// 0x0074 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUseDefaultMaterial : 1;                          		// 0x0074 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsInGameStoreItem : 1;                           		// 0x0074 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                ItemTableIndex;                                   		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFItemMesh*                                 MeshData;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DefaultItemClassNames;                            		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AbsolutelyRemovableType;                          		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      NotAllowOverlapType;                              		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MyType;                                           		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                ResourceIndex;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                TextureCoordIndex;                                		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                OverlapCheckFlag;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                AbsoluteCheckFlag;                                		// 0x00B4 (0x0004) [0x0000000000000000]              
	struct FString                                     ItemName;                                         		// 0x00B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OverlapLimitText;                                 		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemContext;                                      		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemBuyDlgNotice;                                 		// 0x00DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GashaToolTipList;                                 		// 0x00E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponEffect;                                     		// 0x00F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponEffectShort;                                		// 0x0100 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strItemInfo;                                      		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strItemNotice;                                    		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strItemText1;                                     		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strItemText2;                                     		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseSuccessMsg;                                 		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseMessagePeriod;                              		// 0x0148 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseMessagePermanent;                           		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3169 ];

		return pClassPointer;
	};

	bool GetColorVariationValue ( unsigned char PartType, struct FItemColorVariationValue* Value );
	bool CanColorVariation ( );
	void GetPartResourceIndexWithData ( unsigned char PartType, struct FPartResourceData* ResourceData );
	bool CanPurchaseInGameStore ( class ASFPawn* ApplidedPawn );
	struct FString GetAdditionalResource ( );
	bool IsCommonItem ( );
	int GetTextureCoordIndex ( );
	void GetSpecificIndexWithDataByID ( class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	void ApplyItemProperty ( class AActor* AppliedActor, struct FString ReceiveItemProperty );
	void PostApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
	void ApplyItemAfterMC ( );
	void ApplyItemBeforeMC ( );
	void ApplyItemToActorByPenalty ( class AActor* AppliedActor );
	void ApplyItemToWeapByPenalty ( class ASFWeapon* AppliedWeap );
	void ApplyItemToPawnByPenalty ( class ASFPawn* AppliedPawn );
	void ApplyItemToActor ( class AActor* AppliedActor );
	void ApplyItemToWeap ( class ASFWeapon* AppliedWeap );
	void ApplyItemToPawn ( class ASFPawn* AppliedPawn );
	void ApplyItemToHostActor ( class AActor* AppliedActor );
	void ApplyItemToHostWeap ( class ASFWeapon* AppliedWeap );
	void ApplyItemToHostPawn ( class ASFPawn* AppliedPawn );
	struct FString GetSpecificClassName ( int OwnerID );
	TArray< struct FString > GetGashaTooltipList ( );
	struct FString GetItemText2 ( );
	struct FString GetItemText1 ( );
	struct FString GetItemNotice ( );
	struct FString GetItemInfoText ( );
};

UClass* USFItem_Base::pClassPointer = NULL;

// Class SFGame.SFItem_Char
// 0x0040 (0x01A0 - 0x0160)
class USFItem_Char : public USFItem_Base
{
public:
	unsigned char                                      CharItemType;                                     		// 0x0160 (0x0001) [0x0000000000000000]              
	struct FName                                       UsableUnit;                                       		// 0x0164 (0x0008) [0x0000000000000000]              
	float                                              LuckyPointProbability;                            		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              ClanPointIncrease;                                		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              ReloadSpeed;                                      		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              EquipSpeed;                                       		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              HealthIncrease;                                   		// 0x017C (0x0004) [0x0000000000000000]              
	int                                                JumpIncrease;                                     		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              ThrowSpeed;                                       		// 0x0184 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             DisableSocketNames;                               		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSpecialSound >                     SpecialSounds;                                    		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3171 ];

		return pClassPointer;
	};

	void GetPartResourceIndexWithData ( unsigned char PartType, struct FPartResourceData* ResourceData );
	void PostApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Char::pClassPointer = NULL;

// Class SFGame.SFItem_Functional
// 0x0014 (0x0174 - 0x0160)
class USFItem_Functional : public USFItem_Base
{
public:
	TArray< struct FSAdditionalInfo >                  AdditionalValueList;                              		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      FuncItemType;                                     		// 0x016C (0x0001) [0x0000000000000000]              
	unsigned long                                      bFunctionalItemSettingChangeButton : 1;           		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHideInShop : 1;                                  		// 0x0170 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHideInUsingInven : 1;                            		// 0x0170 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseItemReconfirmMessageBox : 1;                  		// 0x0170 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3173 ];

		return pClassPointer;
	};

};

UClass* USFItem_Functional::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_Camo
// 0x005C (0x01D0 - 0x0174)
class USFItem_Functional_Camo : public USFItem_Functional
{
public:
	TArray< struct FString >                           Material;                                         		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           DiffuseTexture;                                   		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           NormalTexture;                                    		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SpecularTexture;                                  		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           MaskTexture;                                      		// 0x01A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      MaterialCopyType;                                 		// 0x01B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      DiffuseTextureCopyType;                           		// 0x01B1 (0x0001) [0x0000000000000000]              
	unsigned char                                      NormalTextureCopyType;                            		// 0x01B2 (0x0001) [0x0000000000000000]              
	unsigned char                                      SpecularTextureCopyType;                          		// 0x01B3 (0x0001) [0x0000000000000000]              
	unsigned char                                      MaskTextureCopyType;                              		// 0x01B4 (0x0001) [0x0000000000000000]              
	TArray< unsigned char >                            IgnoreParts;                                      		// 0x01B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            AcceptParts;                                      		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3175 ];

		return pClassPointer;
	};

	void ArrayCopy ( TArray< struct FString > Source, unsigned char CopyType, TArray< struct FString >* Target );
	void SetAddedCamoItemData ( struct FSFMeshPart* MeshPart );
};

UClass* USFItem_Functional_Camo::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_Weap
// 0x0000 (0x0174 - 0x0174)
class USFItem_Functional_Weap : public USFItem_Functional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3177 ];

		return pClassPointer;
	};

};

UClass* USFItem_Functional_Weap::pClassPointer = NULL;

// Class SFGame.SFItem_Func_WeaponCamo
// 0x002C (0x01A0 - 0x0174)
class USFItem_Func_WeaponCamo : public USFItem_Functional_Weap
{
public:
	unsigned char                                      CamoType;                                         		// 0x0174 (0x0001) [0x0000000000000000]              
	unsigned char                                      CamoMaskType;                                     		// 0x0175 (0x0001) [0x0000000000000000]              
	struct FString                                     CamoTextureName;                                  		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CamoMaterialNames;                                		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            CamoRISClassList;                                 		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ActionCamoKillTime;                               		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3179 ];

		return pClassPointer;
	};

	struct FString GetAdditionalResource ( );
	void GetSpecificIndexWithDataByID ( class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	void PostApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Func_WeaponCamo::pClassPointer = NULL;

// Class SFGame.SFItem_Weap
// 0x0140 (0x02A0 - 0x0160)
class USFItem_Weap : public USFItem_Base
{
public:
	unsigned char                                      WeapItemType;                                     		// 0x0160 (0x0001) [0x0000000000000000]              
	unsigned long                                      bNormalCamo : 1;                                  		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNotApplyWeaponTag : 1;                           		// 0x0164 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNotApplyWeaponCamo : 1;                          		// 0x0164 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                UIDamege;                                         		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                UIFireInterval;                                   		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                UIRecoil;                                         		// 0x0170 (0x0004) [0x0000000000000000]              
	int                                                UIAccuracy;                                       		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                UIAmmoCount;                                      		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                UIAmmoCountInMgz;                                 		// 0x017C (0x0004) [0x0000000000000000]              
	int                                                UIGroup;                                          		// 0x0180 (0x0004) [0x0000000000000000]              
	int                                                UISlot;                                           		// 0x0184 (0x0004) [0x0000000000000000]              
	struct FString                                     UIMaker;                                          		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     vLocation;                                        		// 0x0194 (0x000C) [0x0000000000000000]              
	struct FVector                                     vLocationZoom;                                    		// 0x01A0 (0x000C) [0x0000000000000000]              
	struct FVector                                     vStepLocation;                                    		// 0x01AC (0x000C) [0x0000000000000000]              
	struct FRotator                                    rOrgRotation;                                     		// 0x01B8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    rStepRotation;                                    		// 0x01C4 (0x000C) [0x0000000000000000]              
	float                                              fScale;                                           		// 0x01D0 (0x0004) [0x0000000000000000]              
	float                                              fFieldOfView;                                     		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              fZoomOutMaxFOV;                                   		// 0x01D8 (0x0004) [0x0000000000000000]              
	struct FVector                                     vLocationMuzzleFlash;                             		// 0x01DC (0x000C) [0x0000000000000000]              
	struct FRotator                                    rRotationMuzzleFlash;                             		// 0x01E8 (0x000C) [0x0000000000000000]              
	int                                                ReplaceAmmoCount;                                 		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                ReplaceAmmoCountInMgz;                            		// 0x01F8 (0x0004) [0x0000000000000000]              
	struct FString                                     LobbyWeaponAnimSet[ 0x4 ];                        		// 0x01FC (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       LobbyWeaponSocketName;                            		// 0x022C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LobbyThirdWeaponAnimTree[ 0x4 ];                  		// 0x0234 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     LobbyThirdWeapAnimSet[ 0x4 ];                     		// 0x0264 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AdditionalWeaponClassName;                        		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3181 ];

		return pClassPointer;
	};

	void ApplyItemToWeapByPenalty ( class ASFWeapon* AppliedWeap );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Weap::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption
// 0x0001 (0x0161 - 0x0160)
class USFItem_WeapOption : public USFItem_Base
{
public:
	unsigned char                                      WeapPartType;                                     		// 0x0160 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3183 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption::pClassPointer = NULL;

// Class SFGame.SFItemManager
// 0x02BC (0x02F8 - 0x003C)
class USFItemManager : public UObject
{
public:
	TArray< struct FSEventItem >                       LocalizedEventItems;                              		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedWeaponSlotName[ 0x7 ];                   		// 0x0048 (0x0054) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FItemClassToClassName >             ItemClassArray;                                   		// 0x009C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FWeaponObjectToClassName >          WeaponObjectArray;                                		// 0x00A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FItemElement >                      CharacterItems;                                   		// 0x00B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FItemElement >                      WeaponItems;                                      		// 0x00C0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FItemElement >                      WeaponOptionItems;                                		// 0x00CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FItemElement >                      FunctionalItems;                                  		// 0x00D8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FModeItem >                         ModeItems;                                        		// 0x00E4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      TPExchangeItems;                                  		// 0x00F0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      ShopEventItems;                                   		// 0x00FC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      PCRoomItems;                                      		// 0x0108 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      VIPProvideItems;                                  		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      VIPWeaponItems;                                   		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      VIPCouponItems;                                   		// 0x012C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      MonthlyRewardItems;                               		// 0x0138 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      MonthlyRewardWeaponItems;                         		// 0x0144 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      EnchantItems;                                     		// 0x0150 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      FeverTimeRewardItems;                             		// 0x015C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      FeverTimeSaleItems;                               		// 0x0168 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      FeverTimeLpItems;                                 		// 0x0174 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSprayItem >                        SprayItems;                                       		// 0x0180 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           NewItems;                                         		// 0x018C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           HotItems;                                         		// 0x0198 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           BestItems;                                        		// 0x01A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           EventItems;                                       		// 0x01B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01BC (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFItemManager.SFItemNewMappingTable
	TArray< struct FSFItemDataNew >                    NewItemDataArray;                                 		// 0x01F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0204 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFItemManager.SFItemDailyDiscountMappingTable
	TArray< struct FSFItemDataNew >                    DailyDiscountItemDataArray;                       		// 0x0240 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      DiscountItemArray;                                		// 0x024C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bUseItemNameFromClass : 1;                        		// 0x0258 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	TArray< struct FString >                           ItemNameFromClassArray;                           		// 0x025C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ItemDefaultUseTime;                               		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSItemCodeToID >                    ItemCodeToIDArray;                                		// 0x026C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSSupplyCodeToID >                  SupplyCodeToIDArray;                              		// 0x0278 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFUIDataStore_GashaList*                    GashaListDataStore;                               		// 0x0284 (0x0004) [0x0000000000000000]              
	class USFOnlineSubsystemPC*                        OnlineSub;                                        		// 0x0288 (0x0004) [0x0000000000000000]              
	TArray< struct FAsyncLoadSpecificClassByID >       RequestedSpecificClassInfosByID;                  		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAsyncLoadDefaultItems >            RequestedDefaultItemInfos;                        		// 0x0298 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDefaultItemClassLoaded__Delegate;             		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDefaultItemClassAllLoaded__Delegate;          		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortItemListByCASHPriceDelegate__Delegate;      		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortItemListBySPPriceDelegate__Delegate;        		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortItemListByTPPriceDelegate__Delegate;        		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortItemListByPriceDelegate__Delegate;          		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortItemListByDiscountDelegate__Delegate;       		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3185 ];

		return pClassPointer;
	};

	bool IsNotApplyWeaponCamo ( int WeaponID );
	bool IsNotApplyWeaponTag ( int WeaponID );
	bool IsEndlessItem ( int ItemId );
	bool IsTimeLimitItem ( int ItemId );
	float CalcKillDeathRatio ( int Kills, int Assists, int Deaths );
	bool GetWeaponLogPercentbyIndex ( TArray< struct FSFWeaponLog > AllWeaponLogArray, int InIndex, struct FSFWeaponLogMember* Member );
	struct FString GetItemMuzzleProperty ( int ItemId );
	struct FString GetItemContext ( int ItemId );
	float GetItemLuckyPoint ( int ItemId );
	struct FString GetItemOverLapLimitText ( int ItemId );
	void GetPaymentTypeArray ( int ItemId, TArray< struct FString >* PaymentArray );
	struct FString GetPaymentTypeIconList ( int ItemId );
	struct FString GetPaymentString ( int PaymentIndex );
	int GetPaymentIndex ( struct FString PaymentType );
	bool GetUnitDefaultItemIds ( int UnitItemID, TArray< int >* DefaultUnitItems );
	bool GetIncludedItemClasses ( class UClass* NewItemClass, int ItemId, TArray< class UClass* >* subItems );
	int GetIsDailyDiscountItem ( int ItemId );
	void SetBuyableCount ( int ItemId, int Count );
	struct FString GetDiscountBuyableCountTypeByItemCode ( struct FString ItemCode );
	struct FString GetDiscountBuyableCountType ( int ItemId );
	bool IsReceivedNewItemData ( int ItemId );
	struct FString GetDiscountBuyableCount ( int ItemId );
	struct FString GetDiscountBuyableCountByItemCode ( struct FString ItemCode );
	bool IsDiscountItemByItemCode ( struct FString ItemCode, float* OutDiscountRate );
	bool IsDiscountItemByItemData ( struct FSFItemData* ItemData, float* OutDiscountRate );
	bool IsDiscountItem ( int ItemId, float* OutDiscountRate );
	bool IsWeaponProgressionRewardItem ( int ItemId );
	bool IsWeaponProgressionBaseItem ( int ItemId, struct FName* OutSupplyCode );
	int GetItemIDWithDefaultUseTimeBase ( TArray< struct FSFItemData > ItemArray );
	int GetItemIDWithDefaultUseTime ( struct FString ItemCode );
	int GetOriginalPrice ( int ItemId, int CurPrice, float DiscountRatio );
	void GetItemDiscountPriceInfo ( int ItemId, struct FString ItemCode, struct FString PaymentType, int* OutDiscountType, float* OutDiscountRatio, int* OutOriginalPrice );
	bool IsPCRoomSaleItem ( int ItemId );
	bool IsValidPrice ( int Price );
	int GetItemPriceByItemData ( struct FString PaymentType, struct FSFItemData* ItemData );
	int GetItemPrice ( int ItemId, struct FString PaymentType );
	bool eventGetItemIDbyClassName ( struct FString ClassName, int* ItemId );
	bool GetSprayItemClassByEmblemID ( int EmblemID, class UClass** ItemClass );
	void GetPartResourceIndexWithDataByItemClass ( class UClass* ItemClass, unsigned char PartType, struct FPartResourceData* ResourceData );
	unsigned char GetItemType ( int ItemId );
	bool IsClanItemBuyable ( int ItemId, int* OutFailedLimit );
	bool IsClanRelatedItem ( int ItemId );
	bool IsItemBuyableByRank ( int ItemId, int MyRank );
	struct FString GetFunctionalItemInfoText ( int ItemId );
	bool CheckProvideItem ( int ItemId, struct FQWord* ISN, TArray< int >* PreviewIDList, TArray< int >* PackageIDList );
	bool GetProvideItemIDList ( class UClass* ItemClass, TArray< int >* PreviewIDList );
	int GetProvideItemIDByItemName ( int ProviderID, struct FString ItemName );
	bool IsProvideCharacterItem ( int ItemId );
	void GetModeItemsByModeID ( int InModeID, TArray< int >* OutArray );
	void GetModeArrayByModeItems ( TArray< int >* OutArray );
	bool IsExclusiveModeItem ( int item_id, int mode_id, int mode_type );
	void SetToModeItem ( struct FString item_code, int mode_id, unsigned char item_type );
	bool GetSprayItemIDByEmblemID ( int emblem_id, TArray< int >* item_list );
	bool IsTpExchangeItem ( int ItemId );
	void GetTPExchangeItems ( TArray< int >* OutArray );
	void GetGashaCouponCount ( int ItemId, int* CouponCount, int* BonusCouponCount );
	void GetGashaArrayBySupplyCode ( struct FString SupplyCode, unsigned long IsSelling, TArray< struct FSFItemData >* GashaArray, TArray< int >* CouponCountArray, TArray< int >* BonusCouponCountArray );
	bool IsPveGashaponItemBySupplyCode ( struct FString SupplyCode );
	bool GetItemDataBySupplyCode ( struct FString SupplyCode, struct FSFItemData* outItemData );
	struct FString GetItemNameBySupplyCode ( struct FString SupplyCode );
	bool IsSellingBySupplyCode ( struct FString SupplyCode );
	struct FString GetItemSellTypeBySupplyCode ( struct FString SupplyCode );
	struct FString GetItemCodeBySupplyCode ( struct FString SupplyCode );
	int GetItemIDBySupplyCode ( struct FString SupplyCode );
	int SortItemListByDiscountDelegate ( struct FSFItemData Item1, struct FSFItemData Item2 );
	int SortItemListByPriceDelegate ( struct FSFItemData Item1, struct FSFItemData Item2 );
	int SortBySecondaryCondition ( struct FSFItemData Item1, struct FSFItemData Item2 );
	int SortItemListByTPPriceDelegate ( struct FSFItemData Item1, struct FSFItemData Item2 );
	int SortItemListBySPPriceDelegate ( struct FSFItemData Item1, struct FSFItemData Item2 );
	int SortItemListByCASHPriceDelegate ( struct FSFItemData Item1, struct FSFItemData Item2 );
	void GetItemPriceInfoByPaymentType ( int ItemId, struct FString PaymentType, unsigned long bToSendGift, TArray< struct FSFItemData >* OutItemArray );
	void GetItemPriceInfoByItemData ( unsigned long bToSendGift, struct FSFItemData* ItemData, TArray< struct FSFItemData >* OutSPItemArray, TArray< struct FSFItemData >* OutCashItemArray, TArray< struct FSFItemData >* OutTPItemArray, TArray< struct FSFItemData >* OutLPItemArray );
	void GetItemPriceInfo ( int ItemId, unsigned long bToSendGift, TArray< struct FSFItemData >* OutSPItemArray, TArray< struct FSFItemData >* OutCashItemArray, TArray< struct FSFItemData >* OutTPItemArray, TArray< struct FSFItemData >* OutLPItemArray );
	bool IsItemType ( int ItemId, unsigned char myItemType );
	bool GetPackageItemList ( int ItemId, TArray< int >* SubItemArray );
	bool IsPackagePeriodItem ( int ItemId );
	bool IsPackageItem ( int ItemId );
	bool IsPeriodItemByItemData ( struct FSFItemData* ItemData );
	bool IsPeriodItem ( int ItemId );
	int GetItemUseTimeByItemData ( struct FSFItemData* ItemData );
	int GetItemUseTime ( int ItemId );
	bool IsCannotRepairItem ( int ItemId );
	bool IsCannotBuyItem ( int ItemId );
	struct FString GetPCRoomCareIconImage ( int InItemID );
	bool IsMonthlyRewardItemByItemID ( int ItemId );
	bool IsVIPWeaponItemByItemID ( int ItemId );
	int GetTagGroupByItemID ( int ItemId, struct FString TagName );
	bool IsFeverTimeLpItemByItemID ( int ItemId );
	bool IsFeverTimeSaleItemByItemID ( int ItemId );
	bool IsFeverTimeRewardItemByItemID ( int ItemId );
	bool IsVIPCareItemByType ( int ItemId, int VipGrade, unsigned long bAdd );
	bool IsVIPCareItem ( int ItemId );
	bool IsMonthlyRewardCareItem ( int ItemId );
	bool IsPCRoomCareItemByType ( int ItemId, int PCRoomCareType, unsigned long bAdd );
	bool IsPCRoomCareItem ( int ItemId );
	void GetEventItemContext ( int ItemId, struct FString* context, struct FString* LinkURL );
	bool IsItemEventType ( int ItemId, int ItemEventType );
	void GetFreeItemItemType ( unsigned char InFreeItemType, int ItemId, TArray< struct FString >* OutArray );
	struct FString GetEventbyItemID ( int ItemId );
	struct FString GetItemMonthlyRewardImgByItemId ( int ItemId );
	struct FString GetItemVipImgByItemId ( int ItemId );
	int GetSpecialItemGradeByItemID ( int ItemId, struct FString Type );
	int GetItemTagIndex ( int ItemId, struct FString ItemTag );
	bool IsVipItemDuplicateBuy ( int ItemId, struct FString GiftType );
	bool IsDuplicateBuy ( int ItemId );
	bool IsSellingItemByItemData ( struct FSFItemData* ItemData );
	bool IsSellingItem ( int ItemId );
	bool IsFeverItem ( int ItemId );
	bool IsEnchantItem ( int ItemId );
	bool IsWeaponPartsItem ( int ItemId );
	int GetSellingVIPCouponItemID ( );
	bool IsVIPCouponItem ( int ItemId );
	bool IsGashaUseItem ( int ItemId );
	bool IsShowInFuncUsingInven ( int ItemId );
	bool IsShowInFuncItemShop ( int ItemId );
	bool IsSPItemByItemData ( struct FSFItemData* ItemData );
	bool IsSPItem ( int ItemId );
	bool IsCashItemByItemData ( struct FSFItemData* ItemData );
	bool IsCashItem ( int ItemId );
	void GetItemPaymentTypeArray ( int ItemId, TArray< struct FString >* OutArray );
	bool IsLessItemSN ( struct FQWord ItemSNSrc, struct FQWord ItemSNTgt );
	bool IsValideItemSN ( struct FQWord ItemSN );
	int GetWeaponTypeSortIdxByItemID ( int ItemId );
	int GetWeaponTypeSortIdx ( unsigned char WeaponType );
	int GetItemTypeSortIdx ( unsigned char ItemType );
	bool IsSpecificCamobyID ( int ItemId );
	bool GetWeaponbNormalCamo ( int ItemId );
	int GetFunctionalItemIDbyClass ( class UClass* ItemClass );
	bool GetWeaponDefaultTypeClass ( int WeaponID, class UClass* ParentClass, class UClass** ItemClass );
	int eventGetWeaponDefaultCamoID ( int WeaponID );
	struct FString GetWeaponCamoUICode ( int ItemId, class ASFPlayerReplicationInfo* SFPRI );
	struct FString GetItemCodebyID ( int ItemId );
	int HACK_GetItemIdByCode ( struct FString ItemCode );
	void GetChildItemClassesByParentsItemClass ( class UClass* ParentsItemClass, TArray< class UClass* >* ChildItemClasses );
	void ApplyChildItemProperty ( class AActor* AppliedActor, class UClass* ParentsItemClass, unsigned long bUsePenalty, unsigned long IsHost, struct FString ItemProperty, TArray< class UClass* > Ancestor );
	void HackDetected ( class AActor* AppliedActor );
	void ApplyItemInternal ( class AActor* AppliedActor, class UClass* ItemClass, unsigned long bUsePenalty, unsigned long IsHost, struct FString ItemProperty );
	bool EnableApplyChildItemProperty ( class UClass* ItemClass );
	void ApplyItem ( class AActor* AppliedActor, int ItemId, unsigned long bUsePenalty, unsigned long IsHost, struct FString ItemProperty );
	bool IsNotDropItemCheck ( int WeaponID );
	bool GetCamoInfoByCamoClass ( class UClass* CamoItemClass, class UClass* OwnerItemClass, class UTexture2D** CamoTexture, class UMaterialInterface** CamoMaterial, int* CamoMaskIndex );
	bool FindCamoID ( TArray< int > ItemIDs, int* CamoItemID );
	bool GetCamoInfo ( int WeaponID, int CamoID, class UClass* OwnerItemClass, class UTexture2D** CamoTexture, class UMaterialInterface** CamoMaterial, int* CamoMaskIndex );
	int GetTextureCoordIndexInternal ( class UClass* ItemClass );
	int GetTextureCoordIndex ( int ItemId );
	bool GetSpecificIndexWithDataByID ( int ItemId, class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	bool GetSpecificIndexWithDataByClass ( class UClass* ItemClass, class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	class UObject* eventGetSpecificClassByItemID ( int ItemId, int OwnerID );
	struct FString GetSpecificClassNameByItemID ( int ItemId, int OwnerID );
	void OnLoadClassByItemID ( class UObject* LoadedObject );
	void eventAsyncLoadSpecificClassByItemID ( struct FScriptDelegate OnLoaded, int ItemId, int OwnerID );
	class UClass* IsValidOptionforWepons ( class ASFWeapon* AppliedWeap, int nOptionID );
	bool IsImpossibleOverlapInternal ( class UClass* OldItemClass, class UClass* NewItemClass );
	bool IsImpossibleOverlap ( int OldItemID, int newItemID );
	struct FString GetItemImageName ( int ItemId );
	struct FString GetItemRankImage ( int ItemId );
	struct FString GetGFxImageSetType ( int ItemId, struct FString RewardType );
	int GetMyType ( int ItemId );
	int GetWeapPartTypeIndex ( int ItemId, unsigned long IncludeWeaponIDIndex );
	unsigned char GetFuncItemType ( int ItemId );
	unsigned char GetWeapPartType ( int ItemId );
	unsigned char GetCharItemType ( int ItemId );
	struct FString GetWeaponSlotName ( int ItemId );
	int GetWeaponSlot ( int ItemId );
	int GetWeaponGroup ( int ItemId );
	unsigned char GetWeaponType ( int ItemId );
	unsigned char GetItemTypeByID ( int ItemId );
	bool IsCharacterItem ( int ItemId );
	void ArrangeItemsbyType ( TArray< int > ItemIDs, TArray< int >* DefaultItems );
	void AddDefaultItemClassesByItemType ( int MainItemID, class UClass* ItemClass, TArray< class UClass* >* OutDefaultItemClass );
	bool GetDefaultItemClassesByItemID ( int MainItemID, TArray< class UClass* >* DefaultItemClass );
	void OnLoadDefaultItem ( class UObject* LoadedObject, struct FString RequestedObjectName, class AActor* Caller );
	void AsyncLoadDefaultItemClassesByItemID ( int MainItemID, struct FScriptDelegate InCallbackLoaded, struct FScriptDelegate InCallbackAllLoaded, class AActor* Caller );
	bool GetDefaultPartClass ( int MainItemID, int WantsType, class UClass** ItemClass );
	bool IsPossibleEquipClass ( int ItemId, int UnitID );
	bool IsCommonItem ( int ItemId );
	bool IsValidItem ( int ItemId );
	bool GetItemAllProperty ( int ItemId, class UClass** ItemClass, struct FSFItemData* ItemData );
	struct FString GetItemGroupsByItemID ( int ItemId );
	struct FString GetItemNameByItemID ( int ItemId );
	bool eventGetItemClassByItemCode ( struct FName ItemCode, class UClass** ItemClass );
	bool eventGetItemClassByID ( int ItemId, class UClass** ItemClass );
	bool eventGetItemDataByItemCode ( struct FName ItemCode, struct FSFItemData* ItemData );
	bool eventGetItemDataByID ( int ItemId, struct FSFItemData* ItemData );
	bool GetAdditionalWeaponObjectByItemId ( int ItemId, class UObject** WeaponObject );
	class UObject* GetWeaponObjectDynamicLoad ( struct FString ClassName );
	void SetWeaponObjectArray ( class UClass* ItemClass );
	class UClass* GetItemClassDynamicLoad ( struct FString ClassName );
	void SetItemClassArray ( struct FString ClassName );
	void SetDefaultItemClassNames ( class UClass* ItemClass );
	void SetItemCode ( struct FString ItemCode, TArray< struct FString >* ItemList );
	void SetItemID ( int ItemId, TArray< int >* ItemList );
	void SetItemClass ( struct FItemElement Element, TArray< struct FItemElement >* ItemList );
	void SetItemSellingTag ( );
	void SetItemElementIntoArray ( struct FItemElement Element );
	void InitItemManager ( );
	bool NotUseWeaponObjectArray ( );
	void SetItemDailyDiscountMappingTable ( );
	void SetItemNewMappingTable ( );
	struct FSFItemData GetItemData ( int Index );
	void ReleaseItemManager ( );
	void OnDefaultItemClassAllLoaded ( );
	void OnDefaultItemClassLoaded ( class UObject* LoadedObject );
};

UClass* USFItemManager::pClassPointer = NULL;

// Class SFGame.SFItemMesh
// 0x000C (0x0048 - 0x003C)
class USFItemMesh : public UObject
{
public:
	TArray< class USFMeshParts* >                      ItemMesh;                                         		// 0x003C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3187 ];

		return pClassPointer;
	};

};

UClass* USFItemMesh::pClassPointer = NULL;

// Class SFGame.SFJumpPoint
// 0x000C (0x0308 - 0x02FC)
class ASFJumpPoint : public APathNode
{
public:
	TArray< class ANavigationPoint* >                  JumpDest;                                         		// 0x02FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3189 ];

		return pClassPointer;
	};

};

UClass* ASFJumpPoint::pClassPointer = NULL;

// Class SFGame.SFKActor
// 0x0038 (0x0348 - 0x0310)
class ASFKActor : public AKActor
{
public:
	TArray< struct FOriginMtrlData >                   OriginMtrlDatas;                                  		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ReplicatedMaterialIndex;                          		// 0x031C (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bAllowDecalsToReattach : 1;                       		// 0x0320 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      InitialBlockRigidBody : 1;                        		// 0x0320 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      InitialCollideActors : 1;                         		// 0x0320 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      InitialBlockActors : 1;                           		// 0x0320 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bOldCollideActors : 1;                            		// 0x0320 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class UStaticMesh*                                 OriginMesh;                                       		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InitialPhysics;                                   		// 0x0328 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InitialCollisionType;                             		// 0x0329 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            AttachPossibleClasses;                            		// 0x032C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class ASFProjectile* >                     AttachedProjectilesByDamage;                      		// 0x0338 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MeshChangeTime;                                   		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3191 ];

		return pClassPointer;
	};

	void KillCamRestore ( class AActor* OriginalActor );
	void eventDetach ( class AActor* Other );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void RecoverFromShutDown ( );
	void eventShutDown ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsPersistentActor ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void Reset ( );
	void ClientReset ( );
	void RecoverToOrigin ( );
	void NotifyChangedMaterial ( );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void RemoveAttachedProjectile ( class ASFProjectile* SFProj );
	void HideOutAttachedProjectile ( );
	void NotifyChangedStaticMesh ( );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void OnReset ( class USFSeqAct_Reset* Action );
	void OnAddImpulseOld ( class USFSeqAct_AddImpulse* Action );
	void OnAddRadialImpulseOld ( class USFSeqAct_AddRadialImpulse* Action );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFKActor::pClassPointer = NULL;

// Class SFGame.SFKActorNoSync
// 0x0004 (0x034C - 0x0348)
class ASFKActorNoSync : public ASFKActor
{
public:
	unsigned long                                      bCollideProjectile : 1;                           		// 0x0348 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3193 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	bool StopsProjectile ( class AProjectile* P );
	void TakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	void RecoverFromShutDown ( );
	void PostBeginPlay ( );
};

UClass* ASFKActorNoSync::pClassPointer = NULL;

// Class SFGame.SFKActorFromStatic
// 0x0014 (0x032C - 0x0318)
class ASFKActorFromStatic : public AKActorFromStatic
{
public:
	int                                                MaxSliceDepth;                                    		// 0x0318 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                nKDOP;                                            		// 0x031C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LifeSpanForSlicedActor;                           		// 0x0320 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MaxCountToSpawnAtOnce;                            		// 0x0324 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                currSliceDepth;                                   		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3195 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void BecomeStatic ( );
	void OnSleepRBPhysics ( );
	void ClientReset ( );
	void Reset ( );
	void SetDebugFlag ( unsigned long bEdge, unsigned long bPoly, unsigned long bTriangle );
	bool SliceMeshComponent ( class UMeshComponent* InMesh, struct FPlane* SlicePlane );
	class AKActorFromStatic* MakeDynamic ( class UStaticMeshComponent* MovableMesh );
};

UClass* ASFKActorFromStatic::pClassPointer = NULL;

// Class SFGame.SFKAsset
// 0x0078 (0x02AC - 0x0234)
class ASFKAsset : public AKAsset
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0234 (0x000C) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x0240 (0x0040) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	float                                              AngErrorAccumulator;                              		// 0x0280 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     InitialLocation;                                  		// 0x0284 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x0290 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InitialPhysics;                                   		// 0x029C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              InitialPhysicsWeight;                             		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      InitialBlockRigidBody : 1;                        		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      InitialCollideActors : 1;                         		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      InitialBlockActors : 1;                           		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bInitialHasPhysicsAssetInstance : 1;              		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              PhysicsWeight;                                    		// 0x02A8 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3197 ];

		return pClassPointer;
	};

	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void RecoverFromShutDown ( );
	void eventShutDown ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsPersistentActor ( );
	void Reset ( );
	void ClientReset ( );
	void UpdatePhysicsWeight ( float NewPhysicsWeight );
	void OnSetPhysicsWeight ( class USFSeqAct_SetPhysicsWeight* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

UClass* ASFKAsset::pClassPointer = NULL;

// Class SFGame.SFLocalDB
// 0x0090 (0x00CC - 0x003C)
class USFLocalDB : public UObject
{
public:
	class UClass*                                      TableClass;                                       		// 0x003C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	TArray< struct FDataEntry >                        Tables;                                           		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      SortByIDWhenClose : 1;                            		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SortByNameWhenClose : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      CheckDataErrWhenClose : 1;                        		// 0x004C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      CheckDuplicateDataWhenClose : 1;                  		// 0x004C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0050 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFLocalDB.TableIDMap
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x008C (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFLocalDB.TableNameMap
	class ASFUnitTestRunner_LocalDB*                   TestRunner;                                       		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3199 ];

		return pClassPointer;
	};

	void eventCheckDataErrorEnd ( );
	void eventCheckDataErrorBegin ( );
	bool CheckDuplicateName ( struct FString* MsgBoxString, int* NameDuplicationCounter );
	bool CheckDuplicateID ( struct FString* MsgBoxString, int* IDDuplicationCounter );
	bool CheckDuplicateData ( struct FString* MsgBoxString );
	class ASFUnitTestRunner_LocalDB* SpawnUnitTestRunner ( );
	void SortByName ( );
	void SortByID ( );
	void Empty ( );
	class USFLocalDBTableData* FindTableByName ( struct FName TableName );
	class USFLocalDBTableData* FindTableByID ( int TableID );
	void LoadAllTables ( );
	void LoadTable ( int Index );
	void InitTableMaps ( );
};

UClass* USFLocalDB::pClassPointer = NULL;

// Class SFGame.SFLocalDBTableData
// 0x0008 (0x0044 - 0x003C)
class USFLocalDBTableData : public UObject
{
public:
	int                                                Index;                                            		// 0x003C (0x0004) [0x0000000000000000]              
	class UClass*                                      UnitTestRunnerClass;                              		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3201 ];

		return pClassPointer;
	};

	void SetIndex ( int NewIndex );
	int GetIndex ( );
};

UClass* USFLocalDBTableData::pClassPointer = NULL;

// Class SFGame.SFMapInfo
// 0x00C8 (0x010C - 0x0044)
class USFMapInfo : public UMapInfo
{
public:
	class UDynamicLightEnvironmentComponent*           MapLightEnvironment;                              		// 0x0044 (0x0004) [0x0000000024082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline | CPF_Deprecated )
	struct FVector                                     RoundEnd_MidTones;                                		// 0x0048 (0x000C) [0x0000000020002001]              ( CPF_Edit | CPF_Transient | CPF_Deprecated )
	struct FVector                                     RoundEnd_Shadows;                                 		// 0x0054 (0x000C) [0x0000000020002001]              ( CPF_Edit | CPF_Transient | CPF_Deprecated )
	float                                              RoundEnd_Desaturation;                            		// 0x0060 (0x0004) [0x0000000020002001]              ( CPF_Edit | CPF_Transient | CPF_Deprecated )
	struct FVector                                     LensFlarePosition;                                		// 0x0064 (0x000C) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	TArray< class ACombatZone* >                       CombatZones;                                      		// 0x0070 (0x000C) [0x0000000001420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	float                                              VisibilityModifier;                               		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSFStreamLevelInfo >                arrSFStreamLevel;                                 		// 0x0080 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCubeMapTextureLoaded : 1;                        		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct FCubeMapInfo >                      arrWorldCubeMaps;                                 		// 0x0090 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                DefaultCubeMapIndex;                              		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFCustomPreview* >                  CustomPreviews;                                   		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   UpperMIC;                                         		// 0x00AC (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   LowerMIC;                                         		// 0x00B0 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   FirstHandMIC;                                     		// 0x00B4 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   HelmetMIC;                                        		// 0x00B8 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   RankMIC;                                          		// 0x00BC (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   PriWeaponDiffuse;                                 		// 0x00C0 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   PriWeaponMask;                                    		// 0x00C4 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   SecWeaponDiffuse;                                 		// 0x00C8 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceConstant*                   SecWeaponMask;                                    		// 0x00CC (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	TArray< class UMICforSFCubeMap* >                  arrMICForSFCubeMap;                               		// 0x00D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              MinDistanceFromFriendForRespawn;                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FriendRadiusForRespawn;                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyRadiusForRespawn;                            		// 0x00E4 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              HeightWeightForRespawn;                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastRespawnDelay;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CheckColleagueForRespawn;                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyDistanceScore;                               		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkableFloorDegree;                              		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityScalingForRagdollPawn;               		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVectorParamForEffect >             VectorParametersForEffect;                        		// 0x0100 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3203 ];

		return pClassPointer;
	};

	void UpdateParameterForEffect ( class UParticleSystemComponent* PSC );
	class ASFCustomPreview* GetCustomPreview ( struct FString PreviewName );
	class UTextureCube* GetDefaultCubeMapTexture ( );
	class UTextureCube* GetCubeMapTexture ( struct FName CubeMapActorName );
	void SetCubeMapInfo ( struct FName CubeMapActorName, class UTextureCube* TexCube, struct FVector Loc );
};

UClass* USFMapInfo::pClassPointer = NULL;

// Class SFGame.SFMCResourceManager
// 0x001C (0x0058 - 0x003C)
class USFMCResourceManager : public UObject
{
public:
	TArray< struct FAsyncItemResourceInfo >            RequestedItemResourceInfos;                       		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRequestedResource >                RequestedResourceInfos;                           		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFItemManager*                              ItemManager;                                      		// 0x0054 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3205 ];

		return pClassPointer;
	};

	class USkeletalMesh* GetWeaponDefaultMeshByItemIDs ( int ItemId, unsigned long bFirst );
	class UObject* GetPartResourceData ( TArray< struct FString > DataNames, class UClass* ObjectClass, int Index );
	void LoadResourceComplete ( class UObject* LoadedObject, struct FString RequestedObjectName, class AActor* Caller );
	int FindRequestedResourceInfo ( struct FString ObjectName, class AActor* Caller );
	void ReqeustAsyncResourceData ( struct FString ObjectName, class UClass* ObjectClass, int MeshPartIndex, unsigned char InType, class AActor* Caller );
	struct FString GetPartResourceString ( TArray< struct FString > DataNames, int Index );
	void GetVectorParameterValuesByItemClass ( class UClass* ItemClass, struct FSFMeshPart LoadedData, TArray< struct FVectorParameterValue >* VectorParameterValues );
	void GetTextureParameterValuesByResourceData ( class UClass* ItemClass, struct FSFMeshPart LoadedData, struct FPartResourceData ChooseResourceData, class UTexture2D* CamoTexture, int MaskIndex, int SkinIndex, struct FMeshPart* SaveData );
	int AsyncTextureParameterValuesByResourceData ( class UClass* ItemClass, struct FSFMeshPart LoadedData, struct FPartResourceData ChooseResourceData, class UTexture2D* CamoTexture, int MaskIndex, int SkinIndex, int MeshPartIndex, class AActor* Caller, struct FMeshPart* SaveData );
	bool HasValidDataName ( TArray< struct FString > DataNames, int Index, struct FString* ValidDataName );
	struct FTextureParameterValue SetTextureParameter ( struct FName ParameterName, TArray< struct FString > TextureNames, int TextureIndex, TArray< struct FTextureParameterValue >* Parameters );
	bool GetitemResourceByItemClass ( TArray< class UClass* > ItemClasses, TArray< int > ItemIDs, TArray< unsigned char > DataLoadingMeshGroup, class UTexture2D* CamoTexture, class UMaterialInterface* CamoMaterial, int CamoMaskIndex, int SkinIndex, int FaceIndex, TArray< struct FMeshPart >* MeshParts );
	bool GetItemResourceByItemIDs ( class AActor* Caller, TArray< int > ItemIDs, TArray< unsigned char > DataLoadingMeshGroup, unsigned long OnlyStrings, TArray< struct FMeshPart >* MeshParts, class UTexture2D** CamoTexture, class UMorphTargetSet** FaceMorphSet, TArray< struct FString >* MeshPartsStrings );
	bool AsyncItemResourceByItemClass ( TArray< class UClass* > ItemClasses, TArray< int > ItemIDs, TArray< unsigned char > DataLoadingMeshGroup, class UTexture2D* CamoTexture, class UMaterialInterface* CamoMaterial, int CamoMaskIndex, class UMorphTargetSet* FaceMorphSet, int SkinIndex, int FaceIndex, struct FScriptDelegate Callback, class AActor* Caller );
	bool AsyncLoadItemResourceByItemIDs ( TArray< int > ItemIDs, TArray< unsigned char > DataLoadingMeshGroup, struct FScriptDelegate Callback, class AActor* Caller );
	unsigned char GetGroupLabel ( unsigned char PartLabel );
	void PostAsyncCompleteWithinLoadMap ( );
	void release ( );
	void Init ( );
};

UClass* USFMCResourceManager::pClassPointer = NULL;

// Class SFGame.SFMeshBlendingScheduler
// 0x0001 (0x003D - 0x003C)
class USFMeshBlendingScheduler : public UObject
{
public:
	unsigned char                                      SchedulerState;                                   		// 0x003C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3207 ];

		return pClassPointer;
	};

	void eventInit ( );
};

UClass* USFMeshBlendingScheduler::pClassPointer = NULL;

// Class SFGame.SFMeshBuilder
// 0x0100 (0x013C - 0x003C)
class USFMeshBuilder : public UObject
{
public:
	unsigned char                                      MeshCompositionType;                              		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPlayerMeshesInfo >                 PlayerMeshesInfos;                                		// 0x0040 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMergedTextureInfo >                CharacterMergedTextureInfos;                      		// 0x004C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMergedTextureInfo >                BigWeaponMergedTextureInfos;                      		// 0x0058 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMergedTextureInfo >                SmallWeaponMergedTextureInfos;                    		// 0x0064 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMergedTextureSize >                CharacterMergedTextureSizes;                      		// 0x0070 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMergedTextureSize >                BigWeaponMergedTextureSizes;                      		// 0x007C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMergedTextureSize >                SmallWeaponMergedTextureSizes;                    		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFMCResourceManager*                        MCResourceManager;                                		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FAsyncMeshGroupInfo >               RequestMeshGroupInfos;                            		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerItemArrayInfo >              PlayerItemArrayInfos;                             		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bWaitForStreaming : 1;                            		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              FirstViewWeaponDiffusePower;                      		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FirstViewWeaponReflectionIntensity;               		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FirstViewWeaponRimLightPower;                     		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FirstViewWeaponSpecularIntensity;                 		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FirstViewWeaponSPPowerHigh;                       		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FirstViewWeaponSPPowerLow;                        		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                FirstViewWeaponRimLightColor;                     		// 0x00CC (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                FirstViewWeaponSpecularColor;                     		// 0x00DC (0x0010) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdViewWeaponDiffusePower;                      		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdViewWeaponReflectionIntensity;               		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdViewWeaponRimLightPower;                     		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdViewWeaponSpecularIntensity;                 		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdViewWeaponSPPowerHigh;                       		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdViewWeaponSPPowerLow;                        		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                ThirdViewWeaponRimLightColor;                     		// 0x0104 (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                ThirdViewWeaponSpecularColor;                     		// 0x0114 (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FScriptDelegate                             __OnMeshGroupInfoSetted__Delegate;                		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPrepareResources__Delegate;                   		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3209 ];

		return pClassPointer;
	};

	void eventComposeMeshGroup ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< int > ItemList, TArray< unsigned char > DataLoadingMeshGroup );
	void AttachHeadParts ( class USkeletalMeshComponent* OwnerMeshComponent, class USkeletalMeshComponent* HeadMeshComp, class USkeletalMeshComponent* HelmetHairMeshComp, class USkeletalMesh* HelmetHairMesh );
	void SetHairMesh ( class USkeletalMeshComponent* OwnerMeshComponent, class USkeletalMeshComponent* HeadMeshComp, class USkeletalMesh* MCHairMesh );
	void SetHelmetHairMesh ( class USkeletalMeshComponent* OwnerMeshComponent, class USkeletalMeshComponent* HelmetHairMeshComp, class USkeletalMesh* HelmetHairMesh );
	bool FaceIsMask ( TArray< struct FMeshGroup > BodyMeshGroups );
	void SetThirdPawnMeshPhysics ( class USkeletalMeshComponent* OwnerMeshComponent );
	void eventComposeThirdPawnMesh ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< int > ItemList );
	void ComposeMeshComponent ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< int > ItemList, unsigned char OutComponentType );
	class USkeletalMesh* GetWeaponDefaultMesh ( int ItemId, unsigned long bFirst );
	void ComposeMeshByBlend ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, class UTexture2D* CamoTexture, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner );
	bool SetCamoTextureToSingleMesh ( class AActor* Owner, class UMeshComponent* OwnerMeshComponent, class UTexture2D* CamoMaskTexture, class UTexture2D* CamoTexture, class UMaterialInterface* CamoMaterial );
	bool SetMeshOnlyMergedMaterial ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroups, struct FString IDString, class UTexture2D* CamoTexture );
	bool SetMeshOnlyMergedMesh ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroups, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FString IDString );
	void ComposeMeshByMeshOnlyMerge ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, class UTexture2D* CamoTexture, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner );
	void CheckAttachment ( class USkeletalMeshComponent* OwnerComponent );
	bool SetMergedMaterial ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroups, struct FString IDString, class UTexture2D* CamoTexture );
	bool SetMergedMesh ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroups, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FString IDString );
	void ComposeMeshByMerge ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, class UTexture2D* CamoTexture, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner );
	void SettingUpPartsMeshes ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshPart > Parts, unsigned char GroupLabel, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, class UTexture2D* CamoTexture, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner, class UTextureRenderTarget2D* MarkRenderTarget, class UTextureRenderTarget2D* ClanRenderTarget );
	void DetachComponentsByPathNameFromSkeletalMeshComponent ( class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FString > SkeletalMeshPathNames, unsigned long OwnerMeshReset );
	void DetachComponentsByPathNameFromActor ( class AActor* OwnerActor, TArray< struct FString > SkeletalMeshPathNames, unsigned long OwnerMeshReset );
	void DetachAllComponentsFromSkeletalMeshComponent ( class USkeletalMeshComponent* OwnerMeshComponent );
	void ComposeMeshByComponent ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, class UTexture2D* CamoTexture, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner, class UTextureRenderTarget2D* MarkRenderTarget, class UTextureRenderTarget2D* ClanRenderTarget );
	struct FMeshGroup GetOwnerMeshGroup ( int PlayerID, struct FString PlayerName, unsigned char MeshGroupLabel );
	void ComposeMesh ( class AActor* Owner, class USkeletalMeshComponent* OwnerMeshComponent, TArray< struct FMeshGroup > OwnerMeshGroup, class ULightEnvironmentComponent* LightEnvironment, class USkeletalMeshComponent* ShadowParentComp, class USkeletalMeshComponent* AnimParentComp, struct FName AttachedBoneName, class UTexture2D* CamoTexture, TArray< class UAnimSet* > AnimSets, class UAnimTree* AnimTreeTemplate, unsigned long bForceAttacchToOwner );
	void SetMeshPartsGroup ( TArray< int > PartsIndexArr );
	void CollectMeshParts ( );
	void RemoveAllPlayerItemArrayInfos ( );
	void SetMeshGroupInfos ( class AActor* Caller, TArray< int > ItemIDs, TArray< unsigned char > SelectedMeshGroup, TArray< struct FMeshGroup >* OwnerMeshGroups, class UTexture2D** CamoTexture, class UMorphTargetSet** FaceMorphSet );
	void PrepareResources ( class AActor* Caller, class UTexture2D* CamoTexture, class UMorphTargetSet* FaceMorphSet, TArray< struct FMeshPart >* MeshParts );
	bool AsyncLoadMeshGroupInfos ( TArray< int > ItemIDs, TArray< unsigned char > SelectedMeshGroup, struct FScriptDelegate Callback, class AActor* Caller );
	void SetPlayerPawnItemInfos ( int PlayerID, TArray< int > PawnItemArray );
	bool IsExistPlayerPawnItemInfo ( int PlayerID );
	unsigned char GetMeshCompostionType ( );
	void SetMeshCompositionType ( unsigned char CompositionType );
	void PostAsyncCompleteWithinLoadMap ( );
	void release ( );
	void eventInit ( );
	void OnPrepareResources ( class AActor* Caller, class UTexture2D* CamoTexture, class UMorphTargetSet* FaceMorphSet, TArray< struct FMeshPart >* MeshParts );
	void OnMeshGroupInfoSetted ( TArray< struct FMeshGroup > OwnerMeshGroups, class UTexture2D* CamoTexture, class UMorphTargetSet* FaceMorphSet );
};

UClass* USFMeshBuilder::pClassPointer = NULL;

// Class SFGame.SFMeshParts
// 0x00A8 (0x00E4 - 0x003C)
class USFMeshParts : public UObject
{
public:
	struct FSFEDMeshPart                               MeshViewerPart;                                   		// 0x003C (0x0050) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bIsLoading : 1;                                   		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                CurrentOpenedPropertyWindowCount;                 		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSFMeshPart                                 MeshPart;                                         		// 0x0094 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3211 ];

		return pClassPointer;
	};

};

UClass* USFMeshParts::pClassPointer = NULL;

// Class SFGame.SFMinimapActor
// 0x0050 (0x0274 - 0x0224)
class ASFMinimapActor : public AActor
{
public:
	class UTexture2D*                                  MiniMapTexture;                                   		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OpacityRatio;                                     		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ShowEditorWidget : 1;                             		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      PrimaryMinimap : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              WholeMapScaleVaule;                               		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeMapRedTeamRotationVaule;                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeMapBlueTeamRotationVaule;                    		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeMapRotationVaule;                            		// 0x023C (0x0004) [0x0000000000000000]              
	struct FVector                                     ObserverTopViewLocation;                          		// 0x0240 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ObserverTopViewRotation;                          		// 0x024C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                WorldSizeX;                                       		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WorldSizeY;                                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0260 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   OverayMaterial;                                   		// 0x0264 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FsMiniMapLayer >                    MiniMapLayers;                                    		// 0x0268 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3213 ];

		return pClassPointer;
	};

	void SortLayers ( );
};

UClass* ASFMinimapActor::pClassPointer = NULL;

// Class SFGame.SFModeVolume
// 0x0038 (0x0298 - 0x0260)
class ASFModeVolume : public AVolume
{
public:
	unsigned char                                      TouchValidTeamIndex;                              		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnTouchValidTeamIndex;                            		// 0x0261 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IconTypeRedTeam;                                  		// 0x0262 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IconTypeBlueTeam;                                 		// 0x0263 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FStateIconType >                    StateIconTypes;                                   		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bNotifyTouchedSFTrigger : 1;                      		// 0x0270 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned long                                      bOutsideVolumeToReturnMissionWeapon : 1;          		// 0x0270 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       InitialStateForEditor;                            		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      NotifyTriggerClass;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       currState;                                        		// 0x0280 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class USpriteComponent*                            IconLocationForEditor;                            		// 0x0288 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     IconLocationOffset;                               		// 0x028C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3215 ];

		return pClassPointer;
	};

	void OnModeState ( class USFSeqAct_ModeState* Action );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool CanUse ( class APawn* User, unsigned long bTouch );
	void OnUnTouchedModeVolume ( class ASFPawn_Player* SFP );
	void OnTouchedModeVolume ( class ASFPawn_Player* SFP );
	void UpdateObjectIcon ( );
	unsigned char GetShowingIconTeamIndex ( );
	void SetEnable ( unsigned long bEnable );
	void Init ( );
	void ClientReset ( );
	void Reset ( );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFModeVolume::pClassPointer = NULL;

// Class SFGame.SFBombVolume
// 0x0018 (0x02B0 - 0x0298)
class ASFBombVolume : public ASFModeVolume
{
public:
	struct FVector                                     TriggersLocationForIcon;                          		// 0x0298 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AStaticMeshActorForBlastingGame* >   BlastingMeshActor;                                		// 0x02A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3217 ];

		return pClassPointer;
	};

	void UpdateBlastingMeshActor ( );
};

UClass* ASFBombVolume::pClassPointer = NULL;

// Class SFGame.SFFrontLineVolume
// 0x0028 (0x02C0 - 0x0298)
class ASFFrontLineVolume : public ASFModeVolume
{
public:
	TArray< struct FOccupyRatioInfo >                  OccupyRatioSetting;                               		// 0x0298 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              TeamCheckPeriod;                                  		// 0x02A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DelayTimeToNeutralization;                        		// 0x02A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      OccupiedTeam;                                     		// 0x02AC (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              OccupyRatio;                                      		// 0x02B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< class ASFPawn* >                           arrSFPawns;                                       		// 0x02B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3219 ];

		return pClassPointer;
	};

	float GetOccupySpeed ( );
	unsigned char GetTryToOccupyTeam ( );
	int GetVolumeIndex ( );
	void eventUnTouch ( class AActor* Other );
	void Timer ( );
	void GotoNextState ( );
	void GotoPrevState ( );
	void CheckOccupyingTeam ( );
	unsigned char GetOccupyingTeam ( );
	void SetOccupiedTeam ( unsigned char NewTeam );
	unsigned char GetOccupiedTeam ( );
	void InitOccupyRatio ( );
	void PostBeginPlay ( );
	void Reset ( );
};

UClass* ASFFrontLineVolume::pClassPointer = NULL;

// Class SFGame.SFThunderRunVolume
// 0x0001 (0x0299 - 0x0298)
class ASFThunderRunVolume : public ASFModeVolume
{
public:
	unsigned char                                      AreaIndex;                                        		// 0x0298 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3221 ];

		return pClassPointer;
	};

	void eventNotifyWarningBlink ( unsigned long bVisible );
};

UClass* ASFThunderRunVolume::pClassPointer = NULL;

// Class SFGame.SFObjectPool
// 0x00AC (0x00E8 - 0x003C)
class USFObjectPool : public UObject
{
public:
	TArray< class UObject* >                           arrNewObjList;                                    		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFEventDataManager*                         EventDataManager;                                 		// 0x0048 (0x0004) [0x0000000000000000]              
	class USFConditionManager*                         ConditionManager;                                 		// 0x004C (0x0004) [0x0000000000000000]              
	class USFAwardManager*                             AwardManager;                                     		// 0x0050 (0x0004) [0x0000000000000000]              
	class USFItemManager*                              ItemManager;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	class USFMCResourceManager*                        MCResourceManager;                                		// 0x0058 (0x0004) [0x0000000000000000]              
	class USFMeshBuilder*                              MeshBuilder;                                      		// 0x005C (0x0004) [0x0000000000000000]              
	class USFSprayTextureManager*                      SprayTextureManager;                              		// 0x0060 (0x0004) [0x0000000000000000]              
	class USFRenderTextureManager*                     RenderTextureManager;                             		// 0x0064 (0x0004) [0x0000000000000000]              
	TArray< struct FMoviePlayerInfo >                  arrMoviePlayer;                                   		// 0x0068 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           DisableLogModeNameArray;                          		// 0x0074 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MergedDataCacheMax;                               		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MergedDataCacheCheckTime;                         		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FMergedMeshCacheDatum >             MergedMeshCache;                                  		// 0x0088 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFSpawnedEmitter*                           RainDropSelfEmitterList[ 0x14 ];                  		// 0x0094 (0x0050) [0x0000000000000000]              
	int                                                RainDropSelfEmitterListIdx;                       		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3223 ];

		return pClassPointer;
	};

	void UpdateMeshBuildingDataReference ( unsigned long bFullCache );
	void ReleaseMeshBuildingData ( );
	void ReleaseMergedMeshes ( );
	class USkeletalMesh* GetMergedMesh ( unsigned char MeshGroupLabel, struct FString IDString );
	void PutMergedMesh ( unsigned char MeshGroupLabel, struct FString IDString, class USkeletalMesh* MergedMesh );
	void ReleaseRenderTextureManager ( );
	void InitRenderTextureManager ( );
	class USFSprayTextureManager* GetSprayTextureManager ( );
	void ReleaseSprayTextureManager ( );
	void InitSprayTextureManager ( );
	class UGFxMoviePlayer* GetGFxMoviePlayer ( struct FName MoviePlayerName );
	void ReleaseGFxMoviePlayers ( );
	void InitGFxMoviePlayers ( );
	void PROCESSEVENT ( struct FName EventName, int Param1, int Param2, class UObject* Obj );
	void ReleaseAwardManager ( );
	void InitAwardManager ( );
	class USFAwardManager* GetAwardManager ( );
	class USFConditionManager* GetConditionManager ( );
	void ReleaseConditionManager ( );
	void InitConditionManager ( );
	class USFEventDataManager* GetEventDataManager ( );
	void ReleaseEventDataManager ( );
	void InitEventDataManager ( );
	void ReleaseMCResourceManager ( );
	void InitMCResourceManager ( );
	void ReleaseItemManager ( );
	void InitItemManager ( );
	class AEmitter* GetRainEmitter_Self ( struct FVector SpawnLocation, struct FRotator SpawnRotation, class UParticleSystem* HitParticle );
	void eventrelease ( );
	void eventAsyncLevelLoadCompleteCallBack ( struct FName LevelName );
	void eventPostLoadStreamingLevel ( struct FName LevelName );
	void eventPreLoadStreamingLevel ( struct FName LevelName );
	void eventPostLoadMap ( );
	void eventPostAsyncCompleteWithinLoadMap ( );
	void eventPreLoadMap ( );
	void eventInit ( );
	class UObject* AllocateNewObject ( class UClass* ObjClass );
	void ClearMaterialForSFCubeMap ( );
	void UpdateMaterialForSFCubeMap ( );
	void RemoveNewObjList ( class UObject* Obj );
	void AddNewObjList ( class UObject* Obj );
};

UClass* USFObjectPool::pClassPointer = NULL;

// Class SFGame.SFObstaclesActor
// 0x00B4 (0x0328 - 0x0274)
class ASFObstaclesActor : public ADynamicSMActor
{
public:
	struct FName                                       currState;                                        		// 0x0274 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FsMeshLevel >                       MeshLevels;                                       		// 0x027C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0288 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         PreviewMaterial;                                  		// 0x028C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   TransparencyMaterial;                             		// 0x0298 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   DamagedSound;                                     		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Health;                                           		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Price;                                            		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    HealthMaxList;                                    		// 0x02A8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                DefaultHealth;                                    		// 0x02B4 (0x0004) [0x0000000000000000]              
	TArray< float >                                    PriceList;                                        		// 0x02B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIgnoreSameTeamDamage : 1;                        		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReusableWhenUsing : 1;                           		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockWhenDestroyed : 1;                          		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHiddenBackupCollisionMesh : 1;                   		// 0x02C4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bCollideActorsBackup : 1;                         		// 0x02C4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bBlockActorsBackup : 1;                           		// 0x02C4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bCollideBackup : 1;                               		// 0x02C4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      TeamIndex;                                        		// 0x02C8 (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	unsigned char                                      nForceUpdate;                                     		// 0x02C9 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      BlockType;                                        		// 0x02CA (0x0001) [0x0000000000000000]              
	int                                                MaxUse;                                           		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxReusableRate;                                 		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstallingTime;                                   		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LevelNow;                                         		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingPreview;                                   		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviewNow;                                       		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                nCollisionTypeBackup;                             		// 0x02E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UsedCound;                                        		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HealthOld;                                        		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CollideRadius;                                    		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UStaticMesh*                                 PreviewMesh;                                      		// 0x02F4 (0x0004) [0x0000000000000000]              
	float                                              HealthDirty;                                      		// 0x02F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     IconLocationOffset;                               		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ASFObstaclesActor*                           nextObstaclesActor;                               		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              ProjectileDOTExpireTime;                          		// 0x030C (0x0004) [0x0000000000000000]              
	TArray< struct FsDOT >                             SteadyDOTs;                                       		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsDOT >                             ActiveDOTs;                                       		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3225 ];

		return pClassPointer;
	};

	void ProcessDotList ( float fdelta );
	void CheckSteadyDotExpired ( float DeltaTime );
	void AddDotDamageType ( unsigned long bEnter, class AController* Inst, class AActor* Causer, class UClass* newDamageType, float newRestTime, float BaseDamage );
	void eventDestroyed ( );
	void CheckInstallAim ( );
	void UpdateObjectIcon ( );
	bool CheckDrawingPreview ( );
	void PreViewUpdate ( );
	void eventPreview ( class APawn* InstPawn );
	void DrawPreview ( unsigned long bShow );
	void OnModeState ( class USFSeqAct_ModeState* Action );
	bool IsUsingSkeletalMesh ( int LevelNew );
	bool IsActivated ( );
	bool IsInstallableBy ( class APawn* InstPawn );
	bool IsUseable ( );
	bool IsValidTargetFor ( class AController* C );
	int GetWalletAmount ( int PlayerID );
	float GetSlowDownPct ( class ASFPawn* TargetPawn );
	unsigned char eventScriptGetTeamNum ( );
	int GetPrice ( );
	bool CheckWallet ( class APlayerReplicationInfo* TargetPRI );
	int GetHealthMax ( );
	int GetGameDiff ( );
	void InitPriceList ( );
	void InitHealthMax ( );
	int GetLevelNow ( );
	void SetupSkeletalMesh ( int LevelNew );
	void SetupStaticMesh ( int LevelNew );
	void PlayAnimation ( int LevelNew );
	void ChangeCollisionState ( int LevelNew );
	void KismetProcess ( int LevelNew );
	bool BlockWhenDestroyed ( int LevelNew );
	bool IsBlocked ( int LevelNew );
	void ObstacleStatChanged ( );
	bool ChangedLevelNow ( int LevelNew );
	bool CheckLevelNow ( unsigned long bForce );
	void SpawnHitEffect ( float Damage, struct FVector Momentum, struct FVector HitLocation );
	void PostTakeDamage ( class AController* EventInstigator );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* dmgType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	unsigned char SetLevel ( class APawn* InstPawn, int newLevel, unsigned long bForce );
	void OnSetBarricade ( class USFSeqAct_SetBarricade* Action );
	void SortLevelInfos ( );
	void ProcessDeltaTime ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFObstaclesActor::pClassPointer = NULL;

// Class SFGame.SFPrimaryTargetActor
// 0x001C (0x0344 - 0x0328)
class ASFPrimaryTargetActor : public ASFObstaclesActor
{
public:
	struct FVector                                     OriginStep;                                       		// 0x0328 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    OriginRot;                                        		// 0x0334 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIconState : 1;                                   		// 0x0340 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3227 ];

		return pClassPointer;
	};

	int eventGetHealthPercentageINT ( );
	bool IsInstallableBy ( class APawn* InstPawn );
	void UpdateObjectIcon ( );
	void SetActiveIcon ( );
	void OnSetPrimaryTargetIcon ( class USFSeqAct_SetPrimaryTargetIcon* Action );
	struct FVector GetShockWaveOrientation ( );
	struct FVector GetShockWaveOrigin ( );
	void SetEmptyMesh ( unsigned long bBlock );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPrimaryTargetActor::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemInternet
// 0x0208 (0x0244 - 0x003C)
class USFOnlineSubsystemInternet : public UObject
{
public:
	struct FPointer                                    _hOpen;                                           		// 0x003C (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    _hConnection;                                     		// 0x0040 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    _hRequest;                                        		// 0x0044 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     BaseUrl[ 0x25 ];                                  		// 0x0048 (0x01BC) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ClanServerPort;                                   		// 0x0204 (0x0004) [0x0000000000000000]              
	struct FString                                     strPlayerUSN;                                     		// 0x0208 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ResponseResultArray;                              		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHTTP_ARG >                         ArgsArray;                                        		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHandlingErrorDelegate__Delegate;              		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRequestChangedDelegate__Delegate;             		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3229 ];

		return pClassPointer;
	};

	int ServerToSendGetFiringRangeScoreRank ( int WeaponType, int SortType, TArray< struct FString >* ReturnResults );
	int ServerToSendGet1VS1ModeUserRank ( struct FString CustomModeType, struct FString MapID, TArray< struct FString >* ReturnResults );
	int ServerToSendGetLeagueSeasonClanUserRank ( struct FString year_month, struct FString CodeName, TArray< struct FString >* ReturnResults );
	int ServerToSendGetLeagueSeasonClanRank ( struct FString year_month, struct FString ClanName, TArray< struct FString >* ReturnResults );
	int ServerToSendGetLeagueMyClanUserRank ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetLeagueMyClanRank ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanRecommendList ( struct FString strUSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanRankLast6Months ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanRankTop60Monthly ( TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanInventoryList ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetCommunityNotYetReadCount ( struct FString strUSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetCommunityBuddyList ( struct FString strUSN, TArray< struct FString >* ReturnResults );
	int ServerToSendAddCommunityFeedback ( struct FString strUSN, int nIndex, int nType, TArray< struct FString >* ReturnResults );
	int ServerToSendGetCommunityFeedbackList ( struct FString strUSN, int nIndex, TArray< struct FString >* ReturnResults );
	int ServerToSendGetCommunityMessageList ( struct FString strUSN, TArray< struct FString >* ReturnResults );
	int ServerToSendRemoveCommunityMessage ( struct FString strUSN, int nIndex, TArray< struct FString >* ReturnResults );
	int ServerToSendAddCommunityMessage ( struct FString strUSN, struct FString strMessageType, struct FString strTitle, struct FString strMessage, TArray< struct FString >* ReturnResults );
	int ServerToSendCheckSameClanMark ( struct FString ClanMark, TArray< struct FString >* ReturnResults );
	int ServerToSendUpdateClanMark ( int CSN, int MasterUSN, struct FString ClanMark, TArray< struct FString >* ReturnResults );
	int ServerToSendGetWeaponLogInfo ( struct FString strUSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanRecordList ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendUpdateUserInfo ( struct FString strUSN, struct FString strPlayerInfo, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanMemberList ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetMessageBoardList ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendDetailSearchClan ( struct FString strSrchMsg, struct FString ModeID, struct FString MapID, TArray< struct FString > OptionDataTag, TArray< struct FString > OptionDataValue, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanMemberInfo ( struct FString strUSN, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanList ( struct FString strAreaCode, struct FString strSortType, TArray< struct FString >* ReturnResults );
	int ServerToSendUpdateClanInfo ( struct FString CSN, struct FString WebURL, struct FString IntroMsg, struct FString Notice, struct FString SendUSN, struct FString ModeNo, struct FString MapNo, TArray< struct FString > OptionDataTag, TArray< struct FString > OptionDataValue, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanExist ( struct FString strSrchType, struct FString strSrchMsg, TArray< struct FString >* ReturnResults );
	int ServerToSendJoinClan ( struct FString strCSN, struct FString strUSN, struct FString strCodeName, struct FString strAnswer0, struct FString strAnswer1, struct FString strAnswer2, struct FString strAnswer3, struct FString strUserInfo, struct FString strRecommendNICK, TArray< struct FString >* ReturnResults );
	int ServerToSendGetClanInfo ( struct FString strCSN, TArray< struct FString >* ReturnResults );
	int ServerToSendCreateClan ( struct FString ClanName, struct FString WebPage, struct FString USN, struct FString CodeName, struct FString IntroMsg, struct FString Notice, struct FString UserInfo, struct FString UserRank, struct FString ModeNo, struct FString MapNo, TArray< struct FString > OptionDataTag, TArray< struct FString > OptionDataValue, TArray< struct FString >* ReturnResults );
	void eventOnErrorReceived ( struct FString InRequestURL, int QueryResult, int ResultID );
	struct FString GetBaseURL ( unsigned char ESF2Info );
	void AddURL ( struct FString strNewURL, struct FString* strResquest );
	void AddArgument ( struct FString InName, struct FString InValue, unsigned long IsNotHexCode );
	struct FString GetHexCode ( struct FString strMsg );
	void SetPlayerUSN ( struct FString USN );
	int GetResponseFile ( struct FString FilePath, TArray< struct FString >* Results );
	void InitializeArguments ( );
	int GetResponse ( struct FString InRequestURL, unsigned long bIsCheckURL, TArray< struct FString >* Results );
	bool Request ( struct FString strURL, unsigned char M );
	void eventSetRequestChanged ( int IsRequesting );
	void SetRequestChangedDelegate ( struct FScriptDelegate RequestChangedDelegate );
	void OnRequestChangedDelegate ( int IsRequesting );
	void SetHandlingErrorDelegate ( struct FScriptDelegate HandlingErrorDelegate );
	void OnHandlingErrorDelegate ( struct FString InRequestURL, int QueryResult, int ResultID );
};

UClass* USFOnlineSubsystemInternet::pClassPointer = NULL;

// Class SFGame.SFPacketProcessor
// 0x0020 (0x005C - 0x003C)
class USFPacketProcessor : public UObject
{
public:
	class USFOnlineSubsystemPC*                        SFOSPC;                                           		// 0x003C (0x0004) [0x0000000000000000]              
	class USFOnlineSubsystemPCDedi*                    SFOSPCDedi;                                       		// 0x0040 (0x0004) [0x0000000000000000]              
	struct FString                                     DediGSIP;                                         		// 0x0044 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DediGSPort;                                       		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PIDForTransactionInGameItemData;                  		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                nInGameItemData;                                  		// 0x0058 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3231 ];

		return pClassPointer;
	};

	void SetUserConditionPacket ( class UPacket* recvPacket, class ASFGameReplicationInfo* SFGRI );
	void SetInGameBombSPInfoPacket ( class UPacket* recvPacket, class ASFGameReplicationInfo* SFGRI );
	void ProcessDediRecvPacket ( int ProtocolID, int ResultID, class UPacket* recvPacket );
	void ServerSetRequestEndGameExit ( int USN, int Kills, int Assists, int Deaths, int HeadShotCount );
	void ServerToSendZombiePlayerLogToDatabase ( class ASFPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, int PlayLevel );
	void ServerToSendGoldRushPlayerLogToDatabase ( class ASFPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, unsigned char bIsAbnormalMatchEnd );
	void ServerToSendAIDTMPlayerLogToDataBase ( class ASFPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, unsigned char bIsAbnormalMatchEnd );
	void ServerToSendWarriorPlayerLogToDataBase ( class ASFWarriorPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, int MonsterKill, int MonsterWeakKill, int NeutralMonsterKills );
	void ServerToSendManHuntPlayerLogToDataBase ( class ASFPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, int PlayLevel );
	void ServerToSendPVEPlayerLogToDataBase ( class ASFPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, int PlayLevel, int CurrentWave );
	void ServerToSendPlayerLogToDataBase ( class ASFPlayerReplicationInfo* SFPRI, int GameModeIndex, int GameMapIndex, unsigned char bIsAbnormalMatchEnd );
	void ServerToUpdatePlayInfo ( struct FString GameIndex, int ModeIndex, int MapIndex, int PlayTime, struct FString ResultString, int USN, int Kill, int Assist, int Death, int GainExp );
	void ServerToSendSpendUsableInGameData ( class ASFPlayerController* NewPlayer, struct FUsableInGameItemData ItemData );
	void PostLogin ( class ASFPlayerController* NewPlayer );
	void ServerToSendSlaughtererUserInfo ( int USN, int TO_USN );
	void SendInGameUserKick ( int myProposerPID, int myTargetPID, int myModeID, int myMapID, unsigned long myVoteResult, unsigned char myAssentient, unsigned char myObjection, unsigned char myInvalide, int myKills, int myDeaths, int myRedScore, int myBlueScore, int myRedMembers, int myBlueMembers );
	void SendInGameUserPointFromDedi ( class ASFPlayerReplicationInfo* SFPRI );
	void SendInGameUserDedi ( class ASFGameReplicationInfo* SFGRI );
	void CheckDediValidation ( class ASFPlayerController* NewPlayer );
	void SendClanWarResultMsg ( class ASFGameReplicationInfo* SFGRI );
	bool SetGameLogToDatabase ( class ASFGameReplicationInfo* SFGRI, struct FSFGameLog* GameLog );
	void RequestEndGame ( );
	void SendInGameScoreForInterlude ( class ASFGameReplicationInfo* SFGRI, int nRedScore, int nBlueScore );
	void OnMatchOver ( class ASFGameReplicationInfo* SFGRI );
	void OnPendingMatch ( );
	void OnWinningKill ( );
	void OnStartSwitchingSide ( );
	void OnRoundOver ( );
	void OnPreRoundOver ( );
	void OnMatchInProgress ( );
	void OnPreCountDown ( );
	void OnCountDown ( );
	void OnPreMatchIntro ( );
	void OnPreMatchInProgress ( );
	bool IsTCPSender ( );
	void DisconnectDediConnection ( );
	void InitDediConnection ( struct FString Options );
	void eventInit ( );
};

UClass* USFPacketProcessor::pClassPointer = NULL;

// Class SFGame.SFPawnBlockingVolume
// 0x000C (0x0270 - 0x0264)
class ASFPawnBlockingVolume : public ABlockingVolume
{
public:
	TArray< class UClass* >                            IgnoreBlockedPawnClass;                           		// 0x0264 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3233 ];

		return pClassPointer;
	};

};

UClass* ASFPawnBlockingVolume::pClassPointer = NULL;

// Class SFGame.SFPendingPlayerController
// 0x0020 (0x0694 - 0x0674)
class ASFPendingPlayerController : public APlayerController
{
public:
	struct FVector                                     Scene_MidTones;                                   		// 0x0674 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     Scene_Shadows;                                    		// 0x0680 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Scene_Desaturation;                               		// 0x068C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACameraActor*                                WorldCamera;                                      		// 0x0690 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3235 ];

		return pClassPointer;
	};

	void eventPlayerTick ( float DeltaTime );
	void UpdateViewLocation ( );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
};

UClass* ASFPendingPlayerController::pClassPointer = NULL;

// Class SFGame.SFPhysicalMaterialProperty
// 0x0070 (0x00AC - 0x003C)
class USFPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	unsigned char                                      PenetrateType;                                    		// 0x003C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MaterialType;                                     		// 0x0040 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	class USoundCue*                                   FootStepSound;                                    		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FootStepSoundDash;                                		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   LandSound;                                        		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FootStepParticle;                                 		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBlockSight : 1;                                  		// 0x0058 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBreakableGlassForProjectile : 1;                 		// 0x0058 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDeepWater : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLightProvide : 1;                                		// 0x0058 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSliceMesh : 1;                                   		// 0x0058 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSliceHollowMesh : 1;                             		// 0x0058 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	TArray< struct FMaterialImpactEffect >             ImpactEffects;                                    		// 0x005C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ReducePower;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      LightColor;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightRadius;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightBrightness;                                  		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightFallOffExponent;                             		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SupportedScaleLevel;                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElasticModulusForProjectile;                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionForProjectile;                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              bAllowDecalDrawDistance;                          		// 0x0088 (0x0004) [0x0000000000000000]              
	TArray< struct FPhysicalSoundGroup >               PhysicalSounds;                                   		// 0x008C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FsResLink >                         OtherFootStepResource;                            		// 0x0098 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SliceUVScale;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          SliceMaterial;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3237 ];

		return pClassPointer;
	};

	void PlayImpactEffectSub ( class ASFPawn* Caller, struct FName EffectType, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, struct FVector RayDir, struct FTraceHitInfo HitInfo, int Index, unsigned long bEnd, int AdditionalDecalAngle );
	void ProcessLightProvide ( struct FVector HitLocation, struct FTraceHitInfo HitInfo, class AActor* SourceActor );
	bool AllowImpactEffectEx ( class ASFPawn* Caller, class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, unsigned char* AllowDrawDecal );
	bool AllowImpactEffects ( class AActor* HitActor, struct FTraceHitInfo HitInfo, struct FVector HitLocation, struct FVector HitNormal );
	void PlayImpactEffects ( class ASFPawn* Instigator, class AActor* Caller, struct FName EffectType, struct FVector HitLocation, int Index, unsigned long bEnd, int AdditionalDecalAngle, class AActor* HitActorCandi );
	struct FMaterialImpactEffect GetImpactEffectByMaterial ( class ASFGameReplicationInfo* SFGRI, struct FName EffectType, class UPhysicalMaterial* HitMaterial );
	class AActor* GetMaterialTypeBelowFeet ( class APawn* TargetPawn, struct FVector* FootLocation, struct FVector* FootNormal, class USFPhysicalMaterialProperty** SFPhysMaterial );
	struct FMaterialImpactEffect GetImpactEffect ( class ASFGameReplicationInfo* SFGRI, struct FName EffectType );
	struct FsResLink GetLnkedResource ( int LinkedPhysicResourceIndex );
	class UParticleSystem* GetFootStepParticle ( class ASFPawn* InstPawn );
	class USoundCue* GetLandSound ( class ASFPawn* InstPawn );
	class USoundCue* GetFootStepSound ( class ASFPawn* InstPawn, unsigned long bDash );
	bool IsBackfaceNormal ( class UMaterial* Material, struct FVector TraceDir, struct FVector HitNormal );
	class USoundCue* GetPhysicalSound ( struct FName GroupName );
};

UClass* USFPhysicalMaterialProperty::pClassPointer = NULL;

// Class SFGame.SFPlayerReplicationInfo
// 0x0474 (0x0750 - 0x02DC)
class ASFPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	int                                                RoundKills;                                       		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MultiKillLevel;                                   		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              LastKillTime;                                     		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                Assists;                                          		// 0x02E8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                DiebyAI;                                          		// 0x02EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                KillScore;                                        		// 0x02F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                DeathScore;                                       		// 0x02F4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              MissionScore;                                     		// 0x02F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                BonusScore;                                       		// 0x02FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              PrevScore;                                        		// 0x0300 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevMissionScore;                                 		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PrevLuckyPointScore;                              		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Exp;                                              		// 0x030C (0x0004) [0x0000000000000000]              
	int                                                Rank;                                             		// 0x0310 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LadderPoint;                                      		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                CSN;                                              		// 0x0318 (0x0004) [0x0000000000000000]              
	struct FString                                     FunctionalItemList[ 0x5 ];                        		// 0x031C (0x003C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	TArray< int >                                      ApplicableFunctionalItemsForChar;                 		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ApplicableFunctionalItemsForWeap;                 		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AdjustOnceItems;                                  		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAdjustItemProperty : 1;                          		// 0x037C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSquadLeader : 1;                                 		// 0x037C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      LogInfoInitialized : 1;                           		// 0x037C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bLeaveNoTraceLog : 1;                             		// 0x037C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bNeedToUpdateKillFeedBackIcon : 1;                		// 0x037C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bInitializedPlayerInfo : 1;                       		// 0x037C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      SendPlayLog : 1;                                  		// 0x037C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bPetBot : 1;                                      		// 0x037C (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bIsNCC : 1;                                       		// 0x037C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAllowSendPing : 1;                               		// 0x037C (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	unsigned long                                      IsHealth : 1;                                     		// 0x037C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      IsSpeed : 1;                                      		// 0x037C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      IsPower : 1;                                      		// 0x037C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bUpdatedPlayInfoDS : 1;                           		// 0x037C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bFreeInstantRespawn : 1;                          		// 0x037C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bAlreadyRequestUserCondition : 1;                 		// 0x037C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      IsRequestEndGameExit : 1;                         		// 0x037C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bUseAILuckyPointRatio : 1;                        		// 0x037C (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	TArray< struct FString >                           SpectatorDecoInfo;                                		// 0x0380 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      CrossHairClass;                                   		// 0x038C (0x0004) [0x0000000000000000]              
	struct FColor                                      CrossHairColor;                                   		// 0x0390 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanMarkEffect;                                   		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ConsecutiveKills;                                 		// 0x03A0 (0x0004) [0x0000000000000000]              
	int                                                ConsecutiveDeaths;                                		// 0x03A4 (0x0004) [0x0000000000000000]              
	int                                                CustomCharCacheIndex;                             		// 0x03A8 (0x0004) [0x0000000000000000]              
	int                                                CustomHandCacheIndex;                             		// 0x03AC (0x0004) [0x0000000000000000]              
	int                                                CustomWeapCacheIndex[ 0x6 ];                      		// 0x03B0 (0x0018) [0x0000000000000000]              
	int                                                CustomHelmetCacheIndex;                           		// 0x03C8 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            arrPreLoadedWeapSlotIndex;                        		// 0x03CC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                LastUsingWeapSetIndex;                            		// 0x03D8 (0x0004) [0x0000000000000000]              
	struct FColor                                      DefaultHudColor;                                  		// 0x03DC (0x0004) [0x0000000000000000]              
	float                                              CurrentLuckyPointRatio;                           		// 0x03E0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastUpdatedLuckyPointRatio;                       		// 0x03E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentLuckyPointCount;                           		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxLuckyPointCount;                               		// 0x03EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                LuckyPointScore;                                  		// 0x03F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              CurrentClanPointRatio;                            		// 0x03F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GearWeight;                                       		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              WeaponWeight;                                     		// 0x03FC (0x0004) [0x0000000000000000]              
	float                                              PlayerWeight;                                     		// 0x0400 (0x0004) [0x0000000000000000]              
	struct FName                                       SquadName;                                        		// 0x0404 (0x0008) [0x0000000040000000]              ( CPF_EditInlineNotify )
	class AVolume*                                     LocationVolume;                                   		// 0x040C (0x0004) [0x0000000000000000]              
	class ASFPawn*                                     CachedPawn;                                       		// 0x0410 (0x0004) [0x0000000000000000]              
	int                                                OldWeapSetPlayTime;                               		// 0x0414 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NotifyMissionLog1;                                		// 0x0418 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NotifyMissionLog2;                                		// 0x041C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NotifyMissionLog3;                                		// 0x0420 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PreNotifyMissionLog1;                             		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreNotifyMissionLog2;                             		// 0x0428 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreNotifyMissionLog3;                             		// 0x042C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDeadTimeSeconds;                              		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      PawnItemIDCache;                                  		// 0x0434 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSFTestLog_User                             TestLogUser;                                      		// 0x0440 (0x00D4) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSFTestLog_Room                             TestLogRoom;                                      		// 0x0514 (0x008C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSFTestLog_System                           TestLogSystem;                                    		// 0x05A0 (0x0060) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SpecialKillBonus;                                 		// 0x0600 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ContinuousKillBonus;                              		// 0x0604 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RareKillBonus;                                    		// 0x0608 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                NormalKillBonus;                                  		// 0x060C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                DefaultKillBonus;                                 		// 0x0610 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                KillFeedBackList[ 0xC ];                          		// 0x0614 (0x0030) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                KillFeedBackStartIndex;                           		// 0x0644 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                KillFeedBackCounter;                              		// 0x0648 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     RepWeaponTagString;                               		// 0x064C (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     WeaponTagString[ 0x3 ];                           		// 0x0658 (0x0024) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      RoleInfo;                                         		// 0x067C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      TeamSlotIndexFromLobby;                           		// 0x067D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      InGameVoteState;                                  		// 0x067E (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      Gender;                                           		// 0x067F (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      SprayImageIndex;                                  		// 0x0680 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UTexture*                                    CachedSprayTexture;                               		// 0x068C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSPingNotify                                PingNotifyInfo;                                   		// 0x0690 (0x001C) [0x0000000000000020]              ( CPF_Net )
	int                                                CountProposeInGameKick;                           		// 0x06AC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_DamageToPlayer;                               		// 0x06B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_DamageByPlayer;                               		// 0x06B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_BackAttackToPlayer;                           		// 0x06B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_BackAttackByPlayer;                           		// 0x06BC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_PrevDamageToPlayer;                           		// 0x06C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Log_PrevDamageByPlayer;                           		// 0x06C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ContinualKillDeath;                               		// 0x06C8 (0x0004) [0x0000000000000000]              
	class UClass*                                      ItemCrosshairClass;                               		// 0x06CC (0x0004) [0x0000000000000000]              
	struct FColor                                      ItemCrosshairColor;                               		// 0x06D0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      AIRankbyDifficulty;                               		// 0x06D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AIName;                                           		// 0x06E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DisguiseRank;                                     		// 0x06EC (0x0004) [0x0000000000000000]              
	struct FString                                     GFXPromotionRank;                                 		// 0x06F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxApplyExpRatio;                                 		// 0x06FC (0x0004) [0x0000000000000000]              
	float                                              LocalValidPlayTime;                               		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FUserConditionData                          UserGameConditionInfo;                            		// 0x0704 (0x001C) [0x0000000000000000]              
	int                                                ClanBuffState;                                    		// 0x0720 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FSBombSPData                                UserBombSPData;                                   		// 0x0724 (0x002C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3239 ];

		return pClassPointer;
	};

	void SetBombSPData ( struct FSBombSPData BombSpData );
	struct FSBombSPData GetUserBombSPData ( );
	void GetModeItems ( int ModeItemType, TArray< int >* ModeItemList );
	struct FUserConditionData GetUserGameCondition ( );
	void SetUserGameCondition ( int RecentKill, int RecentDeath, int RecentHeadShot, int BaseKill, int BaseDeath, int BaseHeadShot );
	void IncreasePerformHealthPurchaseCount ( );
	void IncreasePerformWeaponPurchaseCount ( );
	bool IsFreeInstantRespawn ( );
	void SetFreeInstantRespawn ( unsigned long bUseFreeInstantRespawn );
	void NotifyDied ( class AController* Killer );
	int GetAIRankbyDifficulty ( unsigned char Level );
	void SetAIRank ( int AIDifficulty );
	void eventDestroyed ( );
	bool IsOverProposeInGameKick ( );
	bool IsPlayerVoteKickTarget ( );
	unsigned char CheckEnableInGameKickPropose ( struct FString CodeName );
	void InGameStoreItemPurchased ( int ItemId, int SpendModeMoney, int ItemLog );
	void OnPingNotified ( );
	int GetVIPGrade ( int UserNumber );
	int GetItemBoostValue ( TArray< struct FString > FuncItemList, class UClass* BaseClass, unsigned char Type );
	void GetBoostOption ( unsigned char BoostType, float* ExpBoost, float* SPBoost, struct FSUserResult* UserResult );
	float GetValidPlayTime ( );
	float GetAntiFatigueRatio ( );
	int GetUserResultInfo ( struct FSUserResult* UserResult );
	int CalculateAllscore ( );
	float ReProcessMissionScore ( float MissionScoreValue );
	int CalculateEarnScore ( float AdditionalScore, float* ScoreValue, float* MissionScoreValue, int* LuckyPointScoreValue, int* BonusScoreValue );
	float CalculateAdditionalLuckyPoint ( );
	float CalculateAdditionalScore ( );
	void SetAdditionalResult ( TArray< struct FAdditionalModeResult >* AdditionalValue );
	int eventGetAllScore ( unsigned long bIncludeBonusScore );
	void ProcessKillFeedBack ( int KillType, int AdditionalHitType );
	void UpdateDefaultKillBonusCounter ( int InKillType );
	void UpdateKillTypeBonusCounter ( int InKillType, int StartKillType, int TotalCounter, unsigned long bWeaponKillType, int* KillBonus );
	int GetKillFeedBackList ( int Index );
	void AddKillFeedBackList ( int NewKillType, unsigned long bWeaponKillType );
	void ChangedKillFeedBackList ( );
	void DisplayKillFeedBackList ( );
	int GetKillFeedBackListIndex ( int Index );
	void UpdateNumLives ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	unsigned char IsMCCharacter ( );
	void eventSetPlayerName ( struct FString S );
	void InitPlayerInfoFromDataStore ( );
	int GetKillFeedbackScore ( class UClass* GameScoreClass, int* OutNormaltKillScore, int* OutSpecialScore, int* OutRareScore, int* OutContinuousScore );
	void SetUserGameDataToDatabase ( unsigned char bIsAbnormalMatchEnd );
	void ProcessEndEvent ( struct FName EventType, int nEarnScore );
	void SetLogInfoWeapPlayTime ( );
	void SetLogInfoInit ( int nSet );
	void SendPromotionMessage ( struct FString newGFxRank );
	int GetPCRoomCareType ( );
	struct FString eventGetPlayerCodeName ( unsigned long bColorCodeName );
	struct FString GetPlayerAlias ( );
	struct FString GetGFxPlayerVipImg ( int* SlotIndex );
	int eventGetGFxPlayerVipGrade ( int* SlotIndex );
	struct FString GetGFxPlayerMonthlyRewardImg ( int* SlotIndex );
	int eventGetGFxPlayerMonthlyRewardGrade ( int* SlotIndex );
	struct FString eventGetNameTagUICode ( int* SlotIndex );
	int eventGetNametagImage ( int* SlotIndex );
	bool JoinedClan ( int USN );
	void GetGFxClanForClanMark ( int* SlotIndex, struct FString* strClan, int* IsJoinClan );
	void GetGFxRankForRankMark ( int* SlotIndex, struct FString* strRank );
	struct FString eventGetClanMark ( unsigned char Size, unsigned long CallNameTag );
	struct FString eventGetGFxRank ( unsigned long bOriginallRank );
	void IncreaseMissionInfoLog ( unsigned char MissionIndex );
	void UpdateMissionInfoLog ( unsigned char MissionIndex );
	void SetPlayingLog ( unsigned char logType );
	void SetRank ( int nNewRank );
	void UpdateRank ( int nNewExp );
	void SendMissionScoreUpMessage ( float NewMissionScore, float OldMissionScore );
	void SendScoreInitMessage ( );
	void SendScoreUpMessage ( float NewScore, float oldscore );
	void MissionScoreUp ( float Amt, float maxscore );
	int GetEarnExp ( );
	void MoneyUp ( int nAmt, int nBonusAmt );
	void ScoreUp ( int nAmt, int nBonusAmt, unsigned long bNoUpdateRank );
	void IncrementLuckyPoint ( int LuckyPointAmt );
	void SetBombSPReceiveLocalizedMessage ( int SPAmt );
	void IncrementSpecialForceKill ( int LadderDiff );
	void InitializeMultiKill ( );
	void IncrementMultiKill ( unsigned char Amt );
	float GetLastKillTime ( );
	void SetLastKillTime ( float fTime, float MultiKillCheckTime );
	void IncrementAssist ( int Amt );
	void DecrementKillDeathBuffCounter ( int Amt );
	void IncrementKillDeathBuffCounter ( int Amt );
	void IncrementKill ( int Amt );
	void InvalidateLuckyPoint ( );
	void SetAdditionalProperties ( class ASFWeapon* CurrentWeapon, float InventoryWeight );
	void UpdateClanPointIncrease ( float Increase );
	void IncreaseLuckyPointProbability ( float Probability );
	void UpdateLuckyPointProbability ( float Probability );
	void UpdateWeight ( );
	void SetGearWeight ( float Weight );
	void SetWeaponWeight ( float Weight );
	class ASFPawn* GetMyPawn ( );
	void Reset ( );
	void NotifyPawnSpawned ( );
	void InitKillFeedBackList ( );
	void UpdateTeamDataProvider ( );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	class AVolume* FindTouchingLocationVolume ( class ASFPawn* Pawn );
	void UnTouchLocationVolume ( class AVolume* V, class ASFPawn* Pawn );
	void TouchLocationVolume ( class AVolume* V, class ASFPawn* Pawn );
	bool IsInvalidName ( );
	struct FString eventGetDisplayedCodeName ( unsigned long bToFriends, class ASFPawn* Pawn );
	void ParseWeaponTagString ( struct FString CombinedWeaponTagString );
	void SetWeaponTagStrings ( struct FString InWeaponTagString );
	void SetFunctionalItemList ( struct FString* InFunctionalItemList );
	void UninitPawn ( class ASFPawn* Pawn );
	bool CheckUsingFunctionalItem ( class UClass* FunctionalItemClass );
	void ProcessFunctionalItemList ( );
	bool CheckLimitedItem ( class UClass* ItemClass );
	void ApplyMovePoint ( class ASFPawn* Pawn, float Value, float Duration );
	void AddBuffDamage ( class UClass* DamageType, int* Damage );
	void AddDamage ( class UClass* DamageType, int* Damage );
	void ApplyDamagePoint ( class ASFPawn* Pawn, float Value, float Duration );
	void ApplyHealthPoint ( class ASFPawn* Pawn, float Value, float Duration );
	void ApplyStreakBuff ( class ASFPawn* Pawn, float Value, float Duration );
	void ApplyBuff ( class ASFPawn* Pawn, unsigned long bEffectOnly, float Value, float Duration );
	bool CanApplyModeStat ( class ASFPawn* Pawn );
	void InitPawn ( class ASFPawn* Pawn );
	void eventPostBeginPlay ( );
	void eventSendTestData ( );
	bool IsReceivedInitData ( );
	void SetNetworkTestData ( );
	unsigned char GetTeamNum ( );
	void UpdateLocalizedAIName ( );
	void eventReplicatedEventEx ( struct FName VarName, int ElementIndex );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFConvoyancePlayerReplicationInfo
// 0x0020 (0x0770 - 0x0750)
class ASFConvoyancePlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	unsigned long                                      IsAttachItem : 1;                                 		// 0x0750 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      IsShowCarPushGauge : 1;                           		// 0x0750 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	int                                                CurrentAccquireItemAmount;                        		// 0x0754 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AccquireItemAmount;                               		// 0x0758 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ReturnItemAmount;                                 		// 0x075C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PushScore;                                        		// 0x0760 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SeizureScore;                                     		// 0x0764 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                InVolumeStartTime;                                		// 0x0768 (0x0004) [0x0000000000000000]              
	int                                                TotalPushTime;                                    		// 0x076C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3241 ];

		return pClassPointer;
	};

	float ReProcessMissionScore ( float MissionScoreValue );
	void ProcessPushCarGauge ( );
	void SetChangePushCarGauge ( unsigned long IsShow );
	void SetConvoyanceSeizureAmount ( );
	void SetChangeIconState ( );
	void SetIsAttachItem ( unsigned long IsSet, int ItemAmount );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFConvoyancePlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGrowUpPlayerReplicationInfo
// 0x0055 (0x07A5 - 0x0750)
class ASFGrowUpPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	int                                                ModeLevel;                                        		// 0x0750 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeExp;                                          		// 0x0754 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeMoney;                                        		// 0x0758 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeAttackPoint;                                  		// 0x075C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeDefencePoint;                                 		// 0x0760 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeMovePoint;                                    		// 0x0764 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeHealthPoint;                                  		// 0x0768 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                BaseMaxHealth;                                    		// 0x076C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ModeExtraHealth;                                  		// 0x0770 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ModeExpPercentage;                                		// 0x0774 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PrevModeMoney;                                    		// 0x0778 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ModeMaxMoney;                                     		// 0x077C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ModeMaxAttackPoint;                               		// 0x0780 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ModeMaxDefencePoint;                              		// 0x0784 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ModeMaxMovePoint;                                 		// 0x0788 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ModeMaxHealthPoint;                               		// 0x078C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HealthPerModePoint;                               		// 0x0790 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      ModeLevelTable;                                   		// 0x0794 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                Log_TotalGainModeMoney;                           		// 0x07A0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ApplyType;                                        		// 0x07A4 (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3243 ];

		return pClassPointer;
	};

	void SetModeExpPercentage ( );
	bool IsAddableModeMovePoint ( int ItemDefaultMaxPoint );
	bool IsAddableModeDefencePoint ( int ItemDefaultMaxPoint );
	bool IsAddableModeAttackPoint ( int ItemDefaultMaxPoint );
	bool IsAddableModeStatPoint ( unsigned char Type, int ItemDefaultMaxPoint );
	void InitPawn ( class ASFPawn* Pawn );
	int GetModeLevelByModeExp ( int TargetExp );
	void ReduceModeStatDamage ( class UClass* DamageType, int* Damage );
	void AddModeStatDamage ( class UClass* DamageType, int* Damage );
	void AddDamage ( class UClass* DamageType, int* Damage );
	float GetMoveSpeedRate ( );
	int GetMaxHealth ( );
	int GetTotalExp ( int TargetModeLevel );
	int GetModeBuffBonusBonusPoint ( unsigned char PointType, unsigned char RatioType );
	int eventGetMaxModeHealthPoint ( );
	int eventGetMaxModeMovePoint ( );
	int eventGetMaxModeDefencePoint ( );
	int eventGetMaxModeAttackPoint ( );
	int eventGetMaxModeMoney ( );
	int eventGetBonusModeStatPoint ( unsigned char Type );
	int eventGetBonusModeHealthPoint ( );
	int eventGetBonusModeMovePoint ( );
	int eventGetBonusModeDefencePoint ( );
	int eventGetBonusModeAttackPoint ( );
	int eventGetModeStatPoint ( unsigned char Type, unsigned long bRealPoint );
	int eventGetModeHealthPoint ( unsigned long bRealPoint );
	int eventGetModeMovePoint ( unsigned long bRealPoint );
	int eventGetModeDefencePoint ( unsigned long bRealPoint );
	int eventGetModeAttackPoint ( unsigned long bRealPoint );
	int eventGetModeExpPercentage ( unsigned long bRealPoint );
	int eventGetModeMoney ( unsigned long bRealPoint );
	int eventGetModeExp ( unsigned long bRealPoint );
	int eventGetModeLevel ( unsigned long bRealPoint );
	void OnModeHealthPointChanged ( );
	void OnMovePointChanged ( );
	void OnDefencePointChanged ( );
	void OnAttackPointChanged ( );
	void OnModeMoneyChanged ( );
	void OnModeExpChanged ( );
	void OnModeLevelChanged ( );
	bool CanApplyModeStat ( class ASFPawn* Pawn );
	void ApplyModeMovePoint ( class ASFPawn* Pawn );
	void ApplyModeHealthPoint ( class ASFPawn* Pawn );
	void ApplyAllStat ( class ASFPawn* Pawn );
	void ApplyBuff ( class ASFPawn* Pawn, unsigned long bEffectOnly, float Value, float Duration );
	void AddModeStatPoint ( class UClass* ItemClass, unsigned char Type, int Amt, int MaxAmt );
	void AddModeHealthPoint ( int Amt, int HealthAmt );
	void AddMovePoint ( int Amt, int MaxAmt );
	void AddDefencePoint ( int Amt, int MaxAmt );
	void AddAttackPoint ( int Amt, int MaxAmt );
	void AddModeMoney ( int Amt );
	void AddModeExp ( int Amt );
	void AddModeLevel ( int Amt );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFGrowUpPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFSurvivalPlayerReplicationInfo
// 0x0037 (0x07DC - 0x07A5)
class ASFSurvivalPlayerReplicationInfo : public ASFGrowUpPlayerReplicationInfo
{
public:
	float                                              RespawnDelay;                                     		// 0x07A8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              RespawningStartTime;                              		// 0x07AC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                DBNOCount;                                        		// 0x07B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                RevivalCount;                                     		// 0x07B4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                CriticalKill;                                     		// 0x07B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AcquiredMoney;                                    		// 0x07BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AcquiredBonusMoney;                               		// 0x07C0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SpendMoney;                                       		// 0x07C4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PrevAcquiredMoney;                                		// 0x07C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevAcquiredBonusMoney;                           		// 0x07CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AccmulationMoney;                                 		// 0x07D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       RevivalEventDataName;                             		// 0x07D4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3245 ];

		return pClassPointer;
	};

	int GetAccmulationMoney ( );
	int eventGetModeMoney ( unsigned long bRealPoint );
	void SetAdditionalResult ( TArray< struct FAdditionalModeResult >* AdditionalValue );
	void SendPromotionMessage ( struct FString newGFxRank );
	void IncrementCriticalCount ( int Amt );
	void IncrementDBNOCount ( int Amt );
	void IncrementRevivalCount ( int Amt );
	void MoneyUp ( int nAmt, int nBonusAmt );
	void SendMoneyUpMessage ( int NewMoney, int NewBonusMoney, int* OldMoney, int* OldBonusMoney );
	void SendMissionScoreUpMessage ( float NewMissionScore, float OldMissionScore );
	void MissionScoreUp ( float Amt, float maxscore );
	void SendScoreUpMessage ( float NewScore, float oldscore );
	void SetSurvivalScoreEvent ( );
	void SetSurvivalSpendScoreEvent ( );
	void SetRevivalCountEvent ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFSurvivalPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFShooterDefencePlayerReplicationInfo
// 0x0069 (0x0845 - 0x07DC)
class ASFShooterDefencePlayerReplicationInfo : public ASFSurvivalPlayerReplicationInfo
{
public:
	float                                              GroundSpeedRatio;                                 		// 0x07DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DodgeSpeedRatio;                                  		// 0x07E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LastMaxHealth;                                    		// 0x07E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateStatUp;                                 		// 0x07E8 (0x0004) [0x0000000000000000]              
	TArray< struct FsPowerUp >                         StockedPowerUp;                                   		// 0x07EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            StockedModeItems;                                 		// 0x07F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PowerUpStockLimit;                                		// 0x0804 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FsWeaponInitInfo >                  WeaponInitInfos;                                  		// 0x0808 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsWeaponTuneInfo >                  WeaponATTTuneInfos;                               		// 0x0814 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsPawnTuneInfo >                    PawnTuneInfos;                                    		// 0x0820 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MaxAttUp;                                         		// 0x082C (0x0004) [0x0000000000000000]              
	int                                                MaxDefUp;                                         		// 0x0830 (0x0004) [0x0000000000000000]              
	int                                                MaxAglUp;                                         		// 0x0834 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            RecursiveClasses;                                 		// 0x0838 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      RepStatChanged;                                   		// 0x0844 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3247 ];

		return pClassPointer;
	};

	struct FString eventGetDisplayedCodeName ( unsigned long bToFriends, class ASFPawn* Pawn );
	void debugSetShooterLevel ( int Type );
	class UParticleSystem* GetGunTracerTemplate ( class ASFWeap_Bullet* InWeapon, unsigned long bExtra );
	float GetGunTrailThickness ( class ASFWeap_Bullet* InWeapon, float srcThickness );
	bool GetWeaponATTTuneInfoIdx ( class ASFWeapon* InWeapon, int Level, int* Idx );
	bool GetWeaponInitInfoIdx ( class ASFWeapon* InWeapon, int* Idx );
	bool IsFullStocked ( class UClass* SrcClass );
	void UpdateStockedPowerUp ( int Idx, int RemainTime );
	void UpdateStatUp ( );
	void StockPowerUpSpecial ( class UClass* ParentClass );
	void StockPowerUp ( class UClass* PowerUpClass );
	void clientPickedUpPowerItem ( class UClass* PowerUpClass );
	bool PickedUpPowerItem ( class UClass* PowerUpClass );
	void AddModeHealthPoint ( int Amt, int HealthAmt );
	void ApplyModeHealthPoint ( class ASFPawn* Pawn );
	void SetModeExpPercentage ( );
	void AddModeLevel ( int Amt );
	void AddModeExp ( int Amt );
	void AddModeStatPoint ( class UClass* ItemClass, unsigned char Type, int Amt, int MaxAmt );
	void ResetPowerItem ( );
	void Reset ( );
	void InitPawn ( class ASFPawn* Pawn );
	void OnModeHealthPointChanged ( );
	void SendMoneyUpMessage ( int NewMoney, int NewBonusMoney, int* OldMoney, int* OldBonusMoney );
	float GetMoveSpeedRate ( );
	int GetMaxHealth ( );
	void OnMovePointChanged ( );
	void OnDefencePointChanged ( );
	void OnAttackPointChanged ( );
	bool ResetWeaponTuneInfo ( class ASFWeap_Bullet* InWeapon );
	void ApplyWeaponModify ( class ASFWeap_Bullet* InWeapon );
	void ApplyStatModify ( );
	void AllStatChanged ( int newAttackPoint, int newDefencePoint, int NewMovePoint );
	void ApplyAllStat ( class ASFPawn* Pawn );
	void AddAdditionalGrowUpPoint ( int Amt );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFShooterDefencePlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFZombiePlayerReplicationInfo
// 0x001C (0x07F8 - 0x07DC)
class ASFZombiePlayerReplicationInfo : public ASFSurvivalPlayerReplicationInfo
{
public:
	int                                                PerformWeaponPurchaseCount;                       		// 0x07DC (0x0004) [0x0000000000000000]              
	int                                                PerformHealthPurchaseCount;                       		// 0x07E0 (0x0004) [0x0000000000000000]              
	int                                                ZombieGameKillCount;                              		// 0x07E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FName >                             ZombieMultiKillTypeArray;                         		// 0x07E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsZombieInteraction : 1;                         		// 0x07F4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3249 ];

		return pClassPointer;
	};

	void UpdateZombieGameKillCountbyRep ( int KillCount );
	void IncreaseZombieGameKillCount ( int KillCount );
	void SetZombieGameKillCount ( int KillCount );
	int GetZombieGameKillCount ( );
	void SetSurvivalScoreEvent ( );
	void SetSurvivalSpendScoreEvent ( );
	void ClientSetMultiKillEvent ( int NewMultiKillLevel );
	void InitializeMultiKill ( );
	void IncrementMultiKill ( unsigned char Amt );
	void IncreasePerformHealthPurchaseCount ( );
	void IncreasePerformWeaponPurchaseCount ( );
	void SendMoneyUpMessage ( int NewMoney, int NewBonusMoney, int* OldMoney, int* OldBonusMoney );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFZombiePlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFWarriorPlayerReplicationInfo
// 0x00A3 (0x0848 - 0x07A5)
class ASFWarriorPlayerReplicationInfo : public ASFGrowUpPlayerReplicationInfo
{
public:
	struct FString                                     MSG_StatType_Attack;                              		// 0x07A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_StatType_Defence;                             		// 0x07B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_StatType_Move;                                		// 0x07C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              RespawnDelay;                                     		// 0x07CC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CurrentAttackPoint;                               		// 0x07D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentDefencePoint;                              		// 0x07D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CrustalianScore;                                  		// 0x07D8 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                ContinualKills;                                   		// 0x07DC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                LastContinualKills;                               		// 0x07E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ContinualDeaths;                                  		// 0x07E4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              HealthPerModeDefencePoint;                        		// 0x07E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AttackPointDamageMul;                             		// 0x07EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AgilityPointDamageMul;                            		// 0x07F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefencePointDamageMul;                            		// 0x07F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpeedUpMul;                                       		// 0x07F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bDisplayCodeNameWithHighestStat : 1;              		// 0x07FC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUsePolymorph : 1;                                		// 0x07FC (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	float                                              ModeMaxTotalPoint;                                		// 0x0800 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PolymorphStatPoint;                               		// 0x0804 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSPolymorphInfo >                   PolymorphInfo;                                    		// 0x0808 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                Log_RifleKill;                                    		// 0x0814 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_DefaultWeaponKill;                            		// 0x0818 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_SpecialWeaponKill;                            		// 0x081C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_SpendForHealing;                              		// 0x0820 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_SpendForStat;                                 		// 0x0824 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_SpendForSummon;                               		// 0x0828 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_SpendForWeapon;                               		// 0x082C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_SpendForEtc;                                  		// 0x0830 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_DestroyedTurrets;                             		// 0x0834 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_DestroyedTowers;                              		// 0x0838 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_DamageToTower;                                		// 0x083C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_NewtralCS;                                    		// 0x0840 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                Log_WeakKillCS;                                   		// 0x0844 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3251 ];

		return pClassPointer;
	};

	struct FString GetPolymorphTargetClassName ( unsigned char Type );
	bool CanPolymorph ( struct FString PawnClassName );
	void ApplyModeMovePoint ( class ASFPawn* Pawn );
	bool IsFullModeStat ( );
	bool IsAddableModeStatPoint ( unsigned char Type, int ItemDefaultMaxPoint );
	void InGameStoreItemPurchased ( int ItemId, int Price, int ItemLog );
	void SetAdditionalResult ( TArray< struct FAdditionalModeResult >* AdditionalValue );
	struct FString eventGetDisplayedCodeName ( unsigned long bToFriends, class ASFPawn* Pawn );
	void SendScoreUpMessage ( float NewScore, float oldscore );
	void SendPromotionMessage ( struct FString newGFxRank );
	float GetMoveSpeedRate ( );
	void ReduceModeStatDamage ( class UClass* DamageType, int* Damage );
	void AddModeStatDamage ( class UClass* DamageType, int* Damage );
	void NoticeModeLevelUp ( );
	int GetMaxHealth ( );
	void OnModeExpChanged ( );
	void OnModeLevelChanged ( );
	void OnMovePointChanged ( );
	void OnDefencePointChanged ( );
	void OnAttackPointChanged ( );
	int eventGetBonusModeStatPoint ( unsigned char Type );
	int eventGetModeDefencePoint ( unsigned long bRealPoint );
	int eventGetModeAttackPoint ( unsigned long bRealPoint );
	void IncrementDeaths ( int Amt, class UClass* DamageType );
	void IncrementKill ( int Amt );
	void IncrementAIKill ( int Amt );
	void UpdateContinualKillLog ( );
	void UpdateLocalizedAIName ( );
	unsigned char GetHeroVersion ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFWarriorPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFTutorialPlayerReplicationInfo
// 0x0040 (0x0790 - 0x0750)
class ASFTutorialPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	int                                                HitCounter_EnemyTarget;                           		// 0x0750 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                HitCounter_GuardianTarget;                        		// 0x0754 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                Score_EnemyTarget;                                		// 0x0758 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                PrevScore_EnemyTarget;                            		// 0x075C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Score_GuardianTarget;                             		// 0x0760 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                PrevScore_GuardianTarget;                         		// 0x0764 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetHitLocation;                                		// 0x0768 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                TutorialResultRank;                               		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Score_RemainingTime;                              		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EarnExp;                                          		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     RankString;                                       		// 0x0780 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                RankCount;                                        		// 0x078C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3253 ];

		return pClassPointer;
	};

	void NotifyTargetPaperInit ( );
	void NotifyTargetPaperHitted ( );
	void TargetPaperInit ( );
	void TargetPaperHitted ( int TargetScore, struct FVector HitLocation );
	void SendScoreUpMessage ( float NewScore, float oldscore );
	void UpdateRank ( int nNewExp );
	int GetEarnExp ( );
	void ResetTutorialScore ( );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFTutorialPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFPointOfInterest
// 0x0020 (0x0248 - 0x0228)
class ASFPointOfInterest : public AKeypoint
{
public:
	unsigned long                                      bClientSideOnly : 1;                              		// 0x0228 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x0228 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCheckLineOfSightAtFirstTime : 1;                 		// 0x0228 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHideFirstHand : 1;                               		// 0x0228 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBlockTheKeyInput : 1;                            		// 0x0228 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0228 (0x0004) [0x0000000000002020] [0x00000020] ( CPF_Net | CPF_Transient )
	TArray< class ACameraActor* >                      CameraActorsForBlockingtheSight;                  		// 0x022C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      OriginalViewTarget;                               		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RotationInterpSpeed;                              		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 POICameraAnim;                                    		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnableTime;                                       		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3255 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void SetPOI ( class ASFPlayerController* LocalPC, unsigned long bEnable );
	void DisablePOI ( );
	void EnablePOI ( );
	void SetEnabled ( unsigned long bON );
	void ClientReset ( );
	void Reset ( );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPointOfInterest::pClassPointer = NULL;

// Class SFGame.SFProfileSettings
// 0x01AC (0x0238 - 0x008C)
class USFProfileSettings : public UOnlineProfileSettings
{
public:
	TArray< struct FString >                           DigitalButtonActionsToCommandMapping;             		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             KeyMappingArray;                                  		// 0x0098 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            SettingUIKeyActionOrder;                          		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FKeymapData >                       KeyMappingforFlash;                               		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           IgnoreKeys;                                       		// 0x00BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSLocalizedKeyName >                NewKeyNameArray;                                  		// 0x00C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSLocalizedKeyName >                BaseLocalizedKeyNameArray;                        		// 0x00D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSLocalizedKeyName >                LocalizedKeyNameArray;                            		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FNotKeyMapData >                    NotKeyMappingData;                                		// 0x00EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_m4a1;                          		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_ak103;                         		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_m4a1gl;                        		// 0x0110 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_infi;                          		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_M92FS;                         		// 0x0128 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_cz700;                         		// 0x0134 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_m870;                          		// 0x0140 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_hk23;                          		// 0x014C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_p90;                           		// 0x0158 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_m67;                           		// 0x0164 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_m84;                           		// 0x0170 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_m18;                           		// 0x017C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_vxgas;                         		// 0x0188 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_c4;                            		// 0x0194 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_v10;                           		// 0x01A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_st10;                          		// 0x01AC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_v11;                           		// 0x01B8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_Crossbow;                      		// 0x01C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_Kukri;                         		// 0x01D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_GPM30A1;                       		// 0x01DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_Tomahawk;                      		// 0x01E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_WeaponData_ToyHammer;                     		// 0x01F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                default_Delta;                                    		// 0x0200 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                default_Spetz;                                    		// 0x0204 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      default_HandData_Delta;                           		// 0x0208 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_CharData_Spetz;                           		// 0x0214 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_HelmData_Spetz;                           		// 0x0220 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      default_HandData_Spetz;                           		// 0x022C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3257 ];

		return pClassPointer;
	};

	struct FString GetLocalizedKeyName ( struct FString strSrc );
	struct FString ConvertToNewKeyName ( struct FString strKeySet );
	bool GetProfileSettingDefaultFloatbyName ( struct FName SettingName, float* OutValue );
	bool GetProfileSettingDefaultIntbyName ( struct FName SettingName, int* OutValue );
	bool GetProfileSettingDefaultIdbyName ( struct FName SettingName, int* OutValue );
	bool GetRangeProfileSettingDefaultbyName ( struct FName SettingName, float* OutValue );
	bool GetRangeProfileSettingDefault ( int ProfileSettingId, float* DefaultFloat );
	void ResetProfileSettingByName ( struct FName SettingName );
	struct FString KeyCodetoFlashKeyName ( int KeyCode );
	bool IsNotMapKeys ( int KeyIndex, int MapKey );
	bool IsIgnoreKeys ( int KeyCode );
	struct FString GetUnrealKeyNameByKeyCode ( int KeyCode );
	struct FName GetUnrealKeyName ( struct FName KeyName );
	struct FString GetDefaultKeyStrings ( );
	struct FString GetActionName ( unsigned char ActionIdx );
	bool ActionIsBound ( unsigned char ActionIdx );
	void RemoveCommandBinding ( class UPlayerInput* PInput, struct FString Command );
	void RemoveDBABindings ( class UPlayerInput* PInput );
	void ApplyKeyBinding ( class UPlayerInput* PInput, unsigned char KeyBinding );
	bool AddedDefaultCommand ( struct FName KeyName, struct FString* Command );
	void ApplyAllKeyBindings ( class UPlayerInput* PInput );
	void UnbindKey ( class UPlayerInput* PInput, struct FName BindName );
	int GetProfileIDForDBA ( unsigned char KeyAction );
	int FindKeyEnum ( struct FName KeyName );
	struct FName FindKeyName ( unsigned char KeyEnum );
	void SetKeyBinding ( unsigned char KeyAction, struct FName KeyBinding, struct FName KeyBinding2, struct FName KeyBinding3, struct FName KeyBinding4 );
	int GetDBAFromCommand ( struct FString Command );
	void SetKeyBindingUsingCommand ( struct FString KeyCommand, struct FName KeyBinding, struct FName KeyBinding2, struct FName KeyBinding3, struct FName KeyBinding4 );
	void StoreKeysUsingPlayerInput ( class UPlayerInput* PInput );
	void ResetKeysToDefault ( class ULocalPlayer* InPlayerOwner );
	void ResetToDefault ( int ProfileId );
	bool SetProfileSettingValueStringByName ( struct FName SettingName, struct FString* Value );
	void eventSetToDefaults ( );
	bool SetProfileSettingValueIdByName ( struct FName SettingName, int Value );
	bool SetProfileSettingValueFloatByName ( struct FName SettingName, float Value );
	bool SetProfileSettingValueIntByName ( struct FName SettingName, int Value );
	bool SetRangedProfileSettingValueByName ( struct FName SettingName, float Value );
	bool SetIdProfileSettingValueByName ( struct FName SettingName, int Value );
	bool GetRangedProfileSettingValueByName ( struct FName SettingName, float* OutValue );
	bool GetProfileSettingValueStringByName ( struct FName SettingName, struct FString* OutValue );
	bool GetProfileSettingValueFloatByName ( struct FName SettingName, float* OutValue );
	bool GetProfileSettingValueIntByName ( struct FName SettingName, int* OutValue );
	bool GetProfileSettingValueIdByName ( struct FName SettingName, int* OutValue );
};

UClass* USFProfileSettings::pClassPointer = NULL;

// Class SFGame.SFProjectile
// 0x0114 (0x0378 - 0x0264)
class ASFProjectile : public AProjectile
{
public:
	unsigned long                                      bSuppressSounds : 1;                              		// 0x0264 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSuppressExplosionFX : 1;                         		// 0x0264 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSuppressWarnProjExplodeToAI : 1;                 		// 0x0264 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWaitForEffects : 1;                              		// 0x0264 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShuttingDown : 1;                                		// 0x0264 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCheckProjectileLight : 1;                        		// 0x0264 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAutoRegisterIndicator : 1;                       		// 0x0264 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      UseCamo : 1;                                      		// 0x0264 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bInWater : 1;                                     		// 0x0264 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bInWaterExplode : 1;                              		// 0x0264 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bChangeRotationByVelocity : 1;                    		// 0x0264 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bCheckPawnCylinder : 1;                           		// 0x0264 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bBoundedFromPawn : 1;                             		// 0x0264 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bDesiredAccelSetted : 1;                          		// 0x0264 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bExposed : 1;                                     		// 0x0264 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bNoticed : 1;                                     		// 0x0264 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bStopped : 1;                                     		// 0x0264 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bBlockedByDeepWaterSurface : 1;                   		// 0x0264 (0x0004) [0x0000000000002001] [0x00020000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bPassThroughSameTeam : 1;                         		// 0x0264 (0x0004) [0x0000000000002001] [0x00040000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bIndicatorDistanceExplosionRadius : 1;            		// 0x0264 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	class UParticleSystemComponent*                    ProjEffects;                                      		// 0x0268 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjFlightTemplate;                               		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              ProjFlightTemplateScale;                          		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              TossZ;                                            		// 0x0278 (0x0004) [0x0000000000000000]              
	class UClass*                                      ProjectileLightClass;                             		// 0x027C (0x0004) [0x0000000000000000]              
	class UPointLightComponent*                        ProjectileLight;                                  		// 0x0280 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              TerminalVelocity;                                 		// 0x0284 (0x0004) [0x0000000000000000]              
	float                                              Buoyancy;                                         		// 0x0288 (0x0004) [0x0000000000000000]              
	float                                              CustomGravityScaling;                             		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              fShockDamage;                                     		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              ShockDamageRateToSameTeam;                        		// 0x0294 (0x0004) [0x0000000000000000]              
	class UMeshComponent*                              SFProjMesh;                                       		// 0x0298 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x029C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                nProjectileID;                                    		// 0x02A0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                nDBIndex;                                         		// 0x02A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              fRemainLife;                                      		// 0x02A8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AutoRegisterIndicatorDelay;                       		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned char                                      IndicateType;                                     		// 0x02B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      InstigatorTeamIndex;                              		// 0x02B1 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              IndicatorPriority;                                		// 0x02B4 (0x0004) [0x0000000000000000]              
	class UClass*                                      ExplosionLightClass;                              		// 0x02B8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x02BC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class UClass*                                      GameExplosionActorClass;                          		// 0x02C0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     vWaterSurface;                                    		// 0x02C4 (0x000C) [0x0000000000000000]              
	struct FVector                                     vWaterSurfaceNormal;                              		// 0x02D0 (0x000C) [0x0000000000000000]              
	int                                                nStrikeDamage;                                    		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UseWeaponEffectGroupIndex;                        		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrikeDamageReduceRatioWhenHitWall;               		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PhysicTickCurrentTime;                            		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PhysicTickPeriod;                                 		// 0x02EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PhysicTickCounter;                                		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PhysicTickMaxCounter;                             		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                InstigatorUniqueID;                               		// 0x02F8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ASFPlayerReplicationInfo*                    InstigatorPRI;                                    		// 0x02FC (0x0004) [0x0000000000000000]              
	struct FVector                                     NewDesiredAcceleration;                           		// 0x0300 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              WarnProjectileTimer;                              		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoticeDistance;                                   		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExposedDistance;                                  		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      VictimActor;                                      		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     OwnerInertiaApplyRatio;                           		// 0x031C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillCamCameraInterpSpeed;                         		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     KillCamRelativeLocation;                          		// 0x032C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillCamCameraFadding;                             		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpawnLocation;                                    		// 0x033C (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FRotator                                    SpawnRotation;                                    		// 0x0348 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     InitialVelocity;                                  		// 0x0354 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UParticleSystemComponent*                    ProjectileFlashBackScreenEffect;                  		// 0x0360 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              SpeedToStop;                                      		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    StrikeDmgScaleBodyParts;                          		// 0x0368 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              IndicatorDistance;                                		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3259 ];

		return pClassPointer;
	};

	bool GetFollowProjectile ( );
	bool IsMyOwner ( class AActor* TargetActor );
	void ApplyKismetCustomProperties ( class ASFPawn* ownerPawn );
	void RestoreInstigated ( );
	float GetStrikeDamageRatioByBodyPart ( unsigned char BodyPart );
	int GetIndicatorPriority ( );
	int GetDBIndex ( );
	float GetDamageRadius ( );
	float GetIndicatorRadius ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void ResetRemainTime ( float fSec );
	void ProjectileIDChanged ( );
	void SetProjectileMesh ( );
	void SetAssetProp ( );
	void SetBaseProp ( );
	void RegisterIndicator ( unsigned long bRegister );
	void RegisterIndicatorTimer ( );
	void SetProjectileProp ( int WeaponIndex );
	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float CalculateTravelTime ( float Dist, float MoveSpeed, float MaxMoveSpeed, float AccelMag );
	class APawn* GetPawnOwner ( );
	class AActor* eventGetHomingTarget ( class ASFProjectile* Seeker, class AController* InstigatedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	struct FVector GetDefaultRelativeViewLocation ( struct FVector OldViewLocation );
	void MyOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void Destroyed ( );
	void HideProjectile ( );
	void eventTornOff ( );
	void ShutDown ( );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	bool EffectIsRelevant ( struct FVector InSpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector InSpawnLocation, float CullDistance );
	void SpawnFlightEffects ( );
	void ProjectileHurtRadiusExtraEffectTo ( class ASFPawn* Victim, struct FVector vOrigin, float Dist, unsigned long bDamageBlocked );
	class AActor* ToStop ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void Drop ( );
	void SetProjectileID ( );
	void UpdateVelocityFromInstigator ( struct FVector InstigatorVelocity, struct FRotator InertiaRotation );
	void Init ( struct FVector Direction );
	void CheckWarnProjectile ( );
	void CheckInstigator ( );
	void InitInstigator ( );
	void PostBeginPlay ( );
	bool CanSplash ( );
	void ClientReset ( );
	void Reset ( );
	void SetProjectileTexture ( );
	void eventCreateProjectileLight ( );
	void SetInitial ( struct FVector InSpawnLocation, struct FRotator InSpawnRotation, struct FVector InInitialVel );
	float GetTerminalVelocity ( );
	void eventReplicatedEvent ( struct FName VarName );
	void SetDesiredAcceleration ( struct FVector NewAcceleration, float DesiredAccelRate );
	unsigned char GetTeamNum ( );
};

UClass* ASFProjectile::pClassPointer = NULL;

// Class SFGame.SFProj_Throw
// 0x0070 (0x03E8 - 0x0378)
class ASFProj_Throw : public ASFProjectile
{
public:
	float                                              fDampingValue;                                    		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampingMultiflyFactor;                            		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpactEffectName;                                 		// 0x0380 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                AdditionalImpactDecalAngle;                       		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyStrikeDamageType;                               		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           DefaultImpactPMaterial;                           		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTakeDamageToPawn : 1;                            		// 0x0394 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsTrajectorySimulating : 1;                      		// 0x0394 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      ActiveTrajectoryEndPoint : 1;                     		// 0x0394 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsBounded : 1;                                    		// 0x0394 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCheckExtend : 1;                                 		// 0x0394 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< class UParticleSystemComponent* >          ProjRotateEffects;                                		// 0x0398 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystem* >                   ProjRotateTemplate;                               		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             ProjRotateSocketName;                             		// 0x03B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ProjFlightEffectsSocketName;                      		// 0x03BC (0x0008) [0x0000000000000000]              
	struct FVector                                     ProjFlightEffectsAttachOffset;                    		// 0x03C4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              fLastTimeToSpawnImpact;                           		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastMaxTimeToSpawnImpact;                        		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              MaxTrajectorySimulationTime;                      		// 0x03D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SimTrajectoryFixedTimeStep;                       		// 0x03DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AEmitter*                                    EM_TrajectoryEndPoint;                            		// 0x03E0 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             PS_TrajectoryEndPoint;                            		// 0x03E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3261 ];

		return pClassPointer;
	};

	void SimDamping ( struct FVector HitNormal, struct FVector* Dir, float* fSimDampingValue );
	struct FVector GetSimulatedTrajectory ( class APawn* Inst, struct FVector SpawnLoc, struct FRotator StartRot, float simGravityZ, float DistLimit, TArray< struct FVector >* StepLoc );
	void DeactivateParticles ( );
	void ActiveParticles ( );
	void SpawnRotateEffects ( );
	void MyRotateParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void Destroyed ( );
	void ShutDown ( );
	void Reset ( );
	void SetProjectileMesh ( );
	void SetAssetProp ( );
	void LifeTimeOut ( );
	void eventEncroachedBy ( class AActor* Other );
	void eventSpawnImpactEffectMain ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor, struct FTraceHitInfo HitInfo );
	bool Strike ( class AActor* Victim, unsigned long bBreakableGlassForProjectile );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	bool ProcessBounding ( class AActor* Wall, struct FImpactInfo myHitImpactInfo, float PhysMaterialsElasticModulus, float PhysMaterialsFriction, unsigned long bBreakableGlassForProjectile );
	void ProcessBoundingForWater ( class AActor* Wall, struct FImpactInfo myHitImpactInfo );
	struct FImpactInfo GetHitWallImpactInfo ( class AActor* Wall, unsigned long bSuppressStrike, float HitWallImpactDistance, int WorldHitTraceFlag, int ActorHitTraceFlag );
	void ChangeViewMode ( unsigned long bIsFirstPerson );
	void UnHideProjectileOnScreen ( );
	void HideProjectileOnScreen ( class APawn* HitPawn, struct FName HitBoneName );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	bool PlayImpactEffect ( class USFPhysicalMaterialProperty* myPhysicalMaterialProperty );
	class AActor* ToStop ( );
	void InitSub ( float fLifeTime );
	void RunTrajectoryPhysicsSimulationTilEnd ( float ProjectileLifeSpan );
	void SimulateTrajectory ( );
	void SetupTrajectorySimulation ( unsigned long bSimulating );
	void InitTrajectorySimulation ( );
};

UClass* ASFProj_Throw::pClassPointer = NULL;

// Class SFGame.SFProj_Explosive
// 0x0000 (0x03E8 - 0x03E8)
class ASFProj_Explosive : public ASFProj_Throw
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3263 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	class AActor* ToStop ( );
	void WarnProjExplode ( );
};

UClass* ASFProj_Explosive::pClassPointer = NULL;

// Class SFGame.SFProj_Arrow
// 0x005C (0x0444 - 0x03E8)
class ASFProj_Arrow : public ASFProj_Explosive
{
public:
	float                                              ExplodeTime;                                      		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BounceAngle;                                      		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopSpeed;                                        		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BounceCheck;                                      		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              MomentumToDeadBody;                               		// 0x03F8 (0x0004) [0x0000000000000000]              
	float                                              EffectiveFixDistance;                             		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisappearLifeSpan;                                		// 0x0400 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bStucked : 1;                                     		// 0x0404 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsStuckable : 1;                                 		// 0x0404 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBeginStuckProcess : 1;                           		// 0x0404 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bRequestDamageRPC : 1;                            		// 0x0404 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bUseStuck : 1;                                    		// 0x0404 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class AActor*                                      AttachedTo;                                       		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class URB_Handle* >                        GrabHandles;                                      		// 0x040C (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class USoundCue*                                   WhippingSound;                                    		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StuckSound;                                       		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             ArrowAudioComponent;                              		// 0x0420 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              StuckCameraSpeedRatio;                            		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           SelfLightEnvironment;                             		// 0x0428 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRotator                                    MeshRotationRateBySpeed;                          		// 0x042C (0x000C) [0x0000000000000000]              
	struct FRotator                                    DefaultMeshRotation;                              		// 0x0438 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3265 ];

		return pClassPointer;
	};

	void eventBaseChange ( );
	class AActor* ToStop ( );
	void PawnBaseDied ( );
	bool ProcessBounding ( class AActor* Wall, struct FImpactInfo myHitImpactInfo, float PhysMaterialsElasticModulus, float PhysMaterialsFriction, unsigned long bBreakableGlassForProjectile );
	void Stuck ( class AActor* HitActor, class UPrimitiveComponent* StuckComponent, unsigned long bDoNotNeedStrike );
	void SetRigidBody ( );
	void AddGrabHandle ( class URB_Handle* InGrabHandle );
	bool Strike ( class AActor* Victim, unsigned long bBreakableGlassForProjectile );
	float GetStrikeDamage ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void Destroyed ( );
	void HideSelf ( );
	void ExplodeSelf ( );
	void ProcessBoundingForWater ( class AActor* Wall, struct FImpactInfo myHitImpactInfo );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComponent );
	bool IsStuckable ( struct FVector HitNormal );
	void SetProjectileMesh ( );
	void PostBeginPlay ( );
};

UClass* ASFProj_Arrow::pClassPointer = NULL;

// Class SFGame.SFProj_HandGrenade
// 0x0030 (0x0418 - 0x03E8)
class ASFProj_HandGrenade : public ASFProj_Explosive
{
public:
	float                                              SimFixedTimeStep;                                 		// 0x03E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SimInternalGravityAdvanceTime;                    		// 0x03EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MaxSimulationTime;                                		// 0x03F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFlowRotate : 1;                                  		// 0x03F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bExplodeWhenHitWall : 1;                          		// 0x03F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bExplodeAfterHitGround : 1;                       		// 0x03F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              fRotSpeed;                                        		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLoc;                                         		// 0x03FC (0x000C) [0x0000000000000000]              
	float                                              ExtraExplodeTimeAfterHitGround;                   		// 0x0408 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SFPostEffectClassName;                            		// 0x040C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3267 ];

		return pClassPointer;
	};

	bool GetFollowProjectile ( );
	void GrenadeSpeedIncrease ( );
	class AActor* ToStop ( );
	void LifeTimeOut ( );
	void ExplodeWhenHitWall ( struct FVector HitNormal, class AActor* Wall, unsigned long ExplodeHitWall );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ResetRemainTime ( float fSec );
	void InitRestLife ( float fRestLife );
	void InitSub ( float fRestLife );
	void Destroyed ( );
	void Init ( struct FVector Direction );
	void eventReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
	bool IsSightBlocked ( class AActor* TraceOwner, struct FVector Start, struct FVector End );
	void RunPhysicsSimulationTilEnd ( float GrenadeLifeSpan );
};

UClass* ASFProj_HandGrenade::pClassPointer = NULL;

// Class SFGame.SFProj_HandGrenadeAimingArc
// 0x0000 (0x0418 - 0x0418)
class ASFProj_HandGrenadeAimingArc : public ASFProj_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3269 ];

		return pClassPointer;
	};

	void SetupForSimulation ( unsigned long bSimulating );
	void InitForSimulation ( );
	void SetProjectileID ( );
	void Init ( struct FVector Direction );
	void SetAssetProp ( );
	void WarnProjExplode ( );
	void SpawnImpactEffectMain ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor, struct FTraceHitInfo HitInfo );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProj_HandGrenadeAimingArc::pClassPointer = NULL;

// Class SFGame.SFProj_HG_BabyStunner
// 0x0064 (0x047C - 0x0418)
class ASFProj_HG_BabyStunner : public ASFProj_HandGrenade
{
public:
	struct FVector                                     ThrowDirection;                                   		// 0x0418 (0x000C) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundMaxSpeed;                                   		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundWaitTime;                                   		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSprintExplodeWhenHitWall : 1;                    		// 0x0430 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSprintExplodeWhenHitPawn : 1;                    		// 0x0430 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsThrowing : 1;                                  		// 0x0430 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsToStop : 1;                                    		// 0x0430 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCheckFirstReadyToSprint : 1;                     		// 0x0430 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bReadyToSprint : 1;                               		// 0x0430 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIsFollowingTrailEffect : 1;                      		// 0x0430 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	float                                              CylinderRadious;                                  		// 0x0434 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeight;                                   		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BabyStunnerMaxStepHeight;                         		// 0x043C (0x0004) [0x0000000000000000]              
	float                                              SprintAbleFloorZ;                                 		// 0x0440 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   FootStepSound;                                    		// 0x0444 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ProjectileImpactSound;                            		// 0x0448 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SprintStepSoundInterval;                          		// 0x044C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProjSprintTemplate;                               		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              ProjSprintTemplateScale;                          		// 0x0454 (0x0004) [0x0000000000000000]              
	float                                              ReadyToSprintTime;                                		// 0x0458 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   ReadyToSprintSound;                               		// 0x045C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovementRadius;                                   		// 0x0460 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovementSpeed;                                    		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZAxisDig;                                         		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZAxisEclipseValue;                                		// 0x046C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StunnerRadian;                                    		// 0x0470 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RadianDirection;                                  		// 0x0474 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastTimeToSprintStepSound;                        		// 0x0478 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3271 ];

		return pClassPointer;
	};

	void SetInitial ( struct FVector InSpawnLocation, struct FRotator InSpawnRotation, struct FVector InInitialVel );
	void SetStopLocation ( );
	void InitThrowDirection ( struct FVector Direction );
	void SpawnImpactEffectMain ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor, struct FTraceHitInfo HitInfo );
	void SpawnSprintEffects ( );
	bool IsNearlyZero ( float Value, float ErrorTolerance );
};

UClass* ASFProj_HG_BabyStunner::pClassPointer = NULL;

// Class SFGame.SFProj_HG_Function
// 0x0004 (0x041C - 0x0418)
class ASFProj_HG_Function : public ASFProj_HandGrenade
{
public:
	float                                              RegisterDelay;                                    		// 0x0418 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3273 ];

		return pClassPointer;
	};

	void AddFunctionalProj ( );
	void UpdatePerSecond ( );
	void Unregistered ( );
	void Registered ( );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ASFProj_HG_Function::pClassPointer = NULL;

// Class SFGame.SFProj_HG_Gas
// 0x0070 (0x0488 - 0x0418)
class ASFProj_HG_Gas : public ASFProj_HandGrenade
{
public:
	float                                              fSmokeLifeTime;                                   		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fExploTime;                                       		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSmokeMaxTime;                                    		// 0x0420 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGasDamageMax;                                    		// 0x0424 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGasDamageMin;                                    		// 0x0428 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fGasDamageRadiusRadius;                           		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxGasDamageRadiusRadius;                        		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFParticleSystemComponent*                  SmokeEffect;                                      		// 0x0434 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ParticleDensity;                                  		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bBlockSight : 1;                                  		// 0x043C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlurSight : 1;                                   		// 0x043C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bExploded : 1;                                    		// 0x043C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	float                                              fMaxEffectRadiusSq;                               		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              fEffectRadiusSq;                                  		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              fSmokeDuringTime;                                 		// 0x0448 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            BombEffectiveActors;                              		// 0x044C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SmokeColor[ 0x6 ];                                		// 0x0458 (0x0018) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     SmokeColorType[ 0x2 ];                            		// 0x0470 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3275 ];

		return pClassPointer;
	};

	void eventProcessDOT ( struct FProjectileDot DurationDamage );
	void eventUnTouch ( class AActor* Other );
	void ProcessBombedTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void Destroyed ( );
	float GetSmokeDensity ( );
	void SetProjectileProp ( int WepaonIndex );
	void ResetRemainTime ( float fSec );
	void LifeTimeEnd ( );
	void LifeTimeOut ( );
	void InitRestLife ( float fRestLife );
	void ExplodeTimeOut ( );
	void SetExplodeTimeOut ( );
	class AActor* ToStop ( );
	void InitSub ( float fRestLife );
	void Init ( struct FVector Direction );
	class ASFProj_HG_Gas* CheckExistNearSmokeProjectile ( struct FVector vLoc );
	void SmokeEffectFinished ( class UParticleSystemComponent* FinishedComponent );
	void EndSmokeEffect ( );
	void ShutDown ( );
	void StartSmokeEffect ( );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	int eventGiveDamage ( class AActor* Target, int newDamage );
	void ChangeBombedCollision ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void Reset ( );
	void PostBeginPlay ( );
	bool IsBoomed ( );
	void DOTCheck ( TArray< struct FProjectileDot >* DOTTargets );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFProj_HG_Gas::pClassPointer = NULL;

// Class SFGame.SFProj_Snowball
// 0x0000 (0x0418 - 0x0418)
class ASFProj_Snowball : public ASFProj_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3277 ];

		return pClassPointer;
	};

	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
};

UClass* ASFProj_Snowball::pClassPointer = NULL;

// Class SFGame.SFProj_Knife
// 0x002C (0x0414 - 0x03E8)
class ASFProj_Knife : public ASFProj_Throw
{
public:
	unsigned long                                      bStucked : 1;                                     		// 0x03E8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsStuckable : 1;                                 		// 0x03E8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBeginStuckProcess : 1;                           		// 0x03E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAltFire : 1;                                     		// 0x03E8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRequestDamageRPC : 1;                            		// 0x03E8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	class AActor*                                      AttachedTo;                                       		// 0x03EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MomentumToDeadBody;                               		// 0x03F0 (0x0004) [0x0000000000000000]              
	struct FVector                                     AddedAccel;                                       		// 0x03F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   WhippingSound;                                    		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   StuckSound;                                       		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             KnifeAudioComponent;                              		// 0x0408 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           SelfLightEnvironment;                             		// 0x040C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              StuckCameraSpeedRatio;                            		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3279 ];

		return pClassPointer;
	};

	void eventBaseChange ( );
	class AActor* ToStop ( );
	void PawnBaseDied ( );
	bool ProcessBounding ( class AActor* Wall, struct FImpactInfo myHitImpactInfo, float PhysMaterialsElasticModulus, float PhysMaterialsFriction, unsigned long bBreakableGlassForProjectile );
	bool Strike ( class AActor* Victim, unsigned long bBreakableGlassForProjectile );
	float GetStrikeDamage ( );
	void Stuck ( class AActor* HitActor, class UPrimitiveComponent* StuckComponent, unsigned long bDoNotNeedStrike );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComponent );
	bool IsStuckable ( struct FVector HitNormal );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	struct FVector GetDefaultRelativeViewLocation ( struct FVector OldViewLocation );
	void SpawnFlightEffects ( );
	void Destroyed ( );
	void SetProjectileMesh ( );
	void PostBeginPlay ( );
};

UClass* ASFProj_Knife::pClassPointer = NULL;

// Class SFGame.SFProj_Shuriken
// 0x000C (0x0420 - 0x0414)
class ASFProj_Shuriken : public ASFProj_Knife
{
public:
	float                                              CurveValueMax;                                    		// 0x0414 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurveValueMin;                                    		// 0x0418 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              curveValue;                                       		// 0x041C (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3281 ];

		return pClassPointer;
	};

	void HideTrajectoryEndPoint ( );
	void DrawTrajectoryEndPoint ( struct FVector NewLocation, struct FVector newHitNormal );
	void Tick ( float DeltaTime );
	float CalcCurveValueBy ( float Power );
	void SetProjectileMesh ( );
	void CalcTrajectory ( float DeltaTime );
	void Init ( struct FVector Direction );
};

UClass* ASFProj_Shuriken::pClassPointer = NULL;

// Class SFGame.SFQACheckMessage
// 0x0014 (0x0050 - 0x003C)
class USFQACheckMessage : public UObject
{
public:
	TArray< struct FSFQAMessage >                      SFQAMessages;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DefaultDisplayTime;                               		// 0x0048 (0x0004) [0x0000000000000000]              
	float                                              UpdateDuration;                                   		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3283 ];

		return pClassPointer;
	};

	void DescribeQAMessage ( class ASFPlayerController* SFPC );
	void AddQAMessage ( float TimeToDisplay, struct FColor DisplayColor, struct FString QAMessage );
	void SetQAMessage ( class ASFPlayerController* SFPC );
	void AddOnScreenQAMessage ( );
};

UClass* USFQACheckMessage::pClassPointer = NULL;

// Class SFGame.SFRandomRespawn
// 0x002D (0x0069 - 0x003C)
class USFRandomRespawn : public UObject
{
public:
	TArray< class ASFGamePlayerStart* >                arrRespawnPoint;                                  		// 0x003C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      PlayerStartClass;                                 		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistanceFromFriendForRespawn;                  		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FriendRadiusForRespawn;                           		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HeightWeightForRespawn;                           		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRespawnDelay;                                 		// 0x0058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CheckColleagueForRespawn;                         		// 0x005C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EnemyDistanceScore;                               		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsTeamGame : 1;                                  		// 0x0064 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRandomRespawnAtFirstSpawn : 1;                   		// 0x0064 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      RandomRespawnType;                                		// 0x0068 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3285 ];

		return pClassPointer;
	};

	bool IsCollidedOtherPlayer ( struct FVector Loc );
	int GetNearMemberCounter ( TArray< class AController* > arrController, struct FVector Center, float fRadius );
	float GetDistSqrFromController ( TArray< class AController* > arrCon, struct FVector Position );
	void SortRespawnPointUsed ( TArray< struct FSRespawnPointInfo >* arrRespawnInfo );
	void SortRespawnPointDist ( TArray< struct FSRespawnPointInfo >* arrRespawnInfo );
	void SortControllerByLadderPoint ( TArray< class AController* >* arrCon );
	class ASFGamePlayerStart* GetPlayerStartByDefault ( class AController* Player, unsigned char InTeam );
	class ASFGamePlayerStart* GetPlayerStartByAvoidSameTeam ( class AController* Player, unsigned char InTeam );
	void GetController ( class AController* TargetController, TArray< class AController* >* SameTeamControllers, TArray< class AController* >* EnemyControllers );
	class ASFGamePlayerStart* GetPlayerStart ( class AController* Player, unsigned char InTeam );
	bool CheckPlayerStartByLastSpawnTime ( unsigned char InTeam, class ASFGamePlayerStart* SFPS );
	bool IsEnabledRandomRespawn ( class AController* Player, unsigned long bInterlude );
	void InitRespawnTime ( );
	bool ExistPlayerStartOnlyUseToRespawn ( );
	void Init ( class UClass* InPSClass, float DistFromFriend, float FriendRadius, float HeightWeight, float InLastRespawnDelay, int CheckColleague, float InEnemyDistanceScore, unsigned long InbIsTeamGame, unsigned long InbRandomRespawnAtFirstSpawn, unsigned char InRandomRespawnType );
};

UClass* USFRandomRespawn::pClassPointer = NULL;

// Class SFGame.SFSceneCaptureActor
// 0x0008 (0x0270 - 0x0268)
class ASFSceneCaptureActor : public ASkeletalMeshCinematicActor
{
public:
	class ASceneCapture2DActor*                        Camera;                                           		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawBoxComponent*                           TestDrawBox;                                      		// 0x026C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3287 ];

		return pClassPointer;
	};

	void ClearCapture ( );
	void DrawCapture ( );
	void SetComponent ( class USkeletalMeshComponent* InComponent );
	void SetMaterial ( class USkeletalMeshComponent* InComponent );
	void SetSkeletalMeshComponent ( class ASFWeapon* Weapon );
	void eventPostBeginPlay ( );
	void eventForceNetRelevant ( );
};

UClass* ASFSceneCaptureActor::pClassPointer = NULL;

// Class SFGame.SFSceneCubeMapActor
// 0x0004 (0x0234 - 0x0230)
class ASFSceneCubeMapActor : public ASceneCaptureCubeMapActor
{
public:
	int                                                TextureSize;                                      		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3289 ];

		return pClassPointer;
	};

	void InitRenderTarget ( );
};

UClass* ASFSceneCubeMapActor::pClassPointer = NULL;

// Class SFGame.SFScout
// 0x0000 (0x0568 - 0x0568)
class ASFScout : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3291 ];

		return pClassPointer;
	};

};

UClass* ASFScout::pClassPointer = NULL;

// Class SFGame.SFSeqVar_RandomVector
// 0x0018 (0x00BC - 0x00A4)
class USFSeqVar_RandomVector : public USeqVar_Vector
{
public:
	struct FVector                                     Min;                                              		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Max;                                              		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3293 ];

		return pClassPointer;
	};

};

UClass* USFSeqVar_RandomVector::pClassPointer = NULL;

// Class SFGame.SFSkeletalMeshComponent
// 0x0008 (0x05D0 - 0x05C8)
class USFSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned long                                      bForceLoadTextures : 1;                           		// 0x05C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSuppressDuplicate : 1;                           		// 0x05C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              ClearStreamingTime;                               		// 0x05CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3295 ];

		return pClassPointer;
	};

	void SetTranslucentMaterial ( class USkeletalMeshComponent* InComponent, unsigned long IsTranslucentView, class UMaterialInterface* InMaterial );
	void SetBoneFix ( class USkeletalMeshComponent* InSkelComp, struct FName InBoneName );
	class USkeletalMeshComponent* DuplicateRecursive ( class AActor* InOwner, class USkeletalMeshComponent* InComp, TArray< struct FName > IgnoreAttachedBoneNames );
	void SetOnlySceneCaptureSeeRecursive ( class USkeletalMeshComponent* InComp, unsigned long bInOnlySceneCaptureSee, unsigned long bReattach );
	bool TestSocketName ( class USkeletalMeshComponent* InComp, struct FName SocketName );
	void SetConsiderOwnerOriginForLocalToWorldRecursive ( class USkeletalMeshComponent* InComp, unsigned long bConsiderOwnerOriginForLocalToWorldRecursive );
	void ForceUpdateComponentsRecursive ( class USkeletalMeshComponent* InComp );
	void SetBackupMaterialRecursive ( class USkeletalMeshComponent* InComp, unsigned long IsRollBack );
	void SetMaterialRecursive ( class USkeletalMeshComponent* InComp, class UMaterialInterface* InMaterial );
	void SetForcedLodModelRecursive ( class USkeletalMeshComponent* InComp, int LodModel );
	void SetLightEnvironmentRecursive ( class USkeletalMeshComponent* InComp, class ULightEnvironmentComponent* NewLightEnvironmentComponent );
	void SetShadowParentRecursive ( class USkeletalMeshComponent* InComp, class UPrimitiveComponent* NewShadowParent );
	void SetDLERecursive ( class USkeletalMeshComponent* InComp, class UDynamicLightEnvironmentComponent* InDLE );
	void SetHiddenRecursive ( class USkeletalMeshComponent* InComp, unsigned long bHidden );
	void SetOnlyObserverSeeRecursive ( class USkeletalMeshComponent* InComp, unsigned long bNewOnlyObserverSee );
	void SetOwnerNoSeeRecursive ( class USkeletalMeshComponent* InComp, unsigned long bNewOwnerNoSee );
	float SetAnimBlendNodeChileNodePlayLength ( struct FName NodeName, float NewTime );
	float SetAnimSequencePlayLength ( struct FName SeqName, float NewTime );
	float SetAnimNodePlayLength ( struct FName NodeName, float NewTime );
	void SetAnimNodeBlendLength ( struct FName NodeName, int NodeNo, float NewTime );
	class UAnimNode* GetAnimNode ( class UClass* BaseClass, struct FName NodeName );
	void GetAllAnimNode ( class UClass* BaseClass, struct FName NodeName, TArray< class UAnimNode* >* OutNode );
	void SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp );
	void eventPreloadTextures ( unsigned long bForcePreload, float ClearTime );
};

UClass* USFSkeletalMeshComponent::pClassPointer = NULL;

// Class SFGame.SFSliceSyncState
// 0x02DC (0x0500 - 0x0224)
class ASFSliceSyncState : public AReplicationInfo
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0224 (0x000C) MISSED OFFSET
	struct FSliceState                                 arrSliceState[ 0x16 ];                            		// 0x0230 (0x02C0) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                LastArrayIndex;                                   		// 0x04F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                SavedLastArrayIndex;                              		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFSliceSyncState*                           NextSyncState;                                    		// 0x04F8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MaxCountToSpawnAtOnce;                            		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3297 ];

		return pClassPointer;
	};

	bool UpdateComponentState ( );
	bool AddSliceState ( int MeshID, float X, float Y, float Z, float W );
	bool HasSpaceInArray ( );
	void Reset ( );
	void PostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* ASFSliceSyncState::pClassPointer = NULL;

// Class SFGame.SFSpawner
// 0x0020 (0x0244 - 0x0224)
class ASFSpawner : public AActor
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoDeActivate : 1;                              		// 0x0224 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class USFSeqAct_AIFactory* >               Factories;                                        		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSpawnerSlot >                      SpawnSlots;                                       		// 0x0234 (0x000C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class AActor*                                      Killer;                                           		// 0x0240 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3299 ];

		return pClassPointer;
	};

	void FinishedDying ( );
	void StartingToDie ( );
	void eventUnRegisterFactory ( class USFSeqAct_AIFactory* Factory );
	void eventRegisterFactory ( class USFSeqAct_AIFactory* Factory );
	void Deactivated ( );
	void Activated ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	bool eventGetSpawnSlot ( int* out_SpawnSlotIdx, struct FVector* out_SpawnLocation, struct FRotator* out_SpawnRotation );
	void eventHandleSpawn ( class ASFPawn_AI* NewSpawn, int SlotIdx );
	void Reset ( );
};

UClass* ASFSpawner::pClassPointer = NULL;

// Class SFGame.SFSpawner_EHole
// 0x0008 (0x024C - 0x0244)
class ASFSpawner_EHole : public ASFSpawner
{
public:
	struct FName                                       currState;                                        		// 0x0244 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3301 ];

		return pClassPointer;
	};

	void UpdateMeshAndMaterial ( );
	void eventUnRegisterFactory ( class USFSeqAct_AIFactory* Factory );
	void eventHandleSpawn ( class ASFPawn_AI* NewSpawn, int SlotIdx );
	void CloseHole ( unsigned long bQuiet );
	void OpenHole ( );
	void Init ( );
	void Reset ( );
	void Deactivated ( );
	bool GetSpawnSlot ( int* out_SpawnSlotIdx, struct FVector* out_SpawnLocation, struct FRotator* out_SpawnRotation );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ClosEHole_Visuals ( );
	void OpenEHole_Visuals ( );
};

UClass* ASFSpawner_EHole::pClassPointer = NULL;

// Class SFGame.SFSpawner_EholeSpawnLocation
// 0x0005 (0x0229 - 0x0224)
class ASFSpawner_EholeSpawnLocation : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      EmergeAnim;                                       		// 0x0228 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3303 ];

		return pClassPointer;
	};

};

UClass* ASFSpawner_EholeSpawnLocation::pClassPointer = NULL;

// Class SFGame.SFSpectatorEmitter
// 0x0004 (0x024C - 0x0248)
class ASFSpectatorEmitter : public AEmitter
{
public:
	unsigned long                                      bSpectatorOnly : 1;                               		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3305 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	void eventSetSpectatorCamera ( unsigned long bSpectator );
};

UClass* ASFSpectatorEmitter::pClassPointer = NULL;

// Class SFGame.SFSprayActor
// 0x0044 (0x026C - 0x0228)
class ASFSprayActor : public ADecalActor
{
public:
	float                                              DecalSize;                                        		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Thickness;                                        		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlayerID;                                         		// 0x0230 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                SlotIndex;                                        		// 0x0234 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                EmblemID;                                         		// 0x0238 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     EmblemFileName;                                   		// 0x023C (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FRotator                                    ViewRotation;                                     		// 0x0248 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class USFSprayDecal*                               SprayDecal;                                       		// 0x0254 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterial*                                   SprayBaseMaterial;                                		// 0x0258 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     SprayMaterialName;                                		// 0x025C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bBackFace : 1;                                    		// 0x0268 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3307 ];

		return pClassPointer;
	};

	class USFSprayDecal* GetSprayDecal ( int InSlotIndex, class UTexture* InTexture, struct FVector DecalLocation, struct FRotator DecalOrientation, struct FRotator InViewRotation, class UPrimitiveComponent* HitComponent, float SprayThickness );
	class UMaterial* GetSprayBaseMaterial ( );
	void InitByEmblemFileName ( int InSlotIndex, struct FString InEmblemFileName, int OwnerPlayerID, struct FRotator ViewRot );
	void eventInitByEmblemID ( int InSlotIndex, int InEmblemID, int OwnerPlayerID, struct FRotator ViewRot );
	void RestoreDevice ( );
	class ASFSprayActor* SpawnSprayActorByFileName ( int InSlotIndex, struct FString Filename, class ASFPlayerController* OwnerPC, struct FVector SpawnLoc, struct FRotator SpawnRot, struct FRotator ViewRot, unsigned long bInBackFace );
	class ASFSprayActor* SpawnSprayActorByEmblemID ( int InSlotIndex, int InEmblemID, class ASFPlayerController* OwnerPC, struct FVector SpawnLoc, struct FRotator SpawnRot, struct FRotator ViewRot, unsigned long bInBackFace );
	void SetBackFace ( unsigned long bFlag );
	void eventReplicatedEvent ( struct FName VarName );
	void ChangePlayerTeam ( );
	void ReattachDecal ( );
	void Reset ( );
};

UClass* ASFSprayActor::pClassPointer = NULL;

// Class SFGame.SFSprayTextureManager
// 0x0018 (0x0054 - 0x003C)
class USFSprayTextureManager : public UObject
{
public:
	struct FString                                     SprayTexturePath;                                 		// 0x003C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSprayTextureFile >                 arrSprayTexturFile;                               		// 0x0048 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3309 ];

		return pClassPointer;
	};

	void PreLoadMap ( );
	class UTexture* GetSprayTextureFromGFx ( int SlotIndex, int TextureID, int PlayerID );
	class UTexture* GetSprayTextureFromFile ( struct FString Filename, class UObject* InTextureOuter );
	class UTexture2D* GetPNGTexture ( struct FString Filename, class UObject* InTextureOuter );
	class UTexture2D* GetDDSTexture ( struct FString Filename, class UObject* InTextureOuter );
	class UTexture2D* GetTextureFromFile ( struct FString Filename, class UObject* InTextureOuter );
};

UClass* USFSprayTextureManager::pClassPointer = NULL;

// Class SFGame.SFTcpipConnection
// 0x0000 (0x503C - 0x503C)
class USFTcpipConnection : public UTcpipConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3311 ];

		return pClassPointer;
	};

};

UClass* USFTcpipConnection::pClassPointer = NULL;

// Class SFGame.SFTcpNetDriver
// 0x005C (0x0280 - 0x0224)
class USFTcpNetDriver : public UTcpNetDriver
{
public:
	unsigned char                                      UnknownData00[ 0x5C ];                            		// 0x0224 (0x005C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3313 ];

		return pClassPointer;
	};

};

UClass* USFTcpNetDriver::pClassPointer = NULL;

// Class SFGame.SFTeamInfo
// 0x0030 (0x0270 - 0x0240)
class ASFTeamInfo : public ATeamInfo
{
public:
	unsigned long                                      bLastManStanding : 1;                             		// 0x0240 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSaveSituation : 1;                               		// 0x0240 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bMatchPoint : 1;                                  		// 0x0240 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )
	unsigned long                                      bAccumulationScore : 1;                           		// 0x0240 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseDeductionClanPoint : 1;                       		// 0x0240 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned char                                      SpawnedPawnCount;                                 		// 0x0244 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      DiedPawnCount;                                    		// 0x0245 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      nWinningRound;                                    		// 0x0246 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      AttackRoundWin;                                   		// 0x0247 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      DefendRoundWin;                                   		// 0x0248 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TotalShareLives;                                  		// 0x0249 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                ClanSerialNumber;                                 		// 0x024C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FString                                     ClanName;                                         		// 0x0250 (0x000C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	TArray< class AController* >                       TeamMembers;                                      		// 0x025C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ASFHeadQuarters*                             Headquarter;                                      		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                LobbyTeam;                                        		// 0x026C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3315 ];

		return pClassPointer;
	};

	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void StockRoamingPoints ( );
	void SetEnemyTeam ( class ASFTeamInfo* EnemyTeam );
	class AController* GetBestAIController ( );
	class AController* GetRandomAIController ( );
	class APawn* GetRandomLiveMember ( );
	int GetClanPoint ( );
	int GetDeductionClanPoint ( );
	int GetCSN ( );
	struct FString GetClanName ( );
	void SetCSN ( int CSN, struct FString InClanName );
	bool DecreaseTotalShareLives ( );
	void SetTotalShareLives ( unsigned char NewValue );
	unsigned char GetTotalShareLives ( );
	int GetTopRank ( );
	int GetSumOfRanks ( );
	int GetTotalHP ( );
	int GetPRIScores ( );
	int GetPRIDeaths ( );
	int GetPRIKillAssist ( );
	int GetPRIKills ( );
	void DecreaseScore ( float DecreaseScore );
	void IncreaseScore ( float IncreaseScore );
	void IncreaseWinningRound ( );
	void SetWinningRound ( int nCounter );
	int GetWinningRound ( );
	int eventGetScore ( unsigned char ScoreType );
	void ChangeData ( class ASFTeamInfo** OtherTeamInfo );
	bool FriendlyToward ( class APawn* Other );
	void JoinSquad ( struct FName SquadName, class AController* NewMember, unsigned long bLeader, class UClass* SquadClass );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	int GetTeamMemberCounter ( unsigned long bExceptAI );
	void SetHeadQuarter ( );
	int GetLobbyTeam ( );
	void Initialize ( int NewTeamIndex );
	unsigned char GetLivePawnCount ( );
	unsigned char GetSpawnedPawnCount ( );
	void PawnDied ( );
	void PawnSpawned ( );
	void Reset ( );
	struct FString GetHumanReadableName ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFTeamInfo::pClassPointer = NULL;

// Class SFGame.SFConvoyanceGameTeamInfo
// 0x0008 (0x0278 - 0x0270)
class ASFConvoyanceGameTeamInfo : public ASFTeamInfo
{
public:
	int                                                TotalAccquireItemAmount;                          		// 0x0270 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TotalPushScore;                                   		// 0x0274 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3317 ];

		return pClassPointer;
	};

	int GetPRIPushScore ( );
	int GetPRIAccquireItemAmount ( );
	void CalculateGameResult ( );
};

UClass* ASFConvoyanceGameTeamInfo::pClassPointer = NULL;

// Class SFGame.SFThunderRunTeamInfo
// 0x000D (0x027D - 0x0270)
class ASFThunderRunTeamInfo : public ASFTeamInfo
{
public:
	int                                                AreaLapTime[ 0x3 ];                               		// 0x0270 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PassedArea;                                       		// 0x027C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3319 ];

		return pClassPointer;
	};

	void ChangedLapTime ( );
	int GetLastLapTime ( );
	int GetLapTime ( int AreaIndex );
	void SetLapTime ( int AreaIndex, int NewTime );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFThunderRunTeamInfo::pClassPointer = NULL;

// Class SFGame.SFTemporaryObjectPool
// 0x0178 (0x01B4 - 0x003C)
class USFTemporaryObjectPool : public UObject
{
public:
	class ASFGameReplicationInfo*                      SFGRI;                                            		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FResourceInfo >                     arrSmokeEffectPS;                                 		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FResourceInfo >                     arrCrossHairMI;                                   		// 0x004C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FResourceInfo >                     arrGFxMoviePlayer;                                		// 0x0058 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FResourceInfo >                     arrCameraAnim;                                    		// 0x0064 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FResourceInfo >                     arrRadioMessage;                                  		// 0x0070 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumberOfSFWeapHitPSC;                             		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FarrPSCInfo >                       arrSFWeaponHitPSCInfo;                            		// 0x0080 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	int                                                NumberOfSFWeapTracePSC;                           		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FarrPSCInfo >                       arrSFWeaponTracePSCInfo;                          		// 0x0090 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	int                                                NumberOfSFWeapExtraTracePSC;                      		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FarrPSCInfo >                       arrSFWeaponExtraTracePSCInfo;                     		// 0x00A0 (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	int                                                HitEffectCacheCount[ 0x3 ];                       		// 0x00AC (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     HitEffectPSName[ 0x3 ];                           		// 0x00B8 (0x0024) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UParticleSystem*                             HitEffectPS[ 0x3 ];                               		// 0x00DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FarrPSCInfo                                 CachedHitEffect[ 0x3 ];                           		// 0x00E8 (0x003C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class UParticleSystem*                             DamageCameraBlood;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             DeathCameraBlood;                                 		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FSFBloodDecalPool                           WallBloodDecals;                                  		// 0x012C (0x003C) [0x0000000000484001]              ( CPF_Edit | CPF_Config | CPF_Component | CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   WallBloodDecalMIC;                                		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSprayInfo >                        arrSprayInfo;                                     		// 0x016C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SpraySpawnCounterForDepth;                        		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFSliceSyncState*                           SliceSyncStateList;                               		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FStaticMeshComonentForRestore >     arrStaticMeshCompForRestore;                      		// 0x0180 (0x000C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                StaticMeshComponentID;                            		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            MaterialImpactEffectClassList;                    		// 0x0190 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FString >                           MaterialImpactEffectClassNameList;                		// 0x019C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __InitNewInstance__Delegate;                      		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3321 ];

		return pClassPointer;
	};

	void SetSliceState ( int MeshID, float X, float Y, float Z, float W );
	void ResetSliceSyncState ( );
	class ASFSliceSyncState* GetSliceSyncState ( );
	class ASFSliceSyncState* SpawnSliceSyncStateList ( );
	class UStaticMeshComponent* FindStaticMeshComponent ( int MeshID );
	bool HasSliceStaticMeshComponent ( int MeshID );
	void RestoreSliceStaticMeshComp ( );
	bool SetSliceStaticMeshCompForRestore ( class UStaticMeshComponent* StaticComp );
	void InitStaticMeshComponentIDForSlice ( unsigned long bInitID );
	void SetSprayActor ( int InPlayerID, class ASFSprayActor* SprayActor );
	void UpdateSprayCounter ( );
	class USFDecal* GetWallBloodDecals ( struct FVector DecalLocation, struct FRotator DecalOrientation, float DecalRotation, class UPrimitiveComponent* HitComponent, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float Scale );
	int GetPrevIndex ( int nCurrentIndex, int MaxCounter );
	int GetNextIndex ( int nCurrentIndex, int MaxCounter );
	class UParticleSystemComponent* SpawnHitBloodPSC ( unsigned char HitType, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bFinish, unsigned long bLODCalcUseOnlyDistance );
	class UParticleSystemComponent* SpawnSFWeaponExtraTracePSC ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bActive );
	class UParticleSystemComponent* SpawnSFWeaponTracePSC ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bActive );
	class UParticleSystemComponent* SpawnSFWeaponHitPSC ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, unsigned long bActive );
	class UParticleSystemComponent* GetHitBloodPSC ( unsigned char HitType );
	class UParticleSystemComponent* GetPSC ( class UParticleSystem* PS, int nPoolSize, TArray< struct FarrPSCInfo >* arrInfo );
	void DeActivePSC ( class UParticleSystemComponent* PSC );
	void ActivePSC ( class UParticleSystemComponent* PSC, struct FVector SpawnLocation, struct FRotator SpawnRotation, float SpawnScale, class ASFPlayerController* UserPC );
	void ReleaseMaterialImpactEffect ( );
	void InitMaterialImpactEffect ( );
	void ReleaseHitEffects ( );
	void InitHitEffects ( );
	void InitBloodDecals ( );
	void ReleaseGFxMoviePlayer ( );
	class UGFxMoviePlayer* GetGFxMoviePlayer ( struct FName ResourceName, struct FScriptDelegate newInstance );
	void Reset ( );
	class ASFGameReplicationInfo* GetSFGRI ( );
	void release ( );
	void eventInit ( class ASFGameReplicationInfo* InSFGRI );
	void InitNewInstance ( class UObject* newInstance );
	class UClass* GetRadioMessage ( struct FName ResourceName );
	class UCameraAnim* GetCameraAnim ( struct FName ResourceName );
	class UMaterialInterface* GetCrossHairMI ( struct FName ResourceName );
	class UParticleSystem* GetSmokeEffectPS ( struct FName ResourceName );
	void PreloadCamEffectTexture ( class UParticleSystemComponent* PSC );
	void UpdateLOD ( class UParticleSystemComponent* PSC, struct FVector SpawnLocation, class ASFPlayerController* UserPC );
};

UClass* USFTemporaryObjectPool::pClassPointer = NULL;

// Class SFGame.SFThunderRunState
// 0x0020 (0x0244 - 0x0224)
class ASFThunderRunState : public AReplicationInfo
{
public:
	float                                              AllowableDiffSecondsFromHost;                     		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTimeForPassedArea;                          		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AreaChangedTimeSeconds;                           		// 0x022C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                currAreaIndex;                                    		// 0x0230 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                SavedCurrAreaIndex;                               		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPawnLocation >                     arrPawnLocation;                                  		// 0x0238 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3323 ];

		return pClassPointer;
	};

	void eventUpdateAreaIndex ( );
	int GetAreaIndex ( );
	void SetAreaIndex ( int newArea );
	void ClientReset ( );
	void Reset ( );
	void PostBeginPlay ( );
	bool UpdateSequenceForInterlude ( int nUpdateArea );
};

UClass* ASFThunderRunState::pClassPointer = NULL;

// Class SFGame.SFTrigger_Use
// 0x0184 (0x03B4 - 0x0230)
class ASFTrigger_Use : public ATrigger
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x0230 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysReplicateMovement : 1;                     		// 0x0230 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DrawOutLine : 1;                                  		// 0x0230 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDrawIconGauge : 1;                               		// 0x0230 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bBlockWhenComplete : 1;                           		// 0x0230 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bTraceObstacleObject : 1;                         		// 0x0230 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTraceUsingMesh : 1;                              		// 0x0230 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCanUse : 1;                                      		// 0x0230 (0x0004) [0x0000000000002020] [0x00000080] ( CPF_Net | CPF_Transient )
	unsigned long                                      bBlockUse : 1;                                    		// 0x0230 (0x0004) [0x0000000000002020] [0x00000100] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUseVolumeLocationForIcon : 1;                    		// 0x0230 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bMaintainUsingTime : 1;                           		// 0x0230 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bCanUseInTrainingGame : 1;                        		// 0x0230 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	TArray< struct FAimValueToInteractive >            AimValues;                                        		// 0x0234 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        MeshComponent;                                    		// 0x0240 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     MeshOffset;                                       		// 0x0244 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       currState;                                        		// 0x0250 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      ValidTeamIndex;                                   		// 0x0258 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ValidTeamIndexForReactive;                        		// 0x0259 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IconTypeRedTeam;                                  		// 0x025A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IconTypeBlueTeam;                                 		// 0x025B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MissionItemType;                                  		// 0x025C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TriggerType;                                      		// 0x025D (0x0001) [0x0000000000000000]              
	float                                              GaugeTime;                                        		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GaugeTimeForReactive;                             		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReTriggerDelay;                                   		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastActivationTime;                               		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     InstanceUseMessage[ 0x9 ];                        		// 0x0270 (0x006C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GaugeUseMessage[ 0x9 ];                           		// 0x02DC (0x006C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FStateIconType >                    StateIconTypes;                                   		// 0x0348 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     IconLocationOffset;                               		// 0x0354 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FNextStateInfo >                    arrNextStateInfo;                                 		// 0x0360 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      UsingActor;                                       		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxUserCount;                                     		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialStateForEditor;                            		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FUserInfo >                         UserList;                                         		// 0x037C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class APawn* >                             TouchingPawns;                                    		// 0x0388 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ASFModeVolume* >                     ModeVolumes;                                      		// 0x0394 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USpriteComponent*                            IconLocationForEditor;                            		// 0x03A0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastUsingTime;                                    		// 0x03A4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class AController*                                 LastUser;                                         		// 0x03A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ModeVolumeState;                                  		// 0x03AC (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3325 ];

		return pClassPointer;
	};

	unsigned char eventScriptGetTeamNum ( );
	bool IsOverMaxUseCount ( );
	bool NotifyChargeCompleteToTrigger ( );
	void OnSetOutLine ( class USeqAct_SetOutLine* Action );
	void SetTriggerState ( class UClass* TriggerClass, struct FName NewState, unsigned long bExceptSelf );
	void SetModeVolumeState ( struct FName NewState, float DelayTime );
	void UpdateModeVolumeState ( );
	class UMeshComponent* GetUsingActorMeshComponent ( );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnModeState ( class USFSeqAct_ModeState* Action );
	void SetCollideWorld ( unsigned long bCollide );
	void SetDrawOutLine ( unsigned long bOutLine, unsigned char InOutLineColorIndex, unsigned long bReattach );
	void SetVisible ( unsigned long bVisible );
	class UMeshComponent* GetMeshComponent ( );
	bool UpdateMeshAndMaterial ( );
	float eventGetGaugeTime ( class APawn* InstigatorBy );
	void UpdateUsingTime ( class APawn* User, float UsingRate, float DeltaTime );
	float CalculateUsingTime ( class APawn* User, float UsingTime, float DeltaTime );
	void eventUpdateKeyInputMessage ( class APawn* User, unsigned long bForceCloseMessage );
	void UpdateUntouchingPawns ( class APawn* User );
	void UpdateTouchingPawns ( class APawn* User );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void UpdateTouchingPawnList ( );
	bool CanUsingNative ( class APawn* User );
	bool eventCanUsing ( class APawn* User );
	bool IsAimingAt ( struct FVector PawnLocation, struct FVector PawnViewDir, struct FRotator PawnRotation );
	bool CanUse ( class APawn* User, unsigned long bNoCheckCanUsing );
	bool CheckCanUse ( );
	void RemoveAllUser ( unsigned long bCompleted );
	bool RemoveUser ( class APawn* User );
	void eventInactiveMissionWeapon ( class APawn* User );
	bool AddUser ( class APawn* User );
	bool IsUseable ( class APawn* User );
	bool UsedBy ( class APawn* User );
	void CancelUse ( class AController* InstigatedBy );
	bool eventComplete ( class AController* InstigatedBy );
	void TouchedModeVolume ( class AController* InstigatedBy, class ASFModeVolume* Vol );
	struct FName GetNextState ( class AController* InstigatedBy, struct FName CallerName );
	void OnComplete ( class AController* InstigatedBy );
	void OnUnTouchedModeVolume ( class AController* InstigatedBy );
	bool OnTouchedModeVolume ( class AController* InstigatedBy );
	void OnCancel ( class AController* InstigatedBy );
	void OnUsed ( class AController* InstigatedBy );
	unsigned char GetUseMessageType ( );
	struct FString eventGetUseMessage ( unsigned char TeamNum );
	unsigned char GetShowingIconTeamIndex ( );
	void UpdateObjectIcon ( );
	bool AttachToPawn ( );
	void Init ( );
	void ClientReset ( );
	void eventReset ( );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsTraceHit ( struct FVector StartLoc, struct FVector Direction, struct FVector Extent, class AActor* TraceOwner );
};

UClass* ASFTrigger_Use::pClassPointer = NULL;

// Class SFGame.SFTrigger_ConvoyanceItem
// 0x0020 (0x03D4 - 0x03B4)
class ASFTrigger_ConvoyanceItem : public ASFTrigger_Use
{
public:
	int                                                nPlayerID;                                        		// 0x03B4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      nTryAttachToPawn;                                 		// 0x03B8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActor*                             MeshActor;                                        		// 0x03BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      ItemActor;                                        		// 0x03C0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MoneyAmount;                                      		// 0x03C4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      IsCompleteAttach : 1;                             		// 0x03C8 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	class AController*                                 ReturnController;                                 		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CheckRadius;                                      		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3327 ];

		return pClassPointer;
	};

	bool UsedBy ( class APawn* User );
	void DestroyMesh ( );
	bool eventCanUsing ( class APawn* User );
	void SetPHysFalling ( );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void HitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void RestoreInstigated ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	int GetSeizuredPlayerID ( );
	void DetachFromPawn ( );
	bool IsNearCar ( class ASFPawn_Player* SFP );
	bool IsUseable ( class APawn* User );
	void SetCollideWorld ( unsigned long bCollide );
	void SetDrawOutLine ( unsigned long bOutLine, unsigned char InOutLineColorIndex, unsigned long bReattach );
	class ADynamicSMActor* GetMeshActor ( );
	void Logout ( int PlayerID );
	void PostBeginPlay ( );
};

UClass* ASFTrigger_ConvoyanceItem::pClassPointer = NULL;

// Class SFGame.SFTrigger_PvE
// 0x0004 (0x03B8 - 0x03B4)
class ASFTrigger_PvE : public ASFTrigger_Use
{
public:
	int                                                Price;                                            		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3329 ];

		return pClassPointer;
	};

	int GetTeamScore ( class APawn* User );
	bool UsedBy ( class APawn* User );
	bool CheckHasEnoughScore ( class APawn* User );
	bool IsUseable ( class APawn* User );
};

UClass* ASFTrigger_PvE::pClassPointer = NULL;

// Class SFGame.SFTrigger_PvEShop
// 0x0008 (0x03C0 - 0x03B8)
class ASFTrigger_PvEShop : public ASFTrigger_PvE
{
public:
	unsigned char                                      OutLineIndex;                                     		// 0x03B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShopGroupIndex;                                   		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3331 ];

		return pClassPointer;
	};

	struct FString eventGetUseMessage ( unsigned char TeamNum );
	void ActiveShockWaveKismet ( class AController* InstigatedBy );
	void UpdateObjectIcon ( );
	void OnSetOutLine ( class USeqAct_SetOutLine* Action );
	void SetDrawOutLine ( unsigned long bOutLine, unsigned char InOutLineColorIndex, unsigned long bReattach );
	bool UsedBy ( class APawn* User );
	void UpdateUntouchingPawns ( class APawn* User );
	void UpdateTouchingPawns ( class APawn* User );
};

UClass* ASFTrigger_PvEShop::pClassPointer = NULL;

// Class SFGame.SFTrigger_ShooterTurret
// 0x0004 (0x03BC - 0x03B8)
class ASFTrigger_ShooterTurret : public ASFTrigger_PvE
{
public:
	class ASFTurret_AutoBase*                          Turret;                                           		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3333 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
	bool UsedBy ( class APawn* User );
	bool eventComplete ( class AController* InstigatedBy );
	bool IsUseable ( class APawn* User );
};

UClass* ASFTrigger_ShooterTurret::pClassPointer = NULL;

// Class SFGame.SFTrigger_ReplaceMesh
// 0x0034 (0x03E8 - 0x03B4)
class ASFTrigger_ReplaceMesh : public ASFTrigger_Use
{
public:
	class UStaticMesh*                                 SwitchFirstMesh;                                  		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 SwitchSecondMesh;                                 		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material_First;                                   		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material_Second;                                  		// 0x03C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFFlickerLightByPeriod*                     FlickerLight;                                     		// 0x03C4 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FColor                                      FlickerLightFirstColor;                           		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FlickerLightSecondColor;                          		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FlickerLightOffset;                               		// 0x03D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseFlickerLight : 1;                             		// 0x03DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x03E0 (0x0004) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDrawSphereComponent*                        FlickerLightSphere;                               		// 0x03E4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3335 ];

		return pClassPointer;
	};

	void SetStaticMesh ( unsigned long bFirstMesh );
	bool SetMaterial ( unsigned long bFirstMaterial );
	void SetVisible ( unsigned long bVisible );
};

UClass* ASFTrigger_ReplaceMesh::pClassPointer = NULL;

// Class SFGame.SFTrigger_Bomb
// 0x0034 (0x041C - 0x03E8)
class ASFTrigger_Bomb : public ASFTrigger_ReplaceMesh
{
public:
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x03E8 (0x0004) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MITV_Index;                                       		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MITV_StartTimeOffset;                             		// 0x03F0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< struct FLEDInfo >                          arrLEDInfo;                                       		// 0x03F4 (0x000C) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	int                                                nCurrentLEDInfoIndex;                             		// 0x0400 (0x0004) [0x0000000020002000]              ( CPF_Transient | CPF_Deprecated )
	class UMaterialInstanceTimeVarying*                MITV_LED;                                         		// 0x0404 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                InstallerUID;                                     		// 0x0408 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PassedTimeForInstall;                             		// 0x040C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              WaitingTime;                                      		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AStaticMeshActorForBlastingGame*             InstallTargetActor;                               		// 0x0414 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AWeapon*                                     InstigateWeapon;                                  		// 0x0418 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3337 ];

		return pClassPointer;
	};

	void ModifyTriggerProperties ( class AWeapon* InstigateWeaponBy );
	class AStaticMeshActorForBlastingGame* GetInstallTargetActor ( );
	void UpdateInstallTargetActor ( );
	void SetDrawOutLineForOutsideOfRangeTarget ( unsigned long bDrawOutline );
	void Timer ( );
	void UpdateChangedTime ( );
	void SetInstallerUID ( int nPlayerUID );
	int GetInstallerUID ( );
	float GetRemainTime ( );
	void SetFlickerLight ( unsigned long bVisible );
	class UMaterialInstanceTimeVarying* GetMITV ( unsigned long bForce );
	void Logout ( int PlayerID );
	void Init ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFTrigger_Bomb::pClassPointer = NULL;

// Class SFGame.SFTrigger_PlasticBomb
// 0x0028 (0x0410 - 0x03E8)
class ASFTrigger_PlasticBomb : public ASFTrigger_ReplaceMesh
{
public:
	class ASFBreakableActor*                           BaseBreakableActor;                               		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DamageDir;                                        		// 0x03EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UArrowComponent*                             DamageDirArrow;                                   		// 0x03F8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AController*                                 Installer;                                        		// 0x03FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      SkelMeshComp;                                     		// 0x0400 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             InstallParticle;                                  		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   LED_MIC;                                          		// 0x0408 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LED_MIC_Offset;                                   		// 0x040C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3339 ];

		return pClassPointer;
	};

	bool RemoveUser ( class APawn* User );
	void InitAnimRate ( );
	void SetLEDOffset ( int Index, unsigned long bForceUpdate );
	void Notify7 ( );
	void Notify6 ( );
	void Notify5 ( );
	void Notify4 ( );
	void Notify3 ( );
	void Notify2 ( );
	void Notify1 ( );
	void Notify0 ( );
	class UMeshComponent* GetMeshComponent ( );
	void SetVisible ( unsigned long bVisible );
	void Init ( );
	void UpdateMIC ( );
	void RegisterTrigger ( );
	void PostBeginPlay ( );
};

UClass* ASFTrigger_PlasticBomb::pClassPointer = NULL;

// Class SFGame.SFTrigger_Seizure
// 0x002C (0x0414 - 0x03E8)
class ASFTrigger_Seizure : public ASFTrigger_ReplaceMesh
{
public:
	struct FName                                       GameObjBone3P;                                    		// 0x03E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                nPlayerID;                                        		// 0x03F0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     InitialLocation;                                  		// 0x03F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x0400 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      nTryAttachToPawn;                                 		// 0x040C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActor*                             MeshActor;                                        		// 0x0410 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3341 ];

		return pClassPointer;
	};

	int GetSeizuredPlayerID ( );
	void DetachFromPawn ( );
	void RestoreInstigated ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventOutsideWorldBounds ( );
	void SetPHysFalling ( );
	void Landed ( struct FVector HitNormal, class AActor* FloorActor );
	void HitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void SetCollideWorld ( unsigned long bCollide );
	void InitMeshActorLocation ( );
	void Init ( );
	class ADynamicSMActor* GetMeshActor ( );
	void Logout ( int PlayerID );
	void PostBeginPlay ( );
};

UClass* ASFTrigger_Seizure::pClassPointer = NULL;

// Class SFGame.SFTrigger_UseByWeaponGroup
// 0x0010 (0x03F8 - 0x03E8)
class ASFTrigger_UseByWeaponGroup : public ASFTrigger_ReplaceMesh
{
public:
	TArray< struct FSGaugeTimeByWeaponTypeInfo >       GaugeTimeInfoArray;                               		// 0x03E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUseUpdateMesh : 1;                               		// 0x03F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckCompleteScore : 1;                          		// 0x03F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUsingActor : 1;                                  		// 0x03F4 (0x0004) [0x0000000000002020] [0x00000004] ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3343 ];

		return pClassPointer;
	};

	void OnCancel ( class AController* InstigatedBy );
	void OnUsed ( class AController* InstigatedBy );
	float eventGetGaugeTime ( class APawn* InstigatorBy );
	bool CheckCanUse ( );
};

UClass* ASFTrigger_UseByWeaponGroup::pClassPointer = NULL;

// Class SFGame.SFTypes
// 0x000C (0x0048 - 0x003C)
class USFTypes : public UObject
{
public:
	struct FScriptDelegate                             __OnPacketRecv__Delegate;                         		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3345 ];

		return pClassPointer;
	};

	struct FString GetSplitString ( TArray< struct FString > strs );
	struct FPlane GetPlaneFromVertices ( struct FVector* A, struct FVector* B, struct FVector* C );
	int FindIndexFromQwordArray ( TArray< struct FQWord >* ArrayData, struct FQWord* qwordValue );
	struct FQWord ZeroQword ( );
	int GetBinaryCounter ( int Value );
	struct FLinearColor GetUVOffset ( int Width, int Height, int Index );
	struct FVector GetEulerFromRotator ( struct FRotator Rot );
	struct FRotator GetRotationFromEuler ( struct FVector EulerAngle );
	struct FString GetHackTypeString ( unsigned char InHackType );
	void OnPacketRecv ( class UPacket* Packet );
};

UClass* USFTypes::pClassPointer = NULL;

// Class SFGame.SFUIMinimapRadar
// 0x00BC (0x02E0 - 0x0224)
class ASFUIMinimapRadar : public AActor
{
public:
	struct FVector                                     TeamBaseArray[ 0x8 ];                             		// 0x0224 (0x0060) [0x0000000000000000]              
	float                                              RadarRange;                                       		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarRangeMax;                                    		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarRangeMin;                                    		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RadarRangeDelta;                                  		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LerpColorTopHeight;                               		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      LerpColorTop;                                     		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LerpColorBottomHeight;                            		// 0x029C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      LerpColorBottom;                                  		// 0x02A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DeadPawnDurationTime;                             		// 0x02A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFUIMinimapRadarGFxValue*                   RadarGFxValue;                                    		// 0x02A8 (0x0004) [0x0000000000000000]              
	int                                                GFxFrameSizeX;                                    		// 0x02AC (0x0004) [0x0000000000000000]              
	int                                                GFxFrameSizeY;                                    		// 0x02B0 (0x0004) [0x0000000000000000]              
	int                                                CurrentOverlayLevel;                              		// 0x02B4 (0x0004) [0x0000000000000000]              
	int                                                PrevOverlayLevel;                                 		// 0x02B8 (0x0004) [0x0000000000000000]              
	class ASFMinimapActor*                             CurrentMiniMapActor;                              		// 0x02BC (0x0004) [0x0000000000000000]              
	unsigned long                                      bRetrieveFromProfile : 1;                         		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRadarVisible : 1;                                		// 0x02C0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      RadarType;                                        		// 0x02C4 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ZoomType;                                         		// 0x02C5 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                DefaultMapTextureSizeX;                           		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                DefaultMapTextureSizeY;                           		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                GFxMiniMapFrameSize;                              		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                GFxWholeMapFrameSize;                             		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              AdditionalRadarMapScale;                          		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                ChangePlayerStartGroupNumber;                     		// 0x02DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3347 ];

		return pClassPointer;
	};

	void eventUpdateTeamBaseByGroupNumber ( int GroupNumber );
	bool GetPingPosition ( struct FVector* TargetPosition );
	void MoveCursor ( float DeltaX, float DeltaY );
	bool IsRadarCursorActivated ( );
	void CreateRadarCursor ( );
	void OnPingNotified ( struct FVector TargetLocation, unsigned char PingType );
	void HideRadar ( );
	void ShowRadar ( );
	int GetOverlayLevelByLocation ( float fLocation );
	void InitGFxMinimapTexture ( );
	void InitGFxValue ( );
	void SetFrameSize ( );
	void SetGFxValue ( class USFUIMinimapRadarGFxValue* GFx_Value, float GFxMinimap_FrameSize, float GFxWholeMap_FrameSize, unsigned long bStartWithHide );
	void SetMinimapActor ( );
	void SetupFor ( class AController* P );
	void eventStopZoom ( );
	void StartZoom ( unsigned long bZoomin );
	bool SetRadarRange ( float Range );
	float GetRadarRange ( );
	void PostBeginPlay ( );
};

UClass* ASFUIMinimapRadar::pClassPointer = NULL;

// Class SFGame.SFUIMinimapRadarGFxValue
// 0x0300 (0x0378 - 0x0078)
class USFUIMinimapRadarGFxValue : public UGFxObject
{
public:
	int                                                MapTexSize;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MapMC;                                            		// 0x007C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MapOverlayMC;                                     		// 0x0080 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MapNavigationOverlayMC;                           		// 0x0084 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MaskMC;                                           		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x008C (0x0004) MISSED OFFSET
	struct FMatrix                                     IconMatrix;                                       		// 0x0090 (0x0040) [0x0000000000000000]              
	class ASFPlayerController*                         SFPlayerOwner;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FGFxIconData                                IconDatas[ 0xF ];                                 		// 0x00D4 (0x0294) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGFxPingData >                     PingList;                                         		// 0x0368 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  CursorMC;                                         		// 0x0374 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3349 ];

		return pClassPointer;
	};

	void MoveCursor ( float PosX, float PosY );
	bool GetCursorPosition ( float* PosX, float* PosY );
	void CreateRadarCursor ( int PosX, int PosY );
	void CreatePing ( struct FVector TargetLocation, unsigned char PingType );
	void eventCallsetZoomBarPoz ( int pos );
	void LoadNavigationOverlayImage ( );
	void AsToSendsetSectorName ( struct FString SectorName );
	void LoadOverlayImage ( );
	void Init ( class ASFPlayerController* Owner );
};

UClass* USFUIMinimapRadarGFxValue::pClassPointer = NULL;

// Class SFGame.SFUnitTestCase_Base
// 0x0004 (0x0228 - 0x0224)
class ASFUnitTestCase_Base : public AActor
{
public:
	int                                                numFailures;                                      		// 0x0224 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3351 ];

		return pClassPointer;
	};

	void CheckIsNotNone ( class UObject* Obj );
	void CheckEqual ( float expected, float actual );
	void Check ( unsigned long Exp );
	void Fail ( );
	int eventResetFailureCount ( );
	void Teardown ( );
	void Setup ( );
};

UClass* ASFUnitTestCase_Base::pClassPointer = NULL;

// Class SFGame.SFUnitTestCase_LocalDB
// 0x000C (0x0234 - 0x0228)
class ASFUnitTestCase_LocalDB : public ASFUnitTestCase_Base
{
public:
	TArray< struct FDataEntry >                        Tables;                                           		// 0x0228 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3353 ];

		return pClassPointer;
	};

};

UClass* ASFUnitTestCase_LocalDB::pClassPointer = NULL;

// Class SFGame.SFUnitTestRunner_Total
// 0x001C (0x0240 - 0x0224)
class ASFUnitTestRunner_Total : public AActor
{
public:
	unsigned long                                      bAutoTest : 1;                                    		// 0x0224 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bExitWithError : 1;                               		// 0x0224 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                testsRunCount;                                    		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                failuresCount;                                    		// 0x022C (0x0004) [0x0000000000000000]              
	int                                                casesRunCount;                                    		// 0x0230 (0x0004) [0x0000000000000000]              
	struct FString                                     LogFilename;                                      		// 0x0234 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3355 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void eventTestStart ( );
	void ExitWithErrorCode ( );
	void RunAllUnitCases ( );
};

UClass* ASFUnitTestRunner_Total::pClassPointer = NULL;

// Class SFGame.SFUnitTestRunner_Unit
// 0x0020 (0x0244 - 0x0224)
class ASFUnitTestRunner_Unit : public AActor
{
public:
	unsigned long                                      bAutoTest : 1;                                    		// 0x0224 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bExitWithError : 1;                               		// 0x0224 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTotalUnitTestMode : 1;                           		// 0x0224 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                testsRunCount;                                    		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                failuresCount;                                    		// 0x022C (0x0004) [0x0000000000000000]              
	class UClass*                                      UnitTestCaseClass;                                		// 0x0230 (0x0004) [0x0000000000000000]              
	class ASFUnitTestCase_Base*                        UnitTestCase;                                     		// 0x0234 (0x0004) [0x0000000000000000]              
	struct FString                                     LogFilename;                                      		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3357 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void eventTestStart ( );
	void SpawnUnitTestCase ( );
	void eventPostBeginPlay ( );
	void ExitWithErrorCode ( );
	void RunAllUnitTests ( );
};

UClass* ASFUnitTestRunner_Unit::pClassPointer = NULL;

// Class SFGame.SFUnitTestRunner_LocalDB
// 0x0000 (0x0244 - 0x0244)
class ASFUnitTestRunner_LocalDB : public ASFUnitTestRunner_Unit
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3359 ];

		return pClassPointer;
	};

	void RunAllUnitTests ( );
};

UClass* ASFUnitTestRunner_LocalDB::pClassPointer = NULL;

// Class SFGame.SFWallPathNode
// 0x0004 (0x0300 - 0x02FC)
class ASFWallPathNode : public APathNode
{
public:
	float                                              MaxJumpDist;                                      		// 0x02FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3361 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};

UClass* ASFWallPathNode::pClassPointer = NULL;

// Class SFGame.SFWaterVolume
// 0x004C (0x0304 - 0x02B8)
class ASFWaterVolume : public AWaterVolume
{
public:
	TArray< struct FCalmeraLensParticleInfo >          PS_CameraLensEffects;                             		// 0x02B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCalmeraLensParticleInfo >          PS_CameraLensUnderWaterEffects;                   		// 0x02C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCalmeraLensParticleInfo >          PS_CameraLensOutSideWaterEffects;                 		// 0x02D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FEntryParticleInfo >                EntryEffects;                                     		// 0x02DC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   PawnEntrySound;                                   		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FWaterSplashInfo >                  WaterSplashEffect;                                		// 0x02EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class ASFEmitterNoSync_WaterSplash* >      WaterSplashEmitter;                               		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3363 ];

		return pClassPointer;
	};

	void NotifyIncludeCamera ( unsigned long bFlag );
	void PlayEntrySplash ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void RemoveWaterSplashEmitter ( class ASFPawn* TouchedPawn );
	bool HasWaterSplashEmitter ( class ASFPawn* TouchedPawn );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFWaterVolume::pClassPointer = NULL;

// Class SFGame.SFWorldCubeMapComponent
// 0x0014 (0x0070 - 0x005C)
class USFWorldCubeMapComponent : public UActorComponent
{
public:
	TArray< struct FSMaterialInfo >                    arrMaterialInfo;                                  		// 0x005C (0x000C) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	class USFMapInfo*                                  SFMI;                                             		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                nCubeMapInfoIndex;                                		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3365 ];

		return pClassPointer;
	};

	void ReleaseData ( );
	void SetCubeMapByName ( struct FName* cubename );
	void SetCubeMapIndex ( int nIndex );
	void ClearParameterValue ( );
	void RemoveMeshComponentRecursive ( class USkeletalMeshComponent* Mesh );
	void RemoveMeshComponent ( class UMeshComponent* Mesh );
	void AddMeshComponentRecursive ( class USkeletalMeshComponent* Mesh );
	void AddMeshComponent ( class UMeshComponent* Mesh );
	void Init ( );
};

UClass* USFWorldCubeMapComponent::pClassPointer = NULL;

// Class SFGame.StaticMeshActorForBlastingGame
// 0x001C (0x0240 - 0x0224)
class AStaticMeshActorForBlastingGame : public AActor
{
public:
	class UMaterialInterface*                          Material_First;                                   		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          Material_Second;                                  		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x022C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0230 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        BreakedMeshComponent;                             		// 0x0234 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      bDrawOutline;                                     		// 0x0238 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x023C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3367 ];

		return pClassPointer;
	};

	void SetNewStaticMesh ( class UStaticMesh* InNewMesh );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void OnModeState ( class USFSeqAct_ModeState* Action );
	void UpdateOutLine ( );
	void SetDrawOutLine ( unsigned long bFlag );
	void OnSetOutLine ( class USeqAct_SetOutLine* Action );
	void SetStaticMesh ( unsigned long bDefault );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* AStaticMeshActorForBlastingGame::pClassPointer = NULL;

// Class SFGame.StaticMeshByDamage
// 0x0024 (0x0250 - 0x022C)
class AStaticMeshByDamage : public AStaticMeshActor
{
public:
	int                                                DamageThreshold;                                  		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RespawnDelay;                                     		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nLimitEmitter;                                    		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentDamage;                                    		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                currentEmitterIndex;                              		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFEmitterSpawnable* >               arrSpawnedEmitter;                                		// 0x0244 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3369 ];

		return pClassPointer;
	};

	void SPawnEffect ( struct FVector HitLocation, struct FRotator SpawnRotation );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ClientReset ( );
	void Reset ( );
};

UClass* AStaticMeshByDamage::pClassPointer = NULL;

// Class SFGame.SFPlayerController
// 0x0B34 (0x11A8 - 0x0674)
class ASFPlayerController : public APlayerController
{
public:
	class UAudioComponent*                             PreviousAC;                                       		// 0x0674 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     LoginOptions;                                     		// 0x0678 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      currSFPCState;                                    		// 0x0684 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      TeamIndex;                                        		// 0x0685 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentWeapSetIndex;                              		// 0x0686 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      NextWeapSetIndex;                                 		// 0x0687 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      bLocalSprint;                                     		// 0x0688 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bLocalRun;                                        		// 0x0689 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      AltFireModeNum;                                   		// 0x068A (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentColorationType;                            		// 0x068B (0x0001) [0x0000000000000000]              
	unsigned char                                      SprayResetType;                                   		// 0x068C (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      GradeLevel;                                       		// 0x068D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bInterludeAtCurrentRound : 1;                     		// 0x0690 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInterludeAtCurrentRoundReplication : 1;          		// 0x0690 (0x0004) [0x0000000000002020] [0x00000002] ( CPF_Net | CPF_Transient )
	unsigned long                                      bCameraOutOfWorld : 1;                            		// 0x0690 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBehindView : 1;                                  		// 0x0690 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bForceBehindView : 1;                             		// 0x0690 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFreeCamera : 1;                                  		// 0x0690 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPressingUsedKey : 1;                             		// 0x0690 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bNonlinearZoomInterpolation : 1;                  		// 0x0690 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bDebugFreeCam : 1;                                		// 0x0690 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bForceHandHide : 1;                               		// 0x0690 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bIgnoreInput : 1;                                 		// 0x0690 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bUsingFootPlacement : 1;                          		// 0x0690 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bUsingSkelControlRot : 1;                         		// 0x0690 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bRetrieveSettingsFromProfileOnNextTick : 1;       		// 0x0690 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bHideObjectivePaths : 1;                          		// 0x0690 (0x0004) [0x0000000000044000] [0x00004000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bViewGiveDamage : 1;                              		// 0x0690 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bViewAim : 1;                                     		// 0x0690 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bViewFBFullEffect : 1;                            		// 0x0690 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bSprintIgnore : 1;                                		// 0x0690 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x0690 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bInfiniteMagazine : 1;                            		// 0x0690 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bLagAnim : 1;                                     		// 0x0690 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bInvisible : 1;                                   		// 0x0690 (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      bCheckVehicles : 1;                               		// 0x0690 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bEnableObserverinterpolation : 1;                 		// 0x0690 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bMouseSpeedIncrease : 1;                          		// 0x0690 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bMouseSpeedDecrease : 1;                          		// 0x0690 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bIsWaitingForPawn : 1;                            		// 0x0690 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bUseProjectileRotation : 1;                       		// 0x0690 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bSuppressCameraEffect : 1;                        		// 0x0690 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bSuppressHitEffect : 1;                           		// 0x0690 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bUsingPickupWeapon : 1;                           		// 0x0690 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bCompleteBackup : 1;                              		// 0x0694 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPawnInvSetSynced : 1;                            		// 0x0694 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWeapInvSetSynced : 1;                            		// 0x0694 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bFuncItemSetSynced : 1;                           		// 0x0694 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bWeapTagSetSynced : 1;                            		// 0x0694 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bIsInLeagueChannel : 1;                           		// 0x0694 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bBombSPItemSetSynced : 1;                         		// 0x0694 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bReturnFirstPersonCameraForDead : 1;              		// 0x0694 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bPreventGarbageCollection : 1;                    		// 0x0694 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bUseRenderTextureMessage : 1;                     		// 0x0694 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bUseHoldZoomType : 1;                             		// 0x0694 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPrimaryWeapExigency : 1;                         		// 0x0694 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHiddenComponentsByKillCam : 1;                   		// 0x0694 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bAdjustFlashBangEffect : 1;                       		// 0x0694 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bResetInProgress : 1;                             		// 0x0694 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bAdjustDistortionEffect : 1;                      		// 0x0694 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bLockForeFOVAngle : 1;                            		// 0x0694 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bShowDebugDamage : 1;                             		// 0x0694 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bUseWipeoutEffect : 1;                            		// 0x0694 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bWipeoutEffectInitialized : 1;                    		// 0x0694 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bPendingPerformGC : 1;                            		// 0x0694 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bUseEnemyCharacter : 1;                           		// 0x0694 (0x0004) [0x0000000000004001] [0x00200000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseArmBand : 1;                                  		// 0x0694 (0x0004) [0x0000000000004001] [0x00400000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseEnemyArmBand : 1;                             		// 0x0694 (0x0004) [0x0000000000004001] [0x00800000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bMagazineDrop : 1;                                		// 0x0694 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bUseBlendCameraPOV : 1;                           		// 0x0694 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bBlendCameraPOVFirstTime : 1;                     		// 0x0694 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      EnemyFriendly : 1;                                		// 0x0694 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bTestSuppressMovementPacket : 1;                  		// 0x0694 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bHideCrosshair : 1;                               		// 0x0694 (0x0004) [0x0000000000004001] [0x20000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bHideHitIndicator : 1;                            		// 0x0694 (0x0004) [0x0000000000004001] [0x40000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bEnableFlashBangGuideEffect : 1;                  		// 0x0694 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bIgnoreWeaponDurability : 1;                      		// 0x0698 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bIsHackedUser : 1;                                		// 0x0698 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDisconnectHackUser : 1;                          		// 0x0698 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bLeftKeyPressed : 1;                              		// 0x0698 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRightKeyPressed : 1;                             		// 0x0698 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bInGameStoreSaveLastMousePosition : 1;            		// 0x0698 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAppliedWeaponRecoilToCamera : 1;                 		// 0x0698 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bPingRadarOpened : 1;                             		// 0x0698 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bRequestedInstantRespawn : 1;                     		// 0x0698 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bReportInvalidPhysicalMtrlProperty : 1;           		// 0x0698 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bDisplayUserGameCondition : 1;                    		// 0x0698 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      IsAllowChangeWeapon : 1;                          		// 0x0698 (0x0004) [0x0000000000000000] [0x00000800] 
	float                                              AddVipLP;                                         		// 0x069C (0x0004) [0x0000000000000000]              
	class UClass*                                      SFAnnounceGameClass;                              		// 0x06A0 (0x0004) [0x0000000000000000]              
	class UCameraAnimInst*                             CameraAnimPlayer;                                 		// 0x06A4 (0x0004) [0x0000000000000000]              
	class UCameraAnimInst*                             currentCameraAnimInstant;                         		// 0x06A8 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x06AC (0x00C4) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     ShakeOffset;                                      		// 0x0770 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ShakeRot;                                         		// 0x077C (0x000C) [0x0000000000000000]              
	float                                              LastCameraTimeStamp;                              		// 0x0788 (0x0004) [0x0000000000000000]              
	class UClass*                                      MatineeCameraClass;                               		// 0x078C (0x0004) [0x0000000000000000]              
	float                                              FOVLinearZoomRate;                                		// 0x0790 (0x0004) [0x0000000000000000]              
	float                                              FOVNonlinearZoomInterpSpeed;                      		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVChangingTime;                                  		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugFreeCamRot;                                  		// 0x079C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShowPathTime;                                 		// 0x07A8 (0x0004) [0x0000000000000000]              
	struct FRotator                                    rotInput;                                         		// 0x07AC (0x000C) [0x0000000000000000]              
	class ASFEmit_Weather*                             WeatherEmitter;                                   		// 0x07B8 (0x0004) [0x0000000000000000]              
	struct FString                                     RespawnCameraAnimName;                            		// 0x07BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UCameraAnim*                                 RespawnCameraAnim;                                		// 0x07C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinCameraEffectDelay;                             		// 0x07CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFCustomBuildHelper*                        MCBuilder;                                        		// 0x07D0 (0x0004) [0x0000000000000000]              
	class USFOnlineSubsystemPC*                        OnlineSubPC;                                      		// 0x07D4 (0x0004) [0x0000000000000000]              
	class UClass*                                      ActiveRadioMessageClass;                          		// 0x07D8 (0x0004) [0x0000000000000000]              
	float                                              RadioMessageAutoHideTime;                         		// 0x07DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ObvCameraVel;                                     		// 0x07E0 (0x0004) [0x0000000000000000]              
	float                                              ObvCameraVelDecRate;                              		// 0x07E4 (0x0004) [0x0000000000000000]              
	int                                                ObvIPMin;                                         		// 0x07E8 (0x0004) [0x0000000000000000]              
	int                                                ObvIPMMax;                                        		// 0x07EC (0x0004) [0x0000000000000000]              
	float                                              MinDeathAnimTime;                                 		// 0x07F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxKillCamDuration;                               		// 0x07F4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxEndGameKillCamDuration;                        		// 0x07F8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FString                                     AfterDurationSoundModeName;                       		// 0x07FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APlayerReplicationInfo*                      KillCamKillerPRI;                                 		// 0x0808 (0x0004) [0x0000000000000000]              
	float                                              fWhippingGapTime;                                 		// 0x080C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLastWhippingTime;                                		// 0x0810 (0x0004) [0x0000000000000000]              
	float                                              MouseSensitivityDelta;                            		// 0x0814 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nIFFType;                                         		// 0x0818 (0x0004) [0x0000000000000000]              
	class ASFPawn*                                     LastSceneCapturedPawn;                            		// 0x081C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   FlashBangSoundCue;                                		// 0x0820 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             FlashBangAudioComponent;                          		// 0x0824 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                PrevTeamIndex;                                    		// 0x0828 (0x0004) [0x0000000000000000]              
	float                                              FlashBangSoundFadeOutTime;                        		// 0x082C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTextureRenderTarget2D*                      FlashBangRenderTarget;                            		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevWeaponWeapGroupIndex;                         		// 0x0834 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevWeaponWeapSlotIndex;                          		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PickupWeaponID;                                   		// 0x083C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PickupWeaponItemIDTable[ 0xE ];                   		// 0x0840 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	struct FPawnInventorySet                           PawnInventoryInfo;                                		// 0x0878 (0x0034) [0x0000000000002000]              ( CPF_Transient )
	struct FWeaponInventorySet                         WeaponInventoryInfo[ 0x3 ];                       		// 0x08AC (0x01A4) [0x0000000000002000]              ( CPF_Transient )
	struct FWeaponInventorySet                         BackupInventoryInfo[ 0x3 ];                       		// 0x0A50 (0x01A4) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     MissionAttackWeaponClass;                         		// 0x0BF4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MissionDefendWeaponClass;                         		// 0x0C00 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           MissionAdditionalWeaponClasses;                   		// 0x0C0C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DyingWeaponClassName;                             		// 0x0C18 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              GCCycleTime;                                      		// 0x0C24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastGCCycleStamp;                                 		// 0x0C28 (0x0004) [0x0000000000000000]              
	struct FName                                       CameraActorTag;                                   		// 0x0C2C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ACameraActor*                                ReservedCameraActor;                              		// 0x0C34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColorationInfo                             ColorationInfos[ 0x9 ];                           		// 0x0C38 (0x00FC) [0x0000000000004000]              ( CPF_Config )
	struct FColorationInfo                             TargetColoration;                                 		// 0x0D34 (0x001C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FColorationInfo                             StartColoration;                                  		// 0x0D50 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FColorationInfo                             CurrentColoration;                                		// 0x0D6C (0x001C) [0x0000000000000000]              
	float                                              ColorationDuration;                               		// 0x0D88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ColorationAdjustTime;                             		// 0x0D8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FKillCamExplosion >                 KillCamExplosionArray;                            		// 0x0D90 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMaterialEffectData                         MaterialEffectDatas[ 0x4 ];                       		// 0x0D9C (0x0050) [0x0000000000000000]              
	struct FName                                       MotionBlurEffectName;                             		// 0x0DEC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMotionBlurEffect*                           MotionBlurEffect;                                 		// 0x0DF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              KillCamMotionBlurMaxVelocity;                     		// 0x0DF8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillCamMotionBlurAmount;                          		// 0x0DFC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                vFlashBangColor;                                  		// 0x0E00 (0x0010) [0x0000000000000000]              
	float                                              NoInputExpireTime;                                		// 0x0E10 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastDamageShakeAdjustTime;                        		// 0x0E14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageShakeInterval;                              		// 0x0E18 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFPawn*                                     KillCamVictimPawn;                                		// 0x0E1C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              LastKillCamProjThrownTime;                        		// 0x0E20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredForeFOVAngle;                              		// 0x0E24 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForeFOVAngleChangeTime;                           		// 0x0E28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Last_HealthDamage;                                		// 0x0E2C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Last_ArmorDamage;                                 		// 0x0E30 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Last_Health;                                      		// 0x0E34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Last_Armor;                                       		// 0x0E38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Last_PlayerID;                                    		// 0x0E3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Last_HitType;                                     		// 0x0E40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Last_HitLocation;                                 		// 0x0E44 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Last_HitDist;                                     		// 0x0E50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     Last_HitBone;                                     		// 0x0E54 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LastDeath_HitDir;                                 		// 0x0E60 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                KillType_PiercingShot;                            		// 0x0E6C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                KillType_WallShot;                                		// 0x0E70 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              KillCamFadeTime;                                  		// 0x0E74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USceneTransitionEffect*                      SceneTransitionEffect;                            		// 0x0E78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpectatorTransitionWipeoutTime;                   		// 0x0E7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneTransitionEffectName;                        		// 0x0E80 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      OldViewTargetForWipeout;                          		// 0x0E88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DisconnectMaxTimeFromHost;                        		// 0x0E8C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisconnectMaxTimeToReturnToLobby;                 		// 0x0E90 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisconnectRealTimeFromHost;                       		// 0x0E94 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TotoalDisconnectTimeFromHost;                     		// 0x0E98 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     HostLogOutMessages;                               		// 0x0E9C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ForcedGameExitMessageArray;                       		// 0x0EA8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CapturingMessage;                                 		// 0x0EB4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CapturingFailedMsg;                               		// 0x0EC0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CapturingFailedNoSpaceMsg;                        		// 0x0ECC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              ServerNoticeTime;                                 		// 0x0ED8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           ChatTypeColor;                                    		// 0x0EDC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ChatTextColor;                                    		// 0x0EE8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                SpeedHackDetectType;                              		// 0x0EF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedHackAccumTime;                               		// 0x0EF8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastReceivedHeartBeatTime;                        		// 0x0EFC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSendHeartBeatTime;                            		// 0x0F00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SpeedHackDetectMargin;                            		// 0x0F04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpeedHackDetectFrequency;                         		// 0x0F08 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SpeedHackDecideCount;                             		// 0x0F0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ClientMinCountForHostDetectSpeedHack;             		// 0x0F10 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpraySpawnDelay;                                  		// 0x0F14 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SprayFadeInDelay;                                 		// 0x0F18 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpraySpawnRange;                                  		// 0x0F1C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SprayThickness;                                   		// 0x0F20 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SpraySize;                                        		// 0x0F24 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SprayEmissiveIntense;                             		// 0x0F28 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MaxSprayCounter;                                  		// 0x0F2C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SprayWarningMessageDelay;                         		// 0x0F30 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       SprayTextureParamName;                            		// 0x0F34 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       SprayEmissiveIntenseParamName;                    		// 0x0F3C (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       SpraySlotParamName;                               		// 0x0F44 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LastSpraySpawnTime;                               		// 0x0F4C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSprayKeyPressedTime;                          		// 0x0F50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     SprayDistanceNotice;                              		// 0x0F54 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SprayDelayTimeNotice;                             		// 0x0F60 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SprayWaitingForMatchNotice;                       		// 0x0F6C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SelectSprayEmblem;                                		// 0x0F78 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DontUseSprayAtThisActorMessage;                   		// 0x0F84 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HackDetectedMessage;                              		// 0x0F90 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0F9C (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFPlayerController.PlayerItemSetCache
	class ASFPointOfInterest*                          SFPOI;                                            		// 0x0FD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   RespawnCameraSound;                               		// 0x0FDC (0x0004) [0x0000000000000000]              
	class ASFPawn*                                     PawnForKillerOutline;                             		// 0x0FE0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPawnOutlineInfo >                  arrPawnOutlineInfo;                               		// 0x0FE4 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	int                                                CurrentScaleLevel;                                		// 0x0FF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFireTime;                                     		// 0x0FF4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            RequestedRPC;                                     		// 0x0FF8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USFSeqEvent_NotifyKeyInput* >        arrSeqEventNotifyKeyInput;                        		// 0x1004 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	int                                                StunKeyInputCounter;                              		// 0x1010 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       SavedPreviousStateName;                           		// 0x1014 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       DefaultSpectatorCameraMode;                       		// 0x101C (0x0008) [0x0000000000000000]              
	float                                              LastSendPingNotifyTime;                           		// 0x1024 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastShopGroupIndex;                               		// 0x1028 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ReducedRespawnDelay;                              		// 0x102C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSPendingObjectIcon >               PendingObjectIconArray;                           		// 0x1030 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TotalDeadTime;                                    		// 0x103C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FUsableInGameItemData >             InGameItemData;                                   		// 0x1040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentSP;                                        		// 0x104C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                InstantRespawnCount;                              		// 0x1050 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                VipGrade;                                         		// 0x1054 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDeadTime;                                     		// 0x1058 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FsCombatReport >                    SummaryCombatReports;                             		// 0x105C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DbgGFxAniIndex;                                   		// 0x1068 (0x0004) [0x0000000000000000]              
	int                                                MaxHackDetectCount;                               		// 0x106C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HackDetectCount;                                  		// 0x1070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ServerPackageCmd;                                 		// 0x1074 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     ServerPackagesRAW;                                		// 0x1078 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	TArray< struct FString >                           LocalPackages;                                    		// 0x1084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ServerPackages;                                   		// 0x1090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SendedPackageIdx;                                 		// 0x109C (0x0004) [0x0000000000000000]              
	int                                                AltFiremode;                                      		// 0x10A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             SkipAutoMessageList;                              		// 0x10A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PurchasedRandomWeaponID;                          		// 0x10B0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DefaultFunctionalItemClassNames;                  		// 0x10B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFPlayerLog                                DedicatePlayerLog;                                		// 0x10C0 (0x00B8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AddtionalScore;                                   		// 0x1178 (0x0004) [0x0000000000000000]              
	float                                              AddtionalLuckyPoint;                              		// 0x117C (0x0004) [0x0000000000000000]              
	float                                              AntiFatigueReduceRatio;                           		// 0x1180 (0x0004) [0x0000000000000000]              
	int                                                PlayerIsAdult;                                    		// 0x1184 (0x0004) [0x0000000000000000]              
	int                                                HealthItemID;                                     		// 0x1188 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CustomModeType;                                   		// 0x118C (0x0004) [0x0000000000000000]              
	TArray< int >                                      PendingThrowWeaponSlotIndex;                      		// 0x1190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetUserGameDataToDatabase__Delegate;            		// 0x119C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3371 ];

		return pClassPointer;
	};

	void ServerSetRequestEndGameExit ( class ASFPlayerReplicationInfo* SFPRI );
	void SendClientUserGameCondition ( class ASFPlayerReplicationInfo* SFPRI, struct FUserConditionData DediConditionInfo );
	void RequestUserGameCondition ( class ASFPlayerReplicationInfo* SFPRI );
	bool IsDisplayUserGameCondition ( );
	bool IsPrimaryWeapExigency ( );
	void SetDisplayUserGameCondition ( unsigned long bShowCondition );
	void ChangeCameraLensEffectByViewTarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
	void SetForcedDisableRevival ( class ASFPawn* AimPawn );
	void ClientSetIntermissionCutScene ( int Index );
	float GetEnableInteractionDist ( );
	void ObstacleLevelChanged ( class ASFObstaclesActor* ObstaclesActor );
	void CheckSetupObstacleAim ( class ASFObstaclesActor* AimTarget );
	bool SkipGunTracer ( struct FVector StartLocation, struct FVector EndLocation );
	void DrawTmpCursor ( class UCanvas* myCanvas, struct FVector2D CursorLoc );
	void RecivedPackageRaw ( );
	void DumpPackageListScript ( TArray< struct FString > PackageList );
	void DumpPackageList ( TArray< struct FString > PackageList, struct FString Title );
	void ClearDuppLine ( TArray< struct FString > Packages );
	void ReportNetPackageList ( );
	void RecivedPackageCmd ( );
	void SendServerPackagesRAW ( );
	void GetServerPackageDump ( );
	void serverUpdateDroppedExtraPart ( int PlayerID, int partIdx );
	void TestGFxAni ( int Amt );
	struct FWeaponInventorySet GetWeaponInventoryInfo ( int myInvSetSlot );
	bool IsUseHumanInventory ( );
	bool PostRestartPlayer ( class ASFGameInfo* newGameInfo );
	bool PreRestartPlayer ( unsigned long IsMatchInProgress );
	void ChangePawn ( struct FString PawnClassName );
	void SummaryCombatReport ( unsigned long bDieNow );
	void AppendCombatReport ( unsigned char CombatReportType, class ASFPlayerReplicationInfo* AttackerPRI, class ASFPlayerReplicationInfo* VictimPRI, int Damage, int WeaponID, int KillType, class UClass* DamageType );
	bool IsHoldZoomUse ( );
	void SetHoldZoom ( unsigned long bUseHoldZoom );
	bool IsActiveCombatReport ( );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventReceiveKillDeathLocalizedMessage ( class UClass* Message, int WeaponID, int KillType, class APlayerReplicationInfo* KillerPRI, class APlayerReplicationInfo* VictimPRI, class UObject* OptionalObject );
	void ClearRespawnTimers ( );
	void ClientInGameKickVoteResult ( unsigned char res );
	void ClientUpdateVoteRate ( int TotPlayer, int AcceptPlayer, int RefusePlayer, unsigned long bFinalResult );
	void ServerVoteToKick ( unsigned char eResult );
	void HandlingVoteToKick ( unsigned char KickState );
	void ServerInGameKickVoteStart ( struct FString CodeName );
	void ClientChatLogClientInGameKickVote ( unsigned char res );
	void ChatLogClientInGameKickVote ( unsigned char res );
	void ClientVoteStart ( );
	void HandleInGameKickVoteStart ( struct FString CodeName );
	void PreparedLocalWeapon ( class ASFWeapon* PreparedWeapon );
	void SpawnAIPet ( unsigned char AIType );
	void NotifyMissionActorDestroyed ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyMissionActorDamaged ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam, int DamageAmount );
	void NotifyEndGame ( );
	void ClientFailedPerformPurchase ( int ItemId );
	void ClientSucceedPerformPurchase ( int ItemId, int Price, int LogData );
	void FailedPerformPurchase ( int ItemId );
	void SucceedPerformPurchase ( int ItemId, int Price, int LogData );
	void CancelPurchase ( );
	void ServerCancelPurchase ( );
	void PerformPurchase ( int PlayerID, int ItemIndex, int GroupIndex );
	void ServerPerformPurchase ( int PlayerID, int ItemIndex, int GroupIndex );
	void ServerDeactivateStore ( );
	void UpdateCurrentShopItemList ( );
	void OnCanceledShopProcess ( );
	void OnSelectedShopItem ( int item_id, int GroupIndex );
	void DeactivateStore ( );
	void ServerActivateStore ( int ShopGroupIndex );
	bool ActivateStoreBase ( int ShopGroupIndex );
	bool CanReviveTargetPawn ( );
	bool ActivateStore ( int ShopGroupIndex );
	void ServerRequestDamageForProjectile ( class ASFPawn* Target, struct FSFTakeHitInfo TakeHitInfo, class AActor* DamageCauser );
	float GetDistanceto ( class AActor* Target );
	void SetElapsedTimeFromLogin ( float Min );
	void ClientNotifyDediValidationFailed ( unsigned long bItemValidFailed );
	void CheckItemValidation ( );
	void DelaySuicide ( float DelayTime );
	bool CanHideHitIndicator ( );
	bool eventCanHideCrossHair ( );
	bool CanUseEnemyArmBand ( );
	bool CanUseArmBand ( );
	bool eventCanUseEnemyCharacter ( );
	bool GetUsingEnemyCharacterOption ( );
	void ServerIFFMode ( unsigned char NewMode );
	void IFFMode ( unsigned char NewMode );
	void AutoTriggerRestartPlayer ( );
	void UpdatePawnOutlineInfo ( unsigned char PawnOutlineType, class ASFPawn* TargetPawn, unsigned long bTurnOn );
	void NotifyObserverFlashBangEffectEnd ( class ASFPawn* TakePawn );
	void NotifyObserverFlashBangEffectStart ( class ASFPawn* TakePawn );
	void NotifyPawnTakeDamage ( class ASFPawn* HittedPawn );
	bool AdjustViewRotation ( unsigned char ClientRoll, int View, float DeltaTime, struct FRotator* DeltaRot );
	bool AllowChangeWeapon ( );
	struct FString GetBindedKeyNameByDBA ( int edba );
	void NotifyDBNO ( class AController* InstigatedBy, class AController* Victim, unsigned char DBNOLevelNew );
	void NotifyWaveStarted ( int current_wave );
	void NotifyEnemyCountChanged ( );
	void OnModeMoneyChanged ( int IncreasedAmount );
	void BuyShopItem ( int ItemId, int GroupIndex );
	bool IsEnableInstantBuyItem ( );
	void HideInGameStoreUI ( );
	bool ShowInGameStoreUI ( );
	void DbgChallengeAnimation ( struct FName SupplyCode, int challenge_task_index );
	void SetFPS ( int FPS );
	void ClientPlaySpraySound ( class ASFPawn* SFP );
	void ServerPlaySpraySound ( );
	void ServerSpawnSprayByFile ( int SlotIndex, struct FString Filename, struct FVector HitLocation, struct FRotator SprayRot, struct FRotator ViewRot, unsigned long bBackFace );
	void ServerSpawnSprayByEmblemID ( int SlotIndex, int EmblemID, struct FVector HitLocation, struct FRotator SprayRot, struct FRotator ViewRot, unsigned long bBackFace );
	void GetSprayTargetDirection ( struct FVector* POVLoc, struct FRotator* POVRot );
	void SpawnSpray ( struct FString Filename );
	void GMemReport ( unsigned long bFullReport );
	void ToggleWeaponNameOfObserverMode ( );
	void ToggleSpectatorMode ( );
	void eventClientRemoveNotifyKey ( struct FName NewKeyName );
	void eventClientAddNotifyKey ( struct FName NewKeyName );
	void eventClientRemoveIgnoreKey ( struct FName NewKeyName );
	void eventClientAddIgnoreKey ( struct FName NewKeyName );
	void ServerInputNotifyKey ( struct FName NewKeyName );
	void eventInputNotifyKey ( struct FName NewKeyName );
	void OnToggleNotifyKeyInput ( class USFSeqAct_ToggleNotifyKeyInput* inAction );
	void OnToggleHUD ( class USeqAct_ToggleHUD* inAction );
	void ClientNotifyEarnedAward ( struct FName AwardName );
	void ServerNotifyEarnedAward ( struct FName AwardName );
	void NotifyEarnedAward ( struct FName AwardName, unsigned long bClientSideAward );
	void ServerPlayerEarnedAward ( struct FName AwardName );
	void InitPawnMoves ( );
	void UpdateKillerOutline ( unsigned long bFlag, class AActor* InKillerPawn );
	void ServerRequestAllPawnsLocation ( );
	void eventRequestAllPawnsLocation ( );
	void NotifyProjectileFinished ( class ASFProjectile* Proj );
	void NotifyProjectileFired ( class ASFProjectile* Proj );
	void PlayerRespawnCameraAnim ( );
	class UCameraAnim* GetRespawnCameraAnim ( );
	class APawn* GetMyRealPawn ( );
	void ServerChangeAllAIName ( struct FString NewName );
	void ChangeAllAIName ( struct FString NewName );
	void CheckForVehicles ( );
	void StopFiringWeapon ( );
	void StopFiringWeaponAfterTime ( float Time );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void DualTurretServerMove ( float TimeStamp0, unsigned long NewbDuck0, unsigned char ClientRoll0, int View0, float TimeStamp, struct FVector ClientLoc, unsigned long NewbDuck, unsigned char ClientRoll, int View );
	void TurretServerMove ( float TimeStamp, struct FVector ClientLoc, unsigned long NewbDuck, unsigned char ClientRoll, int View );
	class AVehicle* GetFoundVehicleToDrive ( );
	bool FindVehicleToDrive ( );
	void PKT_MESSENGER_InviteRepondAUTO ( class UPacket* recvPacket );
	void GameInviteRespond ( int FromUSN );
	void PKT_MESSENGER_GameInviteAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_GameInvite_REQ_OK ( class UPacket* recvPacket );
	void Report ( struct FString ReportText );
	class ASFPlayerReplicationInfo* FindHostPRI ( class AWorldInfo* InWorldInfo );
	void SetItemSetCache ( unsigned long bPawnCached, unsigned long bWeaponCached );
	void CachedWeaponItemSet ( class ASFPawn* SFP, int InventoryGroup, int* ItemSet );
	void CachePawnItemSet ( int PlayerID, int* ItemSet );
	void HideReaminTime ( );
	void ShowRemainTime ( int nTime, unsigned long bUrgent );
	void AddHUdChatMessage ( unsigned char ChatType, struct FString strChat, unsigned long bLocalizedMessage, unsigned long bIgnoreChatFilter );
	void eventDetectSpeedHack ( unsigned long bKick );
	void eventCheckHeartBeat ( float DeltaTime );
	void eventNotifyTwitchTVModeChanged ( unsigned long bSet );
	void eventNotifyVideoCaptureModeChanged ( unsigned long bSet, int nErrorType );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ServerGiveWeapon ( int WeaponID, unsigned long bTossWeapon );
	void eventKismet_SetObjectIcon ( class AActor* IconTargetActor, unsigned long IsRegisterObjectIcon, unsigned char ObjectIconType, unsigned char IconState, unsigned char ShowingIconTeamIndex );
	void OnAddMagazine ( class USFSeqAct_AddMagazine* AddMagazine );
	void OnGiveWeaponList ( class USFSeqAct_GiveWeaponList* GiveWeapon );
	void OnGiveWeapon ( class USFSeqAct_GiveWeapon* GiveWeapon );
	void OnGiveWeaponbyCondition ( class USFSeqAct_GiveWeaponbyCondition* GiveWeapon );
	void OnGiveItem ( class USFSeqAct_GiveItem* ActSeq );
	void OnSnatchWeaponGroup ( class USFSeqAct_SnatchWeaponGroup* ActSeq );
	void StopSound ( class USoundCue* TargetCue );
	void eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization );
	void ClientUpdatePRIWeight ( float GearWeight, float WeaponWeight );
	void ClientUpdateLastDamageForLog ( int HealthDamage, int ArmorDamage, int RemainHealth, int RemainArmor, int HitPlayerID, struct FString LastHitBone, int HitType, struct FVector HitLocation );
	void UpdateLastDamageForLog ( int HealthDamage, int ArmorDamage, int RemainHealth, int RemainArmor, int HitPlayerID, struct FString LastHitBone, int HitType, struct FVector HitLocation );
	void ServerChangedShowDebugDamage ( struct FName DebugType, unsigned long bShowDebugInfo );
	void ChangedShowDebugType ( struct FName DebugType, unsigned long bShowDebugInfo );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void NotifyPawnDied ( class ASFPawn* DiedPawn, class UClass* DamageType, struct FVector HitLocation );
	void eventNotifyExpiredNoInputTime ( unsigned long bWarn );
	void ServerUnUseAllController ( );
	void Use ( );
	void ServerUseAllController ( float Delay );
	void eventNotifySaveScreenShot ( struct FString ScreenShotPath );
	void eventNotifyTakeScreenShot ( struct FString ScreenShotPath );
	class ACameraActor* GetWorldCamera ( unsigned long bUseOldCamera );
	void ServerEndGame ( int WinningTeam );
	void eventEndGame ( int WinningTeam );
	void ServerEndRound ( unsigned long bKillAllPawn );
	void eventEndRound ( unsigned long bKillAllPawn );
	void ProjectileMaxSpeed ( float MaxSpeed );
	void ProjectileSpeed ( float Speed );
	void TestBreak ( );
	void SendGFxCC ( struct FString Cmd );
	void ServerSuicide ( );
	void UpdateViewTargetForSpectator ( );
	void eventNotifyClientBadConnection ( unsigned long bBadConnect );
	void ServerToSendNotResonseHost ( );
	void ReturnDueToBadConnectionTotheLobby ( );
	void eventNotifyBadConnectionAlert ( unsigned long bBadConnect );
	bool UpdateObjectIcon ( TArray< struct FStateIconType > StateIconTypes, unsigned char IconTypeRedTeam, unsigned char IconTypeBlueTeam, unsigned char IconShowTeam, struct FName currState, class AActor* MissionIconActor );
	bool ChangeObjectIconState ( class AActor* Obj, unsigned char State, unsigned char ShowFlag );
	bool UnRegisterObjectIconByType ( unsigned char IconType );
	bool UnRegisterObjectIcon ( class AActor* Obj );
	bool RegisterObjectIcon ( unsigned char IconTypeRedTeam, unsigned char IconTypeBlueTeam, class AActor* Obj, unsigned char State, unsigned char ShowingIconTeamIndex );
	void UpdatePendingObjectIcon ( );
	void RegisterObjectIconDirect ( class AActor* inActor, unsigned long bRegister, unsigned long bShowHP );
	void CE ( struct FName EventName );
	void CauseEvent ( struct FName EventName );
	void UpdateDefaultInventory ( );
	void ClientSetDefaultInventory ( int nInvenGroup, int nSlot );
	void TurnBack ( );
	void ExigencyAttack ( );
	void RemoveCameraLensEffect ( class UParticleSystem* LensEffectPS );
	bool FindCameraLensEffectEmitter ( class UParticleSystem* LensEffectPS );
	class UParticleSystemComponent* SpawnCameraLensEffect ( class UParticleSystem* LensEffectPS, unsigned long bAllowMultipleInstance, int DetermineLODLevel, float InLifeSpan );
	void DecodeTextFiles ( );
	void EncodeTextFiles ( );
	void ServerRequestPause ( int ClientCRC, unsigned long bForce );
	bool IsValidPauseCRC ( int ReceivedCRC, unsigned long bSecondPass );
	void ClientCheckPause ( int GameKeyCRC );
	void ServerPause ( );
	void PAUSE ( );
	bool IsAllowedToSetPause ( );
	void TCPServerToInsertHackLog ( unsigned char HackType, unsigned char RespondType, float DelayTime );
	bool eventIsInLeagueChannel ( );
	void SetUnderWaterSoundMode ( unsigned long bInside );
	bool IsStunned ( );
	void NotifyInvalidateStun ( unsigned long bStun );
	void eventNotifyEnterBlurArea ( unsigned long bEnter );
	void eventNotifyEndFlashBangEffect ( );
	void eventNotifyStartFlashBangEffect ( class ASFPawn_Player* SFPawn );
	void DisableFlashBangSound ( );
	void eventNotifyChangedViewtarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
	void PlayViewTargetChange ( );
	bool IsZoom1stView ( );
	bool PointProjectToLine ( struct FVector Point, struct FVector StartPos, struct FVector EndPos, struct FVector* ProjectPoint );
	bool ProcessWhippingSound ( struct FVector StartLocation, struct FVector EndLocation, struct FVector* CrossPoint );
	void ReturnPrevWeapon ( );
	void TurnOffSpectatorCamera ( );
	void TurnOnSpectatorCamera ( );
	void SetSpectatorCamera ( unsigned long bFlag );
	bool IsAbleDoubleZoom ( );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void ToggleVideoCapture ( int nType );
	void SetObvBlend ( unsigned long bSet );
	void StopDecreaseMasterVolume ( );
	void StartDecreaseMasterVolume ( );
	void StopIncreaseMasterVolume ( );
	void StartIncreaseMasterVolume ( );
	void SetMasterVolumeFromProfileValue ( float MasterValue );
	void DecreaseMasterVolume ( );
	void IncreaseMasterVolume ( );
	void SetMasterVolume ( float Delta );
	float GetMasterVolume ( );
	void TimerSoundModeChange ( );
	void SetSoundModeDuration ( struct FString ModeName, float Duration, struct FString AfterDurationMode );
	void ClearExplosionSoundMode ( );
	void SetExplosionSoundMode ( float Duration );
	void ClearSoundMode ( struct FString ModeName );
	bool SetSoundMode ( struct FString ModeName, float Duration );
	struct FVector2D GetViewportSize ( class ULocalPlayer* myLocalPlayer );
	void SetObvIPMMax ( int Value );
	void SetObvIPMin ( int Value );
	void SetObvCameraVelDecRate ( float Value );
	void SetObvCameraVel ( float Value );
	void ListPRI ( );
	void ForceGarbage ( );
	void PackageTest ( );
	void UpdateMouseControlSpeed ( );
	void SetMouseSpeed ( float InSensitivity, unsigned long bZoom );
	void StopMouseControlChange ( );
	void StartMouseControlChange ( unsigned long bIncrease );
	void KeyInputEnd ( );
	void KeyInputHome ( );
	void KeyInputF12 ( );
	void KeyInputF11 ( );
	void KeyInputF10 ( );
	void KeyInputF9 ( );
	void KeyInputF8 ( );
	void RequestInGameBombSPInfo ( );
	void ServerInstanceRespawn ( unsigned long bCostSP );
	void InstanceRespawn ( );
	bool IsEnoughSPForInstantRespawn ( );
	bool IsEnableVoteKickChoice ( );
	void KeyInputF7 ( );
	void KeyInputF6 ( );
	void KeyInputF5 ( );
	void KeyInputEscRelease ( );
	void WeaponSetChange ( int Type );
	void SaveWeaponSetInDataStore ( );
	void HideWeaponSetChange ( );
	void WSC ( int nSet );
	bool ForceShowWeaponSet ( );
	void ServerWSC ( int nSet );
	void KeyInputEnterRelease ( );
	void SetUserLevel ( unsigned char Level );
	void OnPingNotified ( class ASFPlayerReplicationInfo* CallerPRI, struct FVector TargetLocation, unsigned char PingType );
	void ServerSendPing ( unsigned char PingType, struct FVector TargetLocation );
	float GetPingDelay ( );
	bool CanUsePingNotice ( );
	bool SendPing ( unsigned char PingType, struct FVector TargetLocation );
	void AutoSendPing ( unsigned char PingType );
	void SetShowScoreBoard ( unsigned long bFlag );
	void ChangeZoomeRate ( );
	void ChangeSightCrosshair ( );
	void ShowAllPRIWeaponInfos ( );
	void SetWeatherEmitterLODLevel ( int Level );
	void SetWeatherEmitterHeight ( float Height );
	void StartWeatherEffects ( class UClass* WeatherClass, unsigned long UseCameraLensEffect );
	void StopWeatherEffects ( );
	void StartFire ( unsigned char FireModeNum );
	void AmmoCharge ( struct FString CodeName, float Percent );
	void HPCharge ( struct FString CodeName, int Percent );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void ToggleLagAnim ( );
	void ServerActiveBuff ( unsigned char BuffType, unsigned long bEffectOnly );
	void DebugActiveBuff ( unsigned char BuffType, unsigned long bEffectOnly );
	void OnBuffStateChanged ( unsigned char BuffType, unsigned char BuffState );
	void DeactiveBuff ( unsigned char BuffType );
	void ActiveBuff ( unsigned char BuffType, unsigned long bEffectOnly );
	void ServerAddMaxHP ( int nValue, int MaxValue );
	void ServerAddHP ( int AddHP, int MaxValue );
	void AddMaxHP ( int nValue, int MaxValue );
	void AddHP ( int nValue, int MaxValue );
	void ServerToggleInfiniteAmmo ( );
	void ToggleInfiniteAmmo ( );
	void ServerToggleInfiniteMagazine ( );
	void ToggleInfiniteMagazine ( );
	void ChatCode ( int N );
	void LDBTestCaseAuto ( );
	void SettoDefaultAll ( );
	void SettoDefaultKeyBinding ( );
	void InsertBindingKey ( struct FName KeyName, struct FString Command );
	void ReplaceBindingKey ( struct FName KeyName, struct FString Command );
	void WriteProfileSettings ( );
	int GetProfileIdData ( struct FName ProfileName );
	void SetProfileRangeData ( struct FName ProfileName, float Value );
	void ViewProfileRangeData ( struct FName ProfileName );
	float GetProfileFloatData ( struct FName ProfileName );
	void SetProfileFloatData ( struct FName ProfileName, float Value );
	void ViewProfileFloatData ( struct FName ProfileName );
	int GetProfileIntData ( struct FName ProfileName );
	void SetProfileIntData ( struct FName ProfileName, int Value );
	void ViewProfileIntData ( struct FName ProfileName );
	void SetProfileIdData ( struct FName ProfileName, int Value );
	void ViewProfileIdData ( struct FName ProfileName );
	bool HasValidProfileData ( );
	void TotalTestCaseNoExitManual ( );
	void TotalTestCaseNoExitAuto ( );
	void TotalTestCaseManual ( );
	void TotalTestCaseAuto ( );
	void SetVideoSetting ( unsigned char Setting, int Value );
	void SaveGamma ( );
	void SetGamma ( float Value );
	float GetGamma ( );
	void UserGameDataToDatabase ( );
	void ValidationCheckPlayerLog ( unsigned long bForce, unsigned long bMatchIsOver );
	void HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void SetPlayerLogDataReceived ( int ModeRewardCount, int NewSP, int NewSPGage, int NewExtraRewardCoin, int NewExtraRewardCoinGauge, int NewExtraRewardCoinState, int MiniGachaCoin );
	void PostProcessPlayerLogTransaction ( class UPacket* recvPacket );
	void PostProcessPlayerLog ( class UPacket* recvPacket );
	void PKT_UpdateGameScore_OK ( class UPacket* recvPacket );
	void PKT_DisconnectedFromServerMessage_Auto ( class UPacket* recvPacket );
	void PKT_ClanMessage_Auto ( class UPacket* Packet );
	void PKT_MESSENGER_AddBuddyFLAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_ChangeStatusAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_BuddyChatAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_BuddyChat_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetRareRewardUser_Auto ( class UPacket* recvPacket );
	void PKT_WhisperMessage_Auto ( class UPacket* recvPacket );
	void PKT_Whisper_REQ_OK ( class UPacket* recvPacket );
	void PKT_FeverTimeEventFinish_AUTO ( class UPacket* recvPacket );
	void PKT_FeverTimeEventStart_AUTO ( class UPacket* recvPacket );
	void PKT_RealTimeEventMsgReceived ( class UPacket* recvPacket );
	void PKT_ChatMessage_Auto ( class UPacket* recvPacket );
	void PKT_Say_REQ_OK ( class UPacket* recvPacket );
	void PKT_ServerNoticeMessage_Auto ( class UPacket* Packet );
	void PKT_SendGift_Auto ( class UPacket* Packet );
	void PKT_ExitGameMessage_Auto ( class UPacket* Packet );
	void NotifyPlayerIDChanged ( );
	void PKT_RoomUserStatusMessage_Auto ( class UPacket* Packet );
	void ReturnToLobby ( );
	void InGameKicked ( unsigned char InOutFromRoomReason );
	void PKT_ExitGame_REQ_OK ( class UPacket* Packet );
	void PKT_SendWeaponLogToDatabase_REQ_OK ( class UPacket* Packet );
	void DedicatedServerLogOutUSN ( int LogOutPlayerID );
	void PKT_LeftGameRoomMessage_Auto ( class UPacket* Packet );
	void ClientLogOutUSN ( int nPlayerID );
	void LogOutUSN ( int nPlayerID );
	void eventClearOnlineDelegates ( );
	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	void RegisterOnlineDelegates ( );
	void ClientArbitratedMatchEnded ( );
	void ServerShowPathToBase ( unsigned char TeamNum );
	void BasePath ( unsigned char num );
	void ClientReplacePawnMeshByFGC ( class ASFPawn* SFP, unsigned char ItemType, int GearID );
	void FreeGearChange ( int GearID );
	void ServerFGC ( int GearID );
	void ServerCWC ( int WeaponSetIndex );
	bool ServerFWC ( int nWeaponID );
	void ServerFOC ( int OptionID, unsigned long bSwitchWeap );
	void UpdateStunKeyInputCounter ( );
	void eventServerReduceStunTime ( );
	void ReleaseRight ( );
	void ReleaseLeft ( );
	void eventClientSetIgnoreInput ( unsigned long bFlag );
	bool IsLookInputIgnored ( );
	bool IsMoveInputIgnored ( );
	void eventSetIgnoreInput ( unsigned long bFlag );
	void SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI );
	void SetEye ( float CustomEyeHeight );
	void ResetFOV ( );
	void EndZoom ( );
	void eventResetCameraMode ( );
	void StopZoom ( );
	void StartZoomEx ( float NewDesiredFOV, float NewZoomInterpSpeed, unsigned long bIsDirectSet );
	void StartZoomNonlinear ( float NewDesiredFOV, float NewZoomInterpSpeed );
	void StartZoom ( float NewDesiredFOV, float NewZoomRate );
	void ForDebug ( class UObject* TestObject );
	float CalcFOV ( float CurrentFOV, float DestFOV, float DeltaTime, float* outFOVChangingTime );
	void AdjustFOV ( float DeltaTime );
	void GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList );
	void ServerUnUse ( );
	void eventDropAttachedTrigger ( );
	void eventUnUsedTrigger ( );
	void NotifyAddInventory ( class AInventory* NewItem );
	bool CheckDroppedWeapon ( );
	void ServerGiveDroppedWeapon ( class ASFDroppedPickup* DroppedWeapon );
	bool PerformedUseAction ( );
	void ServerTriggerUsedBy ( class AActor* TriggerdActor );
	bool TriggerInteracted ( );
	void ClearUseTimer ( );
	void PerformedUnUseAction ( );
	void UnUse ( );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void ChangedViewTarget ( );
	void ChangeReservedCameraActor ( class ACameraActor* NewCameraActor, float Delay );
	void ViewAPlayer ( int Dir );
	void ClientUpdateRemainingTime ( int newRemainingTime );
	void ClientRestart ( class APawn* NewPawn );
	void ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void WaitPawnForWeaponSwitch ( );
	void ClientReset ( );
	void UpdateStateForReset ( );
	bool GamePlayEndedState ( );
	void SetFPSChartValue ( float PendingMatchTime, int PlayerNumForClient );
	void ClientUpdateTeamIndex ( unsigned char NewTeamIndex );
	void UpdateTeamIndex ( unsigned char NewTeamIndex );
	void ResetPlayerMovementInput ( );
	void Reset ( );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void ResetMatineeCamera ( );
	bool ShouldClientReset ( class AActor* ActorToClientReset );
	void ResetForSFClientResetActors ( );
	void ResetEmitterPool ( );
	void ResetDecalMgr ( );
	void PlayMissionDemolishCameraAnim ( struct FVector vOrg );
	void ClientPlayTakeHit ( class AActor* DamageInstigator, struct FVector DamageDirection, int inDamage );
	void ViewShake ( float DeltaTime );
	void eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace );
	void PlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bIsDamageShake, float Dration );
	void StopCameraAnim ( class UCameraAnim* Anim, unsigned long bImmediate );
	void eventInitInputSystem ( );
	void ResetMaterialEffect ( unsigned long bForced );
	void EnableMotionBlurEffect ( unsigned long bEnable );
	void CreateMotionBlurEffect ( );
	void CreateWipeoutEffect ( );
	void CreateMaterialEffect ( );
	void eventSpawnPlayerCamera ( );
	void GivePawn ( class APawn* NewPawn, unsigned long bInputFlag );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void Camera ( struct FName NewMode );
	void PressAllDelete ( );
	void PressDelete ( );
	void PressInsert ( );
	void GetPlayerViewPointNative ( struct FVector* OutLocation, struct FRotator* OutRotation );
	bool UsingFirstPersonCamera ( );
	bool FixedCameraRotation ( );
	void SetLivePlayerRotation ( struct FRotator ViewRotation, float DeltaTime );
	void UpdateRotation ( float DeltaTime );
	bool IsInFront ( struct FVector vEnemyLoc );
	float GetAngularPositionInQuadrant ( struct FVector DamageDirection );
	unsigned char GetTeamNum ( );
	void eventGetPlayerViewPoint ( struct FVector* POVLocation, struct FRotator* POVRotation );
	void ClientSetBehindView ( unsigned long bNewBehindView );
	void SetBehindView ( unsigned long bNewBehindView );
	void SetCameraMode ( struct FName NewCamMode );
	bool IsRespawnCamera ( );
	bool SetDurabilityWeaponInWeaponSet ( int WeaponSetIndex, int PrimaryWeaponDurability, int SecondaryWeaponDurability, int SpecialWeaponDurability );
	void SetDurabilityBombSPCouponSet ( class ASFPlayerReplicationInfo* SFPRI );
	bool GetDurabilityAllCharItems ( TArray< int >* Durabilities );
	int GetDurabilityWeaponinWeaponSet ( int SetNo, int Slot, unsigned long bConvert );
	bool IsCustomModeProvideWeapon ( );
	bool IgnoreWeaponDurability ( );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void DeactivateCameraLensEffect ( class UParticleSystem* KillPS );
	void ClearCameraEffect ( );
	void SpawnCameraLensEffectDamaged ( class ASFPawn* LocalPawn );
	void SpawnCameraEffect ( unsigned long bDeath );
	void KeyBindingSettingFromProfile ( class USFProfileSettings* Profile );
	void ApplyUserProfilesforGame ( class USFProfileSettings* Profile );
	void InstanceGammaSetting ( float GammaValue );
	void SetVideoSettingForInGame ( int ScaleLevel, int ResX, int ResY, unsigned long bFullScreen );
	void SetVideoSettingForLobby ( class USFProfileSettings* Profile, int ResX, int ResY, unsigned long bLobbyFullScreen, unsigned long bInitialLobbyLoaded );
	void SoundSettingFromProfile ( class USFProfileSettings* Profile );
	void GameOptionSettingFromProfile ( class USFProfileSettings* Profile );
	void BlockSettingFromProfile ( class USFProfileSettings* Profile );
	void SettingsFromProfile ( );
	void InitSettingFromProfile ( );
	void RegisterCustomPlayerDataStores ( );
	void UpdateDamageShake ( float DeltaSeconds );
	void SetDamagShakeGoal ( struct FRotator ShakeGoal, float GoalTime );
	void ShowAllPawnZoomState ( );
	void ShowAllPawnAimInfo ( );
	void HandleSprinting ( );
	void HandleWalking ( );
	void CheckJumpOrDuck ( );
	void DrawHUD ( class AHUD* H );
	void ClientPawnDied ( );
	void KillCamPawnDied ( class APawn* P );
	void ResetPickupWeaponPropertiesForRoundOver ( );
	void ResetPickupWeaponPropertiesForPawnDied ( );
	void InitPickupWeaponProperties ( );
	void PawnDied ( class APawn* P );
	struct FName GetMainWeaponCode ( );
	void SetUsingWeaponSetIndex ( );
	void SendSetMiniGameScore ( unsigned long bZeroScore );
	void SetMiniGameEnd ( );
	void SetTutorialExp ( int EarnExp );
	void ExitGameToLobbyPlayerInfo ( );
	void ApplyPlayerLogToLobbyPlayerInfo ( );
	void RecordGameNetRates ( );
	void MatchHasEnded ( class UClass* InMessageClass, struct FName EventReason, int nRedWinRound, int nBlueWinRound, class AActor* EndGameFocus, unsigned char WinningTeamIndex, float Duration );
	void ProcessMatchEndEvent ( unsigned long bWinner );
	void RoundOverMessage ( class UClass* InMessageClass, int nRedWinRound, int nBlueWinRound, class AActor* EndGameFocus, unsigned long IsChangeTeam, unsigned char WinningTeamIndex, float Duration, float TeamChangeTime );
	void PreRoundOverMessage ( class UClass* InMessageClass, struct FName EventReason );
	void OnWaitingForNextMission ( float Duration );
	void OnChangeSHAreaIndex ( unsigned char nNewAreaIndex, float Duration );
	void ServerUpdateClanCSN ( int RedCSN, int BlueCSN, struct FString RedClanName, struct FString BlueClanName );
	void UpdateClanCSN ( );
	void OnMatchInProgress ( float Duration );
	void PerformGC ( );
	void OnWinningKill ( float Duration, class ASFPlayerReplicationInfo* KilledPRI, class ASFPlayerReplicationInfo* KillerPRI );
	void OnStartSwitchingSide ( float Duration );
	void InitStatNetRatesVariable ( );
	void SetMainWeaponItemCode ( );
	void ServerSetMainWeaponItemCode ( struct FString MainWeaponItemCode );
	void ServerSetCSN ( int CSN );
	void ServerSetForceItemCode ( struct FString ForceItemCode );
	void UpdateAdditionalScore ( );
	void ServerUpdateAddtionalScore ( float Score, float FatigueReduce, int Adult, float LuckyPoint );
	void DedicatePlayerLogSetting ( );
	void OnPreMatchInProgress ( float Duration, unsigned char RoundStartType );
	void OnPreCountDown ( float Duration );
	void OnPendingMatch ( );
	void ShowParticleLODBias ( );
	int GetParticleLODBias ( );
	void ServerWhoIsHost ( );
	void WhoIsHost ( );
	void MatchEndCutscene ( unsigned long bWinnerCutScene );
	void BaseEndMessgae ( class UClass* InMessageClass, int nRedWinRound, int nBlueWinRound, class AActor* EndGameFocus, unsigned char WinningTeamIndex, unsigned long bMatchOver );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void StartRespawnCamera ( );
	bool IsKillCamViewPawn ( class ASFPawn* inPawn );
	void ClearKillCamProjectileArray ( );
	void ClientSetKillCamProjectileArray ( class UClass* ProjectileClass, int KillCamProjID, struct FVector KillCamProjLoc, struct FRotator KillCamProjRot, struct FVector KillCamProjVel, int KillCamProjItemID, float KillCamProjLifeSpan );
	class AActor* SpawnDummyActor ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
	void eventSetKillCamProjectileArray ( );
	void eventUpdateKillCamExplosion ( );
	void AddKillCamExplosion ( struct FVector ExplosionLocation, struct FRotator ExplosionRotation, class UGameExplosion* ExplosionTemplate );
	void eventClientFinishedKillCam ( unsigned long bReset );
	void ClearDummyActorsForKillCam ( );
	void eventStartKillCam ( );
	void KillCamActivate ( unsigned long bIsWinningKill );
	void ChangeForegroundFOV ( float NewFOV, float Duration );
	void SetForegroundFOVAngle ( float NewFOV );
	void KillCamFinished ( );
	void ServerDoSkipKillCam ( );
	void KillCamFadeIn ( );
	void KillCamFadeOut ( );
	void ClearNextViewTargetForSpctator ( );
	void SetNextViewTargetForSpctator ( );
	void ServerSetNextViewTargetForSpctator ( );
	void ServerViewPrevPlayer ( );
	void ServerViewNextPlayer ( );
	void DoForcedRespawn ( );
	void ClientSetKillCamViewPawn ( class ASFPlayerReplicationInfo* KillerPRI );
	void NotifyKillCamPawnChanged ( );
	void StartSpectating ( );
	bool IsShowInstantRespawnWarning ( );
	float GetRespawnDelayForClientMsg ( );
	void DeadBegin ( );
	void InitLoginOptions ( );
	void PlayerRespawned ( );
	void Restart ( unsigned long bVehicleTransition );
	void ServerStartMatchInTournamentGame ( );
	void ServerSpectate ( );
	void SetIgnoreCullDistanceVolume ( unsigned long bIgnore );
	void ToggleWalking ( unsigned long bWalking );
	bool IsPawnZoomMode ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void ServerVerifyViewTarget ( );
	struct FVector2D GetMousePosition ( );
	void ToggleTopViewMode ( );
	void ToggleViewMode ( );
	bool AllowThirdPersonSpectating ( );
	void ServerGivePawn ( );
	void AskForPawn ( );
	void ServerSetWaitingForPawn ( unsigned long bFlag );
	void SwitchWeapon ( unsigned char T );
	void ServerSendRadioMessage ( class UClass* CurrentRadioMessageClass, int MessageIndex );
	void SendRadioMessage ( class UClass* CurrentRadioMessageClass, int MessageIndex );
	bool SkipAutoMessage ( struct FName messageID );
	void SendAutoMessage ( struct FName messageID, class ASFPawn* MessageFrom );
	void HandleRadioMessage ( int NumKey );
	void HideRadioMessage ( );
	void ShowRadioMessage ( class UClass* CurrentRadioMessage );
	void PageDown ( );
	void PageUp ( );
	void RaiseVoiceChatMenu ( unsigned char RadioMessageType );
	void TestProjectileFire ( );
	void NumKeyPressed ( int NumKey );
	void ClientAddHUDChatMessage ( unsigned char Type, struct FString strChat, unsigned long bIgnoreChatFilter );
	void ClientUnRegisterMessageOfKeyMessage ( );
	void ClientRegisterMessageOfKeyMessage ( struct FString LocalizedString, float MessageLifeTime, int MessageIndex );
	void ClientUnRegisterMessage ( class UClass* InMessageClass );
	void ClientRegisterMessage ( class UClass* InMessageClass, struct FString LocalizedString, float MessageLifeTime );
	void ClientReceiveEx ( class UClass* AnnounceClass, struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bDrawCaption, unsigned long bPlayVoice );
	void ClientReceive ( struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bDrawCaption );
	class UClass* GetSFAnnouncerGameClass ( );
	bool IsValidForSpawn ( );
	void TestClientDataReceived ( );
	bool CanRestartPlayer ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void CleanupPRI ( );
	void InitPlayerReplicationInfo ( );
	void NotifyLocalPlayerTeamReceived ( );
	void ServerSyncBombSPData ( struct FSBombSPData BombSpData );
	void ServerSyncWeaponTagStrings ( struct FString WeaponTagStrings );
	void RequestGameServerUserCondition ( );
	void RequestDediInfoToGameServer ( );
	void InitPRIBombSPData ( );
	void ServerSyncFunctionalItemList ( struct FString* ClientFunctionalItemList );
	void NotifyPRIInitialized ( unsigned long ViaReplicate );
	void BackupWeaponInventoryInfoInClient ( );
	void BackupWeaponInventoryInfo ( );
	void SettingUpWeaponInventorySet ( );
	void SetNoUsableWeaponGroup ( unsigned char WeapGroup, TArray< int > ExtraUsableWeaponID );
	void SetOnlyUsablePrimaryWeaponType ( TArray< unsigned char > OnlyUsablePrimaryWeaponType, TArray< int > ExtraUsableWeaponID );
	void SetOnlyUsableSpecialWeaponType ( TArray< struct FString > OnlyUsableSpecialWeaponClassName, TArray< int > ExtraUsableWeaponID );
	class UClass* GetWeaponClassByItemID ( int ItemId );
	void GetProvideInventorys ( int nSet, TArray< struct FString >* MyInventory );
	void GetAdditionalWeaponInventory ( int nSet, TArray< struct FString >* MyInventory );
	void GetMissionInventorys ( TArray< struct FString >* MyInventory );
	bool GetWeaponInventoryItemCode ( TArray< struct FString >* OutItemCodeArray );
	void GetWeaponInventorys ( int nSet, TArray< struct FString >* MyInventory );
	bool IsPlayerProvideWeaponEmpty ( TArray< int > InPlayerProvideWeaponArray );
	void GetInventory ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	void GetRandomProvideWeapon ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	void GetNotRandomProvideWeapon ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	void GetAddProvideInventorys ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< struct FString >* AddProvideWeaponClassName, TArray< class UClass* >* Inventorys );
	void AddInventoryItem ( TArray< struct FString >* WeaponClassName, TArray< class UClass* >* Inventorys );
	bool ReIterationCancleInventory ( int nCnt, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* Inventorys, unsigned char* CurrentWeapType, TArray< int >* PlayerProvideWeaponID );
	void eventInitStaticMeshComponentIDForSlice ( );
	void eventInitSeqEvent_NotifyKeyInput ( );
	void eventUpdateStreamingLevel ( );
	void DisplayDeath ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayDamage ( class AHUD* HUD, float* out_YL, float* out_YPos );
	int ValidateWeapSlotIndex ( int nSlot );
	bool IsValidateMainWeaponFromLocal ( int nSet );
	int ValidateWeapSetIndex ( int nSet );
	void SettingUpPIEInventoryInfos ( );
	void SetPawnInventorySetInfo ( TArray< int >* CharItemData );
	void ClearInventoryInfo ( int nSet );
	void SetWeapSlotInfo ( int nSet, int nSlot, TArray< int >* WeapSlotItemList );
	bool GetWeaponinfoStartIndexbySlot ( int nSlot, int* si, int* li );
	void SettingUpPIEWeaponInfo ( );
	void SettingUpHumanInventoryInfos ( );
	void ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType );
	void ClientSetOnlineStatusEx ( unsigned char NewTeamIndex, class UClass* GameInfoClass );
	void SetWeaponSetIndexInfo ( int CurrentIndex, int NextIndex );
	void SetupUsableInventoryInfo ( TArray< unsigned char > NoUsableWeaponGroup, TArray< unsigned char > OnlyUsablePrimaryWeaponType, TArray< struct FString > OnlyUsableSpecialWeaponClassName, TArray< int > ExtraUsableWeaponID );
	void SetupInventoryInfo ( TArray< unsigned char > NoUsableWeaponGroup, TArray< unsigned char > OnlyUsablePrimaryWeaponType, TArray< struct FString > OnlyUsableSpecialWeaponClassName, TArray< int > ExtraUsableWeaponID );
	void ApplyNextWeaponIndex ( );
	void SetWeaponSetInfo ( int Slot, TArray< int >* ItemList );
	void GetWeaponSetInfo ( int Slot, TArray< int >* ItemList );
	void WeaponStateChanged ( unsigned char WeaponStateNew, unsigned long bRedundance, class ASFWeapon* eventCaller );
	bool GetFunctionaItemCode ( TArray< struct FString >* OutItemCodeArray );
	bool GetPawnInventoryItemCode ( TArray< struct FString >* OutItemCodeArray );
	void ServerSyncPawnInventorySet ( struct FPawnInventorySet ClientInventoryInfo, unsigned char ClientCurrentWeapSetIndex, unsigned char ClientNextWeapSetIndex );
	void ServerSyncPickupWeaponInventory ( int WeaponID, int* WeaponItemIDTable );
	void ServerSyncWeaponInventorySet ( int nSetIndex, struct FWeaponInventorySet ClientWeaponInvSet, unsigned long bIsComplete );
	void SetPickupWeaponProperties ( int WeaponID, int* WeaponItemIDTable );
	void SyncItemDataToServer ( );
	bool IsPlayInEditor ( );
	void eventReceivedPlayer ( );
	void UpdateHostPlayerName ( );
	void SetLogInfoEachRound ( unsigned long bIsWinner );
	void ChallengePlayGameLog ( );
	void ProcessPVEPlayTimeEvent ( int GameModeID, int PlayTime );
	void SetLogInfoLastRound ( int CSN, unsigned char WinningTeamIndex );
	void SetLogInfoWeapPlayTime ( );
	bool SetLogInfoInit ( int nSet );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	void SendUploadKillInfo ( );
	void SendWeaponLogToDataBase ( struct FName EventType, int nEarnScore );
	void SetHitInfoLog ( class ASFPawn* HitPawn, unsigned char HitBody, int nWeaponID, class UClass* dmgType, int actualDamage );
	bool IsHackAbsorb ( );
	void SetHackUser ( unsigned long bIsHacked );
	unsigned char GetSubWeaponTypeForLog ( int ItemId );
	void IncreasePlayerLogData ( unsigned char logType, int nWeapSetIndex );
	void SetPlayerLogData ( unsigned char logType, int nValue, int nWeapSetIndex );
	int GetPlayerLogData ( unsigned char logType, int nWeapSetIndex );
	void HandlePickup ( class AInventory* Inv );
	void AdjustColorTypeByColorationInfo ( struct FColorationInfo coloration_info, float Duration, unsigned long is_fade_out );
	void AdjustColorationType ( unsigned char ColorationType, float Duration, unsigned long bInverse );
	bool IsColorationTypeActivated ( unsigned char ColorationType );
	void ClearColorationType ( float Duration );
	void CancelColorationType ( unsigned char ColorationType, float Duration );
	void ApplyColorationType ( unsigned char ColorationType, float Duration, unsigned long bInverse );
	bool IsFading ( float End, struct FColor FadeColor );
	bool IsFaded ( float End, struct FColor FadeColor );
	void SetCameraFadeAmount ( float FadeAmount );
	void SetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, float FadeDelay );
	void Fade ( float Start, float End, float fTime, struct FColor NewFadeColor, float Delay, unsigned long bEnableFading );
	bool GetEnableDoubleClickMovement ( );
	void eventPlayerTick ( float DeltaTime );
	void IncreateInstanceRespawnCount ( );
	void AddCurrentSP ( int Amount );
	void SetCurrentSP ( int NewSP );
	void eventReplicatedEvent ( struct FName VarName );
	void SetAudioComponent ( class UAudioComponent* AC );
	void SetUserGameDataToDatabase ( );
};

UClass* ASFPlayerController::pClassPointer = NULL;

// Class SFGame.SFEntryPlayerController
// 0x0058 (0x1200 - 0x11A8)
class ASFEntryPlayerController : public ASFPlayerController
{
public:
	int                                                PreviewWeaponID;                                  		// 0x11A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPreviewDefCharacter : 1;                         		// 0x11AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEnableGFxUISystem : 1;                           		// 0x11AC (0x0004) [0x0000000000000000] [0x00000002] 
	struct FName                                       LobbyStep;                                        		// 0x11B0 (0x0008) [0x0000000000000000]              
	TArray< class UAudioComponent* >                   LobbySoundComponent;                              		// 0x11B8 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FScriptDelegate >                   ScreenshotNotiListeners;                          		// 0x11C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCodeNameCompleted__Delegate;                  		// 0x11D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadyToInputCodeName__Delegate;               		// 0x11DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnScreenShotCaptured__Delegate;                 		// 0x11E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNotifyExpiredNoInputTime__Delegate;           		// 0x11F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3373 ];

		return pClassPointer;
	};

	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	void PingNotifySelf ( );
	void SetupInventoryInfo ( TArray< unsigned char > NoUsableWeaponGroup, TArray< unsigned char > OnlyUsablePrimaryWeaponType, TArray< struct FString > OnlyUsableSpecialWeaponClassName, TArray< int > ExtraUsableWeaponID );
	void SetPlayerIsAdult ( int is_adult );
	void eventNotifySaveScreenShot ( struct FString ScreenShotPath );
	void RemoveScreenshotNotifyDelegate ( struct FScriptDelegate InDelegate );
	void AddScreenshotNotifyDelegate ( struct FScriptDelegate InDelegate );
	void NoCheckBalance ( );
	void eventUpdateStreamingLevel ( );
	void ReturnToLobby ( );
	void OnLobbySoundFinished ( class UAudioComponent* AC );
	void StopLobbySound ( class USoundCue* NewSoundCue );
	class UAudioComponent* PlayLobbySound ( class USoundCue* NewSoundCue, unsigned long bIsOverlapSound );
	void ResetNoInputElapsedTime ( );
	void eventNotifyExpiredNoInputTime ( unsigned long bWarn );
	void CheckItemValidation ( );
	void UpdateHostPlayerName ( );
	void OnNotifyExpiredNoInputTime ( );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SetShowScoreBoard ( unsigned long bFlag );
	void StopMouseControlChange ( );
	void StartMouseControlChange ( unsigned long bIncrease );
	void ToggleGFxUISystem ( );
	void FullBodyQueuingAnim ( struct FName AnimType );
	void TestLogIn ( );
	void eventGetWeaponLobbyAnimSet ( int WeaponID, struct FName* WeaponSocket, class UAnimSet** LobbyCharAnimSet, class UAnimTree** LobbyWeapAnimTree, class UAnimSet** LobbyWeapAnimSet );
	class UAnimSet* GetLobbyCharAnimSet ( class UClass* WeapClass );
	void SetLobbyStep ( struct FName currentStep );
	void SetPreviewWeaponID ( int WeaponID );
	void UpdateClanCSN ( );
	void eventNotifyBadConnectionAlert ( unsigned long bBadConnect );
	void AdjustColorationType ( unsigned char ColorationType, float Duration, unsigned long bInverse );
	void eventOnInitCodeName ( );
	void eventOnEndCodeName ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void SetCameraMode ( struct FName NewCamMode );
	void SetSpectatorCamera ( unsigned long bFlag );
	void eventPlayerTick ( float DeltaTime );
	void RegisterOnlineDelegates ( );
	void eventPostBeginPlay ( );
	void OnScreenShotCaptured ( struct FString Filename );
	void OnReadyToInputCodeName ( );
	void OnCodeNameCompleted ( );
};

UClass* ASFEntryPlayerController::pClassPointer = NULL;

// Class SFGame.SFObserverController
// 0x0050 (0x11F8 - 0x11A8)
class ASFObserverController : public ASFPlayerController
{
public:
	unsigned long                                      IsTranslucentView : 1;                            		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowIFFParticle : 1;                             		// 0x11A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSetRenderOptions : 1;                            		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsDrawModeInfo : 1;                              		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bShowHUDCodeName : 1;                             		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bShowMinimap : 1;                                 		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bShowLinebottom : 1;                              		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bShowCombatMsg : 1;                               		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bUseShowMinimap : 1;                              		// 0x11A8 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bUseShowCombatMsg : 1;                            		// 0x11A8 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bUseShowLineBottom : 1;                           		// 0x11A8 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	class USFCCTV*                                     CCTV;                                             		// 0x11AC (0x0004) [0x0000000000000000]              
	unsigned char                                      OldViewMode;                                      		// 0x11B0 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentViewMode;                                  		// 0x11B1 (0x0001) [0x0000000000000000]              
	unsigned char                                      OldViewTeam;                                      		// 0x11B2 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentViewTeam;                                  		// 0x11B3 (0x0001) [0x0000000000000000]              
	unsigned char                                      ShowArmBandMode;                                  		// 0x11B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      PrevArmBandMode;                                  		// 0x11B5 (0x0001) [0x0000000000000000]              
	struct FVector                                     OldLocation;                                      		// 0x11B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    OldRotation;                                      		// 0x11C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInterface*                          TranslucentRedMaterial;                           		// 0x11D0 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          TranslucentBlueMaterial;                          		// 0x11D4 (0x0004) [0x0000000000000000]              
	class UMaterialInterface*                          TranslucentDefaultMaterial;                       		// 0x11D8 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            DrawOutlineTeamList;                              		// 0x11DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                CurrentDrawOutlineIdx;                            		// 0x11E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ProjectileTrailName;                              		// 0x11EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3375 ];

		return pClassPointer;
	};

	bool LimitFunctionCam ( unsigned char ViewMode );
	void NotifyProjectileFinished ( class ASFProjectile* Proj );
	void NotifyProjectileFired ( class ASFProjectile* Proj );
	bool IsFirstPersonViewMode ( );
	void ToggleCombatMsg ( );
	void ToggleLinebottom ( );
	void ToggleMinimap ( );
	void ToggleHUDCodeName ( );
	void ToggleChattingLog ( );
	void ToggleModeInfo ( );
	void ToggleHPBar ( );
	void KeyInputF9 ( );
	void eventDestroyed ( );
	void MatchHasEnded ( class UClass* InMessageClass, struct FName EventReason, int nRedWinRound, int nBlueWinRound, class AActor* EndGameFocus, unsigned char WinningTeamIndex, float Duration );
	void ViewAPlayer ( int Dir );
	void ClearNextViewTargetForSpctator ( );
	void SetNextViewTargetForSpctator ( );
	void ChangeCCTVInfoLocation ( int Index );
	void SetCCTVInfo ( int Index );
	void eventSetIgnoreInput ( unsigned long bFlag );
	void ServerViewAPlayerBySlotIndex ( int Index, unsigned long DirectInput );
	bool GetVaildViewTargets ( TArray< class ASFPlayerReplicationInfo* >* ValidViewTargets );
	void RemoveAllOutline ( );
	unsigned char GetCurrentDrawOutlineTeam ( );
	bool IsDrawableOutlinePawn ( class ASFPawn* DrawTargetPawn );
	bool GetDrawTargetPawnList ( unsigned char DrawTeam, TArray< class ASFPawn* >* DrawPawnList );
	void DrawPawnOutline ( unsigned char DrawTeam, unsigned long bDrawOutline );
	unsigned char GetOutlineTypeFromTeam ( unsigned char TeamType );
	void DrawPlayerOutline ( unsigned char DrawTeam );
	void ToggleDrawOutline ( );
	void ChangeSpectateCamera ( );
	void NumberKeyPressed ( int Index );
	void SetCameraMode ( struct FName NewCamMode );
	void eventSetSkeletalMeshComponentOnlyObserverSee ( unsigned long NewObserverSee );
	void ChangeTranslucentViewMode ( unsigned long NewTranslucentView );
	void ChangeSpectateState ( );
	bool ChangeCurrentProperties ( unsigned char ViewMode );
	void OnStartSwitchingSide ( float Duration );
	void ServerChangeViewMode ( unsigned char ViewMode );
	void ChangeViewMode ( unsigned char ViewMode );
	void ExecChangeViewMode ( unsigned char ViewMode );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void ToggleObserverHud ( );
	void ToggleArmBand ( );
	void ExecChangedArmBandMode ( );
	void UpdateTeamIndex ( unsigned char NewTeamIndex );
	void ChangeViewTeamIndex ( );
	void ExecToggleIFFParticle ( );
	void NormalSpeed ( );
	void MoreSpeed ( );
	void eventUpdateStreamingLevel ( );
	void eventPostBeginPlay ( );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	bool UsingFirstPersonCamera ( );
	void SetObserverRenderOptions ( unsigned long UseRenderOptions );
	void ChangeTranslucentView ( unsigned long NewTranslucentView );
};

UClass* ASFObserverController::pClassPointer = NULL;

// Class SFGame.SFZombieHideSeekPlayerController
// 0x0030 (0x11D8 - 0x11A8)
class ASFZombieHideSeekPlayerController : public ASFPlayerController
{
public:
	class AActor*                                      TargetZombie;                                     		// 0x11A8 (0x0004) [0x0000000000000000]              
	float                                              KillTimeMax;                                      		// 0x11AC (0x0004) [0x0000000000000000]              
	float                                              KillTimeCurrent;                                  		// 0x11B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsInteractionUI : 1;                              		// 0x11B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOldPressingUsedKey : 1;                          		// 0x11B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsBeginInteraction : 1;                           		// 0x11B4 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              KillingZombieGaugeRatio;                          		// 0x11B8 (0x0004) [0x0000000000000000]              
	float                                              CurrentTickTime;                                  		// 0x11BC (0x0004) [0x0000000000000000]              
	float                                              KillingGaugeRatio;                                		// 0x11C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InjectionTime;                                    		// 0x11C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AddHP;                                            		// 0x11C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnableZombieInteractionDist;                      		// 0x11CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnableHumanInteractionDist;                       		// 0x11D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InteractionCancelCounter;                         		// 0x11D4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3377 ];

		return pClassPointer;
	};

	void eventNotifyChangedViewtarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
	void Camera ( struct FName NewMode );
	void WeaponSetChange ( int Type );
	void StartAltFire ( unsigned char FireModeNum );
	void ActiveMissionWeapon ( unsigned char eMissionType );
	void GetInventory ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	void PerformedUnUseAction ( );
	void InteractionAnimCancel ( );
	void ReplicationZombieInteraction ( unsigned long IsInteraction );
	void EndKillingZombieAI ( );
	void StartKillingZombieAI ( class AActor* TargetActor );
	void NotifyServerZombieTarget ( class AActor* TargetActor );
	void NotifyZombieTarget ( class AActor* TargetActor );
	void ActivateDeadZombie ( );
	void eventEndZombieInteraction ( );
	void eventBeginZombieInteraction ( class AActor* NewTargetZombie );
	bool eventCheckInteractionDist ( class AActor* TargetActor, float* fDist );
	void SetKilling ( class AActor* TargetActor );
	void UnSetKilling ( );
	void InteractionGaugeClear ( );
	void FinishKilling ( );
	bool InteractionGauge ( float DeltaTime );
	bool InteractionCancel ( );
	void eventPlayerTick ( float DeltaTime );
	void StartFire ( unsigned char FireModeNum );
};

UClass* ASFZombieHideSeekPlayerController::pClassPointer = NULL;

// Class SFGame.SFAnimBlendBase
// 0x001C (0x0134 - 0x0118)
class USFAnimBlendBase : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ChildBlendTimes;                                  		// 0x011C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AnimStartTime;                                    		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      nKeyAnimChild;                                    		// 0x012C (0x0001) [0x0000000000000000]              
	unsigned char                                      nReservedAnimChild;                               		// 0x012D (0x0001) [0x0000000000000000]              
	unsigned long                                      bUseReservedAnimChild : 1;                        		// 0x0130 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreRootPlayChildAnim : 1;                     		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3379 ];

		return pClassPointer;
	};

	void SetAnimNodeBlendLength ( int NodeNo, float NewTime );
	void ProcessReservedAnimChild ( );
	void ClearReserveNextAnim ( );
	bool IsReservedAnim ( int nKeyAni, int nNextNode );
	void SetReserveNextAnim ( int nKeyAni, int nNextNode );
	void eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime );
	void SetActiveChildEx ( int ChildIndex, unsigned long bGetDefault, unsigned long bKeepPlayTime );
	float SetAnimNodeChildPlayLength ( int Idx, float fTime );
	float SetAllAnimNodeChildPlayLength ( float fTime, unsigned long bRecursive );
	void SetActiveChild ( int ChildIndex, float InBlendTime );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
	void PlayActiveChildAni ( float StartTime );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
	float GetAnimDuration ( int ChildIndex );
	float GetBlendTime ( int ChildIndex, unsigned long bGetDefault );
};

UClass* USFAnimBlendBase::pClassPointer = NULL;

// Class SFGame.SFAnimBaseBlendNode
// 0x0008 (0x013C - 0x0134)
class USFAnimBaseBlendNode : public USFAnimBlendBase
{
public:
	class ASFPawn_AI*                                  SFPawnOwner;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ASFPawn*                                     PawnOwner;                                        		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3381 ];

		return pClassPointer;
	};

};

UClass* USFAnimBaseBlendNode::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByAimState
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByAimState : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3383 ];

		return pClassPointer;
	};

	int GetActionNum ( );
	void eventBlendByAimState ( );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByAimState::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByAimStateThird
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByAimStateThird : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3385 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByAimStateThird::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByAttackEnable
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByAttackEnable : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3387 ];

		return pClassPointer;
	};

	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByAttackEnable::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByCharging
// 0x0008 (0x013C - 0x0134)
class USFAnimBlendByCharging : public USFAnimBlendBase
{
public:
	unsigned char                                      WeaponStateOld;                                   		// 0x0134 (0x0001) [0x0000000000000000]              
	unsigned long                                      bChargingOld : 1;                                 		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3389 ];

		return pClassPointer;
	};

	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByCharging::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByCoverType
// 0x0004 (0x0138 - 0x0134)
class USFAnimBlendByCoverType : public USFAnimBlendBase
{
public:
	class ASFPawn_AI*                                  SFPawnOwner;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3391 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByCoverType::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByDirection
// 0x003C (0x0170 - 0x0134)
class USFAnimBlendByDirection : public USFAnimBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              DirAngle;                                         		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirBlendPerc;                                     		// 0x0140 (0x0004) [0x0000000000000000]              
	TArray< float >                                    DirWeight;                                        		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    SkelRotWeight;                                    		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bUseScaleRateBySpeed : 1;                         		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FStandardAnimVelocityStruct                 StandardAnimVelocity;                             		// 0x0160 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3393 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByDirection::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByFall
// 0x0001 (0x0135 - 0x0134)
class USFAnimBlendByFall : public USFAnimBlendBase
{
public:
	unsigned char                                      FallState;                                        		// 0x0134 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3395 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float InBlendTime );
};

UClass* USFAnimBlendByFall::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByFireState
// 0x0001 (0x0135 - 0x0134)
class USFAnimBlendByFireState : public USFAnimBlendBase
{
public:
	unsigned char                                      WeaponStateOld;                                   		// 0x0134 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3397 ];

		return pClassPointer;
	};

	void eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByFireState::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByHasAmmo
// 0x0010 (0x0144 - 0x0134)
class USFAnimBlendByHasAmmo : public USFAnimBlendBase
{
public:
	unsigned long                                      bCheckbyMag : 1;                                  		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                nCondiAmmoCount;                                  		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nOldActiveChild;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                nOldAmmo;                                         		// 0x0140 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3399 ];

		return pClassPointer;
	};

	void eventOnBecomeRelevant ( );
	void CheckAnimNode ( int nBaseAmmo );
	int GetBaseAmmo ( );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByHasAmmo::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByHitState
// 0x0004 (0x0138 - 0x0134)
class USFAnimBlendByHitState : public USFAnimBlendBase
{
public:
	int                                                HitStateOld;                                      		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3401 ];

		return pClassPointer;
	};

	int GetHitState ( );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByHitState::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByLadderDirection
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByLadderDirection : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3403 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByLadderDirection::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByLobbyPreview
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByLobbyPreview : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3405 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByLobbyPreview::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByLobbyWeapon
// 0x00A0 (0x01D4 - 0x0134)
class USFAnimBlendByLobbyWeapon : public USFAnimBlendBase
{
public:
	TArray< struct FLobbyStepInfo >                    LobbyStep;                                        		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            MustPlayingLobbyStep;                             		// 0x0140 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                WeaponAnimsetIndex;                               		// 0x014C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       LobbyStepName;                                    		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       PrevLobbyStepName;                                		// 0x0158 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevWeaponID;                                     		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0164 (0x000C) MISSED OFFSET
	struct FQueuingChildInfo                           QueuingChild;                                     		// 0x0170 (0x0060) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bIsFemale : 1;                                    		// 0x01D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3407 ];

		return pClassPointer;
	};

	void OnInit ( );
};

UClass* USFAnimBlendByLobbyWeapon::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByPosture
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByPosture : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3409 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByPosture::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByShellCount
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendByShellCount : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3411 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByShellCount::pClassPointer = NULL;

// Class SFGame.SFAnimBlendBySightMode
// 0x0004 (0x0138 - 0x0134)
class USFAnimBlendBySightMode : public USFAnimBlendBase
{
public:
	class ASFWeapon*                                   WeaponOwner;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3413 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendBySightMode::pClassPointer = NULL;

// Class SFGame.SFAnimBlendBySprint
// 0x0004 (0x0138 - 0x0134)
class USFAnimBlendBySprint : public USFAnimBlendBase
{
public:
	class ASFWeapon*                                   WeaponOwner;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3415 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendBySprint::pClassPointer = NULL;

// Class SFGame.SFAnimBlendBySprintFirst
// 0x0001 (0x0135 - 0x0134)
class USFAnimBlendBySprintFirst : public USFAnimBlendBase
{
public:
	unsigned char                                      WeaponStateOld;                                   		// 0x0134 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3417 ];

		return pClassPointer;
	};

	void eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventCheckEndSprintLinkAnim ( );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendBySprintFirst::pClassPointer = NULL;

// Class SFGame.SFAnimBlendBySprintThird
// 0x0008 (0x013C - 0x0134)
class USFAnimBlendBySprintThird : public USFAnimBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTheMinimumSpeedFromPhysicsVolume : 1;         		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3419 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendBySprintThird::pClassPointer = NULL;

// Class SFGame.SFAnimBlendBySteady
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendBySteady : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3421 ];

		return pClassPointer;
	};

	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
};

UClass* USFAnimBlendBySteady::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByTransition
// 0x0020 (0x0154 - 0x0134)
class USFAnimBlendByTransition : public USFAnimBlendBase
{
public:
	class ASFPawn_AI*                                  SFPawnOwner;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< unsigned char >                            PrevCoverActionBypassIntro;                       		// 0x0138 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            CoverActionByPassOutro;                           		// 0x0144 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bPlayingIntro : 1;                                		// 0x0150 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlayingOutro : 1;                                		// 0x0150 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayedOutro : 1;                                 		// 0x0150 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUpdatePawnActionFiringFlag : 1;                  		// 0x0150 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3423 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByTransition::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByWeaponExtraMode
// 0x0004 (0x0138 - 0x0134)
class USFAnimBlendByWeaponExtraMode : public USFAnimBlendBase
{
public:
	int                                                ModeStateNow;                                     		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3425 ];

		return pClassPointer;
	};

	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByWeaponExtraMode::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByWeaponExtraModeChanging
// 0x0004 (0x0138 - 0x0134)
class USFAnimBlendByWeaponExtraModeChanging : public USFAnimBlendBase
{
public:
	int                                                ModeStateNow;                                     		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3427 ];

		return pClassPointer;
	};

	void ChangeWeaponExtraMode ( );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendByWeaponExtraModeChanging::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByWeaponState
// 0x0001 (0x0135 - 0x0134)
class USFAnimBlendByWeaponState : public USFAnimBlendBase
{
public:
	unsigned char                                      WeaponState;                                      		// 0x0134 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3429 ];

		return pClassPointer;
	};

	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
	bool IsValidMesh ( class ASFWeaponAttachment* WeapAttach );
};

UClass* USFAnimBlendByWeaponState::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByZoomState
// 0x0001 (0x0135 - 0x0134)
class USFAnimBlendByZoomState : public USFAnimBlendBase
{
public:
	unsigned char                                      WeaponStateOld;                                   		// 0x0134 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3431 ];

		return pClassPointer;
	};

	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
	void SetActiveChild ( int ChildIndex, float InBlendTime );
};

UClass* USFAnimBlendByZoomState::pClassPointer = NULL;

// Class SFGame.SFAnimBlendForGLauncher
// 0x0000 (0x0134 - 0x0134)
class USFAnimBlendForGLauncher : public USFAnimBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3433 ];

		return pClassPointer;
	};

	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimBlendForGLauncher::pClassPointer = NULL;

// Class SFGame.SFAnimBlendForPreAnim
// 0x0001 (0x0135 - 0x0134)
class USFAnimBlendForPreAnim : public USFAnimBlendBase
{
public:
	unsigned char                                      PlayingInputNodeIndex;                            		// 0x0134 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3435 ];

		return pClassPointer;
	};

	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};

UClass* USFAnimBlendForPreAnim::pClassPointer = NULL;

// Class SFGame.SFAnimCoverBlend
// 0x0009 (0x013D - 0x0134)
class USFAnimCoverBlend : public USFAnimBlendBase
{
public:
	class ASFPawn_AI*                                  SFPawnOwner;                                      		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdatePawnActionFiringFlag : 1;                  		// 0x0138 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      AnimCoverAction;                                  		// 0x013C (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3437 ];

		return pClassPointer;
	};

};

UClass* USFAnimCoverBlend::pClassPointer = NULL;

// Class SFGame.SFAnimBlendByRandomPlay
// 0x000C (0x0124 - 0x0118)
class USFAnimBlendByRandomPlay : public UAnimNodeBlendList
{
public:
	TArray< float >                                    Chance;                                           		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3439 ];

		return pClassPointer;
	};

};

UClass* USFAnimBlendByRandomPlay::pClassPointer = NULL;

// Class SFGame.SFAnimNodeAimOffset
// 0x0008 (0x0154 - 0x014C)
class USFAnimNodeAimOffset : public UAnimNodeAimOffset
{
public:
	float                                              TurnInPlaceOffset;                                		// 0x014C (0x0004) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	class ASFPawn_AI*                                  SFPawnOwner;                                      		// 0x0150 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3441 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeAimOffset::pClassPointer = NULL;

// Class SFGame.SFAnimNodeCopyBoneTranslation
// 0x0027 (0x011C - 0x00F5)
class USFAnimNodeCopyBoneTranslation : public UAnimNodeBlendBase
{
public:
	class UAnimNodeAimOffset*                          CachedAimNode;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	struct FName                                       OldAimProfileName;                                		// 0x00FC (0x0008) [0x0000000000000000]              
	TArray< struct FBoneCopyInfo >                     DefaultBoneCopyArray;                             		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3443 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeCopyBoneTranslation::pClassPointer = NULL;

// Class SFGame.SFAnimNodeRandomIdle
// 0x0004 (0x0130 - 0x012C)
class USFAnimNodeRandomIdle : public UAnimNodeRandom
{
public:
	int                                                DefaultAnimIndex;                                 		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3445 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeRandomIdle::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSequence
// 0x0006 (0x0140 - 0x013A)
class USFAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned long                                      bRestartWhenActivate : 1;                         		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3447 ];

		return pClassPointer;
	};

	float SetAnimNodePlayLength ( float fTime );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void eventTickAnim ( float DeltaSeconds, float TotalWeight );
};

UClass* USFAnimNodeSequence::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSeq_Debug
// 0x0000 (0x0140 - 0x0140)
class USFAnimNodeSeq_Debug : public USFAnimNodeSequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3449 ];

		return pClassPointer;
	};

	void eventScriptReplayAnim ( );
	void eventScriptStopAnim ( );
	void eventScriptPlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
};

UClass* USFAnimNodeSeq_Debug::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSlot
// 0x0004 (0x0120 - 0x011C)
class USFAnimNodeSlot : public UAnimNodeSlot
{
public:
	unsigned long                                      bForceResetWhenCeaseRelevant : 1;                 		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3451 ];

		return pClassPointer;
	};

	void eventOnCeaseRelevant ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
	void AccelerateBlend ( float BlendAmount );
};

UClass* USFAnimNodeSlot::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSlotAccessory
// 0x0004 (0x0124 - 0x0120)
class USFAnimNodeSlotAccessory : public USFAnimNodeSlot
{
public:
	class ASFWeapon*                                   WeaponOwner;                                      		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3453 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeSlotAccessory::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSlotByAdditive
// 0x0004 (0x0124 - 0x0120)
class USFAnimNodeSlotByAdditive : public USFAnimNodeSlot
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3455 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeSlotByAdditive::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSlotPerBone
// 0x0024 (0x0144 - 0x0120)
class USFAnimNodeSlotPerBone : public USFAnimNodeSlot
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x0120 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct FName                                       BranchStartBoneName;                              		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Child2PerBoneWeight;                              		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3457 ];

		return pClassPointer;
	};

	void BuildWeightList ( );
};

UClass* USFAnimNodeSlotPerBone::pClassPointer = NULL;

// Class SFGame.SFAnimNodeSlotQueuing
// 0x000C (0x012C - 0x0120)
class USFAnimNodeSlotQueuing : public USFAnimNodeSlot
{
public:
	TArray< struct FQueuingAnimInfo >                  arrQueuingAnimInfo;                               		// 0x0120 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3459 ];

		return pClassPointer;
	};

	void AddQueuingAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bForce );
};

UClass* USFAnimNodeSlotQueuing::pClassPointer = NULL;

// Class SFGame.SFAnimNodeTurnInPlace
// 0x0028 (0x0130 - 0x0108)
class USFAnimNodeTurnInPlace : public UAnimNodeBlend
{
public:
	unsigned long                                      bInitialized : 1;                                 		// 0x0108 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	int                                                LastPawnYaw;                                      		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FName >                             RotTransitions;                                   		// 0x0110 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TransitionBlendTime;                              		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInThresholdYaw;                               		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USFAnimNodeTurnInPlacePlayer* >      TurnInPlayerNodes;                                		// 0x0124 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3461 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeTurnInPlace::pClassPointer = NULL;

// Class SFGame.SFAnimNodeTurnInPlacePlayer
// 0x000E (0x0148 - 0x013A)
class USFAnimNodeTurnInPlacePlayer : public UAnimNodeSequence
{
public:
	TArray< struct FTIP_Transition >                   TIP_Transitions;                                  		// 0x013C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3463 ];

		return pClassPointer;
	};

};

UClass* USFAnimNodeTurnInPlacePlayer::pClassPointer = NULL;

// Class SFGame.SFAnimNofity_Weapon
// 0x000C (0x004C - 0x0040)
class USFAnimNofity_Weapon : public UAnimNotify
{
public:
	struct FString                                     NotifyName;                                       		// 0x0040 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3465 ];

		return pClassPointer;
	};

};

UClass* USFAnimNofity_Weapon::pClassPointer = NULL;

// Class SFGame.SFAnimNotify_AttachParticle
// 0x0018 (0x0058 - 0x0040)
class USFAnimNotify_AttachParticle : public UAnimNotify
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x0040 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0044 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bKillParticlesForce : 1;                          		// 0x004C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ParticleScale;                                    		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    GeneratedParticle;                                		// 0x0054 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3467 ];

		return pClassPointer;
	};

};

UClass* USFAnimNotify_AttachParticle::pClassPointer = NULL;

// Class SFGame.SFAnimNotify_HideBone
// 0x000C (0x004C - 0x0040)
class USFAnimNotify_HideBone : public UAnimNotify
{
public:
	struct FName                                       BoneName;                                         		// 0x0040 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHidden : 1;                                      		// 0x0048 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3469 ];

		return pClassPointer;
	};

};

UClass* USFAnimNotify_HideBone::pClassPointer = NULL;

// Class SFGame.SFAnimNotify_Magazine
// 0x0000 (0x0040 - 0x0040)
class USFAnimNotify_Magazine : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3471 ];

		return pClassPointer;
	};

};

UClass* USFAnimNotify_Magazine::pClassPointer = NULL;

// Class SFGame.SFAnimNotify_Ragdoll
// 0x0000 (0x0040 - 0x0040)
class USFAnimNotify_Ragdoll : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3473 ];

		return pClassPointer;
	};

};

UClass* USFAnimNotify_Ragdoll::pClassPointer = NULL;

// Class SFGame.SFAnimNotify_Sound
// 0x0004 (0x0060 - 0x005C)
class USFAnimNotify_Sound : public UAnimNotify_Sound
{
public:
	unsigned long                                      bIgnoreIfSkelHidden : 1;                          		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3475 ];

		return pClassPointer;
	};

};

UClass* USFAnimNotify_Sound::pClassPointer = NULL;

// Class SFGame.SFSkelControl_CantileverBeam
// 0x003C (0x0174 - 0x0138)
class USFSkelControl_CantileverBeam : public USkelControlLookAt
{
public:
	struct FVector                                     WorldSpaceGoal;                                   		// 0x0138 (0x000C) [0x0000000000000000]              
	struct FVector                                     InitialWorldSpaceGoalOffset;                      		// 0x0144 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Velocity;                                         		// 0x0150 (0x000C) [0x0000000000000000]              
	float                                              SpringStiffness;                                  		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringDamping;                                    		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentBeamVelocityTransfer;                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __EntireBeamVelocity__Delegate;                   		// 0x0168 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3477 ];

		return pClassPointer;
	};

	struct FVector EntireBeamVelocity ( );
};

UClass* USFSkelControl_CantileverBeam::pClassPointer = NULL;

// Class SFGame.SFSkelControl_MassBoneScaling
// 0x000C (0x00D0 - 0x00C4)
class USFSkelControl_MassBoneScaling : public USkelControlBase
{
public:
	TArray< struct FBoneScaleInfo >                    BoneScales;                                       		// 0x00C4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3479 ];

		return pClassPointer;
	};

	float GetBoneScale ( struct FName BoneName );
	void SetBoneScale ( struct FName BoneName, float Scale );
};

UClass* USFSkelControl_MassBoneScaling::pClassPointer = NULL;

// Class SFGame.SFSkelControl_CharacterDiffScaling
// 0x0000 (0x00D0 - 0x00D0)
class USFSkelControl_CharacterDiffScaling : public USFSkelControl_MassBoneScaling
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3481 ];

		return pClassPointer;
	};

};

UClass* USFSkelControl_CharacterDiffScaling::pClassPointer = NULL;

// Class SFGame.SFSkelControl_Retargeting
// 0x0050 (0x0114 - 0x00C4)
class USFSkelControl_Retargeting : public USkelControlBase
{
public:
	class USkeletalMesh*                               SourceMesh;                                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               TargetMesh;                                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           BoneDimensions;                                   		// 0x00CC (0x000C) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FName >                             IgnoreBoneMap;                                    		// 0x00D8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            BoneIgnoreTable;                                  		// 0x00E4 (0x000C) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FIKMatching >                       IKMatchingMap;                                    		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FIKMaptchInfo >                     IKMatchingTable;                                  		// 0x00FC (0x000C) [0x0000000000420000]              ( CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FVector >                           LocalDimensions;                                  		// 0x0108 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3483 ];

		return pClassPointer;
	};

	bool SetRetargetingMeshes ( class USkeletalMesh* InTargetMesh, class USkeletalMesh* InSourceMesh, unsigned long bIgnoreBoneCount );
};

UClass* USFSkelControl_Retargeting::pClassPointer = NULL;

// Class SFGame.SFCrosshairBase
// 0x0004 (0x0040 - 0x003C)
class USFCrosshairBase : public UObject
{
public:
	float                                              CrosshairThickness;                               		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3485 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairBase::pClassPointer = NULL;

// Class SFGame.SFCrosshairCirclecross
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairCirclecross : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3487 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairCirclecross::pClassPointer = NULL;

// Class SFGame.SFCrosshairCirclePoint
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairCirclePoint : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3489 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairCirclePoint::pClassPointer = NULL;

// Class SFGame.SFCrosshairDiagonal
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairDiagonal : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3491 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairDiagonal::pClassPointer = NULL;

// Class SFGame.SFCrosshairFine
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairFine : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3493 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairFine::pClassPointer = NULL;

// Class SFGame.SFCrosshairPoint
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairPoint : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3495 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairPoint::pClassPointer = NULL;

// Class SFGame.SFCrosshairRectangle
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairRectangle : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3497 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairRectangle::pClassPointer = NULL;

// Class SFGame.SFCrosshairSharp
// 0x0000 (0x0040 - 0x0040)
class USFCrosshairSharp : public USFCrosshairBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3499 ];

		return pClassPointer;
	};

	void DrawCrosshair ( class ASFHUD* HUD, float CenterX, float CenterY, int BarWidth, int BarWidthAddLength, struct FColor CrossHairColor, struct FColor CrosshairOutlineColor );
};

UClass* USFCrosshairSharp::pClassPointer = NULL;

// Class SFGame.SFGameViewportClient
// 0x00E8 (0x0210 - 0x0128)
class USFGameViewportClient : public UGameViewportClient
{
public:
	unsigned long                                      bSendGameExitMessage : 1;                         		// 0x0128 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableClanRankingWithLoading : 1;                		// 0x0128 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	float                                              DelayTimeToSendGameExitMessage;                   		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FLoadingTextureStruct                       DefaultBackgroundTexture;                         		// 0x0130 (0x001C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadingTextureStruct >             LoadingTextureArray;                              		// 0x014C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FLoadingTextureStruct >             LobbyLoadingTextureConfigArray;                   		// 0x0158 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FColor                                      LoadingBGColor;                                   		// 0x0164 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FLobbyLoadingTexture >              LobbyLoadingTextureArray;                         		// 0x0168 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     LoadingTipMessage;                                		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LoadingMapLocalizedMapName;                       		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LoadingInternationalMapName;                      		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLoadingTextureStruct                       LoadingBackPannelTextureName;                     		// 0x0198 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  LoadingBackPannelTexture;                         		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UTexture2D*                                  LoadingBackGroundTexture;                         		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LoadingDotCount;                                  		// 0x01BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      BGDrawTypeNow;                                    		// 0x01C0 (0x0001) [0x0000000000000000]              
	float                                              FadeTarget;                                       		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              FadeAmount;                                       		// 0x01C8 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   FadeAlpha;                                        		// 0x01CC (0x0008) [0x0000000000000000]              
	float                                              FadeTime;                                         		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              FadeTimeRemaining;                                		// 0x01D8 (0x0004) [0x0000000000000000]              
	float                                              FadeDelay;                                        		// 0x01DC (0x0004) [0x0000000000000000]              
	float                                              lastTickTime;                                     		// 0x01E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDisconnectedTime;                             		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FLoadingClanRanking >               LoadingClanRankingArray;                          		// 0x01E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MyClanRankingIndex;                               		// 0x01F4 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanRankingTitleText;                             		// 0x01F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ClanRankingCount;                                 		// 0x0204 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      MyClanColor;                                      		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFOnlineSubsystemPC*                        OnlineSubPC;                                      		// 0x020C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3501 ];

		return pClassPointer;
	};

	void NotifyConnectionError ( struct FString Message, struct FString Title );
	void eventClearDisconnectedTime ( );
	struct FString GetLoadingTexturebyMapName ( struct FString MapName );
	void GetFullClipSize ( struct FVector2D BGTexSize, struct FVector2D CanvasSize, struct FVector2D ChkRatio, struct FIntPoint* DrawPos, struct FIntPoint* DrawSize );
	void GetFullAllSize ( struct FVector2D BGTexSize, struct FVector2D CanvasSize, struct FVector2D ChkRatio, struct FIntPoint* DrawPos, struct FIntPoint* DrawSize );
	void DrawClanRankingInfo ( class UCanvas* Canvas );
	void DrawBackgroundTexture ( class UCanvas* Canvas, class UTexture2D* BGTexture, unsigned char DrawType );
	void DrawLoadingProgress ( class UCanvas* Canvas, struct FString msg );
	void DrawLoadingMapName ( class UCanvas* Canvas );
	void DrawLoadingTip ( class UCanvas* Canvas );
	void DrawShadowText ( class UCanvas* Canvas, int X, int Y, class UFont* Canvasfont, struct FString strText, unsigned long bIsCentered, struct FColor NewColor );
	void ClearBG ( class UCanvas* Canvas, struct FColor FillColor );
	void DrawLoadingScene ( class UCanvas* Canvas, struct FString msg );
	void SetClanMarkInfo ( struct FString ClanMark, struct FLoadingClanRanking* OutClanRanking );
	void SetClanRankingInfo ( );
	void SetBackGroundTexture ( );
	void eventResetLoadingScreenInfos ( );
	void UpdateLoadingProgress ( );
	void eventTick ( float DeltaTime );
	void eventMapOpenFade ( );
	struct FVector2D GetMousePosition ( );
	void eventUpdateFade ( float DeltaTime );
	void Fade ( float TargetAlpha, float Duration, float InFadeDelay );
	void DrawFade ( class UCanvas* Canvas );
	void SetFocusToGameWindow ( );
	void DrawTransition ( class UCanvas* Canvas );
	void PKT_GetWeeklyRealtimeRank_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetWeeklyRealtimeRank_REQ_OK ( class UPacket* recvPacket );
	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	bool eventInit ( struct FString* OutError );
};

UClass* USFGameViewportClient::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget
// 0x0048 (0x00C0 - 0x0078)
class USFGFxHUDWidget : public UGFxObject
{
public:
	class ASFHUD*                                      myHUD;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FName                                       ViewName;                                         		// 0x007C (0x0008) [0x0000000000000000]              
	class USFGFxHUDMoviePlayer*                        ParentMovie;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	class USFItemManager*                              ItemManager;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	class USFOnlineSubsystemPC*                        OnlineSub;                                        		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseScriptUpdate : 1;                             		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReceiveExternalCall : 1;                         		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWidgetOpened : 1;                                		// 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoAutoOpenAtRoundStart : 1;                      		// 0x0090 (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< struct FString >                           WidgetDisableModeNameArray;                       		// 0x0094 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           WidgetDisableControllerNameArray;                 		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PreviousTime;                                     		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WidgetVisibleCounter;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            WidgetHideType;                                   		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3503 ];

		return pClassPointer;
	};

	bool GetWeaponImageName ( unsigned long bSuicide, int KillType, int CombatMsgType, struct FString WeaponItemCode, class UClass* DmgTypeClass, struct FString* WeaponImageName );
	void ASSetElapsedTime ( struct FString TimeText, int Warning );
	void UpdateElapsedTime ( );
	void OnShowFeverTimeIcon ( unsigned long bShow );
	void OnPlayerRespawned ( );
	void OnMinimapRadarCreated ( );
	void OnShowCombatReport ( );
	void OnIMETextInputUpdated ( );
	void OnVoteKickFinished ( unsigned long bShowResult, int AcceptPlayer, int RefusePlayer, int TotalPlayer );
	void OnVoteKickParticipated ( int nType );
	void OnVoteKickStarted ( struct FString strMessage );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnPlayerPawnDied ( );
	void OnPlayerHitEnemy ( unsigned char HitBody );
	void OnBuffStateChanged ( unsigned char BuffType, unsigned char BuffState );
	void OnToggleHelp ( );
	void OnChallengeChanged ( struct FName SupplyCode, int TaskIndex );
	void OnModeStatChanged ( );
	void OnPingNotified ( unsigned char PingType, struct FVector TargetLocation, class ASFPlayerReplicationInfo* CallerPRI );
	void OnCaptureRemainTimeChanged ( float remain, float total );
	void OnCaptureTeamChanged ( unsigned char captured_team, struct FString captured_player );
	void UpdateVisibilityWhenViewTargetChanged ( );
	void SetGlowModeGaugeValue ( int GlowModeEffectType );
	void UpdateWidgetVisibility ( );
	bool IsWidgetVisible ( );
	void ToggleWidget ( );
	void ShowWidget ( unsigned long bShow );
	void CloseWidget ( );
	void OpenWidget ( );
	void OnWeaponSetChanged ( int new_set );
	void OnGameModeChanged ( );
	void OnModeMyDeathsUpdated ( int Count );
	void OnModeKillsUpdated ( int Count );
	void OnModeMoneyUpdated ( int new_point );
	void OnWaveStarted ( int current_wave );
	void OnChangedRemainingEnemyCount ( );
	void OnChallengeCompleted ( struct FName SupplyCode, int task_index );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	bool IsDisableByPlayerController ( );
	bool IsDisableByGameMode ( );
	void SetOnlineSubPC ( class USFOnlineSubsystemPC* OnlineSubPC );
	bool NotifySetRadioMessage ( unsigned long bShow, class UClass* RadioMessageClass );
	void OnScreenResChanged ( );
	void OnHideLeftNoticeMessage ( );
	void OnShowLeftNoticeMessage ( struct FString strMessage );
	void OnUpdatePerSecond ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnChangedObserverViewMode ( unsigned char InViewMode );
	void OnObsrToggleCombatMsg ( unsigned long bShow );
	void OnObsrToggleLineBottom ( unsigned long bShow );
	void OnObsrToggleMiniMap ( unsigned long bShow );
	void OnObsrToggleChattingLog ( );
	void OnObsrToggleHPBar ( );
	void OnObsrToggleModeInfo ( );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnToggleHUDChanged ( );
	void OnEndTargetScore ( );
	void OnSetTutorialTotalScore ( int Score );
	void OnInitTargetScore ( );
	void OnTargetScoreMsg ( int Score, struct FVector TargetPosition );
	void OnSetTargetEndMotion ( int Index );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnPawnDying ( class ASFPawn* DiedPawn );
	void OnChangedNumLives ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnHideScoreBoard ( );
	void OnShowScoreBoard ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	void OnSpawnablePawnListInitialized ( );
	void OnUpdateUserConditionInfo ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bNeedInit );
	void OnLocalPRIInitialized ( );
	void OnConvoyanceTopPlayerUpdated ( struct FString TopPlayer, unsigned long IsSetLeft );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void OnChangedViewtarget ( );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnStartSwitchingSide ( float Duration );
	void OnCountDown ( float Duration );
	void OnPendingMatch ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnPreRoundEnded ( );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnRoundStarted ( );
	void OnViewClosed ( );
	void OnViewActivated ( );
	void eventUpdate ( float DeltaSeconds );
	void OnViewLoaded ( );
	void ResetGFxHUD ( );
	void SetGFxFocus ( unsigned long CaptureInput, unsigned long Focus );
};

UClass* USFGFxHUDWidget::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Ammo
// 0x0020 (0x00E0 - 0x00C0)
class USFGFxHUDWidget_Ammo : public USFGFxHUDWidget
{
public:
	int                                                PrevAmmoCount;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevAmmoCountinMgz;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                PrevAmmoCountMaxAndInMgz;                         		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsUpdateAmmoInfo : 1;                            		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTargetSeizured : 1;                              		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	class ASFWeapon*                                   PrevWeapon;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                PrevBombSPRemainNum[ 0x3 ];                       		// 0x00D4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3505 ];

		return pClassPointer;
	};

	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnRoundStarted ( );
	void OnPreRoundEnded ( );
	void OnTargetSeizured ( unsigned long bSeizure );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnChangedViewtarget ( );
	void UpdateWidgetVisibility ( );
	void ShowWidget ( unsigned long bShow );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_Ammo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Chat
// 0x004C (0x010C - 0x00C0)
class USFGFxHUDWidget_Chat : public USFGFxHUDWidget
{
public:
	class UGFxClikWidget*                              ChatInputText;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                InGameChatListShowTimeLimit;                      		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSChatMsgInfo >                     MergedChatMsgArray;                               		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOpenChattingLog : 1;                             		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHideChatLog : 1;                                 		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                PrevIMEConversion;                                		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                PrevIMEOpenStatus;                                		// 0x00DC (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DisableChatMessageArray;                          		// 0x00E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                nKickUserIndex;                                   		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                nPrevKickUserNameLength;                          		// 0x00F0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           KickCodeNameArray;                                		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     KickUserCodename;                                 		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3507 ];

		return pClassPointer;
	};

	void eventUpdateConversionMode ( unsigned long bNative, unsigned long bFullShape, unsigned long bKatakana );
	void InviteResult ( struct FString InviteOk, struct FString InviteErr );
	void ASSetFocusWhisperList ( int Index );
	void ASCloseWhisperList ( );
	void ASSetChatWhisperList ( TArray< struct FString > Arg );
	void AsChangeChatType ( int Type );
	void AsCloseChatInputBox ( );
	void AsOpenChatInputBox ( int Type );
	void AsCloseChatLog ( );
	void AsSetEnableChatTypes ( unsigned long bTeam, unsigned long bAll, unsigned long bClan );
	void ASSetTextFieldSelection ( int PosS, int PosE );
	void ASAddChatMessage ( int ChatType, struct FString strChatMsg, int Len );
	void ClearChatCloseTimer ( );
	void CloseChatLog ( );
	void SetChatCloseTimer ( );
	void CloseHUDChat ( );
	void ClearPrevIMEConversion ( );
	void OpenHUDChat ( unsigned char InChatSendType, unsigned char InGFxChatType );
	struct FString GetChatHtmlString ( struct FSChatMsgInfo ChatMsgInfo );
	bool IsChatLogOpened ( );
	void OnObsrToggleChattingLog ( );
	void OnRoundStarted ( );
	void OnMsgrChatMessageReceived ( int USN );
	void OnMsgrChatMessageSended ( );
	void OnChatMessageReceived ( );
	void OnChatMessageSended ( );
	void ShowMsgrChattingMessageList ( int USN );
	void ShowHUDChattingMessageList ( unsigned long bAll );
	void SetMergeChatMsgWithMsgr ( );
	void AddChatMessage ( unsigned char ChatType, struct FString strChatMsg, unsigned long bIgnoreChatFilter );
	void SendChatMessage ( struct FString InChatMsg, int InChatSendType );
	void ClearChatInputText ( );
	struct FString GetChatInputText ( );
	void AutoKickTargetChange ( int nDir, struct FString strOptional );
	int AutoChatTargetChange ( int Dir );
	bool OnEnterPressedWithChatting ( struct FString strInChatMsg );
	bool IsEnableChatType ( );
	unsigned char GetNormalChatSendType ( );
	bool SetChatSendType ( unsigned char InChatSendType );
	int ProcessChatSpacebyChatType ( );
	void SetEnableChatSendType ( unsigned char InChatSendType );
	int ToNextTextChatComboType ( );
	bool IsDisableKeyInputForIME ( struct FString KeyName );
	void OnIMETextInputUpdated ( );
	void OnTextChanged ( struct FEventData ev );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void UnregiterDeleaget ( );
	void RegisterDelegate ( );
	void ViewLoadedShowChatMsg ( );
	void HideChatLog ( unsigned long bHide );
	void OnViewLoaded ( );
};

UClass* USFGFxHUDWidget_Chat::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CodenameAim
// 0x000C (0x00CC - 0x00C0)
class USFGFxHUDWidget_CodenameAim : public USFGFxHUDWidget
{
public:
	struct FString                                     strCodeName;                                      		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3509 ];

		return pClassPointer;
	};

	void ASHideCodenameAim ( );
	void ASShowCodenameAim ( );
	void OnPreRoundEnded ( );
};

UClass* USFGFxHUDWidget_CodenameAim::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CombatMsg
// 0x008C (0x014C - 0x00C0)
class USFGFxHUDWidget_CombatMsg : public USFGFxHUDWidget
{
public:
	struct FString                                     AssistMsgTxt;                                     		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamColor[ 0x3 ];                                 		// 0x00CC (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TeamColorForDeathGame;                            		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGFxCombatMsg >                    GFxCombatMsgArray;                                		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  LogMC;                                            		// 0x0108 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  LogMaskMC;                                        		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                NumMessages;                                      		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              TargetLineHeight;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              CurLineHeight;                                    		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              MessageDownSpeed;                                 		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              MessageHeight;                                    		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxShowMsgCount;                                  		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DurationTime;                                     		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                StartLineHeight;                                  		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                StartLineHeightForObserver;                       		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HideDurationTime;                                 		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowCodeNameObserver : 1;                        		// 0x0138 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                PrevShowMsgCount;                                 		// 0x013C (0x0004) [0x0000000000000000]              
	TArray< struct FSMissionCombatMsg >                MissionGFxCombatMsgArray;                         		// 0x0140 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3511 ];

		return pClassPointer;
	};

	void OnObsrToggleCombatMsg ( unsigned long bShow );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	int GetMissionCombatMsgIndex ( struct FString InEventName );
	int GetShowMsgCount ( );
	void SortByShowHide ( );
	void AddGFxCombatMessage ( struct FSCombatMsg InCombatMsg );
	void AddCombatMessageWithMissionLogOutUser ( struct FName EventName, struct FString PlayerCodeName, unsigned char PlayerTeam );
	void AddCombatMessageWithMission ( struct FName EventName, class APlayerReplicationInfo* PRI );
	struct FString ExportWeaponClassName ( struct FString Source );
	void AddCombatMessage ( int nWeaponID, int KillType, int CombatMsgType, class APlayerReplicationInfo* KillerPRI, class APlayerReplicationInfo* VictimPRI, class UClass* DmgTypeClass );
	struct FString GetImgSrcString ( struct FString Img, int vspace );
	void InitMessageRow ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	void OnViewLoaded ( );
};

UClass* USFGFxHUDWidget_CombatMsg::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ConvoyanceGauge
// 0x000C (0x00CC - 0x00C0)
class USFGFxHUDWidget_ConvoyanceGauge : public USFGFxHUDWidget
{
public:
	unsigned long                                      IsDrawingConvoyanceGauge : 1;                     		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                nPrevGaugePercent;                                		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              DisplayRate;                                      		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3513 ];

		return pClassPointer;
	};

	void OnChangedViewtarget ( );
	void CloseConvoyanceGauge ( );
	void ShowConvoyanceGauge ( int Type );
	void DrawConvoyanceGauge ( int nGaugePercent );
	void ResetConvoyanceGauge ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ConvoyanceGauge::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Health
// 0x001C (0x00DC - 0x00C0)
class USFGFxHUDWidget_Health : public USFGFxHUDWidget
{
public:
	int                                                PrevHP;                                           		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevHPGage;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                PrevAP;                                           		// 0x00C8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  Ani_Blink;                                        		// 0x00CC (0x0004) [0x0000000000000000]              
	class ASFPawn*                                     PrevSFPawn;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	float                                              fOldTime;                                         		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              fNowTime;                                         		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3515 ];

		return pClassPointer;
	};

	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void ASCloseHealth ( );
	void ASOpenHealth ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnRoundStarted ( );
	void OnChangedViewtarget ( );
	void OnViewLoaded ( );
	void UpdateWidgetVisibility ( );
	void ShowWidget ( unsigned long bShow );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_Health::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_InstantRespawn
// 0x0028 (0x00E8 - 0x00C0)
class USFGFxHUDWidget_InstantRespawn : public USFGFxHUDWidget
{
public:
	unsigned long                                      bShowInstantRespawn : 1;                          		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     InstantRespawnMessage;                            		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InstantRespawnNoSPMessage;                        		// 0x00D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              StartTime;                                        		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              CurTime;                                          		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              TotalTime;                                        		// 0x00E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3517 ];

		return pClassPointer;
	};

	void eventASUpdateRemainTime ( );
	void ASHideInstantRespawn ( );
	void ASShowInstantRespawn ( );
	void OnPreRoundEnded ( );
	void OnPlayerRespawned ( );
	void OnPlayerPawnDied ( );
};

UClass* USFGFxHUDWidget_InstantRespawn::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Linebottom
// 0x002C (0x00EC - 0x00C0)
class USFGFxHUDWidget_Linebottom : public USFGFxHUDWidget
{
public:
	class UGFxObject*                                  Txt_Time;                                         		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                LimitTimeGameChangeColorTime;                     		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LimitTimeGameColorOn;                             		// 0x00C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LimitTimeGameColorOff;                            		// 0x00D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TagTail;                                          		// 0x00E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3519 ];

		return pClassPointer;
	};

	void OnObsrToggleLineBottom ( unsigned long bShow );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void ASCloseLineBottom ( );
	void ASOpenLineBottom ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUDWidget_Linebottom::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Message
// 0x03A4 (0x0464 - 0x00C0)
class USFGFxHUDWidget_Message : public USFGFxHUDWidget
{
public:
	TArray< struct FString >                           HostLogOutMessages;                               		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           NewHostMessages;                                  		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                NewHostMessageIndex;                              		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FMessageTypeInfo                            MessageTypeData[ 0x19 ];                          		// 0x00DC (0x0320) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMessageInfo                                PendingMessage[ 0x6 ];                            		// 0x03FC (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NewHostMessageRealTimeSecond;                     		// 0x0444 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              KillMessageShortTime;                             		// 0x0448 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KillIconDurationTime;                             		// 0x044C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                KillFeedBackCount;                                		// 0x0450 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           KillFeedBackIconArray;                            		// 0x0454 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nScoreUpCount;                                    		// 0x0460 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3521 ];

		return pClassPointer;
	};

	void ASSetMsgSpecialPointModeType ( int MessageType );
	bool IsMessageStringToImage ( struct FString strText );
	void InitKillFeedBackList ( class ASFPlayerReplicationInfo* SFPRI );
	void eventClearKillIconList ( );
	void ASShowKillFeedBackIcon ( struct FString strMessage, unsigned long bFromMe );
	void OnToggleHUDChanged ( );
	void ASCloseKeyInputMsg ( );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnPendingMatch ( );
	void PopMessage ( unsigned char DisplayType );
	void QueueMessage ( unsigned char Type, int MessageIndex, struct FString msg, float Lifetime, class USoundNodeWave* Sound, int InPriority, unsigned long bInsert );
	bool eventAddAdditionalArgument ( unsigned char Type, int MessageIndex, TArray< struct FASValue >* args );
	void AddAdditionalCloseArgument ( unsigned char Type, TArray< struct FASValue >* args );
	void eventCloseMessage ( unsigned char DisplayType, unsigned long bPopupNextMessage );
	void ClearInfiniteMessages ( );
	void ClearMessages ( );
	void RemoveMessage ( unsigned char Type );
	void AddMessage ( unsigned char Type, struct FString msg, float Lifetime, class USoundNodeWave* Sound, int InPriority, int MessageIndex, unsigned long bRemoveWhenSamePriority );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_Message::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_NameTagBase
// 0x006C (0x012C - 0x00C0)
class USFGFxHUDWidget_NameTagBase : public USFGFxHUDWidget
{
public:
	class ASFPlayerReplicationInfo*                    PrevPRI;                                          		// 0x00C0 (0x0004) [0x0000000000000000]              
	class ASFPlayerReplicationInfo*                    SpectatingPRI;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FString                                     CurGFxRank;                                       		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurCodeName;                                      		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurLeagueNumber;                                  		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurClanMark;                                      		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurVipImg;                                        		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CurClanMarkEffect;                                		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurNametagImage;                                  		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                CurKill;                                          		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                CurAssist;                                        		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                CurDeath;                                         		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                CurHealth;                                        		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                CurVipGrade;                                      		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                CurMonthlyRewardGrade;                            		// 0x0128 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3523 ];

		return pClassPointer;
	};

	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnPreRoundEnded ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void HideNameTag ( );
	void eventSetNameTag ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bOpen );
};

UClass* USFGFxHUDWidget_NameTagBase::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_NameTag
// 0x0004 (0x0130 - 0x012C)
class USFGFxHUDWidget_NameTag : public USFGFxHUDWidget_NameTagBase
{
public:
	class ASFPlayerReplicationInfo*                    KillCamPRI;                                       		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3525 ];

		return pClassPointer;
	};

	void HideMyNametag ( );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnPreRoundEnded ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnUpdatePerSecond ( );
	void HideNameTag ( );
	void ASNameTagDataInfo ( struct FString Level, struct FString EmblemImage, struct FString CodeName, struct FString Kill, struct FString Assist, struct FString Death, unsigned long bOpenFlag, struct FString ClanImage, struct FString VipBgImage, TArray< class UGFxObject* > SpectatorDecoData, struct FString ClanMarkEffect );
	class UGFxObject* GetSpectatorDecoColorTable ( );
	void GetSpectatorInfoObject ( class ASFPlayerReplicationInfo* SFPRI, TArray< class UGFxObject* >* SpectatorInfoObject );
	void eventSetNameTag ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bOpen );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void UpdateNametag ( class ASFPlayerReplicationInfo* SFPRI );
};

UClass* USFGFxHUDWidget_NameTag::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrNameTag
// 0x0000 (0x012C - 0x012C)
class USFGFxHUDWidget_ObsrNameTag : public USFGFxHUDWidget_NameTagBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3527 ];

		return pClassPointer;
	};

	void HideNameTag ( );
	void eventSetNameTag ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bOpen );
	void UpdateNametag ( class ASFPlayerReplicationInfo* SFPRI );
};

UClass* USFGFxHUDWidget_ObsrNameTag::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObjectIcon
// 0x00E4 (0x01A4 - 0x00C0)
class USFGFxHUDWidget_ObjectIcon : public USFGFxHUDWidget
{
public:
	float                                              IconAlphaMax;                                     		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconAlphaMin;                                     		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconAlphaRadius;                                  		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CircleRadiusX;                                    		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CircleRadiusY;                                    		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ObjectIconDefaultPosX;                            		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ObjectIconDefaultPosY;                            		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      IsCircleClippedMode : 1;                          		// 0x00DC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bDrawMissionGauge : 1;                            		// 0x00DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsIndicator : 1;                                 		// 0x00DC (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              ObjIconInterTime_RectToScreen;                    		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ObjIconInterTime_ScreenToRect;                    		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ObjIconInterSpeed;                                		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconScale;                                        		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IconScaleMax;                                     		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ArrowMinDegree;                                   		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RectSizeX;                                        		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                RectSizeY;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                RoundRadius;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            FilteredIconArray;                                		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StateToFrameString[ 0x7 ];                        		// 0x0110 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nPrevGaugePercent;                                		// 0x0164 (0x0004) [0x0000000000000000]              
	struct FString                                     IconBackText;                                     		// 0x0168 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FastTriggerMessage;                               		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UsingTriggerByWeaponGroupMessage;                 		// 0x0180 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           NeedlessGaugeModeName;                            		// 0x018C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCreateObjectIconDelegate__Delegate;           		// 0x0198 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3529 ];

		return pClassPointer;
	};

	void RemoveThrIndicator ( );
	void SetThrIndicator ( int nX, int nY, int nRot, struct FString strGRName, struct FString strDist );
	void UpdateIndicator ( float DeltaSeconds );
	void eventGetUseTrigger ( class ASFTrigger_UseByWeaponGroup** OutUsingTrigger );
	void CreateMissionGauge ( int Width, struct FString strMessage );
	bool NeedlessGaugeMode ( );
	void HideMissionGauge ( );
	void DrawMissionGauge ( int nGaugePercent, struct FString strMessage );
	void UpdateMissionGauge ( float DeltaSeconds );
	void ResetMissionGauge ( );
	bool ChangeIconState ( int IconIndex, unsigned char State, unsigned char ShowFlag );
	bool IsValidIndex ( int IconIndex );
	bool IsAlreadyObjectIconRegister ( unsigned char InType );
	int GetIconIndexByType ( unsigned char InType );
	int GetIconIndex ( class AActor* inActor );
	void ResetGFxHUD ( );
	void RemoveAllIcons ( );
	bool ChangeObjectIconState ( class AActor* inActor, unsigned char State, unsigned char ShowFlag );
	bool AssignIfTypeExist ( unsigned char IconType, class AActor* inActor, unsigned char IconState, unsigned char ShowFlag );
	void UnRegisterObjectIconByType ( unsigned char IconType );
	void RegisterObjectIcon ( class AActor* inActor, unsigned long bRegister, unsigned char IconType, unsigned char IconState, unsigned char ShowFlag );
	void RegisterObjectIconDirect ( class AActor* inActor, unsigned long bRegister, unsigned long bShowHP );
	void SetOnCreateObjectIconDelegate ( struct FScriptDelegate InDelegate );
	void createObjectIcon ( class UGFxObject* InMovieClip, int ItemIndex, int Width, int Height );
	void ASCreateObjectIcon ( int IconType, int IconIndex );
	void SetObjectIconTypeText ( int Index );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void OnPendingMatch ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	void OnViewLoaded ( );
	void SetIconHP ( struct FSObjectIcon* Icon );
	void SetIconInterpType ( unsigned char newType, struct FSObjectIcon* Icon );
	void SetIconFrontBack ( unsigned long bIsBack, struct FSObjectIcon* Icon );
	void SetIconDistance ( struct FSObjectIcon* Icon );
	void SetIconArrow ( int X, int Y, float fDegree, struct FSObjectIcon* Icon );
	float GetObjectIconAlpha ( int PosX, int PosY );
	void OnCreateObjectIconDelegate ( class UGFxObject* Obj, int ItemIndex, int Width, int Height );
};

UClass* USFGFxHUDWidget_ObjectIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrHPBarBase
// 0x0F0C (0x0FCC - 0x00C0)
class USFGFxHUDWidget_ObsrHPBarBase : public USFGFxHUDWidget
{
public:
	struct FSObsrUserInfos                             UserInfoArray[ 0x8 ];                             		// 0x00C0 (0x0F00) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TeamIndex;                                        		// 0x0FC0 (0x0004) [0x0000000000000000]              
	int                                                MaxTeamPlayer;                                    		// 0x0FC4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowHPBar : 1;                                   		// 0x0FC8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWeaponName : 1;                                  		// 0x0FC8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3531 ];

		return pClassPointer;
	};

	void OnObsrToggleHPBar ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnUpdatePerSecond ( );
	void ClearUserInfo ( );
	void ASUpdateUserInfo ( int InIndex, class UGFxObject* InObject );
	void eventUpdateUserInfo ( int InTeamIndex, int InIndex, class UGFxObject* InObject );
	void ASCloseUserList ( );
	void ASOpenUserList ( );
	void OpenUserList ( );
	struct FString GetTeamPrefix ( int InTeamIndex );
	void UpdateUserList ( int InTeamIndex, unsigned long bForceUpdate );
	void SetUserList ( int InTeamIndex );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_ObsrHPBarBase::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Pause
// 0x0010 (0x00D0 - 0x00C0)
class USFGFxHUDWidget_Pause : public USFGFxHUDWidget
{
public:
	unsigned long                                      bPaused : 1;                                      		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     strPausedUserMessage;                             		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3533 ];

		return pClassPointer;
	};

	void ASClosePaused ( );
	void ASOpenPaused ( struct FString strMessage );
	void eventUpdatePaused ( );
};

UClass* USFGFxHUDWidget_Pause::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_PawnHeadUpBase
// 0x0044 (0x0104 - 0x00C0)
class USFGFxHUDWidget_PawnHeadUpBase : public USFGFxHUDWidget
{
public:
	TArray< struct FGFxPawnHeadUpInfo >                GFxHeadUpInfoArray;                               		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GFxHeadUpInfoUsedIndex;                           		// 0x00CC (0x0004) [0x0000000000000000]              
	TArray< struct FGFxPawnHeadUpInfo >                GFxEnemyHeadUpInfoArray;                          		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GFxEnemyHeadUpInfoUsedIndex;                      		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                BillSizeMax;                                      		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BillSizeMin;                                      		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BillMinDist;                                      		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BillMaxDist;                                      		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fFadeOutTime;                                     		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      IsObserverView : 1;                               		// 0x00F4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	struct FScriptDelegate                             __OncreateHeadUpUIMovieClipDelegate__Delegate;    		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3535 ];

		return pClassPointer;
	};

	void OnRoundStarted ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void eventASToCreateMovieClip ( int HeadUpUIType, unsigned long bSameTeam );
	void SetOncreateHeadUpUIMovieClipDelegate ( struct FScriptDelegate InDelegate, struct FString strFunctionOn );
	void OncreateHeadUpUIMovieClipDelegate ( class UGFxObject* objs, int HeadUpUIType, unsigned long bSameTeam );
};

UClass* USFGFxHUDWidget_PawnHeadUpBase::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CodeName
// 0x0020 (0x0124 - 0x0104)
class USFGFxHUDWidget_CodeName : public USFGFxHUDWidget_PawnHeadUpBase
{
public:
	unsigned char                                      CurrentViewMode;                                  		// 0x0104 (0x0001) [0x0000000000000000]              
	int                                                CodeNameOffset;                                   		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TeamCodeNameVisibleMaxDistance;                   		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DefaultHPText;                                    		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bEnemyIsTeamForObserver : 1;                      		// 0x011C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bHideSameTeamCodeWhenDead : 1;                    		// 0x011C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                ObserverEnemyViewMaxDist;                         		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3537 ];

		return pClassPointer;
	};

	void HideAllMovieClip ( );
	void ClearCodeNameInfo ( struct FGFxPawnHeadUpInfo* OutGFxPawnHeadUpInfo );
	void OnPreRoundEnded ( );
	void OnChangedObserverViewMode ( unsigned char InViewMode );
	void OnViewLoaded ( );
	void createHeadUpUIMovieClip ( class UGFxObject* MovieClip, int HeadUpUIType, unsigned long bSameTeam );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
};

UClass* USFGFxHUDWidget_CodeName::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ConvoyanceHeadUp
// 0x000C (0x0110 - 0x0104)
class USFGFxHUDWidget_ConvoyanceHeadUp : public USFGFxHUDWidget_PawnHeadUpBase
{
public:
	struct FVector                                     ConvoyanceHeadUpOffset;                           		// 0x0104 (0x000C) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3539 ];

		return pClassPointer;
	};

	void OnViewLoaded ( );
	void createHeadUpUIMovieClip ( class UGFxObject* MovieClip, int HeadUpUITypem, unsigned long bSameTeam );
};

UClass* USFGFxHUDWidget_ConvoyanceHeadUp::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_HeadUpArrowIcon
// 0x0000 (0x0104 - 0x0104)
class USFGFxHUDWidget_HeadUpArrowIcon : public USFGFxHUDWidget_PawnHeadUpBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3541 ];

		return pClassPointer;
	};

	void OnViewLoaded ( );
	void createHeadUpUIMovieClip ( class UGFxObject* MovieClip, int HeadUpUIType, unsigned long bSameTeam );
};

UClass* USFGFxHUDWidget_HeadUpArrowIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_KillHeadUpIcon
// 0x0000 (0x0104 - 0x0104)
class USFGFxHUDWidget_KillHeadUpIcon : public USFGFxHUDWidget_PawnHeadUpBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3543 ];

		return pClassPointer;
	};

	void OnViewLoaded ( );
	void createHeadUpUIMovieClip ( class UGFxObject* MovieClip, int HeadUpUIType, unsigned long bSameTeam );
};

UClass* USFGFxHUDWidget_KillHeadUpIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObserverStunIcon
// 0x0004 (0x0108 - 0x0104)
class USFGFxHUDWidget_ObserverStunIcon : public USFGFxHUDWidget_PawnHeadUpBase
{
public:
	int                                                FirstViewMaxDist;                                 		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3545 ];

		return pClassPointer;
	};

	void OnViewLoaded ( );
	void createHeadUpUIMovieClip ( class UGFxObject* MovieClip, int HeadUpUITypem, unsigned long bSameTeam );
};

UClass* USFGFxHUDWidget_ObserverStunIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SnowballStunIcon
// 0x0000 (0x0104 - 0x0104)
class USFGFxHUDWidget_SnowballStunIcon : public USFGFxHUDWidget_PawnHeadUpBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3547 ];

		return pClassPointer;
	};

	void OnViewLoaded ( );
	void createHeadUpUIMovieClip ( class UGFxObject* MovieClip, int HeadUpUITypem, unsigned long bSameTeam );
};

UClass* USFGFxHUDWidget_SnowballStunIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceModeInfo
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ShooterDefenceModeInfo : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3549 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUDWidget_ShooterDefenceModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalBuffInfo
// 0x0024 (0x00E4 - 0x00C0)
class USFGFxHUDWidget_SurvivalBuffInfo : public USFGFxHUDWidget
{
public:
	int                                                SeeThroughID;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	struct FString                                     SeeThroughImgSet;                                 		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SeeThroughName;                                   		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fCurSeeThroughTime;                               		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              fFininshSeeThroughTime;                           		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3551 ];

		return pClassPointer;
	};

	void ASHideSurvivalBuffinfo ( );
	void OnPreRoundEnded ( );
	void OnSetSeeThroughTime ( float fValue );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_SurvivalBuffInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalSupressor
// 0x0018 (0x00D8 - 0x00C0)
class USFGFxHUDWidget_SurvivalSupressor : public USFGFxHUDWidget
{
public:
	int                                                MaxHealth;                                        		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevHealth;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	class ASFPrimaryTargetActor*                       CurrentSupressor;                                 		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     strSupressorName;                                 		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3553 ];

		return pClassPointer;
	};

	void ClearCurrentSupressor ( );
	void ASSetSupressorName ( struct FString strName );
	void SetCurrentSupressor ( );
	void SetAllSupressorCount ( );
	void OnUpdatePerSecond ( );
	void ASUpdateSupressorHP ( int CurHP, int MaxHP );
	void eventUpdateSupressorInfo ( int nHP );
	void ASHideSupressor ( );
	void ASShowSupressor ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_SurvivalSupressor::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalUserList
// 0x009C (0x015C - 0x00C0)
class USFGFxHUDWidget_SurvivalUserList : public USFGFxHUDWidget
{
public:
	struct FSSurvivalUser                              SurvivalUsers[ 0x4 ];                             		// 0x00C0 (0x0090) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxPlayerCount;                                   		// 0x0150 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowAllTeam : 1;                                 		// 0x0154 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowMyPawn : 1;                                  		// 0x0154 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                PlayerUSN;                                        		// 0x0158 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3555 ];

		return pClassPointer;
	};

	void ASUpdateUserInfo ( int Index, class UGFxObject* Obj );
	void eventUpdateUserInfo ( int Index, struct FString strCodeName, int NametagImg, int nHP, unsigned long bHelp, unsigned long bDead, int RespawnDelay );
	void ASHideUserList ( );
	void ASShowUserList ( );
	void OnUpdatePerSecond ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void UpdateUserList ( unsigned long bForceUpdate );
	void SetUserList ( );
};

UClass* USFGFxHUDWidget_SurvivalUserList::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_TargetScore
// 0x0030 (0x00F0 - 0x00C0)
class USFGFxHUDWidget_TargetScore : public USFGFxHUDWidget
{
public:
	int                                                PlusHeight;                                       		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FGFxTargetScoreInfo >               GFxTargetScoreList;                               		// 0x00C4 (0x000C) [0x0000000000001000]              ( CPF_Native )
	int                                                GFxTargetScoreUsedIndex;                          		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                UniqueIndex;                                      		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                ArrayPosition;                                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                AniIndex;                                         		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                TargetScore;                                      		// 0x00E0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnCreateTargetScoreDelegate__Delegate;          		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3557 ];

		return pClassPointer;
	};

	void OnSetTutorialTotalScore ( int Score );
	void eventASSetDeleteAllTargetScore ( );
	void OnEndTargetScore ( );
	void OnInitTargetScore ( );
	void eventASSetTargetCountMove ( int Index );
	void OnViewLoaded ( );
	void SetOnCreateTargetScoreDelegate ( struct FScriptDelegate InDelegate );
	void OnCreateTargetScoreDelegate ( class UGFxObject* objs, int Index );
	void createTargetScore ( class UGFxObject* MovieClip, int Index );
	void SetTargetScoreInfo ( int Index, struct FVector vLocation, int ScoreNum );
	void eventASToCreateTargetScore ( unsigned long ScoreType, struct FString ScoreNum, int Index );
	void OnTargetScoreMsg ( int ScoreNum, struct FVector vLocation );
	void OnSetTargetEndMotion ( int Index );
	void ResetGFxHUD ( );
};

UClass* USFGFxHUDWidget_TargetScore::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Timer
// 0x0098 (0x0158 - 0x00C0)
class USFGFxHUDWidget_Timer : public USFGFxHUDWidget
{
public:
	struct FTimerTypeInfo                              TimerTypeData[ 0x3 ];                             		// 0x00C0 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsCountUpdate : 1;                               		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsCentisecond : 1;                               		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              fNowTime;                                         		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              fTimeLimit;                                       		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              fReverceCentisecond;                              		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              fUpdateCentiLimit;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                nCount;                                           		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                nOldCount;                                        		// 0x012C (0x0004) [0x0000000000000000]              
	struct FString                                     strCentisecond;                                   		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CountColor;                                       		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fCentisecondTimeLimit;                            		// 0x0148 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FTimerInfo >                        TimerInfoArray;                                   		// 0x014C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3559 ];

		return pClassPointer;
	};

	void ASShowRemainTime ( int nTime, unsigned long bUrgent );
	void InitTIme ( );
	struct FString eventGetTimerColorUC ( );
	struct FString GetTimerColor ( );
	void UnregisterDelegate ( );
	void InitTImerMovieClip ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void RegisterDelegate ( );
	void SetAllTimerVisible ( unsigned long bVisible );
	void SetTimerVisible ( unsigned char Type, unsigned long bVisible );
	void ASHideReaminTime ( );
};

UClass* USFGFxHUDWidget_Timer::pClassPointer = NULL;

// Class SFGame.SFGFxMoviePlayer
// 0x0044 (0x01E0 - 0x019C)
class USFGFxMoviePlayer : public UGFxMoviePlayer
{
public:
	class USFOnlineSubsystemPC*                        OnlineSub;                                        		// 0x019C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DefaultRecommendScreenRes;                        		// 0x01A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                RecommandOtherRatio;                              		// 0x01AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           DisableIMEArray;                                  		// 0x01B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultIMENameArray;                              		// 0x01BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bEnterKeyWithIMECandidate : 1;                    		// 0x01C8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	class USFSoundGroup_UX*                            UXSoundGroup;                                     		// 0x01CC (0x0004) [0x0000000000000000]              
	class APlayerController*                           PlayerOwner;                                      		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnGFxKeyPressDelegate__Delegate;                		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3561 ];

		return pClassPointer;
	};

	bool SetMark ( int SlotIndex, struct FString ImgID );
	class USoundCue* GetUXSoundCue ( struct FName EventName, class USFSoundGroup_UX* InSoundGroup );
	void SetRenderTextureVisible ( unsigned long bVisible );
	int ProcessShortcutKeys ( struct FString KeyName );
	void SetOnGFxKeyPressDelegate ( struct FScriptDelegate InDelegate );
	void OnGFxKeyPressDelegate ( int KeyCode );
	class UAudioComponent* PlayGfxEventSound ( struct FName EventName, class USFSoundGroup_UX* UseSGroup, unsigned long bIsOverlapSound );
	void ShowMouseCursor ( unsigned long IsShow );
	void SetGFxHUDFocus ( unsigned long bEnable );
	void SetGFxFocus ( unsigned long CaptureInput, unsigned long Focus );
	int GetAspectRatioType ( int InResX, int InResY );
	void MakeRecommandScreenResolutions ( TArray< struct FString > ResolutionArray, TArray< struct FsScreenResList >* ScreenResLists );
	void PublicActionScriptVoid ( struct FString Path );
	void eventConsoleCommand ( struct FString Cmd );
	bool eventIsEnableDefaultIME ( );
	bool eventIsInDefaultIME ( struct FString strIME );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	bool Start ( unsigned long StartPaused );
	void Init ( class ULocalPlayer* LocPlay );
	void OpenWebURL ( struct FString strWebURL );
	void SetDefaultIME ( );
	void GetIMEList ( TArray< struct FString >* OutIMEArray );
	struct FString GetSubLanguage ( );
	struct FString GetLanguage ( );
	class ASFPlayerController* GetSFPlayerOwner ( int PlayerIndex );
	class ULocalPlayer* GetPlayerOwner ( int PlayerIndex );
	void GetPossibleScreenResolutions ( TArray< struct FString >* OutResults );
	void eventGetDefaultResolutionByCompositeLevel ( unsigned char CompositeLevel, int* ResX, int* ResY );
	void eventGetSFCompatibilityLevel ( unsigned char* CPULevel, unsigned char* GPULevel, unsigned char* CompositeLevel, unsigned char* CPUNumPhysicalProcessor, unsigned char* CPUNumCorePerProcessor, unsigned char* CPUCompanyType );
	class AWorldInfo* GetWorldInfo ( );
};

UClass* USFGFxMoviePlayer::pClassPointer = NULL;

// Class SFGame.SFGFxHUDMoviePlayer
// 0x002C (0x020C - 0x01E0)
class USFGFxHUDMoviePlayer : public USFGFxMoviePlayer
{
public:
	class ASFHUD*                                      myHUD;                                            		// 0x01E0 (0x0004) [0x0000000000000000]              
	TArray< class USFGFxHUDWidget* >                   HUDWidgetArray;                                   		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                WidgetInitializedCount;                           		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                WidgetBindingCount;                               		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                MoviePlayerIndex;                                 		// 0x01F8 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           MovieNameArray;                                   		// 0x01FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  StagePanelMC;                                     		// 0x0208 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3563 ];

		return pClassPointer;
	};

	void SetGlowModeGaugeValue ( int GlowModeEffectType );
	void OnToggleHUDWidget ( struct FString WidgetName );
	bool GetPingPosition ( struct FVector* TargetPosition );
	void OnShowFeverTimeIcon ( unsigned long bShow );
	void OnMinimapRadarCreated ( );
	void OnShowCombatReport ( );
	void OnIMETextInputUpdated ( );
	void OnVoteKickFinished ( unsigned long bShowResult, int AcceptPlayer, int RefusePlayer, int TotalPlayer );
	void OnVoteKickParticipated ( int nType );
	void OnVoteKickStarted ( struct FString strMessage );
	void OnPlayerHitEnemy ( unsigned char HitBody );
	void OnBuffStateChanged ( unsigned char BuffType, unsigned char BuffState );
	void OnToggleHelp ( );
	void OnChallengeChanged ( struct FName SupplyCode, int TaskIndex );
	void OnModeStatChanged ( );
	void OnPingNotified ( unsigned char PingType, struct FVector TargetLocation, class ASFPlayerReplicationInfo* CallerPRI );
	void OnCaptureRemainTimeChanged ( float remain, float total );
	void OnCaptureTeamChanged ( unsigned char captured_team, struct FString captured_player );
	void OnSpawnablePawnListInitialized ( );
	void OnWeaponSetChanged ( int new_set );
	void OnGameModeChanged ( );
	void OnModeMyDeathsUpdated ( int Count );
	void OnModeKillsUpdated ( int Count );
	void OnModeMoneyUpdated ( int new_point );
	void OnScreenResChanged ( );
	void OnHideLeftNoticeMessage ( );
	void OnShowLeftNoticeMessage ( struct FString strMessage );
	void OnChallengeCompleted ( struct FName SupplyCode, int task_index );
	void ASSetScaleMode ( );
	void ASSetLanguage ( class UGFxObject* Widget );
	void OnChangeAreaIndex ( unsigned char nNewAreaIndex, float Duration );
	bool NotifySetRadioMessage ( unsigned long bShow, class UClass* RadioMessageClass );
	void OnObsrToggleCombatMsg ( unsigned long bShow );
	void OnObsrToggleMiniMap ( unsigned long bShow );
	void OnObsrToggleLineBottom ( unsigned long bShow );
	void OnObsrToggleChattingLog ( );
	void OnObsrToggleHPBar ( );
	void OnObsrToggleModeInfo ( );
	void OnChangedObserverViewMode ( unsigned char InViewMode );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnSetTargetEndMotion ( int Index );
	void OnToggleHUDChanged ( );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnPlayerRespawned ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnPlayerPawnDied ( );
	void OnPawnDying ( class ASFPawn* DiedPawn );
	void OnChangedNumLives ( );
	void OnHideScoreBoard ( );
	void OnShowScoreBoard ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnUpdateUserConditionInfo ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bNeedInit );
	void OnLocalPRIInitialized ( );
	bool OnConvoyanceTopPlayerUpdated ( struct FString TopPlayer, unsigned long IsSetLeft );
	bool OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnStartSwitchingSide ( float Duration );
	void OnUpdatePerSecond ( );
	void OnEndTargetScore ( );
	void OnSetTutorialTotalScore ( int Score );
	void OnInitTargetScore ( );
	void OnTargetScoreMsg ( int Score, struct FVector TargetPosition );
	void OnCountDown ( float Duration );
	void OnPendingMatch ( );
	void OnChangedViewtarget ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ResetGFxHUD ( );
	void OnClose ( );
	int GetMoviePlayerBindingWidgetCount ( );
	bool IsAllWidgetInitialized ( );
	bool IsAlreadyAdded ( struct FName InWidgetName );
	void ConfigureHUDWidget ( class USFGFxHUDWidget* InView, struct FName WidgetName, struct FName WidgetPath, unsigned long bIsNotPathBinding );
	bool IsWidgetBindings ( struct FName WidgetName );
	bool HandleHUDWidgetBinding ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void PostRender ( );
	void Destroyed ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	bool Start ( unsigned long StartPaused );
	void PostBeginPlay ( class APlayerController* InPlayerOwner, class ASFHUD* InHUD );
	void Init ( class ULocalPlayer* LocPlay );
};

UClass* USFGFxHUDMoviePlayer::pClassPointer = NULL;

// Class SFGame.SFGFxHUD
// 0x0014 (0x0220 - 0x020C)
class USFGFxHUD : public USFGFxHUDMoviePlayer
{
public:
	int                                                PrevPRILength;                                    		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ActionMsgMC;                                      		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< class UGFxObject* >                        TestCombatMsgMC;                                  		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3565 ];

		return pClassPointer;
	};

	void eventIMETextInputUpdated ( );
	void registerMiniMapView ( class USFUIMinimapRadarGFxValue* RadarGFxValue );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundStarted ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void CheckShutDownLaw ( );
	void CheckAntiFatigue ( );
	void NotifyProcessTwitchTVCallbackInGame ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void NotifyMinuteHasPassed ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUD::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Death
// 0x00B0 (0x02BC - 0x020C)
class USFGFxHUD_Death : public USFGFxHUDMoviePlayer
{
public:
	class UGFxObject*                                  FirstRankMC;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  MyTopRankMC;                                      		// 0x0210 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RankBoardMC;                                      		// 0x0214 (0x0004) [0x0000000000000000]              
	struct FRankBoardStruct                            RankBoardArray;                                   		// 0x0218 (0x0080) [0x0000000000000000]              
	struct FSortPRIDataDeath                           SortPRIArray;                                     		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFPlayerReplicationInfo*                    FirstPRI;                                         		// 0x02A4 (0x0004) [0x0000000000000000]              
	int                                                MyRank;                                           		// 0x02A8 (0x0004) [0x0000000000000000]              
	int                                                WholePlayerNum;                                   		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FString                                     RankText;                                         		// 0x02B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3567 ];

		return pClassPointer;
	};

	void OnPreRoundEnded ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void SetShowMC ( unsigned long IsShow );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void eventSetModeInfoScore ( int MyScore, int FirstScore );
	void eventASSetRankBoardPlayerNum ( int PlayerNum );
	void eventASSetRankBoard ( );
	void eventASSetMyTopRank ( int RankNumber );
	void eventASSetFirstRankName ( struct FString FirstRankName );
	void ASShowRoundEnd ( unsigned long IsOpen, struct FString UnitName, struct FString Rank, struct FString CodeName, struct FString MatchEndRank );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundStarted ( );
	void Init ( class ULocalPlayer* LocPlay );
	void SortPRI ( TArray< class ASFPlayerReplicationInfo* >* PRIArray );
	void RefreshFirstRank ( );
	void RefreshRankBoard ( );
	void RefreshMyTopRank ( );
	void RefreshRank ( );
};

UClass* USFGFxHUD_Death::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardBase
// 0x00E0 (0x02EC - 0x020C)
class USFGFxHUD_ScoreBoardBase : public USFGFxHUDMoviePlayer
{
public:
	struct FSortPRIData                                SortPRIArray[ 0x8 ];                              		// 0x020C (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsShowScoreBoard : 1;                            		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnore : 1;                                      		// 0x026C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bVisibleAIName : 1;                               		// 0x026C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bViewPingNumber : 1;                              		// 0x026C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bHideRadar : 1;                                   		// 0x026C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIgnoreAI : 1;                                    		// 0x026C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      RedTeamIndex;                                     		// 0x0270 (0x0001) [0x0000000000000000]              
	unsigned char                                      ScoreBoardRadarType;                              		// 0x0271 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class UGFxObject*                                  ScoreBoardMC;                                     		// 0x0274 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              UserListMC[ 0x8 ];                                		// 0x0278 (0x0020) [0x0000000000000000]              
	class UGFxClikWidget*                              DeathGameListMC;                                  		// 0x0298 (0x0004) [0x0000000000000000]              
	TArray< int >                                      PingValueArray;                                   		// 0x029C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxClikWidget*                              MinimapMC;                                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	class ASFUIMinimapRadar*                           Radar;                                            		// 0x02AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurRedScore;                                      		// 0x02B0 (0x0004) [0x0000000000000000]              
	int                                                CurBlueScore;                                     		// 0x02B4 (0x0004) [0x0000000000000000]              
	struct FString                                     PingMsg_Attack;                                   		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PingMsg_Retreat;                                  		// 0x02C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   PingSound[ 0x2 ];                                 		// 0x02D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AIMode;                                           		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ScoreBoardMCName;                                 		// 0x02E4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3569 ];

		return pClassPointer;
	};

	bool GetPingPosition ( struct FVector* TargetPosition );
	bool IsValidPlayer ( class ASFPlayerReplicationInfo* PRI );
	void OnInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	void OnPingNotified ( unsigned char PingType, struct FVector TargetLocation, class ASFPlayerReplicationInfo* CallerPRI );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnPreRoundEnded ( );
	void OnUpdatePerSecond ( );
	void ASSetBackgroundColor ( );
	void SetRedTeamIndex ( );
	void SetHideRadar ( );
	void SetShowRadar ( );
	void UpdateWholeMapRotationValue ( );
	void InitializePingSystem ( );
	void registerMiniMapView ( class USFUIMinimapRadarGFxValue* RadarGFxValue );
	void ASCreateRadar ( );
	void OnMinimapRadarCreated ( );
	void ASSetTeamModeListNumber ( );
	void ASShowScoreBoard ( unsigned long bShow );
	void OnHideScoreBoard ( );
	void SetTeamScore ( int InRedScore, int InBlueScore );
	bool IsRadarValid ( );
	void OnShowScoreBoard ( );
	void ASSetPinMode ( unsigned long bValue );
	void UpdatePingMode ( );
	void SetScoreBoardMC ( class UGFxObject* InMC );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void Destroyed ( );
	void PostBeginPlay ( class APlayerController* InPlayerOwner, class ASFHUD* InHUD );
	unsigned char GetGfxPingData ( unsigned char Ping );
	void SortTeamPRI ( TArray< class ASFPlayerReplicationInfo* >* PRIArray );
	void SetSortPRIArray ( );
	void UpdateAllPlayersPRI ( unsigned char TeamIndex );
	bool UpdateScoreBoard ( );
};

UClass* USFGFxHUD_ScoreBoardBase::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardNormal
// 0x0028 (0x0314 - 0x02EC)
class USFGFxHUD_ScoreBoardNormal : public USFGFxHUD_ScoreBoardBase
{
public:
	unsigned long                                      bInitScore : 1;                                   		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     RoundFootString;                                  		// 0x02F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PointFootString;                                  		// 0x02FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MatchConditionText;                               		// 0x0308 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3571 ];

		return pClassPointer;
	};

	void ASSetTeamModeListNumber ( );
	void ASShowScoreBoard ( unsigned long bShow );
	void OnShowScoreBoard ( );
	void ASSetBackgroundColor ( );
	bool OnTeamScoreUpdated ( int InRedScore, int InBlueScore );
	void AsSetRoomBlueMarkTitle ( struct FString ClanMark );
	void AsSetRoomRedMarkTitle ( struct FString ClanMark );
	void UpdateRoomTitleMark ( );
	void GetTeamMarkWithChanged ( unsigned char Size, struct FString* RedMark, struct FString* BlueMark );
	struct FString GetVictoryCondition ( );
	void SetTitleText ( );
	struct FString GetScoreBoardRound ( );
	struct FString GetScoreBoardPoint ( );
	void SetTitle ( );
	void SetTeamScore ( int InRedScore, int InBlueScore );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void UpdateAllPlayersPRI ( unsigned char TeamIndex );
};

UClass* USFGFxHUD_ScoreBoardNormal::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardConvoyance
// 0x0018 (0x032C - 0x0314)
class USFGFxHUD_ScoreBoardConvoyance : public USFGFxHUD_ScoreBoardNormal
{
public:
	struct FString                                     ConvoyanceRedText;                                		// 0x0314 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConvoyanceBlueText;                               		// 0x0320 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3573 ];

		return pClassPointer;
	};

	void UpdateAllPlayersPRI ( unsigned char TeamIndex );
};

UClass* USFGFxHUD_ScoreBoardConvoyance::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardThunderRun
// 0x0028 (0x033C - 0x0314)
class USFGFxHUD_ScoreBoardThunderRun : public USFGFxHUD_ScoreBoardNormal
{
public:
	int                                                PreviousTime;                                     		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                nCurrRound;                                       		// 0x0318 (0x0004) [0x0000000000000000]              
	class ASFThunderRunTeamInfo*                       SFTI[ 0x8 ];                                      		// 0x031C (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3575 ];

		return pClassPointer;
	};

	void UpdateLapTime ( unsigned long bForceUpdate );
	void OnUpdatePerSecond ( );
	void GetScoreLapTimeInfo ( unsigned char Team, int SFGRITime, struct FString* outArea, struct FString* outAreaText, struct FString* outLapTime, struct FString* outGoalText );
	struct FString GetScoreBoardLapTime ( unsigned char Team, int SFGRITime );
	void AddAsValue_ThunderRunInfo ( struct FString strAD, struct FString strAreaText, struct FString strTime, struct FString strGoalText, TArray< struct FASValue >* args );
	void OnShowScoreBoard ( );
	void UpdateCurrentRound ( );
	void SetThunderRunTeamInfo ( );
	void OnStartSwitchingSide ( float Duration );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void SetTitle ( );
};

UClass* USFGFxHUD_ScoreBoardThunderRun::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardWarrior
// 0x000C (0x0320 - 0x0314)
class USFGFxHUD_ScoreBoardWarrior : public USFGFxHUD_ScoreBoardNormal
{
public:
	struct FString                                     RespawnDelayMessage;                              		// 0x0314 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3577 ];

		return pClassPointer;
	};

	void ASSetBlueTeamScore ( struct FString ScoreText );
	void ASSetRedTeamScore ( struct FString ScoreText );
	void SetTeamScore ( int InRedScore, int InBlueScore );
	void RegisterDelegate ( );
	void UpdateAllPlayersPRI ( unsigned char TeamIndex );
	bool IsValidPlayer ( class ASFPlayerReplicationInfo* PRI );
};

UClass* USFGFxHUD_ScoreBoardWarrior::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardZombieHideSeek
// 0x0000 (0x0314 - 0x0314)
class USFGFxHUD_ScoreBoardZombieHideSeek : public USFGFxHUD_ScoreBoardNormal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3579 ];

		return pClassPointer;
	};

	bool IsValidPlayer ( class ASFPlayerReplicationInfo* PRI );
};

UClass* USFGFxHUD_ScoreBoardZombieHideSeek::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardObserver
// 0x0000 (0x02EC - 0x02EC)
class USFGFxHUD_ScoreBoardObserver : public USFGFxHUD_ScoreBoardBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3581 ];

		return pClassPointer;
	};

	bool IsRadarValid ( );
	void ASShowScoreBoard ( unsigned long bShow );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void UpdateAllPlayersPRI ( unsigned char TeamIndex );
};

UClass* USFGFxHUD_ScoreBoardObserver::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardSurvival
// 0x0004 (0x02F0 - 0x02EC)
class USFGFxHUD_ScoreBoardSurvival : public USFGFxHUD_ScoreBoardBase
{
public:
	unsigned long                                      bHideCriticalKillCount : 1;                       		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3583 ];

		return pClassPointer;
	};

	void SetTitleText ( );
	void SetTitle ( );
	void OnShowScoreBoard ( );
	void ASShowScoreBoard ( unsigned long bShow );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void UpdateAllPlayersPRI ( unsigned char TeamIndex );
};

UClass* USFGFxHUD_ScoreBoardSurvival::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ThunderRun
// 0x00E4 (0x02F0 - 0x020C)
class USFGFxHUD_ThunderRun : public USFGFxHUDMoviePlayer
{
public:
	class UGFxObject*                                  _global;                                          		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ProgressGaugeMC;                                  		// 0x0210 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ProgressNoticeMC;                                 		// 0x0214 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RoundEndMsgMC;                                    		// 0x0218 (0x0004) [0x0000000000000000]              
	TArray< class UGFxObject* >                        RotationMC;                                       		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           strAttackMessage;                                 		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           strDefendMessage;                                 		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedFastWin;                                 		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedAreaWin;                                 		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedScoreWin;                                		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedFirstWin;                                		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedFastAreaWin;                             		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedScore;                                   		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned char                                      nAreaIndex;                                       		// 0x0288 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	class ASFThunderRunVolume*                         ThunderrunVol[ 0x4 ];                             		// 0x028C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              PassedTime;                                       		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              UpdatePeriodTime;                                 		// 0x02A0 (0x0004) [0x0000000000000000]              
	int                                                AttackProgress;                                   		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PlayerProgress;                                   		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldArrowRotaion;                                  		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FVector                                     vPointLoc;                                        		// 0x02B0 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   StartAreaLocation;                                		// 0x02BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   EndAreaLocation;                                  		// 0x02C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   AreaDirection;                                    		// 0x02CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              AreaDist;                                         		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WarningBlinkDistance;                             		// 0x02D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WarningTime;                                      		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     CurPosition;                                      		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsWarningBlink : 1;                              		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3585 ];

		return pClassPointer;
	};

	void InitASSetGaugeData ( );
	void ASSetGaugeTimeTab ( struct FString str1st, struct FString str2st );
	void ASSetRoundSundrunInfoClose ( );
	void ASSetThunderRunRoundEnded ( struct FString strLeftArea, struct FString strLocalizedLeft, struct FString strLeftTime, struct FString strRightArea, struct FString strLocalizedRight, struct FString strRightTime, struct FString strLeftScore, struct FString strRightScore, struct FString strLeftResult, struct FString strRightResult, struct FString strLeftkill, struct FString strRightKill, struct FString strLocalizedKill, struct FString strLeftGoalText, struct FString strRightGoalText );
	void ASSetOccupationMsgVisible ( unsigned long bVisible );
	void ASSetProgressionInfo ( struct FString strCurPosition );
	void ASShowProgressionNotice ( unsigned long bShow );
	void ASShowProgressGauge ( unsigned long bShow );
	void GetResultText ( unsigned char WinTeamIndex, struct FString StrResult, struct FString* outLeftResult, struct FString* outRightResult );
	void UpdateAreaIndex ( unsigned char nNewAreaIndex );
	void OnChangeAreaIndex ( unsigned char nNewAreaIndex, float Duration );
	void OnUpdatePerSecond ( );
	void ChangedLapTime ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	struct FString GetLastLapTime ( class ASFThunderRunTeamInfo* SFTI );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnPreRoundEnded ( );
	bool NotifySetRadioMessage ( unsigned long bShow, class UClass* RadioMessageClass );
	void InitGaugeWarningBlink ( );
	void OnRoundStarted ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void ResetGFxHUD ( );
	void PostBeginPlay ( class APlayerController* InPlayerOwner, class ASFHUD* InHUD );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	void ASSetWarningBlinkVisible ( struct FString strCurPosition, unsigned long bVisible );
	void ASSetAttackPosition ( );
};

UClass* USFGFxHUD_ThunderRun::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Training
// 0x004C (0x0258 - 0x020C)
class USFGFxHUD_Training : public USFGFxHUDMoviePlayer
{
public:
	class UGFxClikWidget*                              StopWatchMC;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TargetCountMC;                                    		// 0x0210 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              KeyInfoMC;                                        		// 0x0214 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeyInfoShow : 1;                                 		// 0x0218 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bKeyInfoMinimized : 1;                            		// 0x0218 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHideFromLeftNotice : 1;                          		// 0x0218 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStartedStopWatch : 1;                            		// 0x0218 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPausedStopWatch : 1;                             		// 0x0218 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPlayStopWatchAni : 1;                            		// 0x0218 (0x0004) [0x0000000000000000] [0x00000020] 
	TArray< struct FString >                           strKeyInfoMessage;                                		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strNameChangeNotifyMessage;                       		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCurTargetMessage;                              		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMaxTargetMessage;                              		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                MaxTargetCount;                                   		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                nCurSeconds;                                      		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              fCurCentiSeconds;                                 		// 0x0254 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3587 ];

		return pClassPointer;
	};

	void OnHideLeftNoticeMessage ( );
	void OnShowLeftNoticeMessage ( struct FString strMessage );
	void OnTargetSpawned ( int nCurCount );
	void ASPlayStopWatchAni ( unsigned long bPlay );
	void ASShowStopWatch ( unsigned long bShow );
	void eventUpdateTimer ( );
	void OnClearTimer ( );
	void OnToggleTimer ( );
	void ASShowCurTargetCount ( unsigned long bShow, int nCurCount );
	void ASSetMinimizeKeyInfo ( );
	void ASShowKeyInfo ( unsigned long bShow );
	void ASSetKeyInoMessage ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundStarted ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_Training::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_TutorialResults
// 0x0078 (0x0284 - 0x020C)
class USFGFxHUD_TutorialResults : public USFGFxHUDMoviePlayer
{
public:
	class UGFxObject*                                  ResultBoardMC;                                    		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  sealAttachMC;                                     		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsShowTutorialResults : 1;                       		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxClikWidget*                              btnOk;                                            		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCancel;                                        		// 0x021C (0x0004) [0x0000000000000000]              
	struct FString                                     EndTime;                                          		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ValidScore;                                       		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     InvalidScore;                                     		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TimeScore;                                        		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                PlusScore;                                        		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                MinusScore;                                       		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                TotalScore;                                       		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                Seal;                                             		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FString                                     ResultRank;                                       		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ViewRemainExp;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FString                                     ViewBeforeGFxRank;                                		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LevelUpCount;                                     		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FString                                     TutohudCount;                                     		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3589 ];

		return pClassPointer;
	};

	void ShowMouseCursor ( unsigned long IsShow );
	void OnCancelButtonPress ( struct FEventData ev );
	void OnOKButtonPress ( struct FEventData ev );
	void SetTutorialResults ( struct FString SetEndTime, struct FString SetValidScore, struct FString SetInvalidScore, int SetTimeScore, int SetPlusScore, int SetMinusScore, int SetToalScore );
	void SetSealAttach ( int SetSeal, struct FString SetResultRank );
	void ASUpdateExp ( struct FString LeftClass, struct FString RightClass, int OrigExp, int EarnExp, int MaxExp, int ShowExp, struct FString strPercent );
	void ASSetToturialResultScore ( );
	void ASSetSealAttach ( );
	void ASsetTutorialResultScoreAllResert ( );
	void ASsetSealAttachCancle ( );
	void ASShowTutorialBoard ( unsigned long bShow );
	bool OnHideTutorialResults ( );
	void OnShowTutorialResults ( );
	void SetTutorialExpUpAnimationValue ( );
	void SetTutorialScore ( );
	void ShowMouseCursorTimer ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void InitScores ( );
	void Destroyed ( );
	void Init ( class ULocalPlayer* LocPlay );
};

UClass* USFGFxHUD_TutorialResults::pClassPointer = NULL;

// Class SFGame.SFGFxLobby
// 0x03D0 (0x05B0 - 0x01E0)
class USFGFxLobby : public USFGFxMoviePlayer
{
public:
	TArray< struct FSFViewInfo >                       ViewData;                                         		// 0x01E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxObject*                                  RootMC;                                           		// 0x01EC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ManagerMC;                                        		// 0x01F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInitialized : 1;                                 		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      UseLowGoreForGameMaster : 1;                      		// 0x01F4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bEnableLanguageBar : 1;                           		// 0x01F4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bShowLanguageBarWithFocus : 1;                    		// 0x01F4 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bShowUSNWaitingRoom : 1;                          		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnablePersonalGameExit : 1;                      		// 0x01F4 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      UseNetmarbleCoupon : 1;                           		// 0x01F4 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bSeasonDecoAni : 1;                               		// 0x01F4 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bChannelRelogin : 1;                              		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPendingCashCharge : 1;                           		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bTPNoticeActivate : 1;                            		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPlayingIntroVideo : 1;                           		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsFolderSelectClicked : 1;                       		// 0x01F4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bOnOKGameClosed : 1;                              		// 0x01F4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      IsFiringRangeVisible : 1;                         		// 0x01F4 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	TArray< class USFGFxLobbyScreen* >                 LobbyScreenArray;                                 		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFGFxLobbyScreen*                           ActiveLobbyScreen;                                		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                PrevWidgetIndex;                                  		// 0x0208 (0x0004) [0x0000000000000000]              
	int                                                WidgetInitializedCount;                           		// 0x020C (0x0004) [0x0000000000000000]              
	class USFGFxLobby_Login*                           LoginManager;                                     		// 0x0210 (0x0004) [0x0000000000000000]              
	class USFGFxLobby_Navi*                            NaviManager;                                      		// 0x0214 (0x0004) [0x0000000000000000]              
	class USFGFxLobby_MessengerBuddyList*              MsgrBuddyList;                                    		// 0x0218 (0x0004) [0x0000000000000000]              
	class USFGFxLobby_MsgrChatting*                    MsgrChatting;                                     		// 0x021C (0x0004) [0x0000000000000000]              
	class USFGFxLobby_NotifyWindow*                    NotifyWindow;                                     		// 0x0220 (0x0004) [0x0000000000000000]              
	class USFGFxLobby_PurchaseGuide*                   PurchaseGuide;                                    		// 0x0224 (0x0004) [0x0000000000000000]              
	class USFGFxLobbyScreenEx*                         SideBackground;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	class USFGFxLobby_GachaRoll*                       GachaRoll;                                        		// 0x022C (0x0004) [0x0000000000000000]              
	TArray< class USFGFxDialog* >                      LobbyDialogArray;                                 		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFGFxDialog* >                      OpenDialogArray;                                  		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFGFxDialog_SystemMessage*                  SystemNoticeDlg;                                  		// 0x0248 (0x0004) [0x0000000000000000]              
	class USFGFxDialog_Following*                      FollowingDlg;                                     		// 0x024C (0x0004) [0x0000000000000000]              
	class USFGFxDialog_WaitingAck*                     WaitingAckDialog;                                 		// 0x0250 (0x0004) [0x0000000000000000]              
	class USFGFxDialog_WaitingAck*                     WaitingChangeObjDialog;                           		// 0x0254 (0x0004) [0x0000000000000000]              
	unsigned char                                      LoginViewType;                                    		// 0x0258 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      ForceScreenIndex;                                 		// 0x0259 (0x0001) [0x0000000000000000]              
	TArray< struct FSPendingView >                     PendingOpenScreenArray;                           		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSPendingView >                     PendingCloseScreenArray;                          		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSPendingView >                     PendingOpenDialogArray;                           		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSPendingView >                     PendingCloseDialogArray;                          		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSPendingView >                     PendingScreenExArray;                             		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SeasonIndex;                                      		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFPawn_Lobby*                               statPawnOriginal;                                 		// 0x029C (0x0004) [0x0000000000000000]              
	class ASFPawn_Lobby*                               statPawnResult;                                   		// 0x02A0 (0x0004) [0x0000000000000000]              
	class USceneCapture2DComponent*                    CharCaptureComponent;                             		// 0x02A4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ACameraActor*                                CharCameraActor;                                  		// 0x02A8 (0x0004) [0x0000000000000000]              
	int                                                ItemTag_NEW;                                      		// 0x02AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_Best;                                     		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_HOT;                                      		// 0x02B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_EVENT;                                    		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_PC;                                       		// 0x02BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_CASH;                                     		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_VIP;                                      		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_MonthlyReward;                            		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_Discount;                                 		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_GashaRareWeapon;                          		// 0x02D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemTag_FEVER;                                    		// 0x02D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FsRepairReserved                            RepairReserved;                                   		// 0x02D8 (0x0014) [0x0000000000000000]              
	TArray< struct FsRepairReserved >                  RepairReserveds;                                  		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UnablebuyCauseCashString;                         		// 0x02F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RepairQuestings[ 0xA ];                           		// 0x0304 (0x0078) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SuccessSendGiftMessage;                           		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      ProtocolAtChatMsgArray;                           		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFGFxMoviePlayer_RankMark*                  RankMark;                                         		// 0x0394 (0x0004) [0x0000000000000000]              
	class USFGFxMoviePlayer_ClanMark*                  ClanMark;                                         		// 0x0398 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  _global;                                          		// 0x039C (0x0004) [0x0000000000000000]              
	TArray< class USFGFxLobbyScreenEx* >               LobbyScreenExArray;                               		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFItemManager*                              ItemManager;                                      		// 0x03AC (0x0004) [0x0000000000000000]              
	class USFEmblemManager*                            EmblemManager;                                    		// 0x03B0 (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultScreenShotsPath;                           		// 0x03B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultRecordPath;                                		// 0x03C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FSRepairDialogInfo                          RepairDialogInfo;                                 		// 0x03CC (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSRepairAllDialogInfo                       RepairAllDialogInfo;                              		// 0x041C (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ForcedMainTabIndex;                               		// 0x046C (0x0004) [0x0000000000000000]              
	struct FString                                     Message_FacebookInterlocked;                      		// 0x0470 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Message_FacebookInterlockedWithSP;                		// 0x047C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      CacheWeaponItemArray;                             		// 0x0488 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       LobbyBGM;                                         		// 0x0494 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     OriginalCameraLoc;                                		// 0x049C (0x000C) [0x0000000000000000]              
	struct FVector                                     CameraOffset;                                     		// 0x04A8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSRecvPacketHandler >               RecvPacketHandlerArray;                           		// 0x04B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPacketRecv__Delegate;                         		// 0x04C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ViewDataSortByDepth__Delegate;                  		// 0x04CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAnimEndDelegate__Delegate;                    		// 0x04D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserSlotDelegate__Delegate;              		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserPopUpMenuDelegate__Delegate;         		// 0x04F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerRowRollOverDelegate__Delegate;          		// 0x04FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerRowRollOutDelegate__Delegate;           		// 0x0508 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnADImageBtnClickDelegate__Delegate;            		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseChangeRoomNameDelegate__Delegate;        		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRoomListClickHeaderBtnDelegate__Delegate;     		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickTPNoticeDelegate__Delegate;              		// 0x0538 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickTPNoticeAtNaviDelegate__Delegate;        		// 0x0544 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickBtnUseExtraRewardCoinDelegate__Delegate; 		// 0x0550 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickExtraRewardCardDelegate__Delegate;       		// 0x055C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickMiniGachaDelegate__Delegate;             		// 0x0568 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFinishChoiceExtraRewardAnimationDelegate__Delegate;		// 0x0574 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSubmitAreaSelectDelegate__Delegate;           		// 0x0580 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHelpGuidesDoubleClickDelegate__Delegate;      		// 0x058C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickBtnChangeEmblemDelegate__Delegate;       		// 0x0598 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickAddtoBuddyDelegate__Delegate;            		// 0x05A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3591 ];

		return pClassPointer;
	};

	bool ProcessAfterClanMake ( int ErrorCode, struct FString CSN, struct FString ClanName );
	struct FName GetLobbyBGM ( );
	bool PassCacheWeaponItem ( TArray< int > WeaponItemArray );
	void NotifyGetRareReware ( );
	void PKT_GetGashaVIPList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGashaVIPList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void OpenGachaRoll ( );
	void OnFacebookInterlocked ( );
	bool AutoUploadEventToFacebook ( unsigned char EventType, TArray< struct FString > args );
	void PKT_UpdateFacebookInfo_REQ_OK ( class UPacket* recvPacket );
	unsigned char GetLoginViewType ( );
	void NotifyUsedSendedGiftItem ( );
	void PKT_SteamBillingFinalizeTxn_REQ_OK ( class UPacket* Packet );
	void PKT_SendGift_Auto ( class UPacket* Packet );
	void PKT_SendGift_REQ_OK ( class UPacket* Packet );
	bool IsUseNetmarbleCoupon ( );
	void PKT_GetUserGroupCheck_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetUserGroupCheck_REQ_OK ( class UPacket* recvPacket );
	void OnClickAddtoBuddy ( struct FString strCodeName );
	void SetOnClickAddtoBuddyDelegate ( struct FScriptDelegate InDelegate );
	void OnClickAddtoBuddyDelegate ( struct FString CodeName );
	bool IsInGameLobby ( );
	struct FString GetTeamMark ( unsigned char Team, unsigned char Size );
	bool SetHoldZoomKey ( unsigned long bUseHoldZoom );
	bool SetSprintKey ( unsigned long bUseDoubleClick );
	void navi_OnBtnTopCommunityClick ( );
	void navi_OnBtnTopPictureClick ( );
	struct FString GetDefaultScreenRecordPath ( );
	struct FString GetDefaultScreenCapturePath ( );
	class USFGFxUIView* datastore_GetTarget ( struct FString BindingName );
	void datastore_requestItemRange ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject* Scope, struct FString Callback );
	void datastore_requestItemAt ( struct FString BindingName, int Index, class UGFxObject* Scope, struct FString Callback );
	void datastore_bind ( struct FString BindingName, class UGFxObject* Scope );
	void OnClickBtnChangeEmblem ( );
	void SetOnClickBtnChangeEmblemDelegate ( struct FScriptDelegate InDelegate );
	void OnClickBtnChangeEmblemDelegate ( );
	void OnDblClickHelpGuide ( );
	void SetOnHelpGuidesDoubleClickDelegate ( struct FScriptDelegate InDelegate );
	void OnHelpGuidesDoubleClickDelegate ( );
	void OnSubmitAreaSelect ( struct FString MainAreaCode, struct FString SubAreaCode );
	void SetOnSubmitAreaSelectDelegate ( struct FScriptDelegate InDelegate );
	void OnSubmitAreaSelectDelegate ( struct FString MainAreaCode, struct FString SubAreaCode );
	void OnFinishChoiceExtraRewardAnimation ( );
	void SetOnFinishChoiceExtraRewardAnimationDelegate ( struct FScriptDelegate InDelegate );
	void OnFinishChoiceExtraRewardAnimationDelegate ( );
	void OnClickMiniGacha ( int CardIndex );
	void OnClickExtraRewardCard ( );
	void SetOnClickMiniGachaDelegate ( struct FScriptDelegate InDelegate );
	void OnClickMiniGachaDelegate ( int CardIndex );
	void SetOnClickExtraRewardCardDelegate ( struct FScriptDelegate InDelegate );
	void OnClickExtraRewardCardDelegate ( );
	void OnClickBtnUseExtraRewardCoin ( int CoinCount );
	void SetOnClickBtnUseExtraRewardCoinDelegate ( struct FScriptDelegate InDelegate );
	void OnClickBtnUseExtraRewardCoinDelegate ( int CoinCount );
	void OnClickTPNoticeAtNavi ( );
	void SetOnClickTPNoticeAtNaviDelegate ( struct FScriptDelegate InDelegate );
	void OnClickTPNoticeAtNaviDelegate ( );
	void OnClickTPNotice ( );
	void SetOnClickTPNoticeDelegate ( struct FScriptDelegate InDelegate );
	void OnClickTPNoticeDelegate ( );
	void OnRoomListClickHeaderBtn ( int Idx );
	void SetOnRoomListClickHeaderBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnRoomListClickHeaderBtnDelegate ( int ClickedHeader );
	void OnADImageTabBtnClicked ( int nIndex );
	void OnCloseChangeRoomName ( struct FString RoomTitle, struct FString Password );
	void OnPlayerRowRollOut ( int Idx );
	void OnPlayerRowRollOver ( int Idx );
	void OnClickUserSlot ( int SlotIndex, int mouseIndex );
	void OnClickUserPopUpMenu ( int Index );
	void SetOnCloseChangeRoomNameDelegate ( struct FScriptDelegate InDelegate );
	void OnCloseChangeRoomNameDelegate ( struct FString RoomTitle, struct FString RoomPassword );
	void SetOnADImageBtnClickDelegate ( struct FScriptDelegate InDelegate );
	void OnADImageBtnClickDelegate ( int Index );
	void SetOnPlayerRowRollOutDelegate ( struct FScriptDelegate InDelegate );
	void OnPlayerRowRollOutDelegate ( int Idx );
	void SetOnPlayerRowRollOverDelegate ( struct FScriptDelegate InDelegate );
	void OnPlayerRowRollOverDelegate ( int Idx );
	void SetOnClickUserPopUpMenuDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserPopUpMenuDelegate ( int Index );
	void SetOnClickUserSlotDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserSlotDelegate ( int SlotIndex, int mouseIndex );
	void ForceChangeMainTab ( unsigned char ScreenIndex, int MainTabIndex, int SubTabIndex );
	void NotifyNewPveLevelOpened ( );
	void NotifyQuickJoinDialogOK ( );
	int QuickJoinBtnPress ( );
	void OpenCashChargePage ( );
	void RequestNewCash ( );
	void CloseSSOWeb ( );
	void NotifyDisguiseRankChanged ( );
	void NotifyCashChargePageClosed ( );
	void NotifyDesertionResetted ( );
	void NotifyWinLoseResetted ( );
	void NotifyKillDeathResetted ( );
	void NotifyClanNameChanged ( );
	void NotifyMsgrBuddyCodeNameChanged ( int InChangedCodeNameUSN, struct FString InChangedCodeName );
	void NotifyClanMarkChanged ( );
	void NotifyColorCodeNameChanged ( );
	void NotifyCodeNameChanged ( );
	void NotifyItemBuySuccess ( int ItemId, struct FQWord ItemSN, int ItemPrice, unsigned long bIsInUse );
	void NotifyRewardItemAddedToInven ( );
	void NotifyOpenChoicePackageSuccess ( );
	void NotifyOpenPackageSuccess ( );
	void NotifyMonthlyRewardStarted ( );
	void NotifyVIPCouponUseStarted ( int ItemId, struct FString EndDate );
	void NotifyNewItemUsedSuccess ( );
	void NotifyActiveScreenClosed ( );
	void OnUpdateProfileEmblem ( );
	void GetOverlapItemIndex ( int Row, int column );
	void SetFollowingDialogMsg ( struct FString msg );
	void HideFollowingDialog ( );
	void ShowFollowingDialog ( struct FString FollowingMsg );
	class USFGFxDialog* OpenDialogGameInviteResult ( int FromUSN, int Result );
	bool IsViewingFullScreenHelp ( );
	void CloseFullScreenHelp ( );
	class USFGFxDialog_FullScrHelp* OpenFullScreenHelp ( unsigned long bAutoCloseTime );
	void ShowLobbyChattingMsgList ( unsigned long bAll );
	void AddLobbyChatMessage ( unsigned char ChatType, struct FString strChatMsg, unsigned long bIgnoreChatFilter );
	void PKT_RepairItemMulti_REQ_OK ( class UPacket* Packet );
	void OpenRepairAllDlg ( int X, int Y, TArray< struct FQWord > ItemSNs );
	void PKT_RepairItem_REQ_OK ( class UPacket* Packet );
	void OpenRepairDlg ( int DialogPosX, int DialogPosY, struct FQWord ItemSN );
	void HideWeaponPerformGraphCompare ( );
	void HideWeaponPerformGraph ( );
	void ShowWeaponPerformGraph ( int MainWeaponID );
	void Fade ( float TargetAlpha, float Duration, float InFadeDelay, unsigned long bUseInitialFadeValue, float FadeAmountInitialValue );
	void ReturnToLogin ( );
	void NotifyGameStarted ( );
	void CloseScreenEx ( );
	void OpenScreenEx ( unsigned long bOpenSideBackground );
	void CloseGachaRoll ( );
	void CloseNotifyWindow ( );
	void CloseMessenger ( );
	void CloseNavigation ( );
	void ClosePurchaseGuide ( );
	void OpenPurchaseGuideWindow ( );
	void CloseSideBackground ( );
	void OpenSideBackground ( );
	void OpenNavigation ( );
	void OpenNotifyWindow ( );
	void OpenMessenger ( );
	void UpdateOwnerServerLocation ( int inGame );
	bool GetLobbyDefaultScreenSize ( int* OutX, int* OutY );
	bool GetIsLobbyFullScreen ( );
	void GetPrimaryMonitorWidth ( int* OutX, int* OutY );
	void SetEnableDoubleClickMovement ( unsigned long bValue );
	void SetGore ( unsigned long bValue );
	void SetIgnoreWindowSwitching ( unsigned long bValue );
	bool GetIgnoreWindowSwitching ( );
	void OpenWindowMessageBox ( struct FString strMsg );
	void RequestGameMasterCommand ( struct FString strCommand );
	void SetOnCloseAnimEndDelegate ( struct FScriptDelegate InDelegate );
	void SetOnOpenAnimEndDelegate ( struct FScriptDelegate InDelegate );
	void OnAnimEndDelegate ( struct FString Caller );
	bool GetViewInfoByWidgetIndex ( int WidgetIndex, struct FSFViewInfo* OutViewInfo );
	bool GetViewNameListbySwfName ( struct FString Caller, TArray< struct FName >* ViewNames );
	struct FName GetViewNamebySwfName ( struct FString Caller );
	void OnCloseViewEnd ( struct FString Caller );
	void OnOpenViewEnd ( struct FString Caller );
	void AddPendingCloseDialog ( class USFGFxUIView* InView );
	void AddPendingCloseScreen ( class USFGFxUIView* InView, int OptionalIndex );
	bool IsPendingOpenScreen ( );
	void AddPendingOpenDialog ( class USFGFxUIView* InView );
	void AddPendingOpenScreen ( class USFGFxUIView* InView, int InOtherViewIndex );
	void OnOKGameClosed ( );
	void OnGameClosed ( );
	void OpenForceExitDialog ( int ExitType, int ErrCode, struct FString ForceExitMessage );
	void OpenGameExitDialog ( );
	void OnSteamEURLoginError ( );
	void ProcessLoginError ( int ProtocolID, int ResultID, struct FString BlockExpirationDate );
	void InitLobbyScreenSize ( unsigned long bFromLogin );
	void SetTimerLoginOK ( );
	void PKT_LOGIN_REQ_OK ( class UPacket* Packet );
	void NotifyProcessTwitchTVCallback ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void NotifyPlayerTagUpdated ( );
	void NotifyClanMsgResultClanWar ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinNo ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoin ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void PKT_ClanMessage_Auto ( class UPacket* Packet );
	void OpenNextChallengeRewardDialog ( );
	void PKT_ChallengeCompleteFromServer_AUTO ( class UPacket* recvPacket );
	void PKT_UpdateTaskList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetRewardItem_REQ_OK ( class UPacket* recvPacket );
	void OnReceivedReward ( );
	void PKT_SetUseGift_REQ_OK ( class UPacket* recvPakcet );
	void OpenPromoEventProgress ( unsigned long bCheckTransaction );
	void PKT_RealTimeEventRefresh_Auto ( class UPacket* recvPacket );
	void PKT_GetMyPromotionEvent_REQ_Transaction ( class UPacket* recvPacket );
	void PKT_GetMyPromotionEvent_REQ_OK ( class UPacket* recvPacket );
	void CheckReceivedPromoEventReward ( );
	void SetDelayedPromoEventReward ( );
	void PKT_GetPromotionEventItemListMessage_Auto ( class UPacket* recvPacket );
	void OpenModeRewardDialog ( );
	void PKT_GetMonthlyRewardUserCash_OK ( class UPacket* recvPacket );
	void PKT_SetUseGachaBonusGauge_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetUseCoupon_REQ_OK ( class UPacket* recvPacket );
	void OpenFailedCashBuyDialog ( );
	void PKT_BuyItem_REQ_OK ( class UPacket* Packet );
	void PKT_Whisper_REQ_OK ( class UPacket* Packet );
	void PKT_Say_REQ_OK ( class UPacket* Packet );
	void PKT_GetGachaBonusGauge_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetCash_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetTp_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetSp_REQ_OK ( class UPacket* recvPacket );
	void PKT_OpenChoicePackageItem_REQ ( class UPacket* recvPacket );
	void PKT_OpenPackageItem_REQ_OK ( class UPacket* recvPacket );
	void UpdatePreview ( );
	void PKT_RemoveParts_REQ_OK ( class UPacket* recvPacket );
	void PKT_ApplyParts_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetItemProperty_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetUseNewItem_REQ_OK ( class UPacket* recvPacket );
	void PKT_UseRandomBoxItem_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetGameMasterCommand_OK ( class UPacket* recvPacket );
	void PKT_GetUserLocaion_REQ_OK ( class UPacket* recvPacket );
	void PlayCountDownSoundWithChatMsg ( );
	void PKT_FeverTimeEventFinish_AUTO ( class UPacket* Packet );
	void PKT_FeverTimeEventStart_AUTO ( class UPacket* Packet );
	void PKT_RealTimeEventMsgReceived ( class UPacket* Packet );
	void PostProcessClanInvite ( struct FSChatMsgInfo ChatMsgInfo );
	void PKT_GetRareRewardUser_Auto ( class UPacket* Packet );
	void PKT_WhisperMessage_Auto ( class UPacket* Packet );
	void PKT_ChatMessage_Auto ( class UPacket* Packet );
	void PKT_DisconnectedFromServerMessage_Auto ( class UPacket* Packet );
	void PKT_ServerNoticeMessage_Auto ( class UPacket* Packet );
	bool IsProtocolAtChatMsg ( int InProtocol );
	void DisplayPacketError ( int ProtocolID, int ErrorID );
	void HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void DelegateSetupFlashEvent ( );
	void DelegateSetup ( );
	void ProcessPacketHandler ( int ProtocolID, int ResultID, class UPacket* Packet );
	void AddRecvPacketHandler ( int ProtocolID, int ResultID, struct FScriptDelegate OnPacketRecvHandler );
	void ASSetServiceEvironment ( struct FString Language, struct FString ServiceCode, struct FString Branch );
	void NotifyReturnedLobby ( unsigned char InReturnLobby );
	void StartLobbyWithLoginView ( );
	void StartLobby ( );
	class UAudioComponent* RePlayGfxEventSound ( struct FName EventName, class USFSoundGroup_UX* UseSGroup );
	void StopGfxEventSound ( struct FName EventName, class USFSoundGroup_UX* UseSGroup );
	class UAudioComponent* PlayGfxEventSound ( struct FName EventName, class USFSoundGroup_UX* UseSGroup, unsigned long bIsOverlapSound );
	bool IsDisableKeyInputForIME ( struct FString KeyName );
	bool IsDisableFunctionKeyInput ( struct FString KeyName );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool CheckProcessShortcutKeys ( struct FString KeyName );
	void OnGFxKeyPress ( int KeyCode );
	void SetNavgationEnable ( int nEnable, int nBackbtn, int nEnvbtn, int nSerialbtn );
	void HandlingInternetError ( struct FString InRequestURL, int QueryResult, int ResultID );
	void ShowSystemMessage ( struct FString strMessage, int DurationSec );
	void eventIMETextInputUpdated ( );
	void eventConsoleCommand ( struct FString Cmd );
	void CheckVipItem ( TArray< struct FSRecvReward > ItemArray );
	void CheckOutDateItem ( );
	void CheckShutDownLaw ( );
	void CheckAntiFatigue ( );
	void CheckFacebook ( );
	void NotifyMinuteHasPassed ( );
	void PKT_ShutDownLawNotiMessage_Auto ( class UPacket* recvPacket );
	void SetWaitingChangeObjDialog ( unsigned long Waiting );
	void SetWaitingAckDialog ( int nSize );
	void SetReadyToGameLobby ( );
	void ASSetTextFieldSelection ( class UGFxObject* txtFld, int PosS, int PosE );
	void ASSetSelectionFocus ( class UGFxObject* MovieClip );
	void SetSelectionFocus ( class UGFxObject* MovieClip );
	struct FVector GetCharSceneCapturePostion ( struct FVector WorldPos );
	void StopGFxVideo ( );
	struct FString GetSFGamePath ( );
	bool SetGlobalScreenRecordPresetNum ( int PresetNum );
	bool SetGlobalScreenRecordPath ( struct FString CapturePath );
	bool SetGlobalScreenCapturePath ( struct FString CapturePath );
	struct FString OpenDirectorySelectDialog ( );
	void OnSetSelectionFocus ( );
	void CheckUseExpandedAreaSelectDialog ( int* TargetIndex );
	void OpenFailedBuyDialogWithMoney ( struct FString UnitStr );
	void PopOpenDialog ( int TargetIndex );
	void PushOpenDialog ( class USFGFxDialog* NewDialog );
	int GetViewDepth ( struct FName ViewName );
	class USFGFxDialog* GetLobbyDialogByIndex ( int TargetIndex );
	bool IsOpenedDialog ( int TargetIndex );
	void ASCloseLobbyDialog ( class USFGFxDialog* TargetDialog );
	void CloseLobbyAllDialog ( );
	int CloseLobbyDialog ( int TargetIndex );
	void ASOpenLobbyDialog ( class USFGFxDialog* TargetDialog );
	void CloseDialogInstant ( class USFGFxDialog* InDialog );
	void OpenDialogInstant ( class USFGFxDialog* InDialog, struct FString strMsg );
	class USFGFxDialog* OpenNoticeDialog ( struct FString strMsg );
	class USFGFxDialog* OpenLobbyBaseDialog ( struct FString strMsg );
	void OpenLobbyDialogMainTab ( int TargetIndex, int MainTabIndex );
	class USFGFxDialog* OpenLobbyDialog ( int TargetIndex, struct FString strMsg );
	class USFGFxUIView* GetMostTopView ( );
	bool GetMostTopDialogWithKeyInput ( class USFGFxDialog** OutDialog );
	class USFGFxDialog* GetMostTopDialog ( );
	class USFGFxLobbyScreen* GetLobbyScreenEXByViewName ( struct FString ViewName );
	class USFGFxLobbyScreen* GetLobbyScreenByViewName ( struct FString ViewName );
	class USFGFxLobbyScreen* GetLobbyScreenExByIndex ( int TargetIndex );
	class USFGFxLobbyScreen* GetLobbyScreenByIndex ( int TargetIndex );
	class USFGFxLobbyScreen* GetActiveLobbyScreen ( );
	void ASCloseLobbyScreen ( class USFGFxLobbyScreen* TargetScreen );
	void ASOpenLobbyScreen ( class USFGFxLobbyScreen* TargetScreen );
	class USFGFxLobbyScreen* OpenLobbyScreen ( int TargetIndex );
	int GetActiveWidgetIndex ( );
	void ConfigureDialogView ( class USFGFxDialog* InView, struct FName WidgetName, struct FName WidgetPath, int WidgetIndex );
	void ConfigureScreenViewEx ( class USFGFxLobbyScreenEx* InView, struct FName WidgetName, struct FName WidgetPath, int WidgetIndex );
	void ConfigureScreenView ( class USFGFxLobbyScreen* InView, struct FName WidgetName, struct FName WidgetPath, int WidgetIndex );
	void ConfigureLobbyView ( class USFGFxUIView* InView, struct FName WidgetName, struct FName WidgetPath, int WidgetIndex );
	bool IsInViewDataArray ( struct FName InViewName );
	bool IsAllWidgetInitialized ( );
	bool HandleLobbyWidgetBinding ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnLobbyWidgetInitCompleted ( );
	void OnLobbyWidgetInitialized ( struct FName WidgetName );
	bool IsAlreadyInitialized ( struct FName WidgetName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void LoadView ( struct FSFViewInfo InViewInfo );
	int ViewDataSortByDepth ( struct FSFViewInfo A, struct FSFViewInfo B );
	void LoadViews ( );
	void ConfigFrontEnd ( );
	void ASShowLanguageBar ( unsigned long bSet );
	void ShowLanguageBar ( unsigned long bShow );
	void ASInitLanguageBar ( unsigned long bSet );
	void InitLanguage ( );
	void ClearFacebookCookie ( );
	void InitializeLobby ( );
	bool Start ( unsigned long StartPaused );
	void OnPacketRecv ( class UPacket* Packet );
};

UClass* USFGFxLobby::pClassPointer = NULL;

// Class SFGame.SFGFxUIView
// 0x0170 (0x01E8 - 0x0078)
class USFGFxUIView : public UGFxObject
{
public:
	int                                                WidgetIndex;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FName                                       ViewName;                                         		// 0x007C (0x0008) [0x0000000000000000]              
	class USFGFxLobby*                                 LobbyManager;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	class USFItemManager*                              ItemManager;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	class USFOnlineSubsystemPC*                        OnlineSub;                                        		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     TextBoxInputOld;                                  		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  FocusedObject;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	TArray< class UGFxObject* >                        FocusLinks;                                       		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActivatedTextInputBoxIndex;                       		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UGFxClikWidget*                              btnCashCharge;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                DefaultViewSystemMsgTime;                         		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                InputNameValidCheckTime;                          		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LastFilteredName;                                 		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  ChatTextMC;                                       		// 0x00C8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChatInputText;                                    		// 0x00CC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChatTypeCB;                                       		// 0x00D0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChatTypeModeBtn;                                  		// 0x00D4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChatTypeMinimumBtn;                               		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned char                                      ChatSendType;                                     		// 0x00DC (0x0001) [0x0000000000000000]              
	unsigned char                                      ChatComboType;                                    		// 0x00DD (0x0001) [0x0000000000000000]              
	unsigned char                                      UseDialogIndex;                                   		// 0x00DE (0x0001) [0x0000000000000000]              
	TArray< unsigned char >                            ChatNotVisibleList;                               		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bExpandChatInput : 1;                             		// 0x00EC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsChatMinimum : 1;                               		// 0x00EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsVisible : 1;                                   		// 0x00EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableCashChargeBtn : 1;                         		// 0x00EC (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bListenExternalInterface : 1;                     		// 0x00EC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bClickChangeBtn : 1;                              		// 0x00EC (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                MaxIMECompositonTextLength;                       		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FString                                     DatastoreBindingName;                             		// 0x00F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned long >                            ChatComboTypeArray;                               		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ChatComboNameArray;                               		// 0x010C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ChatMinimumBtnNameArray;                          		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSEquipAttrib >                     EquipUIAttrib;                                    		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ItemInfoData_WeaponArray;                         		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ItemInfoData_EquipArray;                          		// 0x013C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSClickSoundWidget >                PlayClickSoundWidgets;                            		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFGFxUIView*                                ParentView;                                       		// 0x0154 (0x0004) [0x0000000000000000]              
	class USFGFxUIView*                                ChildView;                                        		// 0x0158 (0x0004) [0x0000000000000000]              
	int                                                PrevViewIndex;                                    		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                NextViewIndex;                                    		// 0x0160 (0x0004) [0x0000000000000000]              
	TArray< int >                                      WeaponMCItemArray;                                		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CharacterMCItemArray;                             		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFGFxLobbyPart* >                   LobbyPartArray;                                   		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            DefaultLobbyPartArray;                            		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nTabPrimary;                                      		// 0x0194 (0x0004) [0x0000000000000000]              
	int                                                nTabSecondary;                                    		// 0x0198 (0x0004) [0x0000000000000000]              
	int                                                ForcedMainTabIndex;                               		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                ForcedSubTabIndex;                                		// 0x01A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MainTabBtnMC;                                     		// 0x01A4 (0x0004) [0x0000000000000000]              
	TArray< struct FSGFxGameDataProvider >             BindedGameDataProviders;                          		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FailedRank;                                       		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                FailedRankLimit;                                  		// 0x01C0 (0x0004) [0x0000000000000000]              
	TArray< struct FSUIRenderToTextureInfo >           RenderToTextureSettings;                          		// 0x01C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnChatBoxOutfocusDelegate__Delegate;            		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClikWidgetEnvent__Delegate;                   		// 0x01DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3593 ];

		return pClassPointer;
	};

	void InitalizeSearchItem ( );
	struct FString ItemSearchStringManufacture ( struct FString ManufactureText );
	bool ItemSearching ( struct FString ManufactureText, unsigned long AllPass, TArray< struct FSDisplayItem >* OutArray );
	void InitializeSearchText ( );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void DoItemSearch ( struct FString InputText );
	void ScrollIndexIntialize ( );
	void ApplySearchResult ( TArray< struct FSDisplayItem >* SearchedItemList );
	void GetSearchedItemList ( TArray< struct FSDisplayItem >* DisplayItemList );
	int GetDisplayItemType ( int ItemId );
	class USFProfileSettings* GetSFProfile ( );
	bool IsGiftBtnEnable ( int ItemId );
	void ASSetCurrentMainTab ( int Index );
	class UGFxObject* CreateUITabData ( TArray< struct FSFUITabList > datalist );
	void OpenItemUseDialog ( int ItemId, int ModeID, unsigned long bIsClickChangeBtn );
	struct FString GetUIEmblemID ( int emblem_id, struct FSEmblemInfo emblem_info );
	bool GetEmblemInfo ( int emblem_id, struct FSEmblemInfo* emblem_info );
	bool GetItemInfoByRecvType ( struct FString InType, int InValue, struct FString InTextValue, struct FString* OutImgSet, struct FString* OutImgName, struct FString* OutItemName, struct FString* OutMoneyType, struct FString* OutLP, struct FString* OutAP, struct FString* OutDays, struct FString* outRank );
	void OnCashReceived ( );
	void datastore_Invalidate ( int Length, class UGFxObject* Scope );
	void datastore_Populate ( class UGFxObject* Arg, class UGFxObject* Scope, struct FString Callback );
	int datastore_DataProviderLengthAt ( int Index );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool datastore_OnDataChanged ( struct FString BindingName );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillData ( struct FString BindingName, int Index, class UGFxObject** RowItem );
	class UGFxObject* datastore_GetNewRowItemAt ( int BindingIndex, int ItemIndex );
	class UGFxObject* datastore_GetRowItemAt ( int BindedIndex, int ItemIndex );
	class UGFxObject* datastore_GetRowAt ( int Idx );
	class UGFxObject* datastore_GetRows ( struct FString BindingName );
	int datastore_GetBindedIndex ( struct FString BindingName );
	bool datastore_requestItemRange ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject* Scope, struct FString Callback );
	bool datastore_requestItemAt ( struct FString BindingName, int Index, class UGFxObject* Scope, struct FString Callback );
	bool datastore_bind ( struct FString BindingName, class UGFxObject* Scope );
	void SortIntArray ( unsigned long bAscending, TArray< int >* OutItemArray );
	void OnSetLobbySeason ( );
	void ClearPendingCashCharge ( );
	void OnCashChargeClick ( struct FEventData ev );
	bool IsTimeLimitItem ( int ItemId );
	bool IsCanApplyWeaponOption ( int WeaponID );
	bool IsCanApplyWeaponCamo ( int WeaponID );
	bool IsCanApplyWeaponMuzzleFlash ( int WeaponID, unsigned long IsCanSilencer );
	int GetWeaponSetItemID ( int setIdx, int SlotIdx );
	struct FQWord GetWeaponSetItemSN ( int setIdx, int SlotIdx );
	int GetWeaponCamoID ( int WeaponID, struct FQWord WeapISN );
	void SetWeaponCustomPreview ( TArray< int > WeaponItemArray );
	TArray< int > SetupWeaponMCData ( int WeaponItemID, TArray< int >* MCItemArray );
	void ASSetFocusWhisperList ( int Index );
	void ASCloseWhisperList ( );
	void ASSetChatWhisperList ( TArray< struct FString > Arg );
	bool IsHaveChatingLogWindow ( );
	void InputWaitTimerClear ( );
	void InputWaitTimerRanout ( );
	struct FString InputWaitTimerReset ( class UGFxClikWidget* InInputText );
	void IMETextInputUpdated ( );
	void CloseWhisperListPopup ( );
	int AutoChatTargetChange ( int Dir );
	class USFGFxUIView* GetActiveWhisperListUIView ( );
	int ProcessChatSpacebyChatType ( );
	void NotifyGetRareReward ( );
	void NotifyProcessTwitchTVCallback ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinNo ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoin ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyChangedGameModeDataProvider ( int nChannelType );
	bool IsNullString ( struct FString strText );
	void SetInputTextLimitFilter ( class UGFxClikWidget* ClikWidget, struct FSInputTextFilter Filter, struct FString* LastInputText );
	void AddAsValue_String ( struct FString StrValue, TArray< struct FASValue >* args );
	void AddAsValue_Int ( int nValue, TArray< struct FASValue >* args );
	void AddAsValue_Bool ( unsigned long bIsValue, TArray< struct FASValue >* args );
	void AddWidgetEventListenerInfo ( int Type, struct FName ActionType, struct FScriptDelegate DelegateHandler );
	void OnClikWidgetEnvent ( struct FEventData ev );
	void PlayClickSound ( );
	void PlayRollOverSound ( );
	void PlayTypingSound ( struct FString TextBoxInputNew );
	void StopLobbyUISound ( struct FName EventName );
	void PlayLobbyUISound ( struct FName EventName, unsigned long bIsOverlapSound );
	void OnChatBoxOutfocus ( );
	void SetOnChatBoxOutfocusDelegate ( struct FScriptDelegate InDelegate );
	void OnChatBoxOutfocusDelegate ( );
	void HandlingInternetResponse ( TArray< struct FString > ResponseResults );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void OnShowChatMessageEvent ( int ChatType, struct FString strMessage, unsigned long bFromMe );
	void SetChatTypeComboEnable ( );
	void SetChatTypeComboList ( );
	void UpDateChatTypeComboList ( int USN );
	void SetFocusOutToChatBox ( unsigned long bSelectionFocus );
	int SetFocustoChatBox ( );
	bool IsChatBoxFocused ( );
	bool IsViewActive ( );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	bool HandleGameMasterCommand ( struct FString strCommand );
	bool IsLeagueGameMaster ( );
	void ASSetChatModeText ( struct FString ModeText );
	void SetChatWindowSize ( );
	void SetDefaultSendChatType ( );
	void SetChatting ( );
	void ASSetChatWindowClose ( );
	void ASSetChatWindowOpen ( );
	void ASSetVisibleChat ( unsigned long bVisible );
	void ASClearChatMessage ( );
	void ASAddChatMessage ( int ChatType, struct FString strChatMsg, int Len );
	struct FString GetChatHtmlString ( struct FSChatMsgInfo ChatMsgInfo );
	bool GetMessageVisible ( unsigned char ChatType );
	void ShowChattingMessageList ( unsigned long bAll );
	bool SetPendingChatMessage ( struct FString InChatMsg, int InChatSendType, unsigned long bCheckMassive );
	void SendChatMessageType ( struct FString InChatMsg, int InChatSendType, unsigned long bCheckMassive );
	void SendChatMessage ( struct FString InChatMsg, int InChatSendType, unsigned long bCheckMassive );
	void OnChangedShowUSNFlag ( );
	bool OnEnterPressedWithChatting ( struct FString strInChatMsg );
	void ClearChatInputText ( );
	void SetChatInputText ( struct FString Str );
	void SetChatInputDisabled ( unsigned long bVisible );
	struct FString GetChatInputText ( );
	void OnFocusChanged ( class UGFxObject* Target );
	void OnFocusOutEvent ( struct FEventData ev );
	void OnFocusInEvent ( struct FEventData ev );
	int SetChatComboType ( unsigned char InChatComboType );
	int ToNextTextChatComboType ( );
	int ToNextTextInputBox ( );
	void SetActivatedTextInputBoxIndex ( class UGFxObject* FocusObject );
	bool IsDisableEscapeInput ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void TextInputFocusOut ( );
	void TextInputFocusIn ( );
	void OnTextInputFocusOut ( struct FEventData ev );
	void OnTextInputFocusIn ( struct FEventData ev );
	void OnClickedChatTypeModeBtn ( struct FEventData ev );
	void OnClickedChatTypeMinimumBtn ( struct FEventData ev );
	void UpdateLastestFiltered ( );
	void OnTextChanged ( struct FEventData ev );
	void SetSelectionFocus ( class UGFxObject* MovieClip );
	void SetGameModeIDArray ( );
	void OnPendingClose ( );
	void OnPendingOpen ( );
	int ChangeMainTab ( int InTabIndex );
	void OnViewCloseFinished ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnPlayClickSound ( struct FEventData ev );
	int GetCurrentLobbyPart ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewLoaded ( );
};

UClass* USFGFxUIView::pClassPointer = NULL;

// Class SFGame.SFGFxDialog
// 0x0060 (0x0248 - 0x01E8)
class USFGFxDialog : public USFGFxUIView
{
public:
	class UGFxClikWidget*                              btnOk;                                            		// 0x01E8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCancel;                                        		// 0x01EC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnClose;                                         		// 0x01F0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnOKCenter;                                      		// 0x01F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPreview : 1;                                     		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreKeyInput : 1;                              		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExitDialog : 1;                                  		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseEnterToChatting : 1;                          		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUseEnterKey : 1;                                 		// 0x01F8 (0x0004) [0x0000000000000000] [0x00000010] 
	float                                              PreTickTime;                                      		// 0x01FC (0x0004) [0x0000000000000000]              
	struct FString                                     DlgTitleText;                                     		// 0x0200 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DlgImageFileName;                                 		// 0x020C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     strOrigBtnOK;                                     		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strOrigBtnCancel;                                 		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOkProcesses__Delegate;                        		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseProcess__Delegate;                       		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3595 ];

		return pClassPointer;
	};

	void ClanMakeFail ( int ErrorCode );
	void OnMostTopDialogChanged ( class USFGFxDialog* NewDialog );
	void SetExitDialog ( unsigned long SW );
	bool IsViewPreview ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool IsViewActive ( );
	void SetDisableOKButton ( unsigned long bDisable );
	void SetPreviewDialog ( );
	void SetEnableCenterOKButton ( unsigned long Enable );
	void SetCloseButtonListener ( struct FScriptDelegate DelegateListener );
	void SetDefaultButtonText ( );
	void SetCancelButtonText ( struct FString strCancel );
	void SetOKButtonText ( struct FString strOK );
	void SetDialogTitle ( struct FString strMsg );
	void SetDialogMsgText ( struct FString strMsg );
	int CloseDialog ( );
	void OnCloseButtonPress ( struct FEventData ev );
	void OnClosedByCancel ( );
	int CancelButtonPress ( );
	void SetOnCloseProcess ( struct FScriptDelegate InDelegate );
	void CloseProcessDefault ( );
	void OnCloseProcess ( );
	void OnCancelButtonPress ( struct FEventData ev );
	int OKButtonPress ( );
	void InitBtnsProcess ( );
	void SetOnOKProcess ( struct FScriptDelegate InDelegate );
	void OkProcessesDefault ( );
	void OnOkProcesses ( );
	void OnOKButtonPress ( struct FEventData ev );
	void SetWidgetIndex ( unsigned char NewIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void InitOKbtn ( );
	void OnClickedMainTap ( int InTabIndex );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
};

UClass* USFGFxDialog::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ExitInGame
// 0x0024 (0x026C - 0x0248)
class USFGFxDialog_ExitInGame : public USFGFxDialog
{
public:
	class ASFHUD*                                      myHUD;                                            		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ContinueButton;                                   		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ExitButton;                                       		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              OptionButton;                                     		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RetryButton;                                      		// 0x0258 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ReportButton;                                     		// 0x025C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              DeclareButton;                                    		// 0x0260 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TwitchTVButton;                                   		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned long                                      bReportButton : 1;                                		// 0x0268 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsUseTwitchTV : 1;                                		// 0x0268 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3597 ];

		return pClassPointer;
	};

	void ASSetTwitchTVButtonOff ( );
	void ASSetTwitchTVButtonOn ( );
	void OnClickTwitchTVButton ( struct FEventData ev );
	void OnClickDeclareButton ( struct FEventData ev );
	void SetDeclareButtonDisable ( );
	void SetReportButtonDisable ( );
	void OnClickReportButton ( struct FEventData ev );
	void OnClickRetryButton ( struct FEventData ev );
	void OnClickOptionButton ( struct FEventData ev );
	void OnClickExitButton ( struct FEventData ev );
	void OnClickContinueButton ( struct FEventData ev );
	int ProcessShortcutKeys ( struct FString KeyName );
	struct FString GetHUDType ( );
	void ASCloseExitDialogByType ( );
	void ASSetExitDialogByType ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_ExitInGame::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_TwitchTV
// 0x00BC (0x0304 - 0x0248)
class USFGFxDialog_TwitchTV : public USFGFxDialog
{
public:
	class UGFxClikWidget*                              InputIDBox;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              InputPasswordBox;                                 		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SaveIDCheckBox;                                   		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LoginButton;                                      		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LogOutButton;                                     		// 0x0258 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              JoinButton;                                       		// 0x025C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FindPasswordButton;                               		// 0x0260 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ModifyButton;                                     		// 0x0264 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BroadCastTtileEditBox;                            		// 0x0268 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              StartButton;                                      		// 0x026C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ResolutionComboBox;                               		// 0x0270 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FrameRateTextBox;                                 		// 0x0274 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BroadcastServerComboBox;                          		// 0x0278 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           TwitchTVMessage;                                  		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TwitchTVGameTitle;                                		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TwitchTVClientID;                                 		// 0x0294 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVClientSecretKey;                          		// 0x02A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVJoinURL;                                  		// 0x02AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVFindPasswordURL;                          		// 0x02B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVModifyURL;                                		// 0x02C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RememberIDFilePath;                               		// 0x02D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                TwitchTVFps;                                      		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FTwitchTVResolutionInfo >           ResolutionInfo;                                   		// 0x02E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsTwitchTVLogining : 1;                           		// 0x02EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsVolumeMute : 1;                                 		// 0x02EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsBroadcastButtonEnable : 1;                      		// 0x02EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCheckRememberID : 1;                             		// 0x02EC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsViewActivated : 1;                              		// 0x02EC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      IsProcessLogin : 1;                               		// 0x02EC (0x0004) [0x0000000000000000] [0x00000020] 
	struct FString                                     TwitchTVLoginID;                                  		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                VolumeValue;                                      		// 0x02FC (0x0004) [0x0000000000000000]              
	class ASFHUD*                                      myHUD;                                            		// 0x0300 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3599 ];

		return pClassPointer;
	};

	void TwitchDialogBtnPopupOkClick ( );
	void ASClosePopup ( );
	void ASOpenPopup ( struct FString msg );
	void ASSetBroadCastBlind ( unsigned long IsBlind );
	void ASSetVolume ( unsigned long BtnStat, float VolumeVal );
	void ASSetBroadcastStartedMessage ( struct FString msg );
	void ASSetDescription ( struct FString msg );
	void ASSetLoginOKMessage ( struct FString msg );
	void ASSetLoginStat ( unsigned long IsLogin );
	void TwitchBroadCastBtnEnable ( unsigned long IsToggle );
	void GaugeMicVol_SliderValue ( float Volume );
	void GaugeMicVol_BtnEnable ( unsigned long isEnable );
	void SetFrameRateText ( struct FString FrameValue );
	void OnBroadcastServerComboBoxChanged ( struct FEventData ev );
	void OnScreenResChanged ( struct FEventData ev );
	void OnModifyButtonClick ( struct FEventData ev );
	void OnFindPasswordButtonClick ( struct FEventData ev );
	void OnJoinButtonClick ( struct FEventData ev );
	void OnStartButtonClick ( struct FEventData ev );
	void OnLogOutButtonClick ( struct FEventData ev );
	void OnSaveIDCheckButtonClick ( struct FEventData ev );
	void TwitchTVPoolTasks ( );
	void OnLoginButtonClick ( struct FEventData ev );
	void NotifyProcessTwitchTVCallbackInGame ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void eventShowTwitchTVMessage ( int MsgNum, int ErrorCode );
	void SetupBroadcastServerComboBox ( );
	void SetupResolutionComboBox ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
	void OnViewLoaded ( );
	TArray< struct FString > GetBroadcastServerNameList ( );
	void SetBroadcastServerIndex ( int SelectedIndex );
	int GetBroadcastServerIndex ( );
	void SetDoneLoopPoolTasks ( unsigned long IsLoop );
	bool IsDoneLoopPoolTasks ( );
	struct FString GetCurrentBroadtcatTitle ( );
	float GetTwitchTVVolume ( );
	void SetResolutionIndex ( int SelectedIndex );
	int GetResolutionIndex ( );
	int GetCurrentStreamState ( );
	void SetTwitchTVID ( struct FString InputID );
	struct FString GetTwitchTVID ( );
	struct FString GetRememberID ( );
	void SetRememberID ( struct FString Id );
	struct FString GetCurrentBroadtcatServerName ( );
	void TwitchTVSetVolume ( float Volume );
	void TwitchTVLogout ( );
	bool IsLoging ( );
	bool IsStreaming ( );
	void TwitchTVStop ( );
	void TwitchTVSetTitle ( struct FString BroadcastTitle, struct FString GameTitle );
	bool TwitchTVStart ( int Width, int Height, int FPS );
	void TwitchTVRequestAuthToken ( struct FString LoginID, struct FString LoginPassword, struct FString ClientScretKey );
	void TwitchTVInit ( struct FString ClientID );
};

UClass* USFGFxDialog_TwitchTV::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart
// 0x0020 (0x0208 - 0x01E8)
class USFGFxLobbyPart : public USFGFxUIView
{
public:
	int                                                SortItemTagVIP;                                   		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                SortItemTagPC;                                    		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                SortItemTagMonthlyReward;                         		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                LobbyPartIndex;                                   		// 0x01F4 (0x0004) [0x0000000000000000]              
	class USFGFxUIView*                                LobbyPartParent;                                  		// 0x01F8 (0x0004) [0x0000000000000000]              
	TArray< struct FSUnitedTabList >                   SubUnitedTabList;                                 		// 0x01FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3601 ];

		return pClassPointer;
	};

	void DoItemSearch ( struct FString InputText );
	int SetMakeNewDisplayItem ( int ItemId, struct FQWord ItemSN, struct FSDisplayItem* OutItem );
	bool GetUnitedSubTabList ( int MainCode, TArray< int >* OutArray );
	bool datastore_bind ( struct FString BindingName, class UGFxObject* Scope );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void SetupPreviewCharacter ( int UnitItemID );
	void SetupPreviewWeapon ( struct FQWord WeapItemISN, int WeapItemID, int LastSelectedItem );
	void WidgetPlayClickSound ( struct FEventData ev );
	void PlayClickSound ( );
	bool IsCurrentLobbyPart ( );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void OnChangeMainTab ( );
	void InitSortItemTag ( );
	void OnViewLoaded ( );
	void DelegateSetup ( );
	void ItemListSortByInvenItem ( TArray< struct FSDisplayItem >* arrDisplayItem );
	void ItemListSortByShopItem ( TArray< struct FSDisplayItem >* arrDisplayItem );
};

UClass* USFGFxLobbyPart::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Album
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_Album : public USFGFxLobbyPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3603 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobbyPart_Album::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_AlbumTwitchTV
// 0x00B8 (0x02C0 - 0x0208)
class USFGFxLobbyPart_AlbumTwitchTV : public USFGFxLobbyPart_Album
{
public:
	class UGFxClikWidget*                              InputIDBox;                                       		// 0x0208 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              InputPasswordBox;                                 		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SaveIDCheckBox;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LoginButton;                                      		// 0x0214 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LogOutButton;                                     		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              JoinButton;                                       		// 0x021C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FindPasswordButton;                               		// 0x0220 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ModifyButton;                                     		// 0x0224 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BroadCastTtileEditBox;                            		// 0x0228 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              StartButton;                                      		// 0x022C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ResolutionComboBox;                               		// 0x0230 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FrameRateTextBox;                                 		// 0x0234 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BroadcastServerComboBox;                          		// 0x0238 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           TwitchTVMessage;                                  		// 0x023C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TwitchTVGameTitle;                                		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TwitchTVClientID;                                 		// 0x0254 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVClientSecretKey;                          		// 0x0260 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVJoinURL;                                  		// 0x026C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVFindPasswordURL;                          		// 0x0278 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TwitchTVModifyURL;                                		// 0x0284 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RememberIDFilePath;                               		// 0x0290 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                TwitchTVFps;                                      		// 0x029C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FTwitchTVResolutionInfo >           ResolutionInfo;                                   		// 0x02A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsTwitchTVLogining : 1;                           		// 0x02AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsVolumeMute : 1;                                 		// 0x02AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsBroadcastButtonEnable : 1;                      		// 0x02AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCheckRememberID : 1;                             		// 0x02AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      IsViewActivated : 1;                              		// 0x02AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      IsProcessLogin : 1;                               		// 0x02AC (0x0004) [0x0000000000000000] [0x00000020] 
	struct FString                                     TwitchTVLoginID;                                  		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                VolumeValue;                                      		// 0x02BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3605 ];

		return pClassPointer;
	};

	void ASSetBroadCastBlind ( unsigned long IsBlind );
	void ASSetVolume ( unsigned long BtnStat, float VolumeVal );
	void ASSetBroadcastStartedMessage ( struct FString msg );
	void ASSetDescription ( struct FString msg );
	void ASSetLoginOKMessage ( struct FString msg );
	void ASSetLoginStat ( unsigned long IsLogin );
	void TwitchBroadCastBtnEnable ( unsigned long IsToggle );
	void GaugeMicVol_SliderValue ( float Volume );
	void GaugeMicVol_BtnEnable ( unsigned long isEnable );
	void SetFrameRateText ( struct FString FrameValue );
	void OnBroadcastServerComboBoxChanged ( struct FEventData ev );
	void OnScreenResChanged ( struct FEventData ev );
	void OnModifyButtonClick ( struct FEventData ev );
	void OnFindPasswordButtonClick ( struct FEventData ev );
	void OnJoinButtonClick ( struct FEventData ev );
	void OnStartButtonClick ( struct FEventData ev );
	void OnLogOutButtonClick ( struct FEventData ev );
	void OnSaveIDCheckButtonClick ( struct FEventData ev );
	void TwitchTVPoolTasks ( );
	void OnLoginButtonClick ( struct FEventData ev );
	void NotifyProcessTwitchTVCallback ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void eventShowTwitchTVMessage ( int MsgNum, int ErrorCode );
	void SetupBroadcastServerComboBox ( );
	void SetupResolutionComboBox ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	TArray< struct FString > GetBroadcastServerNameList ( );
	void SetBroadcastServerIndex ( int SelectedIndex );
	int GetBroadcastServerIndex ( );
	void SetDoneLoopPoolTasks ( unsigned long IsLoop );
	bool IsDoneLoopPoolTasks ( );
	struct FString GetCurrentBroadtcatTitle ( );
	float GetTwitchTVVolume ( );
	void SetResolutionIndex ( int SelectedIndex );
	int GetResolutionIndex ( );
	int GetCurrentStreamState ( );
	void SetTwitchTVID ( struct FString InputID );
	struct FString GetTwitchTVID ( );
	struct FString GetRememberID ( );
	void SetRememberID ( struct FString Id );
	struct FString GetCurrentBroadtcatServerName ( );
	void TwitchTVSetVolume ( float Volume );
	void TwitchTVLogout ( );
	bool IsLoging ( );
	bool IsStreaming ( );
	void TwitchTVStop ( );
	void TwitchTVSetTitle ( struct FString BroadcastTitle, struct FString GameTitle );
	bool TwitchTVStart ( int Width, int Height, int FPS );
	void TwitchTVRequestAuthToken ( struct FString LoginID, struct FString LoginPassword, struct FString ClientScretKey );
	void TwitchTVInit ( struct FString ClientID );
};

UClass* USFGFxLobbyPart_AlbumTwitchTV::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting
// 0x0010 (0x0218 - 0x0208)
class USFGFxLobbyPart_SysSetting : public USFGFxLobbyPart
{
public:
	int                                                ChangedOption;                                    		// 0x0208 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __SliderValueChangedDelegate__Delegate;           		// 0x020C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3607 ];

		return pClassPointer;
	};

	bool UpdateEditBoxValue ( );
	void OnFocusOutEditBox ( struct FEventData ev );
	void OnFocusOutComboBox ( struct FEventData ev );
	int ChangeSlideValue ( float NumValue, class UGFxClikWidget* SlideObj, class UGFxClikWidget* TextObj, unsigned long byTxtBox );
	int ChangeFlashSlider ( class UGFxClikWidget* SlideObj, class UGFxClikWidget* TextObj, unsigned long byTxtBox );
	void OnSliderValueChanged ( struct FString ObjectName );
	void SetSliderValueChangedDelegate ( struct FScriptDelegate InDelegate );
	void SliderValueChangedDelegate ( struct FString ObjectName );
	void ResetSetting ( );
	void ApplySetting ( );
	void OnTabButtonPress ( );
	void OnTabButtonChanged ( int PreUIPart );
	void OnTabButtonChange ( int NextUIPart );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_SysSetting::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting_Capture
// 0x0080 (0x0298 - 0x0218)
class USFGFxLobbyPart_SysSetting_Capture : public USFGFxLobbyPart_SysSetting
{
public:
	class UGFxClikWidget*                              ScreenCaptureSetBtn;                              		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenCapturePath;                                		// 0x021C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenRecSetBtn;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenRecPath;                                    		// 0x0224 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenRecResolution;                              		// 0x0228 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenRecodePathShorcut;                          		// 0x022C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenCapturePathShorcut;                         		// 0x0230 (0x0004) [0x0000000000000000]              
	class USFProfileSettings*                          Profile_Settings;                                 		// 0x0234 (0x0004) [0x0000000000000000]              
	struct FString                                     SelecteScreenCapturePath;                         		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SelecteScreenRecordPath;                          		// 0x0244 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelecteScreenRecordPresetNum;                     		// 0x0250 (0x0004) [0x0000000000000000]              
	TArray< struct FSScreenRecResType >                ScreenRecResList;                                 		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FSCaptureSetting                            OldSetting;                                       		// 0x0260 (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSCaptureSetting                            NewSetting;                                       		// 0x027C (0x001C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3609 ];

		return pClassPointer;
	};

	void SetButtonClicked ( );
	struct FString ProcessOverTextOfFolderPath ( struct FString OverFolderPath );
	void OnScreenRecResChanged ( struct FEventData ev );
	void SetScreenItemList ( int Index, class UGFxObject* DataProvider, struct FString Data );
	void SetupScreenRecTypeCB ( int PresetNum );
	void CheckChangedOptions ( );
	void ApplySetting ( );
	void ResetSetting ( );
	void SetScreenRecPathText ( struct FString CapturePath );
	void OnSetScreenRec ( struct FEventData ev );
	void SetScreenCapturePathText ( struct FString CapturePath );
	void OnSetScreenCapture ( struct FEventData ev );
	void InitSetting ( unsigned long forReset );
	void OpenExplorer ( struct FName SettingName );
	void OnSetScreenCapturePathShorcut ( struct FEventData ev );
	void OnSetScreenRecodePathShorcut ( struct FEventData ev );
	void OnScreenRecResFocusIn ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobbyPart_SysSetting_Capture::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_AlbumScreenShot
// 0x00B8 (0x0350 - 0x0298)
class USFGFxLobbyPart_AlbumScreenShot : public USFGFxLobbyPart_SysSetting_Capture
{
public:
	struct FString                                     RequestRenameAlbumItemText;                       		// 0x0298 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RequestDeleteAlbumItemText;                       		// 0x02A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedRenameAlbumItemText;                        		// 0x02B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedDeleteAlbumItemText;                        		// 0x02BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorCode_ALREADY_EXISTS;                         		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorCode_ACCESS_DENY;                            		// 0x02D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorCode_INVALID_FILE_NAME;                      		// 0x02E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorCode_NO_FILE;                                		// 0x02EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorCode_FACEBOOK_NOT_INTERLOCKED;               		// 0x02F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSAlbumInfo >                       AlbumInfoList;                                    		// 0x0304 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      CurrentAlbumState;                                		// 0x0310 (0x0001) [0x0000000000000000]              
	struct FString                                     GameDirString;                                    		// 0x0314 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           AvailableExtList;                                 		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastSelectedFileIndex;                            		// 0x032C (0x0004) [0x0000000000000000]              
	struct FString                                     NewFileName;                                      		// 0x0330 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastErrorCode;                                    		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFEntryPlayerController*                    SFPC;                                             		// 0x0348 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TileList_Picture;                                 		// 0x034C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3611 ];

		return pClassPointer;
	};

	struct FString GetErrorMessage ( struct FString ErrorCode, struct FString ErrorMessageTitle );
	bool IsValidatedIndex ( int Index );
	void ASSetURLText ( struct FString URL );
	void ASNTFCanceledRenameAlbumItem ( );
	void ASNTFSubmitedRenameAlbumItem ( );
	void ASNTFRenamedAlbumItem ( struct FString NewName );
	void ASNTFRemovedAlbumItem ( int Index );
	void ASAlbumZoomOut ( );
	void ASSetSelectedIndex ( int Index );
	void OnSystemSettingChanged ( );
	void OnScreenShotCaptured ( struct FString Filename );
	void OnFailedDeleteAlbumItem ( );
	void OnFailedRenameAlbumItem ( );
	void OnDeleteRequestCancel ( );
	void OnDeleteRequestOK ( );
	void OnRenameRequestCancel ( );
	void OnRenameRequestOK ( );
	void screenShot_OnFolderBtnClick ( );
	void screenShot_OnThumbListItemClick ( int Idx );
	void screenShot_OnNameInputChange ( int Idx, struct FString NewName );
	void screenShot_OnNameInputFocusOut ( );
	void screenShot_OnNameInputFocusIn ( );
	void screenShot_OnRemoveBtnClick ( int Index );
	void screenShot_OnZoomOutComplete ( );
	void screenShot_OnZoomInComplete ( );
	void DeleteAlbumItem ( );
	void RequestDeleteAlbumItem ( int Index );
	void RenameAlbumItem ( );
	void RequestRenameAlbumItem ( int Index, struct FString NewName );
	void SetRenameMode ( unsigned long bValue );
	bool IsOpenScreenShot ( );
	void SetViewMode ( unsigned long bValue );
	bool IsAvailableFile ( struct FString FileExt );
	bool ClearAlbumData ( );
	bool InitAlbumData ( );
	void SetTileList_Picture ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnTabButtonPress ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	bool DeleteAlbumFile ( struct FString URL, struct FString* Error );
	bool RenameAlbumFile ( struct FString OldName, struct FString NewName, struct FString* Error );
	bool GetAlbumItems ( TArray< struct FSAlbumInfo >* AlbumItemList );
};

UClass* USFGFxLobbyPart_AlbumScreenShot::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyScreen
// 0x016C (0x0354 - 0x01E8)
class USFGFxLobbyScreen : public USFGFxUIView
{
public:
	int                                                BackStepPriority;                                 		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                FixedBackStepWidgetIndex;                         		// 0x01EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bGFxPopUpOpened : 1;                              		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableInGameEvent : 1;                          		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableChangeTPBtn : 1;                           		// 0x01F0 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bShowTPNoticeMessage : 1;                         		// 0x01F0 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bFocusInImageArea : 1;                            		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bProcessNewItemTable : 1;                         		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowingWeaponPerformGraph : 1;                   		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsIgnoreEventClicked : 1;                        		// 0x01F0 (0x0004) [0x0000000000000000] [0x00000080] 
	struct FString                                     AmmoDispString;                                   		// 0x01F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SnowModeAmmoDispString;                           		// 0x0200 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AmmoMagazineUpDispString;                         		// 0x020C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ItemOutDateMsg;                                   		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemDurabilityOutMsg;                             		// 0x0224 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OutFromRoomMessage[ 0x9 ];                        		// 0x0230 (0x006C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     QuestionMiniGameStart;                            		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strQuickJoinFailedMessage;                        		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              PartyBoardWaitingMC;                              		// 0x02B4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PartyBoardPlayingMC;                              		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnChangeTP;                                      		// 0x02BC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ImageAreaBtn;                                     		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                nTPNoticeDays;                                    		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fTPNoticeDurationTime;                            		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     strTPNoticeMessage;                               		// 0x02CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      GameModeIDArray;                                  		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LobbyBackGroundImageName;                         		// 0x02E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UTexture2D*                                  LobbyBackGroundTexture;                           		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                RollingImageTime;                                 		// 0x02F4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FString                                     PendingOpenURL;                                   		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OpenURLMessage;                                   		// 0x0304 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      CacheCharacterItemArray;                          		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SHOP_ITEM_SUBTAB_NORMAL;                          		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                SHOP_ITEM_SUBTAB_STANDARD;                        		// 0x0320 (0x0004) [0x0000000000000000]              
	int                                                SHOP_ITEM_SUBTAB_CAMO;                            		// 0x0324 (0x0004) [0x0000000000000000]              
	int                                                SHOP_ITEM_SUBTAB_SPRAY;                           		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                SHOP_ITEM_SUBTAB_PMC;                             		// 0x032C (0x0004) [0x0000000000000000]              
	struct FString                                     strTopTile;                                       		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMainTapClickedDelegate__Delegate;             		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSubTapClickedDelegate__Delegate;              		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3613 ];

		return pClassPointer;
	};

	bool EnablePreviewInfo ( );
	void SetTitle ( class UGFxClikWidget* Title );
	void SetLobbyRankMark ( int DisguiseRank );
	void OnUpdateGashaBonusGauge ( );
	bool GetEquipUIAttribNeedAbsValue ( int Index );
	void SetPlayerStatData ( struct FsItemAdditionalEffect ItemAdditionalEffects );
	void OnDialogClosedAtActiveScreen ( class USFGFxUIView* DialogView );
	void OnClickWebURL_OK ( );
	void OpenClan ( );
	void OpenMyInfo ( );
	void OpenMiniGame ( );
	void OpenFever ( );
	void OpenEnchant ( );
	void OpenInven ( );
	void OpenGasha ( );
	void OpenWeb ( struct FString strURL );
	void SetImageClickLink ( struct FString strLinkType, struct FString WebURL );
	void OnFocusOutRollingImageArea ( struct FEventData ev );
	void OnFocusInRollingImageArea ( struct FEventData ev );
	void CheckRollingImageTimer ( );
	void ClearRollingImageTimer ( );
	void ResetRollingImageTimer ( );
	void UpdateImageRollingTimer ( );
	void OnADImageTabBtnClicked ( int nIndex );
	void OnPlayerTagUpdated ( );
	void OnMinuteHasPassed ( );
	void CheckAllReceivedNewItemTable ( );
	void PKT_GetNetmarbleDailyDiscountList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetNetmarbleDailyDiscountList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetItemTableInfo_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetItemTableInfo_REQ_OK ( class UPacket* recvPacket );
	void OnViewActivatedDelayed ( );
	bool LoadLobbyBackGroundTexture ( struct FString Image, class UTexture2D** LoadTexture );
	void SetBackgroundImage ( int RoomVipGrade );
	void OnClickHideTPNoticeMessage ( );
	void HideTPNoticeMessage ( );
	void ShowTPNoticeMessage ( );
	void OnCashReceived ( );
	void SetTimerFadeIn ( );
	void ASSetPartyBoardList ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ASSetRecycleOverlapItemIndex ( int Row, int colum );
	void ASSetOverlapItemIndex ( int Row, int column, int LobbyPartIndex );
	void GetOverlapItemIndex ( int Row, int column );
	bool OnBackToQuickJoinPrevChannel ( );
	void ClearQuickJoin ( unsigned long bSuccess );
	void OnMonthlyRewardCheck ( );
	void OnDisguiseRankChanged ( );
	void OnVIPCouponUseStarted ( int ItemId );
	void OnNewPveLevelOpened ( );
	void OnQuickJoinDialogOK ( );
	void OnColorCodeNameChanged ( );
	void OnClanMarkChanged ( );
	void OnClanNameChanged ( );
	void OnCodenameChanged ( );
	void OnCouponItemReceived ( );
	void OnItemBuySuccess ( int ItemId, struct FQWord ItemSN, int ItemPrice, unsigned long bIsInUse );
	void OnRewardItemAddedToInven ( );
	void OnOpenChoicePackageSuccess ( );
	void OnOpenPackageSuccess ( );
	void OnNewItemUsedSuccess ( );
	class UGFxObject* GetGFxGlobalMC ( );
	int IsCanFollowGame ( int USN, int channelType );
	void ChangeSubTab ( int TabIndexNew, unsigned long bForceSelect );
	void ResetPageIndex ( );
	void OnClickedSubTap ( int InTabIndex );
	void SetOnSubTapClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnSubTapClickedDelegate ( int TabIndex );
	void ASSetCurrentMainTab ( int Index );
	void OnClickedMainTap ( int InTabIndex );
	void SetOnMainTapClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnMainTapClickedDelegate ( int TabIndex );
	void SetMoveToClanHome ( );
	void ASSetWeaponPerformGraphCompare ( int n1, int n2, int n3, int n4, struct FString Magazine, struct FString WeaponName );
	void ASSetWeaponPerformGraph ( int n1, int n2, int n3, int n4, int WhoMax, struct FString Magazine, struct FString WeaponName );
	void ASHideWeaponPerformGraphCompare ( );
	void ASHideWeaponPerformGraph ( );
	void ASShowWeaponPerformGraph ( );
	void ASSetCurrentMoney ( struct FString SP, struct FString Cash, struct FString TP );
	void ShowCurrentMoney ( );
	void UpdateUnitChanged ( int UnitID );
	void UpdateSelectedWeaponSet ( );
	void InitInvenLobbyPart ( unsigned long UpdatePreviewWeapon );
	void PreGameClosed ( );
	void ProcessPassword ( );
	struct FString GetAmmoStringFormat ( int Mag, int Ammo, int WeaponID );
	int RequestInvenSettingUpdate ( int* nIsChangePreviewChar );
	void ActivatePreviewAreaExtraUI ( );
	int EquipWeaponforValidate ( struct FQWord ItemSN );
	int ValidateWeaponSet ( );
	void UpdateWeaponPerformGraph ( int MainWeaponID, int CompareID );
	int GetMaxStat ( TArray< int > WeaponStats );
	void ShowItemLuckyPoint ( float InLuckyPoint );
	void GetCurrentAdditionalEffects ( struct FsItemAdditionalEffect* ItemAdditionalEffects );
	void CalcItemAdditionalEffect ( struct FsItemAdditionalEffect* ItemAdditionalEffects );
	void ClearItemAdditionalEffect ( );
	void GetItemAdditionalEffect ( int ItemId, struct FsItemAdditionalEffect* ItemAdditionalEffects );
	void ApplyItemToEntryPawn ( int ItemId );
	int GetLastSelectedWeaponID ( );
	float GetWeaponSetWeight ( );
	void ApplyPMCItemToEntryPawn ( int PMCItemID );
	void ApplyItemsToEntryPawn ( TArray< int > ItemArray );
	void SetApplyItemsToEntryPawn ( TArray< int > ItemArray );
	void UpdateItemAdditionalEffect ( TArray< int > ItemArray );
	void SerializeThrowWeaponSlotImmediatel ( );
	void OnGhostModeChanged ( );
	bool CanPreviewCharRot ( );
	void OnUpdateProfileEmblem ( );
	void OnCheckOutDateVipItem ( );
	void OnCheckOutDateItem ( );
	bool IsViewActive ( );
	void SetBacktoNaviButton ( );
	void GetOutProcess ( int LastScreen );
	void OnBackStepBtnPress ( int LastScreen );
	void SetupPreviewWeaponCamo ( int WeapItemID, int CamoItemID );
	int GetPreviewWeaponCamo ( int WeapItemID, struct FQWord WeapItemSN );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void SetupPreviewWeapon ( struct FQWord NeedISN, int NeedID, int NeedCamo );
	void SetCharacterCustomPreview ( TArray< int > CharacterItemArray );
	int GetSelectedItemIDbyItemType ( int ItemType );
	TArray< int > SetupCharacterEffectItem ( int UnitItemID );
	TArray< int > SetupCharacterMCData ( int UnitItemID );
	void SetupPreviewCharacter ( int UnitItemID );
	void OpenPreviewCharacter ( );
	void ResetPreviewCharRot ( );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void OnActiveScreenClosed ( );
	void OnChangeTPBtnClick ( struct FEventData ev );
	void ShowDelayedChatMessage ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void SetGameModeIDArray ( );
	void DelegateSetup ( );
	void OnPendingOpen ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void SetWidgetIndex ( unsigned char NewIndex );
};

UClass* USFGFxLobbyScreen::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Login
// 0x0020 (0x0374 - 0x0354)
class USFGFxLobby_Login : public USFGFxLobbyScreen
{
public:
	unsigned long                                      bDisableNewAccount : 1;                           		// 0x0354 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bAuthLoginFromLoginView : 1;                      		// 0x0354 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bVipInfoRequest : 1;                              		// 0x0354 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bUseFirstBuySale : 1;                             		// 0x0354 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      IsMonthlyReward : 1;                              		// 0x0354 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bEnableEnchantSystem : 1;                         		// 0x0354 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bEnableRandomBox : 1;                             		// 0x0354 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bEnableCombineSystem : 1;                         		// 0x0354 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bEnableRecycleSystem : 1;                         		// 0x0354 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bClanLeagueInfoRequest : 1;                       		// 0x0354 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	int                                                DefaultScaleLevel;                                		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           LoginErrorCodeArray;                              		// 0x035C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FExtraErrorCodeInfo >               ExtraErrorCodeArray;                              		// 0x0368 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3615 ];

		return pClassPointer;
	};

	void OnLoginViewActivated ( );
	void OpenPreviewCharacter ( );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	bool GetExtraErrorCode ( int ErrorCode, struct FString* ErrorCodeMsg );
	struct FString GetLoginErrorCodeMsg ( int InErrorCode );
	bool CheckRecivedAllInfo ( );
	void PKT_GetUnitEquipInfo_REQ_TRANSACTION ( class UPacket* Packet );
	void PKT_GetGashaToolTipInfoList_REQ_OK ( class UPacket* Packet );
	void PKT_GetUnitEquipInfo_REQ_OK ( class UPacket* Packet );
	void PKT_GetLeagueTicketCount_REQ_OK ( class UPacket* Packet );
	void PKT_GetPlayerVipInfo_REQ_OK ( class UPacket* Packet );
	void PKT_GetPartsList_REQ_OK ( class UPacket* Packet );
	void PKT_GetWeaponSetInfo_REQ_TRANSACTION ( class UPacket* Packet );
	void PKT_GetWeaponSetInfo_REQ_OK ( class UPacket* Packet );
	void PKT_GetNotUsedItemList_REQ_OK ( class UPacket* Packet );
	void PKT_GetUsedItemList_REQ_TRANSACTION ( class UPacket* Packet );
	void PKT_GetUsedItemList_REQ_OK ( class UPacket* Packet );
	void PKT_GetUserInfo_REQ_OK ( class UPacket* Packet );
	void RequestMessengerConnect ( );
	void InitSystemSettingFromProfile ( );
	void ClearDataStoreInfo ( );
	void InitRecycleInfoData ( );
	void InitItemCombineData ( );
	void InitItemEnchantData ( );
	void RequestRandomBoxItemData ( );
	void InitEnableSystem ( );
	void RequestReadyToGameLobby ( );
	void ProcessLoginOK ( );
	bool RequestLoginFromView ( struct FString* OutMessage );
	void DelegateSetup ( );
	void InitManager ( class USFGFxLobby* InLobbyManager, class USFOnlineSubsystemPC* InOnlineSub );
};

UClass* USFGFxLobby_Login::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_LoginCHN
// 0x0010 (0x0384 - 0x0374)
class USFGFxLobby_LoginCHN : public USFGFxLobby_Login
{
public:
	unsigned long                                      NewModuleTest : 1;                                		// 0x0374 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	TArray< struct FSAuthError >                       AuthErrorCodeArray;                               		// 0x0378 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3617 ];

		return pClassPointer;
	};

	bool ExtractCHNAuthCode ( struct FString AuthResult, struct FString* LoginID, struct FString* OutErrorMessage );
	bool RequestLoginFromView ( struct FString* OutMessage );
};

UClass* USFGFxLobby_LoginCHN::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_LoginIDN
// 0x0000 (0x0374 - 0x0374)
class USFGFxLobby_LoginIDN : public USFGFxLobby_Login
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3619 ];

		return pClassPointer;
	};

	void ProcessLoginOK ( );
	bool RequestLoginFromView ( struct FString* OutMessage );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_LoginIDN::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_LoginTHA
// 0x000C (0x0380 - 0x0374)
class USFGFxLobby_LoginTHA : public USFGFxLobby_Login
{
public:
	struct FString                                     LocalLoginParam;                                  		// 0x0374 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3621 ];

		return pClassPointer;
	};

	void OnLoginViewActivated ( );
	bool RequestLoginFromView ( struct FString* OutMessage );
};

UClass* USFGFxLobby_LoginTHA::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_LoginView
// 0x0060 (0x03B4 - 0x0354)
class USFGFxLobby_LoginView : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              IDTextInput;                                      		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PWTextInput;                                      		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  IDTextField;                                      		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PWTextField;                                      		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnOk;                                            		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCancel;                                        		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnWebJoin;                                       		// 0x036C (0x0004) [0x0000000000000000]              
	struct FString                                     InputIDMessage;                                   		// 0x0370 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InputPWMessage;                                   		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBIPath;                                        		// 0x0388 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsWebLogin : 1;                                   		// 0x0394 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsFirstInputTextENG : 1;                          		// 0x0394 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bRememberID : 1;                                  		// 0x0394 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bCheckRememberID : 1;                             		// 0x0394 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FString                                     WebAddressURL;                                    		// 0x0398 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RememberIDFilePath;                               		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              chkRememberID;                                    		// 0x03B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3623 ];

		return pClassPointer;
	};

	void DelegateSetup ( );
	void OnFocusInEvent ( struct FEventData ev );
	void SetConvertIME ( );
	struct FString GetRememberID ( );
	void SetRememberID ( struct FString Id );
	void ASSetDefaultTextFocus ( unsigned long bFocusedID );
	void ASSetWebLogin ( unsigned long bWebLogin );
	void ASShowBI ( struct FString strPath );
	void OpenPreviewCharacter ( );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	int RequestLogin ( struct FString InLoginID, struct FString InLoginPW );
	void OnWebjoinButtonPress ( struct FEventData ev );
	void OnChkRememberIDPress ( struct FEventData ev );
	void CancelButtonPress ( );
	void OnCancelButtonPress ( struct FEventData ev );
	int OKButtonPress ( );
	void OnOKButtonPress ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_LoginView::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyScreenEx
// 0x0000 (0x0354 - 0x0354)
class USFGFxLobbyScreenEx : public USFGFxLobbyScreen
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3625 ];

		return pClassPointer;
	};

	void OpenPreviewCharacter ( );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	void SetBacktoNaviButton ( );
	bool IsViewActive ( );
};

UClass* USFGFxLobbyScreenEx::pClassPointer = NULL;

// Class SFGame.SFHUD
// 0x0990 (0x0E40 - 0x04B0)
class ASFHUD : public AGameHUD
{
public:
	class ASFPlayerController*                         SFPlayerOwner;                                    		// 0x04B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFPawn*                                     ViewTargetPawn;                                   		// 0x04B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFPlayerReplicationInfo*                    SFOwnerPRI;                                       		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFGameReplicationInfo*                      SFGRI;                                            		// 0x04BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFUIMinimapRadar*                           Radar;                                            		// 0x04C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GFxMiniMapFrameSize;                              		// 0x04C4 (0x0004) [0x0000000000000000]              
	int                                                GFxWholeMapFrameSize;                             		// 0x04C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMSGSprintUsing : 1;                              		// 0x04CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAdjustBlurEffect : 1;                            		// 0x04CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      CheckCrosshairClassName : 1;                      		// 0x04CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowUSNScoreboard : 1;                           		// 0x04CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowDeadPersonCam : 1;                           		// 0x04CC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      IsTeamChange : 1;                                 		// 0x04CC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowHitMarkWhenZoom : 1;                         		// 0x04CC (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLastShowHitMarkProjectionLocation : 1;           		// 0x04CC (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowAttackBriefOnly : 1;                         		// 0x04CC (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bHideRadarTeamBase : 1;                           		// 0x04CC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsSpectatingHUD : 1;                             		// 0x04CC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsOldSpectatingHUD : 1;                          		// 0x04CC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bObserverHUD : 1;                                 		// 0x04CC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bGameInProgressHUD : 1;                           		// 0x04CC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bBlackOutInLeague : 1;                            		// 0x04CC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bShowWeaponNameOfObserverMode : 1;                		// 0x04CC (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bRadioMessageDisable : 1;                         		// 0x04CC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bEnableKillHeadUpIcon : 1;                        		// 0x04CC (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bFirstScoreUpAnimation : 1;                       		// 0x04CC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bShowKillFeedBack : 1;                            		// 0x04CC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bShowStunIcon : 1;                                		// 0x04CC (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      IsZombieHPBar : 1;                                		// 0x04CC (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bVoteKickPopUpOpened : 1;                         		// 0x04CC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bShooterHeadUpUI : 1;                             		// 0x04CC (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bReportButtonDisableGameMode : 1;                 		// 0x04CC (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bDeclareButtonDisableGameMode : 1;                		// 0x04CC (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bShowGlowModeScore : 1;                           		// 0x04CC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bHideMiniMap : 1;                                 		// 0x04CC (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bHideGrenadeIndicator : 1;                        		// 0x04CC (0x0004) [0x0000000000000000] [0x10000000] 
	float                                              ScreenRatio;                                      		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InverseClipXForFlash;                             		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InverseClipYForFlash;                             		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UBlurEffect*                                 BlurEffect;                                       		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GasEffectUpdateTime;                              		// 0x04E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                GasEffectBaseKernelSize;                          		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      CrossHairClass;                                   		// 0x04E8 (0x0004) [0x0000000000000000]              
	TArray< class USFCrosshairBase* >                  CrosshairBase;                                    		// 0x04EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CrosshairIndex;                                   		// 0x04F8 (0x0004) [0x0000000000000000]              
	struct FS_CROSSHAIR                                Crosshair;                                        		// 0x04FC (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FS_CROSSHAIR                                CrosshairByHit;                                   		// 0x0508 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      CrosshairDefaultColor;                            		// 0x0514 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      CrosshairByHitDefaultColor;                       		// 0x0518 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpreadRatio;                                      		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DomRatio;                                         		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DomLengthRatio;                                   		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovingRatio;                                      		// 0x0528 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrosshairRatio;                                   		// 0x052C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrosshairThickness;                               		// 0x0530 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitCrosshairRunningTime;                          		// 0x0534 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitCrosshairColorRunningRatio;                    		// 0x0538 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HitCrosshairInterpExp;                            		// 0x053C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutlineWidth;                                     		// 0x0540 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutlineExtLength;                                 		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OutlineColor;                                     		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OutlineColorEx;                                   		// 0x054C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      OutlineHitColor;                                  		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      AimedWeakpointColor;                              		// 0x0554 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      AimedWeakpointOutlineColor;                       		// 0x0558 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              StandardVerticalSize;                             		// 0x055C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPawnInfo >                         PawnList;                                         		// 0x0560 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPawnInfo >                         PawnListSnowStun;                                 		// 0x056C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPawnInfo >                         PawnListKilled;                                   		// 0x0578 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPawnInfo >                         PawnListArrowIcon;                                		// 0x0584 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPawnInfo >                         PawnListOpserverStun;                             		// 0x0590 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APlayerReplicationInfo*                      KilledMePRI;                                      		// 0x059C (0x0004) [0x0000000000000000]              
	TArray< struct FSObjectIcon >                      ObjectIconList;                                   		// 0x05A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSObjectIconBind >                  ObjectIconBindArray;                              		// 0x05AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      PrevViewtargetIconState;                          		// 0x05B8 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CurrentActionMessage;                             		// 0x05B9 (0x0001) [0x0000000000000000]              
	unsigned char                                      ScoreType;                                        		// 0x05BA (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class AVolume*                                     PrevViewtargetLocationVolume;                     		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ASiteText;                                        		// 0x05C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BSiteText;                                        		// 0x05CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CSiteText;                                        		// 0x05D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GoalSiteText;                                     		// 0x05E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              SelectWeaponSetMessageDelay;                      		// 0x05F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     GameModeClassName;                                		// 0x05F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AttackText;                                       		// 0x0600 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefendText;                                       		// 0x060C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FDamageInfo >                       DamageData;                                       		// 0x0618 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MaxNoOfIndicators;                                		// 0x0624 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitIndicatorSize;                                 		// 0x0628 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HitIndicatorFadeTime;                             		// 0x062C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HitIndicatorFadeValue;                            		// 0x0630 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                HitIndicator_Color;                               		// 0x0634 (0x0010) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   DamageIndicatorMaterial;                          		// 0x0644 (0x0004) [0x0000000000000000]              
	struct FName                                       PositionalParamName;                              		// 0x0648 (0x0008) [0x0000000000000000]              
	struct FName                                       FadeParamName;                                    		// 0x0650 (0x0008) [0x0000000000000000]              
	struct FName                                       ColorParamName;                                   		// 0x0658 (0x0008) [0x0000000000000000]              
	struct FString                                     SpectatorMessage;                                 		// 0x0660 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KillCamMessage;                                   		// 0x066C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BriefMessage[ 0x8 ];                              		// 0x0678 (0x0060) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectMessage[ 0x8 ];                             		// 0x06D8 (0x0060) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WinCaseMessage[ 0x8 ];                            		// 0x0738 (0x0060) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundStart_ResultMessage[ 0x3 ];                  		// 0x0798 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundEnd_ResultMessage[ 0x5 ];                    		// 0x07BC (0x003C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObserverRoundEndMessage[ 0x8 ];                   		// 0x07F8 (0x0060) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundEnd_NowScore;                                		// 0x0858 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MatchEnd_ResultMessage[ 0x2 ];                    		// 0x0864 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObserverMatchEndMessage[ 0x8 ];                   		// 0x087C (0x0060) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UserGameInMessage;                                		// 0x08DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UserGameOutMessage;                               		// 0x08E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisconnectedFromHost;                             		// 0x08F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ReconnectedFromHost;                              		// 0x0900 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TakeScreenShot;                                   		// 0x090C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           TeamChangeMessage;                                		// 0x0918 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MouseSensitivityChangeMsg;                        		// 0x0924 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Pending_WaitingForPlayer;                         		// 0x0930 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_InGameExitDialogTitle;                        		// 0x093C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strInGameExitMessage;                             		// 0x0948 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< class USFGFxHUDMoviePlayer* >              HUDMovieArray;                                    		// 0x0954 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GFxHUDWeaponChangeClass;                          		// 0x0960 (0x0004) [0x0000000000000000]              
	class UClass*                                      GFxHUDScoreBoardClass;                            		// 0x0964 (0x0004) [0x0000000000000000]              
	class UClass*                                      GFxHUDObserverScoreBoardClass;                    		// 0x0968 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            GFxHUDAdditionalClassArray;                       		// 0x096C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RoundMessage;                                     		// 0x0978 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     SFRevision;                                       		// 0x0984 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ResultWindowMessageIndex;                         		// 0x0990 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSHUDActionMsg >                    ActionMessageArray;                               		// 0x0994 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ActionIndexOrderArray;                            		// 0x09A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFOnlineSubsystemPC*                        OnlineSub;                                        		// 0x09AC (0x0004) [0x0000000000000000]              
	int                                                PrevTeamScore[ 0x8 ];                             		// 0x09B0 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevSendTeamScore[ 0x8 ];                         		// 0x09D0 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              SystemMsgLimitTime;                               		// 0x09F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BaseHUDWidth;                                     		// 0x09F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BaseHUDHeight;                                    		// 0x09F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFWavePlayer*                               MessageWavePlayer[ 0x19 ];                        		// 0x09FC (0x0064) [0x0000000000000000]              
	class USFWavePlayer*                               WavePlayer;                                       		// 0x0A60 (0x0004) [0x0000000000000000]              
	int                                                nGoalRound;                                       		// 0x0A64 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FMessageDispatchInfo                        MessageDispatchInfos[ 0x19 ];                     		// 0x0A68 (0x00C8) [0x0000000000000000]              
	float                                              HitMarkStateInflectionTime;                       		// 0x0B30 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitMarkStateMaxRatio;                             		// 0x0B34 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitMarkStateMinRatio;                             		// 0x0B38 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitMarkCenterCrossPlayTime;                       		// 0x0B3C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitMarkMultiCrossPlayTime;                        		// 0x0B40 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitMarkSingleEdgeSize;                            		// 0x0B44 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              HitMarkInnerEdgeSize;                             		// 0x0B48 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FColor                                      HitMarkColor;                                     		// 0x0B4C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FHitMarkInfo >                      HitMarkInfos;                                     		// 0x0B50 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned long >                            ChatTypeSupportArray;                             		// 0x0B5C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fOldDeltaSeconds;                                 		// 0x0B68 (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      UpdateSpectatingPRI;                              		// 0x0B6C (0x0004) [0x0000000000000000]              
	class APlayerReplicationInfo*                      OldUpdateSpectatingPRI;                           		// 0x0B70 (0x0004) [0x0000000000000000]              
	int                                                UpdateInGameScoreTime;                            		// 0x0B74 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< unsigned char >                            ActionMessageNotVisibleArray;                     		// 0x0B78 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CloseChangingTeamAniDuration;                     		// 0x0B84 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CloseMatchEndedAniDuration;                       		// 0x0B88 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nHoldHUDImageSize;                                		// 0x0B8C (0x0004) [0x0000000000000000]              
	TArray< int >                                      ProtocolAtChatMsgArray;                           		// 0x0B90 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFGFxLobbyInGame*                           InGameLobbyManager;                               		// 0x0B9C (0x0004) [0x0000000000000000]              
	struct FString                                     ViewPawnCodeName;                                 		// 0x0BA0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ViewPawnKilledArray;                              		// 0x0BAC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CodeNameDisplayFlags;                             		// 0x0BB8 (0x0004) [0x0000000000000000]              
	TArray< int >                                      TeamCodeNameDisplayFlags;                         		// 0x0BBC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MinimapDisplayFlags;                              		// 0x0BC8 (0x0004) [0x0000000000000000]              
	float                                              MinimapShowEnemyTime;                             		// 0x0BCC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinimapShowEnemyStartTime;                        		// 0x0BD0 (0x0004) [0x0000000000000000]              
	int                                                HUD_KDACount_HideType;                            		// 0x0BD4 (0x0004) [0x0000000000000000]              
	class USFRenderTextureManager*                     RenderTextureManager;                             		// 0x0BD8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OpenedPingScoreboards;                            		// 0x0BDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< unsigned char >                            OnlyUsablePrimaryWeaponTypeArray;                 		// 0x0BE0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFUIDataStore_PlayerInfo*                   PlayerInfoDataStore;                              		// 0x0BEC (0x0004) [0x0000000000000000]              
	class USFUIDataStore_RoomUserList*                 RoomUserListDataStore;                            		// 0x0BF0 (0x0004) [0x0000000000000000]              
	class USFUIDataStore_RoomSetting*                  RoomSettingDataStore;                             		// 0x0BF4 (0x0004) [0x0000000000000000]              
	struct FString                                     GlowModeScoreText;                                		// 0x0BF8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BlinkAniHpCondition;                              		// 0x0C04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BlinkAniInterval;                                 		// 0x0C08 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FScriptDelegate                             __RegisterObjectIcon__Delegate;                   		// 0x0C0C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ChangeObjectIconState__Delegate;                		// 0x0C18 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UnRegisterObjectIconByType__Delegate;           		// 0x0C24 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __IsAlreadyObjectIconRegister__Delegate;          		// 0x0C30 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RegisterObjectIconDirect__Delegate;             		// 0x0C3C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OpenGameExitDialog__Delegate;                   		// 0x0C48 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTargetSeizuredDelegate__Delegate;             		// 0x0C54 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSetKeyInfoMinimize__Delegate;                 		// 0x0C60 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ActionMessageSortDelegate__Delegate;            		// 0x0C6C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AddCombatMessage__Delegate;                     		// 0x0C78 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AddCombatMessageWithMission__Delegate;          		// 0x0C84 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AddCombatMessageWithMissionLogOutUser__Delegate;		// 0x0C90 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ResetMissionGauge__Delegate;                    		// 0x0C9C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ResetConvoyanceGauge__Delegate;                 		// 0x0CA8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AddMessage__Delegate;                           		// 0x0CB4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RemoveMessage__Delegate;                        		// 0x0CC0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShowHUDChattingMessageList__Delegate;           		// 0x0CCC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ASShowRemainTime__Delegate;                     		// 0x0CD8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ASHideReaminTime__Delegate;                     		// 0x0CE4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OpenWeaponSetChange__Delegate;                  		// 0x0CF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HideRadioMessageMenu__Delegate;                 		// 0x0CFC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetEnableChatSendType__Delegate;                		// 0x0D08 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetChatSendType__Delegate;                      		// 0x0D14 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __AddHUdChatMessage__Delegate;                    		// 0x0D20 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyChatMessageSended__Delegate;              		// 0x0D2C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyChatMessageReceived__Delegate;            		// 0x0D38 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyMsgrChatMessageSended__Delegate;          		// 0x0D44 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyMsgrChatMessageReceived__Delegate;        		// 0x0D50 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ChangedLapTime__Delegate;                       		// 0x0D5C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __InitKillFeedBackList__Delegate;                 		// 0x0D68 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSetFastWave__Delegate;                        		// 0x0D74 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSetSeeThroughTime__Delegate;                  		// 0x0D80 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifySetSelectEqipSlot__Delegate;              		// 0x0D8C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateEquipData__Delegate;                      		// 0x0D98 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateEquipSlot__Delegate;                      		// 0x0DA4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateAmmoCount__Delegate;                      		// 0x0DB0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShowAimCursorShooterDefence__Delegate;          		// 0x0DBC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HideAimCursorShooterDefence__Delegate;          		// 0x0DC8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OpenPushCarGauge__Delegate;                     		// 0x0DD4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ClosePushCarGauge__Delegate;                    		// 0x0DE0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetConvoyanceSeizureAmount__Delegate;           		// 0x0DEC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OpenConvoyanceSeizureIcon__Delegate;            		// 0x0DF8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CloseConvoyanceSeizureIcon__Delegate;           		// 0x0E04 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetForceModeInfo__Delegate;                     		// 0x0E10 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateToZombieHideSeekKillCount__Delegate;      		// 0x0E1C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnVideoCaptureModeChanged__Delegate;            		// 0x0E28 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTwitchTVModeChanged__Delegate;                		// 0x0E34 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3627 ];

		return pClassPointer;
	};

	void GetModeExclusiveItemSlotImageInfo ( TArray< int > ItemIDList, TArray< struct FString >* ItemImageList );
	void SetGlowModeTextValue ( int Score );
	void SetGlowModeGaugeValue ( int GlowModeEffectType );
	void CrosshairInitialize ( );
	bool GetPingPosition ( struct FVector* TargetPosition );
	bool IsPingScoreboardOpened ( );
	void SetNullWeaponString ( TArray< struct FString >* outTypeList );
	bool IsUsableMainWeapon ( int ItemId );
	void GetShooterModeWeaponData ( TArray< int >* outItemGroup, TArray< struct FString >* outImgSetTypeList, TArray< struct FString >* outTypeList, TArray< struct FString >* outCamoType, TArray< int >* outAmmoCount );
	void GetWeaponData ( int WeaponSet, TArray< int >* MainWeapons, TArray< struct FString >* outImgSetTypeList, TArray< struct FString >* outTypeList, TArray< struct FString >* outCamoType, TArray< struct FString >* outMuzzleIconList );
	void UpdateIconType ( class AActor* inActor );
	unsigned char eventGetIconTypeByActor ( class AActor* TargetActor );
	void OnChallengeChanged ( struct FName SupplyCode, int TaskIndex );
	bool IsObjectIconNeedTeam ( class UClass* InClass );
	void OnBuffStateChanged ( unsigned char BuffType, unsigned char BuffState );
	void OnToggleHelp ( );
	void OnModeStatChanged ( );
	void OnModeMyDeathsUpdated ( int Count );
	void OnModeKillsUpdated ( int Count );
	void OnModeMoneyUpdated ( int NewMoney );
	void OnPingNotified ( unsigned char PingType, struct FVector TargetLocation, class ASFPlayerReplicationInfo* CallerPRI );
	void OnCaptureRemainTimeChanged ( float remain, float total );
	void OnCaptureTeamChanged ( unsigned char captured_team, struct FString captured_player );
	void OnGameModeChanged ( );
	int eventGetAimLevel ( class ASFPawn* TargetPawn );
	int GetTeamIndex ( );
	struct FString GetTeamMark ( unsigned char Team, unsigned char Size, unsigned long bChangeTeam, int* TeamCount );
	void OnChallengeCompleted ( struct FName SupplyCode, int challenge_task_index );
	void NotifyShowFeverTimeIcon ( unsigned long bShow );
	void eventNotifyUpdateConvoyanceTopPlayer ( struct FString TopPlayer, unsigned long IsSetLeft );
	void eventNotifyUpdateLocalTeamScore ( int NewRedScore, int NewBlueScore );
	void UpdateServerTeamScore ( int NewRedScore, int NewBlueScore );
	void CheckUpdateServerTeamScore ( );
	void OnGFxKeyPress ( int KeyCode );
	struct FString GetGoalScoreString ( );
	int GetGoalScore ( );
	struct FString GetTeamName ( unsigned char InTeamIndex );
	void GetTeamNameByMode ( struct FString* RedTeamName, struct FString* BlueTeamName );
	struct FString SetPlayerCodeNameBy1VS1Mode ( int TeamIndex );
	unsigned char eventScriptGetTeamNum ( );
	void TestMsgState ( int State );
	struct FString GetWaitingForPlayerMessage ( );
	bool IsPlayerOwnerTeamChanged ( );
	struct FString GetObjectMessage ( int TeamIndex );
	void KeyInputEscRelease ( );
	void KeyInputEnterRelease ( );
	void ShowBadConnectionAlert ( unsigned long bBadConnectAlert );
	void MouseSensitivityChange ( int MouseSensitivity, unsigned long bZoom );
	void CloseSelectWeaponSetMessage ( );
	void OpenSelectWeaponSetMessage ( );
	struct FString GetFormattedTime ( int InSec, struct FString* Minute, struct FString* Second );
	struct FString GetHTMLStringForFontSizeUC ( struct FString msg, int FontSize, struct FString strColor, unsigned long bColor );
	struct FString GetPRICodeName ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bIsColor );
	struct FSCodeNameColor GetCodeNameColor ( int PlayerID );
	struct FString GetTimeString ( int InSeconds );
	class ASFPlayerReplicationInfo* GetSFPRIByIndex ( int Index );
	bool IsInBackwardInWorldSpace ( struct FVector* ViewDir, struct FVector* TargetDirFromViewer );
	bool IsInBackSpace ( float fZValue );
	float GetViewTargetToActorDistace ( class AActor* pActor );
	struct FString GetHTMLStringForFontSize ( int FontSize );
	void FitFlashAbsoluteCoordinate ( int X, int Y, struct FVector* FittedPos );
	bool ClampScreenPos ( struct FVector* FittedPos );
	float GetGFxHeightRatio ( );
	float GetGFxWidthRatio ( );
	bool GetScreenCoordWithRotation ( struct FVector vScreenIn, float fMaxDist, struct FVector* vScreenOut );
	bool IsInScreen ( int X, int Y, int Width, int Height );
	float GetDistanceFromCenter ( int X, int Y );
	struct FVector Project ( struct FVector Loc );
	void OnTwitchTVModeChanged ( unsigned long bSet );
	void OnVideoCaptureModeChanged ( unsigned long bSet, int nErrorType );
	void UpdateToZombieHideSeekKillCount ( );
	void SetForceModeInfo ( );
	void CloseConvoyanceSeizureIcon ( );
	void OpenConvoyanceSeizureIcon ( );
	void SetConvoyanceSeizureAmount ( struct FString Amount );
	void ClosePushCarGauge ( );
	void OpenPushCarGauge ( );
	void HideAimCursorShooterDefence ( );
	void ShowAimCursorShooterDefence ( );
	void UpdateAmmoCount ( class ASFWeapon* WeaponInfo );
	void UpdateEquipSlot ( class ASFWeapon* WeaponInfo );
	void UpdateEquipData ( );
	void NotifySetSelectEqipSlot ( int SlotIndex );
	void OnSetSeeThroughTime ( float fValue );
	void OnSetFastWave ( unsigned long bSet );
	void InitKillFeedBackList ( class ASFPlayerReplicationInfo* SFPRI );
	void ChangedLapTime ( );
	void NotifyMsgrChatMessageReceived ( int ContactUSN );
	void NotifyMsgrChatMessageSended ( );
	void NotifyChatMessageReceived ( );
	void NotifyChatMessageSended ( );
	void AddHUdChatMessage ( unsigned char Type, struct FString strChat, unsigned long bIgnoreChatFilter );
	bool SetChatSendType ( unsigned char Type );
	void SetEnableChatSendType ( unsigned char Type );
	void HideRadioMessageMenu ( );
	void OpenWeaponSetChange ( int Type );
	void ASHideReaminTime ( );
	void ASShowRemainTime ( int nTime, unsigned long bUrgent );
	void ShowHUDChattingMessageList ( unsigned long bAll );
	void RemoveMessage ( unsigned char Type );
	void AddMessage ( unsigned char Type, struct FString msg, float Lifetime, class USoundNodeWave* Sound, int Priority, int MessageIndex, unsigned long bRemoveWhenSamePriority );
	void ResetConvoyanceGauge ( );
	void ResetMissionGauge ( );
	void AddCombatMessageWithMissionLogOutUser ( struct FName EventName, struct FString PlayerCodeName, unsigned char PlayerTeam );
	void AddCombatMessageWithMission ( struct FName EventName, class APlayerReplicationInfo* PRI );
	void AddCombatMessage ( int nWeaponID, int KillType, int CombatMsgType, class APlayerReplicationInfo* KillerPRI, class APlayerReplicationInfo* VictimPRI, class UClass* DmgTypeClass );
	void ResetAllGauge ( );
	bool ShouldSwitchToAlternativeWidget ( unsigned long CheckViewTarget );
	void NotifyWeaponSetChanged ( int new_weapon_set );
	void eventPlayMessageSound ( unsigned char Type, class USoundNodeWave* SoundWave );
	void PlayUISound ( struct FName EventName );
	void PlayWave ( class USoundNodeWave* Wave );
	void HideLeftNoticeMessage ( );
	void ShowLeftNoticeMessage ( struct FString strMessage );
	void SetBlackOutInLeague ( );
	void eventOnUpdatePerSecond ( );
	void OnObsrToggleCombatMsg ( unsigned long bShow );
	void OnObsrToggleLineBottom ( unsigned long bShow );
	void OnObsrToggleMiniMap ( unsigned long bShow );
	void OnObsrToggleChattingLog ( );
	void OnObsrToggleHPBar ( );
	void OnObsrToggleModeInfo ( );
	void eventNotifySpectatingChanged ( );
	bool NotifySetRadioMessage ( unsigned long bShow, class UClass* RadioMessageClass );
	void NotifyChangedObserverViewMode ( unsigned char InViewMode );
	void NotifyInitTargetScoreMsg ( );
	void NotifyTargetScoreMsg ( int Score, struct FVector TargetPosition );
	void NotifyEndTargetScore ( );
	void NotifySetTutorialTotalScore ( int nScore );
	void NotifyToggleHUDChanged ( );
	void NotifyPawnTeamChanged ( unsigned long bMyTeamChanged );
	void NotifyChangedNumLives ( );
	void NotifyPawnDying ( class ASFPawn* DiedPawn );
	void NotifyFinishDeadPersonCam ( );
	void NotifyStartDeadPersonCam ( );
	void NotifyHideKillCamHUD ( );
	void NotifyShowKillCamHUD ( );
	void NotifyWaitingForNextMission ( float Duration );
	void NotifyChangeAreaIndex ( unsigned char nNewAreaIndex, float Duration );
	void NotifyUpdateUserConditionInfo ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bNeedInit );
	void NotifyLocalPRIInitialized ( );
	void eventNotifyFinishFlashBangEffect ( );
	void eventNotifyStartFlashBangEffect ( );
	void NotifyMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, unsigned long bTeamChanged, float Duration );
	void NotifyRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void NotifyPreRoundEnded ( );
	bool NotifyRoundStarted ( );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnWinningKill ( float Duration );
	void OnStartSwitchingSide ( float Duration );
	void OnCountDown ( float Duration );
	void OnPendingMatch ( );
	void NotifyPlayerRespawned ( );
	void NotifyMinimapRadarCreated ( );
	void NotifyScreenResChanged ( );
	void UpdateVehicleIFF ( );
	void NotifyShowCombatReport ( );
	void NotifyIMETextInputUpdated ( );
	void NotifyVoteKickFinished ( unsigned long bShowResult, int AcceptPlayer, int RefusePlayer, int TotalPlayer );
	void NotifyVoteKickParticipated ( int nType );
	void NotifyVoteKickStarted ( struct FString strMessage );
	void NotifyPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void NotifyPlayerPawnDied ( );
	void NotifyPlayerHitEnemy ( unsigned char HitBody );
	void NotifyChangedViewtarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
	void SetGFxTimingModeToReal ( );
	void SetGFxTimingModeToGame ( );
	void HideScoreBoard ( );
	void eventCleanupGFXHUD ( );
	void eventDestroyed ( );
	void DisplayHit ( class AActor* DamageInstigator, struct FVector Direction, float FadeTimeOverride );
	void ClearDamageIndicator ( );
	int ActionMessageSortDelegate ( struct FSHUDActionMsg A, struct FSHUDActionMsg B );
	void SortActionMessageArray ( TArray< struct FSHUDActionMsg >* OutArray );
	void GetSortActionMessage ( struct FSHUDActionMsg* OutHUDActionMsg );
	int GetIsInActionMessage ( unsigned char InActionIndex, class AActor* InActonActor );
	void UnregisterActionMessageAll ( );
	void UnregisterActionMessage ( unsigned char InActionIndex, class AActor* InActionActor );
	void RegisterActionMessage ( unsigned char InActionIndex, class AActor* InActionActor, struct FString InActionMsg );
	bool CheckActionMessageNotVisible ( unsigned char ActionMsgType );
	void DisplayHUDMessage ( struct FString Message );
	int GetTeamWinningRound ( unsigned char TeamIndex );
	void ShowSystemMsg ( struct FString msg, float Time, class USoundNodeWave* SoundWave, int Priority );
	void UnRegisterMessage ( class UClass* InMessageClass );
	void RegisterMessage ( class UClass* InMessageClass, struct FString Message, float Lifetime, class USoundNodeWave* SoundWave, int Priority, int MessageIndex );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FString Message, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void CheckGRI ( );
	void ShowScoreBoard ( unsigned long bShow );
	class AReverbVolume* GetReverbVolume ( int nObjIndex );
	void CheckRevision ( );
	void DrawGameHUD ( );
	void GetOpenedGFxMoviePlayerList ( TArray< class UGFxMoviePlayer* >* MoviePlayers );
	void ShowDebugInfo ( float* out_YL, float* out_YPos );
	void ShowDebug ( struct FName DebugType );
	void DrawHUD ( );
	void eventPostRender ( );
	void PreCalcValues ( );
	void UpdateMaterialEffect ( float DeltaSeconds );
	void SetHeadUpArrowIconVisible ( class ASFPawn* Target, unsigned long bVisible );
	void OnRegisterHeadUpUI ( class ASFPawn* Target, unsigned long bRegister );
	void RemovePawnList ( class ASFPawn* Target, TArray< struct FPawnInfo >* OutPawnList );
	int AddToPawnList ( class ASFPawn* Target, TArray< struct FPawnInfo >* OutPawnList );
	bool IsProtocolAtChatMsg ( int InProtocol );
	void HandlingPacketError ( int ProtocolID, int ErrorID );
	void eventNotifyTargetSeizured ( unsigned long bSeizure );
	void OnSetKeyInfoMinimize ( );
	void OnTargetSeizuredDelegate ( unsigned long bSeizure );
	void OpenGameExitDialog ( );
	void RegisterObjectIconDirect ( class AActor* inActor, unsigned long bRegister, unsigned long bShowHP );
	bool IsAlreadyObjectIconRegister ( unsigned char InType );
	void UnRegisterObjectIconByType ( unsigned char IconType );
	bool ChangeObjectIconState ( class AActor* Obj, unsigned char State, unsigned char ShowFlag );
	void RegisterObjectIcon ( class AActor* Obj, unsigned long bRegister, unsigned char Type, unsigned char State, unsigned char ShowFlag );
	void eventUpdateLocationVolume ( class AVolume* CurrentLocationVolume );
	class AVolume* GetLocationVolume ( class AActor* Target, unsigned long bCheckViewLocationIfFailed );
	void ShowSC ( unsigned long IsShow );
	void StopRadarZoom ( );
	void StartRadarZoom ( unsigned long bZoomin );
	void ToggleHUDWidget ( struct FString WidgetName );
	void ToggleHUD ( );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void SetRadarParamFromProfile ( );
	class ASFUIMinimapRadar* SetSpawnRadar ( );
	void UpdateWholeMapRotationValue ( );
	void CreateMiniMapRadar ( class USFUIMinimapRadarGFxValue* RadarGFxValue );
	void Reset ( );
	class USFGFxHUDMoviePlayer* GetGFxHUDMovie ( class UClass* InClass );
	void CreateGFxHUD ( class UClass* InClass );
	void CreateGFxHUDArray ( );
	void CreateGFxLobbyInGame ( );
	void ResetMaterialEffect ( );
	void CreateMaterialEffect ( );
	void SetupOwnerPRI ( class ASFPlayerReplicationInfo* InPlayerPRI );
	void AddHitMark ( struct FVector HitLocation, unsigned char HitMarkType );
	void SetHUDDataStore ( );
	void PostBeginPlay ( );
	void UpdateGameModeClass ( );
};

UClass* ASFHUD::pClassPointer = NULL;

// Class SFGame.SFConvoyanceHUD
// 0x00C0 (0x0F00 - 0x0E40)
class ASFConvoyanceHUD : public ASFHUD
{
public:
	struct FConvoyanceSortPRIData                      SortPRIArray[ 0x8 ];                              		// 0x0E40 (0x0060) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TopLeftPlayerText[ 0x3 ];                         		// 0x0EA0 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TopRightPlayerText[ 0x3 ];                        		// 0x0EC4 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TopPlayerTextOfMe;                                		// 0x0EE8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoundStatusText;                                  		// 0x0EF4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3629 ];

		return pClassPointer;
	};

	void eventSetConvoyanceTopPlayer ( struct FString LeftText, struct FString RightText );
	struct FString GetGoalScoreString ( );
	int GetGoalScore ( );
	void InitInterludeMoveTargetObjectIcon ( );
	void InitConvoyanceHUD ( );
	bool NotifyRoundStarted ( );
	void UpdateTopPlayer ( );
	void SortTeamPRI ( unsigned char SortTeam, TArray< class ASFPlayerReplicationInfo* >* PRIArray );
	void SetSortPRIArray ( );
};

UClass* ASFConvoyanceHUD::pClassPointer = NULL;

// Class SFGame.SFDeathHUD
// 0x0008 (0x0E48 - 0x0E40)
class ASFDeathHUD : public ASFHUD
{
public:
	int                                                FirstPlayerScore;                                 		// 0x0E40 (0x0004) [0x0000000000000000]              
	int                                                PlayerScore;                                      		// 0x0E44 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3631 ];

		return pClassPointer;
	};

	void CheckUpdateServerTeamScore ( );
};

UClass* ASFDeathHUD::pClassPointer = NULL;

// Class SFGame.SFEntryHUD
// 0x0030 (0x0E70 - 0x0E40)
class ASFEntryHUD : public ASFHUD
{
public:
	TArray< class ASFCustomPreview* >                  arrPreview;                                       		// 0x0E40 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     CameraWeaponRepireLoc3DOld;                       		// 0x0E4C (0x000C) [0x0000000000000000]              
	struct FVector                                     CameraWeaponRepireLoc3D;                          		// 0x0E58 (0x000C) [0x0000000000000000]              
	struct FVector                                     CameraWeaponRepireLoc2D;                          		// 0x0E64 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3633 ];

		return pClassPointer;
	};

	void eventPostRender ( );
	void SetHUDDataStore ( );
	void CreateGFxLobbyInGame ( );
	void DrawGameHUD ( );
	void CreateGFxHUDArray ( );
	void RegisterObjectIcon ( class AActor* Target, unsigned long bRegister, unsigned char Type, unsigned char State, unsigned char ShowFlag );
	void OnRegisterHeadUpUI ( class ASFPawn* Target, unsigned long bRegister );
	int AddToPawnList ( class ASFPawn* Target, TArray< struct FPawnInfo >* OutPawnList );
	void UpdateMaterialEffect ( float DeltaSeconds );
	void DisplayHit ( class AActor* DamageInstigator, struct FVector Direction, float FadeTimeOverride );
	void ShowDebugInfo ( float* out_YL, float* out_YPos );
	void DisplayAnimTree ( struct FName PreviewClass, float* out_YL, float* out_YPos );
};

UClass* ASFEntryHUD::pClassPointer = NULL;

// Class SFGame.SFSurvivalHUD
// 0x0008 (0x0E48 - 0x0E40)
class ASFSurvivalHUD : public ASFHUD
{
public:
	int                                                AllSupressorCount;                                		// 0x0E40 (0x0004) [0x0000000000000000]              
	int                                                CurSupressorCount;                                		// 0x0E44 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3635 ];

		return pClassPointer;
	};

	int eventGetAimLevel ( class ASFPawn* TargetPawn );
	void SetSurvivalPoint ( int new_point );
	void NotifyUpdateLocalTeamScore ( int total_score, int game_money );
	int GetGoalScore ( );
	void CheckUpdateServerTeamScore ( );
};

UClass* ASFSurvivalHUD::pClassPointer = NULL;

// Class SFGame.SFTeamHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFTeamHUD : public ASFHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3637 ];

		return pClassPointer;
	};

};

UClass* ASFTeamHUD::pClassPointer = NULL;

// Class SFGame.SFThunderRunHUD
// 0x0044 (0x0E84 - 0x0E40)
class ASFThunderRunHUD : public ASFTeamHUD
{
public:
	struct FString                                     WaitingForNextMission[ 0x2 ];                     		// 0x0E40 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LocalizedAreaInfo;                                		// 0x0E58 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedGoal;                                    		// 0x0E64 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedArea;                                    		// 0x0E70 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class ASFThunderRunGameReplicationInfo*            SFThGRI;                                          		// 0x0E7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDistanceToGoal;                                  		// 0x0E80 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3639 ];

		return pClassPointer;
	};

	void GetThunderRunAreaString ( unsigned char PassedArea, int nGoalTime, struct FString* outArea, struct FString* outAreaText, struct FString* outGoalText );
	void CheckGRI ( );
};

UClass* ASFThunderRunHUD::pClassPointer = NULL;

// Class SFGame.SFPlayerInput
// 0x0028 (0x019C - 0x0174)
class USFPlayerInput : public UPlayerInput
{
public:
	float                                              LastDuckTime;                                     		// 0x0174 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHoldDuck : 1;                                    		// 0x0178 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseMouseSensitivityinZoom : 1;                   		// 0x0178 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bTestForward : 1;                                 		// 0x0178 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTestBackward : 1;                                		// 0x0178 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              MouseSensitivityinZoom;                           		// 0x017C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              NoInputElapsedTime;                               		// 0x0180 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FScriptDelegate >                   OnInputAxisDelegateList;                          		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInputAxis__Delegate;                          		// 0x0190 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3641 ];

		return pClassPointer;
	};

	void AddInputAxisDelegate ( struct FScriptDelegate DelegateFunc );
	void eventScriptInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	struct FString GetBindNameFromCommandForScript ( struct FString KeyCommand );
	void AdjustMouseSensitivity ( float FOVScale );
	void SetSensitivity ( float F );
	void SetSensitivityEx ( float F, unsigned long bZoom );
	void Jump ( );
	void UnDuck ( );
	void Duck ( );
	void PostProcessInput ( float DeltaTime );
	void HandleInputIgnored ( );
	void PreProcessInput ( float DeltaTime );
	void OnInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
};

UClass* USFPlayerInput::pClassPointer = NULL;

// Class SFGame.SFTextFilter
// 0x0024 (0x0060 - 0x003C)
class USFTextFilter : public UObject
{
public:
	TArray< struct FSCharRange >                       CommonCharacterSet;                               		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSCharRange >                       JapanHiraganaCharSet;                             		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSCharRange >                       JapanKatakanaCharSet;                             		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3643 ];

		return pClassPointer;
	};

	struct FString ConvertENGToUpperCase ( struct FString StrSource );
	struct FString ConvertENGToLowerCase ( struct FString StrSource );
	struct FString ConvertJPNToHalfAlphabet ( struct FString StrSource );
	struct FString ConvertJPNToFullKatakana ( struct FString StrSource );
	struct FString ConvertJPNToFullHiragana ( struct FString StrSource );
	bool IsJapanKatakanaCharacter ( int nAscCode );
	bool IsJapanHiraganaCharacter ( int nAscCode );
	bool IsCommonCharacterSet ( int nAscCode );
	struct FString ConvertJapanase ( struct FString StrSource );
};

UClass* USFTextFilter::pClassPointer = NULL;

// Class SFGame.SFUIDataProvider_InGameStore
// 0x0018 (0x0094 - 0x007C)
class USFUIDataProvider_InGameStore : public UUIResourceDataProvider
{
public:
	TArray< struct FInGameStoreItem >                  TotalInGameStoreItemList;                         		// 0x007C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ShopTitleMsg;                                     		// 0x0088 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3645 ];

		return pClassPointer;
	};

};

UClass* USFUIDataProvider_InGameStore::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_RoomSettingRef
// 0x0000 (0x00C4 - 0x00C4)
class USFUIDataStore_RoomSettingRef : public UUIDataStore_GameResource
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3647 ];

		return pClassPointer;
	};

	void GetAllResourceDataProviders ( class UClass* ProviderClass, TArray< class USFUIResourceDataProvider* >* Providers );
};

UClass* USFUIDataStore_RoomSettingRef::pClassPointer = NULL;

// Class SFGame.SFUIDataStoreBase
// 0x0014 (0x008C - 0x0078)
class USFUIDataStoreBase : public UUIDataStore_Remote
{
public:
	class USFOnlineSubsystemPC*                        OnlineSub;                                        		// 0x0078 (0x0004) [0x0000000000000000]              
	class USFItemManager*                              ItemManager;                                      		// 0x007C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnPacketRecv__Delegate;                         		// 0x0080 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3649 ];

		return pClassPointer;
	};

	void SendAppReport ( struct FString Report );
	void OnGameStarted ( );
	void AddRecvPacketHandler ( int ProtocolID, int ResultID, struct FScriptDelegate OnPacketRecvHandler );
	void SetRecvPacketHandler ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnPacketRecv ( class UPacket* Packet );
};

UClass* USFUIDataStoreBase::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_Enchant
// 0x006C (0x00F8 - 0x008C)
class USFUIDataStore_Enchant : public USFUIDataStoreBase
{
public:
	TArray< struct FEnchantDesignInfo >                EnchantDesignList;                                		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                EnchantDesignCount;                               		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWaitPacketBaseItem : 1;                          		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWaitDestroyItemPacket : 1;                       		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                ServerGetBaseItemCount;                           		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                CurrentWaitEnchantDesignIndex;                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                UISelectedEnchantDesignIdx;                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	TArray< int >                                      AllBaseItemIDList;                                		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            ExtractableItemClassList;                         		// 0x00B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FItemExtractInfo >                  ExtractResultList;                                		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FEnchantParts                               MaxEnchantParts;                                  		// 0x00D0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FEnchantParts                               CurrentEnchantParts;                              		// 0x00DC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PartsTypeCount;                                   		// 0x00E8 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            WeapEnchantDesignClassList;                       		// 0x00EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3651 ];

		return pClassPointer;
	};

	bool IsValidEnchantDesign ( struct FEnchantDesignInfo DesignInfo );
	bool HasEnoughParts ( struct FEnchantDesignInfo DesignInfo );
	bool HasAnyBaseItem ( struct FEnchantDesignInfo DesignInfo );
	bool IsPossibleEnchant ( int EnchantDesignID );
	bool GetMostSuitableBaseItemInfo ( int BaseItemID, struct FDetailItem* BestBaseItem );
	bool GetEnchantableBaseItemList ( int BaseItemID, TArray< struct FDetailItem >* OutEnchantableBaseItemList );
	bool IsEnchantableBaseItem ( struct FDetailItem BaseItemInfo );
	int GetItemDetailInfoListByItemID ( int ItemId, TArray< struct FDetailItem >* OutDetailInfoList );
	bool GetItemDetailInfoByItemID ( int ItemId, struct FDetailItem* OutDetailInfo );
	void PKT_GetEnchantUserDesignItemcnt_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetEnchantDesign_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetEnchantDesign_REQ_TRANSACTION ( class UPacket* recvPacket );
	void RequestServerEnchantDesign ( );
	int GetPartsIndex ( int PartsItemID );
	int GetPartsTypeInGameServer ( int PartsItemID );
	void GetTotalExtractResult ( TArray< int >* OutExtractResult );
	bool IsOverAllParts ( float Rate );
	bool IsOverParts ( float Rate, int PartsIndex );
	void GetMaxEnchantParts ( TArray< int >* OutMaxEnchantParts );
	void GetCurrentEnchantParts ( TArray< int >* OutEnchantParts );
	void AddEnchantParts ( struct FEnchantParts AddParts );
	void SetUserEnchantParts ( struct FEnchantParts NewParts );
	struct FEnchantParts SumEnchantParts ( struct FEnchantParts OrgParts, struct FEnchantParts DestParts );
	void PKT_DestroyEnchantDesignItem_REQ_OK ( class UPacket* recvPacket );
	int GetPartsType ( int ItemId );
	bool IsExtractableItemClass ( class UClass* ItemClass );
	bool IsExtractableItem ( int ItemId );
	void RequestItemExtract ( TArray< struct FDetailItem > ExtractItemList );
	void SetRecvPacketHandler ( );
	void GetSelectedEnchantDesign ( struct FEnchantDesignInfo* CurrentDesign );
	void GetDesignGroupNameList ( TArray< struct FString >* OutGroupNameList );
	void GetGroupDesignInfoList ( struct FString GroupName, TArray< struct FEnchantDesignInfo >* OutDesignInfoList );
	bool GetEnchantDesignInfo ( int EnchantDesignID, struct FEnchantDesignInfo* OutDesignInfo );
	void AddEnchantBaseItem ( int EnchantDesignID, int BaseItemID );
	void AddEnchantDesignInfo ( struct FEnchantDesignInfo DesignInfo );
};

UClass* USFUIDataStore_Enchant::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_InGameScore
// 0x00D0 (0x015C - 0x008C)
class USFUIDataStore_InGameScore : public USFUIDataStoreBase
{
public:
	struct FSFPlayerLog                                PlayerLog;                                        		// 0x008C (0x00B8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHitPawnInfo >                      HitPawnListForPlayerLog;                          		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FHitPawnInfo >                      HitPawnListForWeaponLog;                          		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3653 ];

		return pClassPointer;
	};

	void SendZombiePlayerLogToDatabase ( unsigned char bIsAbnormalMatchEnd, int TotalExp, int LuckyPoint );
	void SendConvoyancePlayLog ( unsigned char bIsAbnormalMatchEnd, class ASFConvoyancePlayerController* C );
	void SendAITDMPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd, int KilledbyAI );
	void SetManHuntBeastPlayTime ( int BeastType, int IncPlayTime );
	void SetManHuntHumanPlayTime ( int nWeapSet, int IncPlayTime, int PrimaryWeaponCodeNameIndex );
	void SendWarriorPlayLog ( unsigned char bIsAbnormalMatchEnd, class ASFWarriorPlayerController* C );
	void SendManHuntPlayLog ( unsigned char bIsAbnormalMatchEnd );
	void SendSurvivalPlayLog ( unsigned char bIsAbnormalMatchEnd, int TotalExp, int LuckyPoint );
	bool ValidationCheckPlayerLog ( unsigned long bForce );
	void InitValidationPropertiesInPlayerLog ( );
	void SetLogInfoLastRound ( int CSN, unsigned long bIsWinGame );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	void SetPlayerItemCode ( struct FString ItemCode );
	void SetHitInfoLog ( int nWeapSet, int WeaponCodeNameIndex, unsigned char HitBody, class UClass* dmgType );
	void UpdateMainlyUsedWeapon ( );
	void ClearHitPawnList ( );
	void SetHitPawnList ( class ASFPawn* HitPawn, unsigned long bWeaponLog );
	void SetLogInfoWeapPlayTime ( int nWeapSet, int IncPlayTime, int PrimaryWeaponCodeNameIndex );
	void ResetSavedWeaponData ( int ResetIndex, struct FName ResetDataType, int ReferenceIndex, struct FName ReferenceDataType );
	void SendWeaponLogToDataBase ( int WeapSetIndex );
	void AddPlayerLogData ( unsigned char logType, int nAmt, int WeapSetIndex );
	void SetPlayerLogData ( unsigned char logType, int nValue, int WeapSetIndex );
	int GetPlayerLogData ( unsigned char logType, int WeapSetIndex );
	void InitPlayerLog ( );
	void ReturnToLobby ( );
};

UClass* USFUIDataStore_InGameScore::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_PlayerInfo
// 0x081C (0x08A8 - 0x008C)
class USFUIDataStore_PlayerInfo : public USFUIDataStoreBase
{
public:
	int                                                CustomModeIndex;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned char                                      CPULevel;                                         		// 0x0090 (0x0001) [0x0000000000000000]              
	unsigned char                                      GPULevel;                                         		// 0x0091 (0x0001) [0x0000000000000000]              
	unsigned char                                      CPUNumPhysicalProcessor;                          		// 0x0092 (0x0001) [0x0000000000000000]              
	unsigned char                                      CPUNumCorePerProcessor;                           		// 0x0093 (0x0001) [0x0000000000000000]              
	unsigned char                                      CPUCompanyType;                                   		// 0x0094 (0x0001) [0x0000000000000000]              
	unsigned char                                      CompositeLevel;                                   		// 0x0095 (0x0001) [0x0000000000000000]              
	unsigned char                                      CompositeLevelOriginal;                           		// 0x0096 (0x0001) [0x0000000000000000]              
	unsigned char                                      OutFromRoomReason;                                		// 0x0097 (0x0001) [0x0000000000000000]              
	unsigned char                                      ReturnLobbyType;                                  		// 0x0098 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastClanMsgType;                                  		// 0x0099 (0x0001) [0x0000000000000000]              
	TArray< struct FString >                           VideoResolutions;                                 		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsScreenResList >                   ScreenResLists;                                   		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCapturingVideo : 1;                              		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTwitchTVBroadcast : 1;                           		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRecvGetUserInfo : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedServerUpdateMainUnit : 1;                    		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsClanLoginMsg : 1;                              		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bAutoNotifyWindow : 1;                            		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bReloadInventory : 1;                             		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bEnableRequestGift : 1;                           		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bEnableGiftSendButton : 1;                        		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bRequestLuckyPoint : 1;                           		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      bEnableNewMonthlyReward : 1;                      		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bEnableDiscountItemGift : 1;                      		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bCharacterCreate : 1;                             		// 0x00B4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      IsUpdateMonthlyReward : 1;                        		// 0x00B4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCheckFreeItemForMRFlag : 1;                      		// 0x00B4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      ShouldRequestHeroRewardCoin : 1;                  		// 0x00B4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bOpenMiniGachaPopup : 1;                          		// 0x00B4 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bRankUpFlagForLobby : 1;                          		// 0x00B4 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bUseKADRatio : 1;                                 		// 0x00B4 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      IsShopPMCItem : 1;                                		// 0x00B4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bClanBuff : 1;                                    		// 0x00B4 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	struct FSPlayerInfo                                MyInfo;                                           		// 0x00B8 (0x01B8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSPlayerInfo                                OldMyInfo;                                        		// 0x0270 (0x01B8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSPlayerInfo                                NewMyInfo;                                        		// 0x0428 (0x01B8) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSMyRanking                                 MyRanking;                                        		// 0x05E0 (0x0058) [0x0000000000000000]              
	TArray< struct FSRecvRanking >                     MyRankingArray;                                   		// 0x0638 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           LastClanMsgUSNArray;                              		// 0x0644 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           LastClanMsgCodeNameArray;                         		// 0x0650 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           LastClanMsgClanNameArray;                         		// 0x065C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastNotifyClanMsg;                                		// 0x0668 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsClanMsgInfo >                     ClanMsgInfoArray;                                 		// 0x0674 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanWarResultText;                                		// 0x0680 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSFWeaponLog >                      WeaponLogArray;                                   		// 0x068C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                JoinSeverID;                                      		// 0x0698 (0x0004) [0x0000000000000000]              
	int                                                AntiFatigueAccumTimeS;                            		// 0x069C (0x0004) [0x0000000000000000]              
	int                                                AntiFatigueIntervalM;                             		// 0x06A0 (0x0004) [0x0000000000000000]              
	int                                                AntiFatiguePrevTimeM;                             		// 0x06A4 (0x0004) [0x0000000000000000]              
	int                                                ShutDownLawStep;                                  		// 0x06A8 (0x0004) [0x0000000000000000]              
	TArray< struct FSShutDownLaw >                     ShutDownArray;                                    		// 0x06AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSShutDownNoti >                    ShutDownNotiArray;                                		// 0x06B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              GameStartAppSeconds;                              		// 0x06C4 (0x0004) [0x0000000000000000]              
	int                                                RankingListCount;                                 		// 0x06C8 (0x0004) [0x0000000000000000]              
	int                                                LobbyLoadedCount;                                 		// 0x06CC (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           WeaponLogResults;                                 		// 0x06D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             KillInfoPacketNames;                              		// 0x06DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TotalAccomplishedChallengeList;                   		// 0x06E8 (0x0004) [0x0000000000000000]              
	float                                              fPrevRequestGiftTime;                             		// 0x06EC (0x0004) [0x0000000000000000]              
	float                                              PlayerInfoReqDelayTime;                           		// 0x06F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FsNotifyInfo >                      NotifyInfoArray;                                  		// 0x06F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNotifyInfo >                      ADInfoArray;                                      		// 0x0700 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNotifyInfo >                      ChannelListADInfoArray;                           		// 0x070C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNotifyInfo >                      ClanLeagueADInfoArray;                            		// 0x0718 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNotifyInfo >                      ClanLeagueTermsInfoArray;                         		// 0x0724 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNotifyInfo >                      FeverTimeInfoArray;                               		// 0x0730 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNotifyInfo >                      SerialADInfoArray;                                		// 0x073C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UseInitWeaponLogItemCode;                         		// 0x0748 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsFiringrangeInfo >                 MyFiringrangeArray;                               		// 0x0754 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ExitItemCount;                                    		// 0x0760 (0x0004) [0x0000000000000000]              
	int                                                ExitUserGroupNumber;                              		// 0x0764 (0x0004) [0x0000000000000000]              
	int                                                ExitCheckResult;                                  		// 0x0768 (0x0004) [0x0000000000000000]              
	struct FString                                     ExitCheckGroup;                                   		// 0x076C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsExitItemData >                    ExitItemArray;                                    		// 0x0778 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsPlayerVIPInfo                             VipInfo;                                          		// 0x0784 (0x0028) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMonthlyRewardInfo >                MonthlyRewardList;                                		// 0x07AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMyMonthlyRewardInfo                        MyMonthlyReward;                                  		// 0x07B8 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MonthlyRewardStartDay;                            		// 0x07E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FSMapID                                     ActivePvEMapID[ 0x4 ];                            		// 0x07EC (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ColorCodeNameV2Array;                             		// 0x081C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ColorCodeNameV2Default;                           		// 0x0828 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                FacebookFriendTransactionCount;                   		// 0x0834 (0x0004) [0x0000000000000000]              
	int                                                FacebookUserInfoTransactionCount;                 		// 0x0838 (0x0004) [0x0000000000000000]              
	TArray< struct FSFacebookUserInfo >                FacebookFriendsList;                              		// 0x083C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFacebookUserInfo >                FacebookInterlockedFriendList;                    		// 0x0848 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MonthlyRewardListCount;                           		// 0x0854 (0x0004) [0x0000000000000000]              
	int                                                PCRoomCareType;                                   		// 0x0858 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DisguiseRankSettingList;                          		// 0x085C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ClanConnectBenefitLimitCount;                     		// 0x0868 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FiringRangeArrayCount;                            		// 0x086C (0x0004) [0x0000000000000000]              
	struct FString                                     SendFiringRangeWeaponType;                        		// 0x0870 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SendFiringRangeScore;                             		// 0x087C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           Result1VS1RankList;                               		// 0x0880 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FS1VS1UserRankListInfo >            Rank1VS1UserList;                                 		// 0x088C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RankUserCount;                                    		// 0x0898 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __SortWeaponLogByNameDelegate__Delegate;          		// 0x089C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3655 ];

		return pClassPointer;
	};

	int Get1VS1UserListIndex ( int CustomModeType );
	bool Get1VS1UserListArray ( int CustomModeType, TArray< struct FS1VS1UserRankInfo >* OutArray );
	int Get1VS1RankUserCount ( );
	void Recv1VS1UserRankList ( int CustomModeType );
	void SetReponseResults ( TArray< struct FString > Results );
	bool GetADInfoArrayPath ( TArray< struct FsNotifyInfo > InADInfoArray, TArray< struct FString >* OutADPathArray );
	bool IsApplyClanBuffLevel ( struct FSGameClanBuffInfo ClanBuff );
	bool GetClanBuffInfo ( unsigned char BuffType, struct FSGameClanBuffInfo* ClanBuff );
	bool IsGamingRoomSameUser ( class ASFPlayerReplicationInfo* SFPRI );
	bool IsClanConnectBenefitBuff ( class ASFPlayerReplicationInfo* SFPRI, struct FSGameClanBuffInfo* ClanBuff );
	bool GetVipRoomMarkInfo ( struct FString* VipImg, struct FString* strSP, struct FString* strExp, int* MasterVipGrade );
	bool IsShopPMCItemButton ( );
	void SetShopPMCItem ( unsigned long ShopPMCItem );
	void SetLuckyPoint ( int NewLuckyPoint );
	bool IsEnableGiftSendButton ( );
	struct FQWord GetPmcItemSN ( );
	int GetPmcItemID ( );
	struct FString GetPmcCode ( );
	bool IsEquipPmcItem ( struct FString strPmcCode );
	int GetEquipUnitItemID ( unsigned long bOnlyUintItemID );
	void PKT_PCRoomBenefitMessage_Auto ( class UPacket* Packet );
	void GetMonthlyRewardList ( int Cash, struct FMyMonthlyRewardInfo* outMonthryReward );
	void RecvMonthlyRewardUserCash ( class UPacket* recvPacket );
	int GetFiringScoreMyScorebyWeaponType ( int WeaponType );
	void GetFiringScoreMyDataObject ( int WeaponType, int* outRank, int* outScore, struct FString* outInitial );
	void SetFiringRangeInitial ( int WeaponType, struct FString Initial );
	void PKT_UpdateFiringRangeScore_OK ( class UPacket* recvPacket );
	void PKT_GetMyFiringRangeScore_OK ( class UPacket* recvPacket );
	void PKT_GetMyFiringRangeScore_TRANS ( class UPacket* recvPacket );
	void InitMyFiringrangeArray ( );
	void PKT_GetMonthlyRewardList_OK ( class UPacket* recvPacket );
	void PKT_GetMonthlyRewardList_TRANS ( class UPacket* recvPacket );
	void InitMyMonthlyReward ( );
	void PKT_GetUserInfoByFacebook_OK ( class UPacket* recvPacket );
	void PKT_GetUserInfoByFacebook_TRANS ( class UPacket* recvPacket );
	void PKT_GetFacebookFriends_OK ( class UPacket* recvPacket );
	void PKT_GetFacebookFriends_TRANS ( class UPacket* recvPacket );
	void OnFacebookFriendsListUpdated ( TArray< struct FSFacebookUserInfo > NewFacebookFriendsList );
	void ResetFacebookFriendList ( );
	void ClearFacebookFriendList ( );
	void PKT_GetFacebookInfo_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetLuckyPoint_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetPmcForceEquip_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetUserGroupCheck_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetUserGroupCheck_REQ_OK ( class UPacket* recvPacket );
	bool IsValidUserGroupGift ( );
	bool IsAllReceivedExitItem ( );
	unsigned char GetNextTargetDifficulty ( int map_id );
	void AddActivePvEMapID ( unsigned char Difficulty, int MapID );
	bool IsActivePvEMapID ( unsigned char Difficulty, int MapID );
	struct FString GetShutDownRemainMessage ( );
	struct FString GetShutDownCloseMessage ( );
	void PKT_ShutDownLawListMessage_Auto ( class UPacket* recvPacket );
	void PKT_ShutDownLawNotiMessage_Auto ( class UPacket* recvPacket );
	void DecreaseGachaCoin ( int InC );
	void SetMiniGachaCoin ( int Count );
	void DecreaseExtraRewardCoin ( int InC );
	void SetMyExtraRewardCoinState ( int Code );
	void SetMyExtraRewardCoin ( int Count );
	void SetMyExtraRewardCoinGauge ( int gauge );
	bool RequestGiftCount ( unsigned long bForce );
	int GetClanDailyRankingChanged ( );
	int GetClanRealRankingChanged ( );
	int GetPersonalDailyRankingChanged ( );
	int GetPersonalRealRankingChanged ( );
	bool IsInitialLobbyLoaded ( );
	bool IsInitialLogin ( );
	void OnGameStarted ( );
	struct FString GetMyDesertionRatioMessage ( );
	int GetMyDesertionLevel ( );
	void UpdatePlayerRank ( unsigned long bExpChanged );
	void SetPlayerInfoFromRoom ( struct FSRoomUser MyRoomUser );
	bool IsAllReceivedEssentialInfo ( );
	int GetTotalAccomplishedChallengeList ( );
	void PKT_GetTaskList_REQ_TRANSACTION ( class UPacket* Packet );
	void PKT_GetTaskList_REQ_OK ( class UPacket* Packet );
	void PKT_GetUserKillInfo_REQ ( class UPacket* Packet );
	void PKT_GetCash_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetTp_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetSp_REQ_OK ( class UPacket* recvPacket );
	bool IsShutDownAge ( );
	void PKT_ChangeVipInfoMessage_Auto ( class UPacket* Packet );
	void PKT_AntiFatigueTimeMessage_Auto ( class UPacket* Packet );
	void SetAntiFatigueNewInterval ( );
	int GetAntiFatigueAccumTime ( );
	void OnDesertionResetted ( );
	void OnWinLoseResetted ( );
	void OnKillDeathResetted ( );
	struct FString GetFormatColorCodeName ( struct FString strCodeName, struct FSCodeNameColor CodeNameColorInfo );
	struct FString GetClanRecommendNick ( );
	struct FString GetCodeName ( unsigned long bIsColorCode );
	void ServerToSendSetPmcForceEquip ( struct FString ItemCode, struct FQWord ItemSN );
	void OnDisguiseRankChanged ( );
	void PmcEquipChanged ( );
	void OnClanMarkEffectChanged ( );
	void OnClanMarkChanged ( );
	void OnColorCodeNameChanged ( );
	void OnClanNameChanged ( );
	void OnCodenameChanged ( );
	bool IsVersion2ColorCodeName ( );
	bool IsConditionOpenColorCodeNameV2Dlg ( );
	bool IsReceivedWeaponLog ( struct FName InWeaponItemCode );
	void GetWeaponLogDataArray ( TArray< struct FSFWeaponLog >* OutArray );
	void MergeWeaponLog ( TArray< struct FSFWeaponLog >* AllWeaponLogArray );
	int SortWeaponLogByNameDelegate ( struct FSFWeaponLog A, struct FSFWeaponLog B );
	void MakeAllWeaponLogInfoList ( TArray< struct FSFWeaponLog >* AllWeaponLogArray );
	void ResetWeaponLogInfo ( struct FString ItemCode );
	void RecvWeaponLogInfo ( TArray< struct FString > Results );
	void ReciveAllWeaponLogInfo ( );
	void SetOutFromRoomReason ( unsigned char InOutFromRoomReason );
	float GetKillperDeath ( );
	int UpdateChangedInvenSetting ( );
	void ChangeUsingUnitItem ( int ItemId, struct FString ItemCode );
	struct FString GetNotifyClanMsgChangeClanMark ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgChangeClanName ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgChangeCodeName ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgResultClanWar ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgMemberLogin ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgGiveMaster ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgLevelChange ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgDestroyClan ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgMemberOut ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgJoinNo ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgJoinOk ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgRemoveClan ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetNotifyClanMsgJoin ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgChangeClanMark ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgChangeClanName ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgChangeCodeName ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgResultClanWar ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgMemberLogin ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgGiveMaster ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgLevelChange ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgDestroyClan ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgMemberOut ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgJoinNo ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgJoinOk ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgRemoveClan ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString NotifyClanMsgJoin ( unsigned char Type, TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > strClanNameArray );
	struct FString GetClanMsg ( unsigned char Type );
	void PKT_ClanMessage_Auto ( class UPacket* recvPacket );
	void HACK_ParsingPersonalAddInfoStr ( struct FString ADDInfo, struct FsPersonalAddInfo* NewPersonalAddInfo );
	void ParsingPersonalAddInfoStr ( struct FString ADDInfo, struct FsPersonalAddInfo* NewPersonalAddInfo );
	struct FString MakePersonalAddInfoStr ( );
	struct FString GetZeroDataString ( int StrLen, int nMaxLen );
	void GetBattleInfoBasicBase ( int Kills, int Assists, int Deaths, int HeadShots, int AllWinGameCount, int AllPlayGameCount, struct FString* KADRatioStr, struct FString* HKillRatioStr, struct FString* WinRatioStr );
	void GetBattleInfoBasic ( struct FString* KADRatioStr, struct FString* HKillRatioStr, struct FString* WinRatioStr );
	int GetFavoriteWeapon ( );
	void PKT_GetUserRealRanking_REQ_OK ( class UPacket* recvPacket );
	bool CheckRecivedRankingList ( );
	void PKT_GetUserRankingList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetUserRankingList_REQ_OK ( class UPacket* recvPacket );
	void GetMyRankingByType ( int InType, int* OutRanking, int* OutCount );
	bool IsTagExist ( );
	void SetMyRanking ( );
	bool CheckOutDateMonthlyReward ( );
	bool CheckOutDateVipItem ( );
	void UpdateVipInfoDate ( int ItemId, struct FString ExpriedDate );
	void SetVipInfo ( struct FsPlayerVIPInfo Info );
	struct FsPlayerVIPInfo GetRecvPlayerVipInfoData ( class UPacket* recvPacket );
	void RecvGetLeagueTicketCount ( class UPacket* recvPacket );
	void RecvGetPlayerVipInfo ( class UPacket* recvPacket );
	void PKT_GetUserInfo_REQ_OK ( class UPacket* recvPacket );
	void SetClanInfo ( int CSN, struct FString ClanName, int ClanLevel, unsigned long bIsRequestClan, struct FString ClanMark, struct FString ClanRecommendNick );
	bool IsMyClan ( int CSN );
	bool IsHaveClan ( );
	int GetHaveClanCSN ( );
	bool IsClanManagerOrMaster ( );
	bool IsClanRegularMember ( );
	bool IsClanMaster ( );
	bool IsClanManager ( );
	bool IsClanWaitPeople ( );
	bool CompareMyClanLevel ( int Level );
	void UpdateOwnerClanJoinInfo ( );
	bool IsRequestJoinClan ( );
	bool IsJoinClan ( );
	void InitClanInfo ( );
	void GetVIPInfo ( struct FsPlayerVIPInfo* OutInfo );
	bool FindMonthlyRewardRemoveItembyItemId ( int ItemId );
	void UpdateMonthylRewardBuyType ( int ItemId, unsigned long IsBuyType );
	bool FindMonthlyRewardAddItembyItemId ( int ItemId );
	bool IsMonthlyRewardCareItemByType ( int ItemId, unsigned long IsAdd );
	int GetMonthlyRewardAccumulationCash ( );
	bool GetCheckFreeItemForMonthlyRewardFlag ( );
	void SetCheckFreeItemForMonthlyRewardFlag ( unsigned long bFlag );
	int GetMonthlyRewardGrade ( );
	float GetMonthlyRewardSp ( );
	float GetMonthlyRewardExp ( );
	bool IsMonthlyReward ( );
	int GetVIPGrade ( );
	void SetCodeNameColor ( struct FSCodeNameColor CodeNameColorInfo );
	struct FSCodeNameColor GetCodeNameColor ( );
	void SetPrevLuckyPoint ( int NewValue );
	int GetMiniGashaCoin ( );
	struct FString GetKeySet ( );
	void AddKeySet ( struct FString NewSet );
	void SetKeySet ( struct FString NewSet );
	int GetClanLevel ( );
	int GetSPGage ( );
	void SetSPGage ( int NewSPGage );
	void SetCash ( int NewCash );
	void SetCP ( int NewCP );
	void SetTP ( int NewTP );
	void SetSP ( int NewSP );
	int GetCash ( );
	int GetCP ( );
	int GetTP ( );
	int GetSP ( );
	int GetLuckyPoint ( );
	void AddCash ( int Cash );
	void AddCP ( int nAmount );
	void AddLP ( int LP );
	void AddTP ( int Amount );
	void AddSP ( int Amount );
	void SetNametagImage ( int NewImage );
	int GetNametagImage ( );
	void AddAssists ( int nAmount );
	int GetWeaponSetIndex ( );
	void setPmcItemSN ( struct FQWord ItemSN );
	void SetWeaponSetIndex ( int Index );
	void SetNewPlayerInfo ( struct FSPlayerInfo NewInfo );
	void GetNewPlayerInfo ( struct FSPlayerInfo* OutInfo );
	void SetOldPlayerInfo ( struct FSPlayerInfo NewInfo );
	void GetOldPlayerInfo ( struct FSPlayerInfo* OutInfo );
	void SetPlayerInfo ( struct FSPlayerInfo NewInfo );
	void GetPlayerInfo ( struct FSPlayerInfo* OutInfo );
	struct FString GetClanName ( );
	int GetLeagueTicketCount ( );
	void SetLeagueTicketCount ( int TicketCount );
	void SetClanMarkEffect ( struct FString NewEffect );
	struct FString GetClanMarkEffect ( );
	struct FString GetClanMark ( );
	void SetDisguiseRank ( int Disguise );
	struct FString GetGFxDisguiseRank ( );
	int GetDisguiseRank ( );
	struct FString GetGFxRank ( );
	void AddEXP ( int nAmount );
	void SetExp ( int NewExp );
	int GetExp ( );
	int GetMainUnitID ( );
	int GetRank ( );
	int GetRequestJoinCSN ( );
	int GetCSN ( );
	int eventGetUSN ( );
	void SetRecvPacketHandler ( );
	struct FString GetCodeNameColorV2ArrayValue ( int Index, struct FString ColorValue );
	int HexToInt ( struct FString D );
	struct FString MakeCodeNameColorV2 ( struct FString ColorValue, struct FString CodeName );
	void SetNotifyInfo ( );
};

UClass* USFUIDataStore_PlayerInfo::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_RoomSetting
// 0x0334 (0x03C0 - 0x008C)
class USFUIDataStore_RoomSetting : public USFUIDataStoreBase
{
public:
	TArray< struct FSGameModeByChannel >               GameModeByChannelArray;                           		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSGameModeByCreateRoom >            GameModeByCreateRoomArray;                        		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ApplyCustomModeData;                              		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      ApplyPickUpWeaponData;                            		// 0x00B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_ModeInfo* >        CurGameModeDataProvider;                          		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_ModeInfo* >        NormalGameModeDataProvider;                       		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_TutorialModeInfo* > TutorialModeDataProvider;                         		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_BeginnerModeInfo* > BeginnerModeDataProvider;                         		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_TrainingModeInfo* > TrainingModeDataProvider;                         		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_ModeInfo* >        AllModeDataProvider;                              		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_MapInfo* >         MapDataProvider;                                  		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSPreQuickJoinInfo                          QuickJoinInfo;                                    		// 0x0110 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSModeInfoSearchCache >             ModeInfoSearchCacheArray;                         		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSMapInfoSearchCache >              MapInfoSearchCacheArray;                          		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ClanPlayerCount;                                  		// 0x0148 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                HostUSN;                                          		// 0x0154 (0x0004) [0x0000000000000000]              
	struct FString                                     HostIP;                                           		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                HostPort;                                         		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseRelay : 1;                                    		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReportDisableGameMode : 1;                       		// 0x0168 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedUpdateNoTeam : 1;                            		// 0x0168 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNeedUpdateSnowFight : 1;                         		// 0x0168 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSeperateMapForRookie : 1;                        		// 0x0168 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bEnableSecondHalf : 1;                            		// 0x0168 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForceLeaveRookieChannel : 1;                     		// 0x0168 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      IsRoomGamingRotationSetting : 1;                  		// 0x0168 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      IsVIPMapUnlock : 1;                               		// 0x0168 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	struct FString                                     RelayIP;                                          		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RelayPort;                                        		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                ExtraOption;                                      		// 0x017C (0x0004) [0x0000000000000000]              
	struct FString                                     GameUniqueKey;                                    		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSRoomSetting                               PendingRoom;                                      		// 0x018C (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSRoomSetting                               GamingRoom;                                       		// 0x01E0 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSRoomSetting                               PartyRoom;                                        		// 0x0234 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFindMatchingRoom                          FindMatchingRoom;                                 		// 0x0288 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvRoomType;                                     		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                DefPartyRoomUserCount;                            		// 0x02C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SecondHalfWaitingTime;                            		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MatchWaitingDeniedTime;                           		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DisconnetedMactingTime;                           		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ForceExitMatchingRoomType;                        		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              fGamingRoomJoinTime;                              		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                PrevGameModeID;                                   		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                PrevMapID;                                        		// 0x02DC (0x0004) [0x0000000000000000]              
	TArray< int >                                      NoDurabilityModeArray;                            		// 0x02E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                RecvLinkedRoomNumber;                             		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                RecvMatchOver;                                    		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                RecvRedScore;                                     		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                RecvBlueScore;                                    		// 0x02F8 (0x0004) [0x0000000000000000]              
	unsigned char                                      RecvGameStartEnable;                              		// 0x02FC (0x0001) [0x0000000000000000]              
	TArray< int >                                      PlayerCountArray;                                 		// 0x0300 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSModeDispType >                    ModeDispTypeArray;                                		// 0x030C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSModeDispType >                    RookieModeDispTypeArray;                          		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSModeDispType >                    VIPModeDispTypeArray;                             		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSUnitedMode >                      UnitedModeArray;                                  		// 0x0330 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRotationModeData >                 RotationModeList;                                 		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FCachedSupportMap >                 CachedSupportMapArray;                            		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSSupportMap >                      CachedAllModeSupportMapArray;                     		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RoomGamingVIPIcon;                                		// 0x0360 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VIPModeImpossibleMessage;                         		// 0x036C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           DisableCreatePasswordModeName;                    		// 0x0378 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSCustomModeButton >                CustomModeListBT;                                 		// 0x0384 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CustomModeListTitle;                              		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __MapListSortByNameDelegate__Delegate;            		// 0x039C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ModeSortByDispTypeDelegate__Delegate;           		// 0x03A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CacheSortByDispTypeDelegate__Delegate;          		// 0x03B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3657 ];

		return pClassPointer;
	};

	void ReportDisableGameMode ( unsigned long bReport );
	bool IsApplyPickUpWeaponByWeaponTypeMode ( int WeaponTypeMode );
	bool IsApplyCustomModeByModeID ( int GameModeID );
	bool IsApplyCustomModeByModeName ( struct FString GameModeName );
	bool FindBelongToGameModeByIndex ( int GameModeByCreateRoomIndex, struct FString ModeName );
	bool GetCustomModeListBT ( int GameModeID, TArray< struct FSCustomModeButton >* CustomModeBTList );
	bool IsDisablePasswordRoomMode ( struct FString ModeName );
	bool GetCheckMinPlayer ( unsigned char RoomType );
	bool GetRemoveGachaCapsuleResultBoard ( unsigned char RoomType );
	void GetClanModeNameArray ( TArray< struct FString >* ModeNameArray );
	unsigned char GetWaitingRoomByID ( int GameModeID );
	struct FString GetBackGroundNameByMapID ( int MapID );
	bool IsNoDurabilityMode ( int GameModeID );
	int CacheSortByDispTypeDelegate ( struct FSModeInfoSearchCache A, struct FSModeInfoSearchCache B );
	int ModeSortByDispTypeDelegate ( class USFUIDataProvider_ModeInfo* A, class USFUIDataProvider_ModeInfo* B );
	void OnChangedGameModeDataProvider ( int nChannelType );
	bool GetSupportCustomMode ( );
	void AddGameModeDispType ( int GameModeID, struct FString DisplayType, TArray< struct FSModeDispType >* OutArray );
	void SetGameModeDispType ( );
	int GetGameModeDispType ( int GameModeID );
	struct FString GetMapInternationalName ( struct FString strResourceName );
	struct FString GetMapLocalizedNameByID ( int MapID );
	struct FString GetMapLocalizedName ( struct FString strResourceName );
	struct FString GetGameModeClassByModeID ( int GameModeID );
	int GetGameModeByModeType ( unsigned char Type );
	int GetGameModeIDByModeName ( struct FString GameModeName );
	int GetGameModeIDByModeClassName ( struct FString GameModeClassName );
	float GetAdditionalRadarMapScale ( int MapID );
	int GetMapIDByMapName ( struct FString MapName );
	struct FString GetMapNameByMapID ( int MapID );
	struct FString GetGameModeLocalizedName ( struct FString strGameModeName );
	struct FString GetGameModeLocalizedNameByID ( int GameModeID );
	struct FString GetGameModeNameByGameModeID ( int GameModeID );
	bool IsSelectableMode ( int GameModeID, unsigned long bWithUnitedMode );
	bool GetSupportMapArray ( int GameModeID, unsigned long IsRotationData, TArray< struct FSSupportMap >* OutArray );
	bool IsNextRotaion ( );
	int GetRotationModeIndex ( int GameModeID );
	bool IsRotationMode ( int GameModeID );
	int GetRotationMode ( int GameModeID );
	void SetRotationModeArray ( );
	int GetFirstModeInUnitedMode ( int UnitedModeID );
	TArray< int > GetUnitedGameModeSubIDArray ( int UnitedModeID );
	void SetUnitedModeArray ( );
	bool IsInUnitedMode ( int GameModeID, int* OutUnitedModeID );
	bool IsUnitedMode ( int GameModeID );
	TArray< int > GetCurGameModeArrayExceptUnited ( );
	void InitializationCurGameModeDataProvider ( );
	TArray< struct FString > GetChannelGameModeNameArray ( );
	TArray< int > GetRotationGameModeArray ( );
	TArray< int > GetNewGameModeArray ( );
	TArray< int > GetCreateRoomGameModeArray ( );
	TArray< int > GetQuickJoinGameModeArray ( );
	void SortModeDataProvider ( );
	void SetModeDataProvider ( class UClass* ProviderClass );
	void AddMapInfoCache ( class USFUIDataProvider_MapInfo* MapInfo );
	void AddModeInfoCache ( class USFUIDataProvider_ModeInfo* Mode );
	bool IsVs16GameMode ( int game_mode );
	bool IsGlassGameMode ( int game_mode );
	bool IsPvEGameMode ( int game_mode );
	int GetRoomFrontNameIndex ( int game_mode );
	void PKT_ForceLeaveRookieChannelMessage_Auto ( class UPacket* recvPacket );
	void PKT_GetInGameScore_REQ_OK ( class UPacket* Packet );
	bool IsReadyToGoPartyRoom ( );
	bool IsSecondHalfClanMatching ( );
	bool IsWholeUserList ( unsigned char RoomType );
	struct FString CreateRoomname ( struct FString strRoomName );
	bool IsInRoom ( unsigned char RoomType );
	bool IsPointMatch ( unsigned char RoomType );
	bool IsRoundMatch ( unsigned char RoomType );
	int GetCurrentMaxPlayerNum ( unsigned char RoomType );
	int GetCurrentTeamMaxPlayerNum ( unsigned char RoomType );
	int GetCurrentMinPlayerNum ( unsigned char RoomType );
	int GetCurrentTeamMinPlayerNum ( unsigned char RoomType );
	int GetPlayerLimitMax ( unsigned char RoomType );
	void SetChangedPickupWeapon ( unsigned long bNewPickupWeapon, unsigned char RoomType );
	void SetChangedLastStand ( unsigned long bNewLastStand, unsigned char RoomType );
	void SetChangedKillCam ( unsigned long bNewKillCam, unsigned char RoomType );
	void SetChangedTeamBalance ( unsigned long bNewTeamBalance, unsigned char RoomType );
	void SetChangedThirdPerson ( unsigned long bNewThirdPerson, unsigned char RoomType );
	void SetChangedIntrusion ( unsigned long bNewIntrusion, unsigned char RoomType );
	void SetChangedSwitchSide ( unsigned long bNewSwitchSide, unsigned char RoomType );
	bool IsSupportLastStand ( unsigned char RoomType, unsigned long bUILockCheck );
	bool IsEnableLastStand ( unsigned char RoomType );
	bool IsSupportTeamSwitch ( unsigned char RoomType, unsigned long bUILockCheck );
	bool IsEnableTeamSwitch ( unsigned char RoomType );
	bool IsSupportTeamBalance ( unsigned char RoomType, unsigned long bUILockCheck );
	bool IsEnablePickupWeapon ( unsigned char RoomType );
	bool IsEnableTeamBalance ( unsigned char RoomType );
	bool IsSupportThirdPerson ( unsigned char RoomType, unsigned long bUILockCheck );
	bool IsEnableThirdPerson ( unsigned char RoomType );
	bool IsSupportIntrusion ( unsigned char RoomType, unsigned long bUILockCheck );
	bool IsEnableIntrusion ( unsigned char RoomType );
	bool IsSupportKillCam ( unsigned char RoomType, unsigned long bUILockCheck );
	bool IsEnableKillCam ( unsigned char RoomType );
	bool IsSupportSwitchSide ( unsigned char RoomType, unsigned long bUILockCheck );
	void InitCustomMode ( );
	bool IsEnableSwitchSide ( unsigned char RoomType );
	void RequestCreateRoom ( int GameModeID, struct FString InRoomName, struct FString InPassword, unsigned char RoomType );
	int GetDefaultMatchTimeIndex ( int game_mode );
	int GetDefaultMatchPointIndex ( int GameModeID );
	int GetDefaultRound ( class USFUIDataProvider_ModeInfo* gamemode );
	struct FString GetRandomMapNameByModeID ( int GameModeID );
	int GetDefaultMapIDbyMode ( int* GameModeID, int* NoRotationMap );
	bool GetCurrentRoomIsPlayerCountNoBalance ( unsigned char RoomType );
	bool GetCurrentRoomIsTwoSideTeam ( unsigned char RoomType );
	bool GetCurrentEnableSpector ( unsigned char RoomType );
	int GetCurrentMatchPoint ( unsigned char RoomType );
	struct FString GetCurrentLocalizedMapName ( unsigned char RoomType );
	struct FString GetCurrentMapName ( unsigned char RoomType );
	float GetCurrentRoundTime ( unsigned char RoomType );
	struct FString GetCurrentModeClassName ( unsigned char RoomType );
	struct FString GetCurrentGameModeName ( unsigned char RoomType );
	int GetPlayersSelectionIndex ( unsigned char RoomType );
	int GetMaxNumPlayersBySelectedMode ( int GameModeID );
	int GetPlayerNum ( unsigned char RoomType );
	float GetTeamPlayerNum ( unsigned char RoomType );
	int GetRoundSelectionIndex ( unsigned char RoomType );
	int RotaionMapIndexToDefaultMapIndex ( class USFUIDataProvider_ModeInfo** GameModeData, TArray< struct FString >* SupportMapArray, int* NoRotationMode );
	void NextRotaionSelectedIndex ( );
	void SetRotaionSelectedIndex ( int Selected );
	int GetRotaionSelectedIndex ( );
	int MapListSortByNameDelegate ( struct FSSupportMap A, struct FSSupportMap B );
	void SortMapList ( TArray< struct FSSupportMap >* OutArray );
	void SetQuickJoinSupportMap ( );
	int GetMapSelectionIndex ( unsigned char RoomType );
	bool GetModeMapIDBySelectedIndex ( int GameModeID, int SelectedIndex, int* OutModeID, int* OutMapID );
	bool IsSupportPickUpWeapon ( unsigned char RoomType, unsigned long bUILockCheck );
	bool GetLockUI_PickUpWeaponByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetDisablePickUpWeaponByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetLockUI_LastStandByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetEnableLastStandByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetLockUI_TeamSwitchByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetEnableTeamSwitchByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetLockUI_ThirdPersonByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetEnableThirdPersonByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetLockUI_TeamBalanceByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetEnableTeamBalanceByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetLockUI_KillCamByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	bool GetEnableKillCamByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	int GetDefaultPlayerCountByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	int GetTeamPlayerCountByTeamIndex ( int TeamIndex );
	TArray< int > GetPlayerCountByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	TArray< unsigned long > GetSupportMapUnlockByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData );
	TArray< struct FString > GetSupportMapNamesByGameModeData ( class USFUIDataProvider_ModeInfo* GameModeData, unsigned long IsPass, TArray< struct FString >* SupportMapArray );
	unsigned char GetGameModeTypeByID ( int GameModeID );
	bool GetGameModeDataByModeName ( struct FString GameModeName, class USFUIDataProvider_ModeInfo** OutGameModeData );
	bool GetGameModeDataByID ( int GameModeID, class USFUIDataProvider_ModeInfo** OutGameModeData );
	void SetDefaultExtraOption ( unsigned char RoomType );
	bool UpdateRoomSettingDefault ( int GameModeID, unsigned char RoomType );
	void RequestJoinToLinkedRoom ( );
	void PKT_GetMatchingLinkedRoomInfo_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetClanLeagueTicketCount_Auto ( class UPacket* recvPacket );
	void PKT_MatchingDeniedMessage_Auto ( class UPacket* recvPacket );
	void PKT_MatchingAcceptedMessage_Auto ( class UPacket* recvPacket );
	void PKT_MatchingFoundMessage_Auto ( class UPacket* recvPacket );
	void PKT_StopSearchingMatchMessage_Auto ( class UPacket* recvPacket );
	void PKT_MatchingGameStartMessage_Auto ( class UPacket* recvPacket );
	void PKT_StartSearchingMatchMessage_Auto ( class UPacket* recvPacket );
	void PKT_SetAcceptMatching_REQ_OK ( class UPacket* recvPacket );
	void PKT_StopSearchingMatch_REQ_OK ( class UPacket* recvPacket );
	void PKT_StartSearchingMatch_REQ_OK ( class UPacket* recvPacket );
	void SetPartyRoomSearchInProgress ( unsigned long IsSearch );
	void PKT_ExitGame_REQ_OK ( class UPacket* Packet );
	void RequestGamingRoomUserList ( );
	void PKT_SetTeamBalanceMessage_Auto ( class UPacket* recvPacket );
	void PKT_SetTeamBalance_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetTeamSwitchMessage_Auto ( class UPacket* recvPacket );
	void PKT_SetTeamSwitch_REQ_OK ( class UPacket* recvPacket );
	void PKT_GameEndMessage_Auto ( class UPacket* Packet );
	void PKT_GameIntrusion_REQ_OK ( class UPacket* recvPacket );
	void PKT_GameStartMessage_Auto ( class UPacket* recvPacket );
	void PKT_ChangeRoomSettingMessage_Auto ( class UPacket* recvPacket );
	void PKT_ChangeRoomSetting_REQ_OK ( class UPacket* recvPacket );
	void PKT_CreateGameRoom_REQ_OK ( class UPacket* recvPacket );
	void GetMatchingRoom ( struct FSFindMatchingRoom* OutRoomSetting );
	void GetCurrentRoom ( unsigned char RoomType, struct FSRoomSetting* OutRoomSetting );
	unsigned char GetRoomType ( int InRoomNumber );
	void SetRoomSettingDetail ( unsigned char RoomType, unsigned char GameModeID, unsigned char MapID, unsigned char NumRound, unsigned char EnableSwitchSide, unsigned char EnableIntrusion, struct FString RoomName, unsigned char AIDifficulty, struct FString Password, unsigned char NumPlayers, unsigned char EnableKillCam, unsigned char MatchPointIndex, unsigned char MatchTimeLimitIndex, unsigned char EnableThirdPerson, unsigned char EnableTeamBalance, unsigned char VipGrade, unsigned char RedTeamPlayerCount, unsigned char BlueTeamPlayerCount, unsigned char RedTeamAICount, unsigned char BlueTeamAICount, unsigned char EnableLastStand, unsigned char CustomModeType, unsigned char PickUpWeapon );
	int GetRoomMapID ( unsigned char RoomType );
	int GetRoomGameModeID ( unsigned char RoomType );
	void SetGamingRoomMapModeByMiniGame ( int NewModeID, int NewMapID );
	void ResetRoomNumber ( unsigned char RoomType );
	unsigned char GetRoomVipGrade ( unsigned char RoomType );
	void SetRoomMaxPlayer ( int GameModeID );
	void SetRoomSetting ( struct FSRoomSetting RoomSetting, int RoomType );
	void RecvJoinRoom ( class UPacket* recvPacket, unsigned long bQuickJoin );
	void PKT_JoinGameRoom_REQ_OK ( class UPacket* recvPacket );
	void PKT_QuickJoin_REQ_OK ( class UPacket* recvPacket );
	void UpdateQuickJoinInfo ( struct FString ModeID, struct FString MapID, int WeaponType, int PickUpWeapon );
	void PKT_GetQuickJoinInfo_REQ_OK ( class UPacket* recvPacket );
	void SetRecvPacketHandler ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* USFUIDataStore_RoomSetting::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_RoomUserList
// 0x0130 (0x01BC - 0x008C)
class USFUIDataStore_RoomUserList : public USFUIDataStoreBase
{
public:
	int                                                DiffLimitPLayer;                                  		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxAllPlayer;                                     		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoCheckBalance : 1;                              		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingMasterChanged : 1;                        		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                BeginPlayerLimit;                                 		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                MaxTeamType;                                      		// 0x009C (0x0004) [0x0000000000000000]              
	struct FSRoomUserInfo                              GamingRoomUser;                                   		// 0x00A0 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSRoomUserInfo                              PartyRoomUser;                                    		// 0x00F4 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSRoomUserInfo                              FindMatchingRoomUser;                             		// 0x0148 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      RecvUserStatus;                                   		// 0x019C (0x0001) [0x0000000000000000]              
	int                                                RecvUSN;                                          		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                RecvOldSlotIndex;                                 		// 0x01A4 (0x0004) [0x0000000000000000]              
	int                                                RecvNewSlotIndex;                                 		// 0x01A8 (0x0004) [0x0000000000000000]              
	int                                                RecvRoomType;                                     		// 0x01AC (0x0004) [0x0000000000000000]              
	struct FString                                     RecvCodeName;                                     		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3659 ];

		return pClassPointer;
	};

	void InitAuthoritySpector ( );
	bool IsEnableSpectorUser ( );
	bool CheckEnableSpectorMode ( );
	int SetSlotIndexByEnableSpectorMode ( int CurSlotIndex );
	int GetModeTeamIndex ( int SlotIndex );
	void GetVipUserList ( TArray< class ASFPlayerReplicationInfo* >* VipUserList );
	void GetTotalClanListInGameRoom ( TArray< int >* ClanNumberList );
	void GetClanUserList ( int CSN, TArray< class ASFPlayerReplicationInfo* >* SameClanUserList );
	int GetIntrusionUserArraySize ( );
	int GetIntrusionUserArrayIndex ( int Index );
	void RemoveIntrusionUserArray ( int Index );
	void AddIntrusionUserArray ( int USN );
	void ParsingClanRatingData ( struct FString* ClanLeague, struct FString* ClanRating );
	struct FString GetClanColorName ( struct FString ClanName, struct FString ClanColorValue );
	void GetGameingRoomUserCodeNameInStr ( class ASFGameReplicationInfo* SFGRI, class ASFPlayerReplicationInfo* PlayerPRI, struct FString Str, TArray< struct FString >* OutArray );
	int GetDesertionLevelInGamingRoom ( int USN );
	bool GetRoomVipInfo ( unsigned char RoomType, int UserUSN, struct FString* VipImage, float* AddSP, float* AddEXP, float* AddLP );
	struct FString GetPlayerRankBy1VS1Mode ( int TeamIndex );
	struct FString GetTeamMark ( unsigned char Team, unsigned char Size, unsigned long bChangeTeam, int* TeamCount );
	bool CheckGamingRoomSameTeamClanMark ( unsigned char InTeamIndex );
	bool CheckRoomMasterChanged ( unsigned char RoomType );
	bool IsExistUser ( int USN );
	struct FString GetGamingRoomUserLeagueNumberByCurTeam ( struct FString InCodeName, int InTeamIndex );
	struct FString GetGamingRoomUserLeagueNumber ( struct FString InCodeName );
	int GetGamingRoomWholeDispSlotIdx ( int USN );
	int GetGamingRoomTeamDispSlotIdx ( int USN );
	int GetDisplaySlotUSNBySlotIndex ( int SlotIndex, unsigned char RoomType );
	int Get1VS1DisplaySlotUSNBySlotIndex ( int SlotIndex, unsigned char RoomType );
	TArray< int > GetWholeDisplayUserList ( unsigned char RoomType );
	void UpdateWholeDisplayUserList ( struct FSRoomUserInfo* RoomUserInfo );
	void Update1VS1DisplayUserList ( struct FSRoomUserInfo* RoomUserInfo );
	bool IsIntrusionBalanceMismatch ( int nMyTeamNum, int nOtherTeamNum );
	int GetGamingRoomAverageExp ( int TeamIndex );
	struct FString GetGamingRoomAverageClanMark ( unsigned char InTeamIndex, unsigned long bChangeTeam, int* TeamCount );
	struct FString GetGamingRoomLeagueClanMark ( unsigned char InTeamIndex, int* TeamCount );
	bool IsCanClanMatchingPlayer ( );
	void GetTeamPlayerNum ( unsigned char RoomType, int* RedPlayers, int* BluePlayers );
	int GetReadiedPlayerCount ( unsigned char RoomType );
	void GetTeamPlayerNumByPlaying ( unsigned char RoomType, int* RedPlayers, int* BluePlayers );
	bool CheckPlayerBalanceNoTeam ( int MinPlayerCount, int MyTeamIndex, unsigned long bIntrusion, unsigned long bClanMatch, unsigned char RoomType, int* ErrorNo );
	bool CheckPlayerBalance ( int MinPlayerCount, int MyTeamIndex, unsigned long bIntrusion, unsigned long bClanMatch, unsigned char RoomType, int* ErrorNo );
	bool CanGameStartMatchSearching ( unsigned long bIntrusion, int* ErrorNo );
	bool CanGameStart ( struct FString InGameModeClassName, int MinPlayerCount, int MyTeamIndex, unsigned long bIntrusion, unsigned long bEnableTeamBalance, unsigned char RoomType, int* ErrorNo );
	void GetClanUserCountArray ( unsigned long bAll, int TeamIndex, unsigned char RoomType, TArray< struct FSClanUserCount >* OutClanUserCountArray );
	void GetTeamUserCountArray ( unsigned long bAll, int TeamIndex, unsigned char RoomType, TArray< struct FSClanUserCount >* OutClanUserCountArray );
	struct FString GetPartyRoomClanName ( );
	void GetGamingLeagueTeamName ( unsigned char InTeamIndex, struct FString* OutClanName );
	int GetGamingRoomTeamCSN ( unsigned char InTeamIndex, struct FString* OutClanName );
	bool IsPossibleClanMercenary ( TArray< struct FSClanUserCount > ClanCountArray, int* MainCSN, struct FString* MainClanName );
	bool IsGamingRoomClanUserCount ( int InCSN, int* SameUserCount );
	bool IsGamingRoomClanMercenary ( int InUSN, int InCSN );
	bool CanGameStartClan ( unsigned char RoomType, int* OutErrorNo );
	int IsRoomMaster ( int MyUSN, unsigned long bExceptGameMaster, unsigned char RoomType );
	int GetGamingRoomVipRoomCareTypeByUSN ( int InUSN );
	int GetGamingRoomPCRoomCareTypeByUSN ( int InUSN );
	struct FSCodeNameColor GetGamingRoomColorCodeByUSN ( int InUSN );
	int GetGamingRoomMonthlyRewardGradeByUSN ( int InUSN, int* SlotIndex );
	struct FString GetGamingRoomMonthlyRewardImgByUSN ( int InUSN, int* SlotIndex );
	struct FString GetGamingRoomVipImgByUSN ( int InUSN, int* SlotIndex );
	int GetGamingRoomVipGradeByUSN ( int InUSN, int* SlotIndex );
	int GetGamingRoomNametagByUSN ( int InUSN, int* SlotIndex );
	bool JoinedClanByUSN ( int InUSN );
	void SetGamingRoomGFxRankByUSN ( int InUSN, struct FString newGFxRank );
	void GetGamingRoomGFxClanMarkFromUSN ( int InUSN, int* SlotIndex, struct FString* strClan, int* IsJoinClan );
	void GetGamingRoomGFxRankMarkFromUSN ( int InUSN, int* SlotIndex, struct FString* strRank );
	struct FString GetGamingRoomClanMarkFormUSN ( int InUSN, unsigned char Size, unsigned long CallNameTag, unsigned long bBot );
	struct FString GetGamingRoomGFxRankFromUSN ( int InUSN, unsigned long bOriginalRank );
	void PKT_DelegationRoomOwner_REQ_OK ( class UPacket* recvPacket );
	void PKT_ForcedLeaveRoom_REQ_OK ( class UPacket* recvPacket );
	void PKT_ChangeRoomUserInfoMessage_Auto ( class UPacket* recvPacket );
	void GetDisplayTeamArrayIndex ( int MyUSN, int* teamidxOld, int* tmpidx, struct FSRoomUserInfo* RoomUserInfo );
	void SetTeamUserList ( int NewSlot, int USN, unsigned char RoomType, struct FSRoomUserInfo* RoomUserInfo );
	int GetPlayerCountInTeam ( int TeamIdx, unsigned char RoomType );
	void DumpAllUserList ( );
	int GetGamingRoomPlayingUserCount ( );
	int GetAllUserListCount ( unsigned char RoomType );
	int GetGamingRoomTeamIndexByUSN ( int USN );
	int GetRoomTeamIndex ( struct FString strCodeName, unsigned char RoomType );
	int GetRoomSlotIndex ( struct FString strCodeName, unsigned char RoomType );
	bool IsMasterUser ( int SlotIndex, unsigned char RoomType );
	struct FString GetRoomMasterCodeName ( unsigned char RoomType );
	int GetRoomMasterSlotIndex ( unsigned char RoomType );
	int RecvChangedMaster ( class UPacket* recvPacket );
	void PKT_ChangeMasterMessage_Auto ( class UPacket* recvPacket );
	void PKT_RoomUserStatusMessage_Auto ( class UPacket* recvPacket );
	int GetOtherUserNotMe ( int MyUSN, unsigned char RoomType );
	int GetUSNByCodeName ( struct FString InCodeName, unsigned char RoomType );
	struct FString GetUserCodeNameByUSN ( int InUSN, unsigned char RoomType );
	unsigned char GetUserStatusbyUSN ( int USN, unsigned char RoomType );
	bool CheckSpctationgPlayer ( );
	int GetMyStatus ( unsigned char RoomType );
	int GetSlotIndex ( int InUSN, unsigned char RoomType );
	void RecvExitGameMessage ( class UPacket* recvPacket, int* USN );
	void SetUserStatus ( int USN, unsigned char NewStatus, struct FSRoomUserInfo* RoomUserInfo );
	void PKT_RoomUserStatus_REQ_OK ( class UPacket* recvPacket );
	void PKT_ForcedLeaveMessage_Auto ( class UPacket* recvPacket );
	void PKT_LeftGameRoomMessage_Auto ( class UPacket* recvPacket );
	void PKT_LeftGameRoom_REQ_OK ( class UPacket* recvPacket );
	int GetRoomUserInfoCSN ( int USN, unsigned char RoomType );
	void ChangeRoomUserInfoClanName ( int USN, int CSN, struct FString ClanName, struct FString ClanMark );
	void ChangeRoomSlotInfo ( int NowSlotIndex, int NewSlotIndex, int USN, struct FString CodeName, int recvIsMasterUser, struct FSRoomUserInfo* RoomUserInfo );
	void PKT_SlotChange_REQ_OK ( class UPacket* recvPacket );
	void PKT_SlotChangeMessage_Auto ( class UPacket* recvPacket );
	int GetBattleInfoBasic ( int USN, unsigned char RoomType, struct FString* KADRatioStr, struct FString* HKillRatioStr, struct FString* WinRatioStr );
	void PKT_JoinGameRoomMessage_Auto ( class UPacket* recvPacket );
	void SetMasterUSN ( int RoomType, int USN );
	int GetMasterUSN ( int RoomType );
	void RecvRoomUserInfo ( class UPacket* recvPacket, int StartIndex, unsigned long bAllUserList );
	bool IsAllReceived ( unsigned char RoomType );
	void PKT_GetGameRoomUserList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void UpdateRoomUserRank ( int SelectIndex, struct FSRoomUser* OutRoomUser );
	void PKT_GetGameRoomUserList_REQ_OK ( class UPacket* recvPacket );
	int GetCurrentRoomMasterVipGrade ( );
	void GetCurrentRoomUser ( unsigned char RoomType, struct FSRoomUserInfo* OutRoomUserInfo );
	void ClearARoomUserList ( struct FSRoomUserInfo* RoomUserInfo );
	void ClearRoomUserList ( );
	struct FString GetRoomUserUSNtoSTR ( int Index, unsigned char RoomType );
	struct FString GetRoomUserCodeName ( int Index, unsigned char RoomType, unsigned long bIsColorCode );
	void SetRecvPacketHandler ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* USFUIDataStore_RoomUserList::pClassPointer = NULL;

// Class SFGame.SFUIResourceDataProvider
// 0x000C (0x0088 - 0x007C)
class USFUIResourceDataProvider : public UUIResourceDataProvider
{
public:
	struct FString                                     IniName;                                          		// 0x007C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3661 ];

		return pClassPointer;
	};

	void eventOnDataProviderInitialized ( );
};

UClass* USFUIResourceDataProvider::pClassPointer = NULL;

// Class SFGame.SFUIDataProvider_MapInfo
// 0x0024 (0x00AC - 0x0088)
class USFUIDataProvider_MapInfo : public USFUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MapID;                                            		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AdditionalRadarMapScale;                          		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     RoomBackGroundImage;                              		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              SpawnProtectionTime;                              		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3663 ];

		return pClassPointer;
	};

};

UClass* USFUIDataProvider_MapInfo::pClassPointer = NULL;

// Class SFGame.SFUIDataProvider_ModeInfo
// 0x00D0 (0x0158 - 0x0088)
class USFUIDataProvider_ModeInfo : public USFUIResourceDataProvider
{
public:
	struct FString                                     GameModeName;                                     		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                GameModeID;                                       		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      GameModeType;                                     		// 0x0098 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      WaitingRoomType;                                  		// 0x0099 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      GameEndType;                                      		// 0x009A (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     GameModeClass;                                    		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              RoundTime;                                        		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< float >                                    RoundTimeList;                                    		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      MatchPoint;                                       		// 0x00B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DefaultMatchPoint;                                		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DefaultRound;                                     		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      WinRound;                                         		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DefaultPlayer;                                    		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      PlayerCount;                                      		// 0x00DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsCheckMinPlayer : 1;                             		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      CompulsionNotChangeTeamSlot : 1;                  		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      LockUI_SwitchSide : 1;                            		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      EnableSwitchSide : 1;                             		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      LockUI_Intrusion : 1;                             		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      EnableIntrusion : 1;                              		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      LockUI_KillCam : 1;                               		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      EnableKillCam : 1;                                		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      LockUI_ThirdPerson : 1;                           		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      EnableThirdPerson : 1;                            		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	unsigned long                                      LockUI_TeamBalance : 1;                           		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      EnableTeamBalance : 1;                            		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      LockUI_TeamSwitch : 1;                            		// 0x00E8 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      EnableTeamSwitch : 1;                             		// 0x00E8 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      LockUI_LastStand : 1;                             		// 0x00E8 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      EnableLastStand : 1;                              		// 0x00E8 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      LockUI_PickUpWeapon : 1;                          		// 0x00E8 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      DisablePickUpWeapon : 1;                          		// 0x00E8 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      TwoSideTeam : 1;                                  		// 0x00E8 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      PlayerCountNoBalance : 1;                         		// 0x00E8 (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      EnableSpector : 1;                                		// 0x00E8 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      IsPvEGame : 1;                                    		// 0x00E8 (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      EnableMode : 1;                                   		// 0x00E8 (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      bRemoveGachaCapsuleResultBoard : 1;               		// 0x00E8 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      IsMapRotationMode : 1;                            		// 0x00E8 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	TArray< struct FSupportMapInfo >                   SupportMaps;                                      		// 0x00EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            SupportCustomMode;                                		// 0x00F8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           SupportModeNames;                                 		// 0x0104 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DisplayType;                                      		// 0x0110 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RookieDisplayType;                                		// 0x011C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VIPDisplayType;                                   		// 0x0128 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                RoomFrontNameIndex;                               		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RedPlayerMaxCount;                                		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BluePlayerMaxCount;                               		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FDefaultRoundDataByChannel >        ChannelDefaultRoundArray;                         		// 0x0140 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SupportMapSort__Delegate;                       		// 0x014C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3665 ];

		return pClassPointer;
	};

	int GetDefaultRoundByChannel ( int channelType );
	bool GetDisablePickUpWeapon ( );
	bool GetLockUI_PickUpWeapon ( );
	bool GetLockUI_LastStand ( );
	bool GetEnableLastStand ( );
	bool GetLockUI_TeamSwitch ( );
	bool GetEnableTeamSwitch ( );
	bool GetLockUI_ThirdPerson ( );
	bool GetEnableThirdPerson ( );
	bool GetLockUI_TeamBalance ( );
	bool GetEnableTeamBalance ( );
	bool GetLockUI_KillCam ( );
	bool GetEnableKillCam ( );
	bool GetCheckMinPlayer ( );
	int GetBluePlayerCount ( );
	int GetRedPlayerCount ( );
	int GetDefaultPlayerCount ( );
	TArray< int > GetPlayerCount ( );
	int GetMaxPlayerCount ( );
	TArray< unsigned long > GetSupportMapUnlockNames ( unsigned char ChannelState );
	void GetVIPSupportMapNames ( TArray< struct FString >* OutArray );
	void GetRookieSupportMapNames ( TArray< struct FString >* OutArray );
	void GetSupportMapNames ( TArray< struct FString >* OutArray );
	unsigned char GetGameEndType ( );
	void eventOnDataProviderInitialized ( );
	int SupportMapSort ( struct FSupportMapInfo A, struct FSupportMapInfo B );
};

UClass* USFUIDataProvider_ModeInfo::pClassPointer = NULL;

// Class SFGame.MaterialExpressionSFTextureWorldCube
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionSFTextureWorldCube : public UMaterialExpressionTextureSampleParameterCube
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3667 ];

		return pClassPointer;
	};

};

UClass* UMaterialExpressionSFTextureWorldCube::pClassPointer = NULL;

// Class SFGame.SeqAct_AIMove
// 0x004C (0x0134 - 0x00E8)
class USeqAct_AIMove : public USequenceAction
{
public:
	float                                              TetherDistance;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RouteDirection;                                   		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovementStyle;                                    		// 0x00ED (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            MoveTargets;                                      		// 0x00F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            FocusTarget;                                      		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bInterruptable : 1;                               		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClearTetherOnArrival : 1;                        		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class ASFAIController* >                   AITargets;                                        		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFAIController* >                   AIReachedGoal;                                    		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DestinationSlotIndex;                             		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            AvailableTethers;                                 		// 0x0128 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3669 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void ReachedGoal ( class ASFAIController* AI );
};

UClass* USeqAct_AIMove::pClassPointer = NULL;

// Class SFGame.SeqEvent_Interaction
// 0x000C (0x010C - 0x0100)
class USeqEvent_Interaction : public USequenceEvent
{
public:
	unsigned long                                      bCheckInteractDistance : 1;                       		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckInteractFOV : 1;                            		// 0x0100 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InteractFOV;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3671 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool CanDoInteraction ( class ASFPlayerController* PC );
};

UClass* USeqEvent_Interaction::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AdjustAIPawnProperties
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_AdjustAIPawnProperties : public USequenceAction
{
public:
	TArray< struct FsAjdPawnProp >                     AjdPawnProps;                                     		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3673 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AdjustAIPawnProperties::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AIFactory
// 0x0041 (0x0129 - 0x00E8)
class USFSeqAct_AIFactory : public USequenceAction
{
public:
	TArray< struct FName >                             InventoryTypeNames;                               		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FAISpawnInfo >                      SpawnSets;                                        		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FAITypeInfo >                       SpawnInfo;                                        		// 0x0100 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bAllSpawned : 1;                                  		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllDead : 1;                                     		// 0x0118 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAbortSpawns : 1;                                 		// 0x0118 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSuppressAllDead : 1;                             		// 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bActivatedDeadLink : 1;                           		// 0x0118 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bResetDeadLinkCount : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	int                                                DeadCount;                                        		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                NumDead;                                          		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                ActivateDeadLinkCount;                            		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnPointSelectionMethod;                        		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3675 ];

		return pClassPointer;
	};

	struct FName GetControllerClass ( int AIType );
	struct FName GetPawnClass ( int AIType );
	void eventMakeInventoryTypeNames ( int AI_Type );
	bool CanSpawnAtLocation ( struct FVector ChkExtent, class AActor* SpawnPointActor, struct FVector* chkLocation );
	void NotifySpawnerDisabled ( class ASFSpawner* Spawner );
	int GetSpawnInfoIdx ( int AIType );
};

UClass* USFSeqAct_AIFactory::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AIFactorySetTeam
// 0x0000 (0x0129 - 0x0129)
class USFSeqAct_AIFactorySetTeam : public USFSeqAct_AIFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3677 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AIFactorySetTeam::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AIKillAll
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_AIKillAll : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3679 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AIKillAll::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ChangeMatineeSkel
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_ChangeMatineeSkel : public USequenceAction
{
public:
	TArray< class APlayerReplicationInfo* >            SameTeamPRI;                                      		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3681 ];

		return pClassPointer;
	};

	void SetExtraParts ( class USkeletalMeshComponent* SkelMeshComponent, TArray< int > ItemIDCache );
	int eventGetObjClassVersion ( );
	void eventSetSkeletalMeshComponent ( class ASkeletalMeshActorMAT* SkelMeshActor, class ASFPlayerReplicationInfo* SFPRI );
};

UClass* USFSeqAct_ChangeMatineeSkel::pClassPointer = NULL;

// Class SFGame.SFSeqAct_Clock
// 0x0044 (0x013C - 0x00F8)
class USFSeqAct_Clock : public USeqAct_Latent
{
public:
	int                                                Year;                                             		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Month;                                            		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DayOfWeek;                                        		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Day;                                              		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Hour;                                             		// 0x0108 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Minute;                                           		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Sec;                                              		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MSec;                                             		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ElapsedTime;                                      		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AStaticMeshActor* >                  HourHands;                                        		// 0x011C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AStaticMeshActor* >                  MinuteHands;                                      		// 0x0128 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              UpdateInterval;                                   		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNotifyOnTime : 1;                                		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTimeMarchesOn : 1;                               		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3683 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_Clock::pClassPointer = NULL;

// Class SFGame.SFSeqAct_EndCodeName
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_EndCodeName : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3685 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_EndCodeName::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GetElevatorActorState
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_GetElevatorActorState : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3687 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_GetElevatorActorState::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GetTouchingTeamCounter
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_GetTouchingTeamCounter : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3689 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_GetTouchingTeamCounter::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GiveWeapon
// 0x0018 (0x0100 - 0x00E8)
class USFSeqAct_GiveWeapon : public USequenceAction
{
public:
	TArray< class UClass* >                            WeaponClass;                                      		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FWeaponDataForSeqAct >              LoadedWeaponData;                                 		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3691 ];

		return pClassPointer;
	};

	void eventInitWeaponData ( );
	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_GiveWeapon::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GiveWeaponbyCondition
// 0x0024 (0x010C - 0x00E8)
class USFSeqAct_GiveWeaponbyCondition : public USequenceAction
{
public:
	TArray< struct FWeaponClassDataForSeqAct >         WeaponDatum;                                      		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FsWeaponDataForSeqAct >             LoadedWeaponData;                                 		// 0x00F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UClass* >                            RareWeapons;                                      		// 0x0100 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3693 ];

		return pClassPointer;
	};

	void eventInitWeaponData ( );
	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_GiveWeaponbyCondition::pClassPointer = NULL;

// Class SFGame.SFSeqAct_InitCodeName
// 0x0018 (0x0100 - 0x00E8)
class USFSeqAct_InitCodeName : public USequenceAction
{
public:
	class ASkeletalMeshActor*                          CodeNameActor;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                MaterialIndex;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USwfMovie*                                   GFxMovie;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTextureRenderTarget2D*                      RT_CodeNameTag;                                   		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFGFxMoviePlayer*                           MoviePlayer;                                      		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   CodeNameMIC;                                      		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3695 ];

		return pClassPointer;
	};

	void Activated ( );
	void SettingUpGFxMovie ( );
	void Reset ( );
};

UClass* USFSeqAct_InitCodeName::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ModeState
// 0x0008 (0x00F0 - 0x00E8)
class USFSeqAct_ModeState : public USequenceAction
{
public:
	unsigned char                                      NewModeState;                                     		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3697 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_ModeState::pClassPointer = NULL;

// Class SFGame.SFSeqAct_MoveToActor
// 0x0010 (0x0108 - 0x00F8)
class USFSeqAct_MoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class ASFAIController* >                   TargetControllers;                                		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3699 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_MoveToActor::pClassPointer = NULL;

// Class SFGame.SFSeqAct_PlayerInput
// 0x0010 (0x00F8 - 0x00E8)
class USFSeqAct_PlayerInput : public USequenceAction
{
public:
	TArray< struct FName >                             IgnoreKeyName;                                    		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIgnoreAllInput : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3701 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_PlayerInput::pClassPointer = NULL;

// Class SFGame.SFSeqAct_Record
// 0x0060 (0x0148 - 0x00E8)
class USFSeqAct_Record : public USequenceAction
{
public:
	float                                              RecordTime;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RecordRate;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UInterpData*                                 MatineeData;                                      		// 0x00F0 (0x0004) [0x0000000000000008]              ( CPF_ExportObject )
	unsigned long                                      bCollideActors : 1;                               		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClearOldData : 1;                                		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRecordActivated : 1;                             		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              RecordElapseTime;                                 		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecordAdvancedTime;                               		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x0100 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.SFSeqAct_Record.MatchingMap
	TArray< struct FInterpActorCollisionInfo >         InterpActorCollisionInfos;                        		// 0x013C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3703 ];

		return pClassPointer;
	};

	void eventDeactivated ( );
	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_Record::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetConvoyanceStoreIcon
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_SetConvoyanceStoreIcon : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3705 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetConvoyanceStoreIcon::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetCustomMaxWaveIndex
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetCustomMaxWaveIndex : public USequenceAction
{
public:
	int                                                CustomMaxWave;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3707 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetCustomMaxWaveIndex::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetCustomWaveIndex
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetCustomWaveIndex : public USequenceAction
{
public:
	int                                                CustomWave;                                       		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3709 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetCustomWaveIndex::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetEnableSeqEvent
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetEnableSeqEvent : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3711 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetEnableSeqEvent::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetHideAllPawn
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetHideAllPawn : public USequenceAction
{
public:
	unsigned long                                      bHide : 1;                                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3713 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetHideAllPawn::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetInGameShopLevel
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetInGameShopLevel : public USequenceAction
{
public:
	int                                                NewShopLevel;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3715 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetInGameShopLevel::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetObjectIcon
// 0x0007 (0x00EF - 0x00E8)
class USFSeqAct_SetObjectIcon : public USequenceAction
{
public:
	unsigned long                                      IsRegisterObjectIcon : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      ObjectIconType;                                   		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      IconState;                                        		// 0x00ED (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShowingIconTeamIndex;                             		// 0x00EE (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3717 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetObjectIcon::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetPrimaryTarget
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetPrimaryTarget : public USequenceAction
{
public:
	class AActor*                                      PrimaryActor;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3719 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetPrimaryTarget::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetWeather
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_SetWeather : public USequenceAction
{
public:
	unsigned long                                      bOverrideEmitterHeight : 1;                       		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseCameraLensEffect : 1;                         		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              EmitterHeight;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      WeatherEmitter;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3721 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_SetWeather::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetWeatherLOD
// 0x0008 (0x00F0 - 0x00E8)
class USFSeqAct_SetWeatherLOD : public USequenceAction
{
public:
	unsigned long                                      bSetLOD : 1;                                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                LODLevel;                                         		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3723 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_SetWeatherLOD::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SFGameInfo
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_SFGameInfo : public USequenceAction
{
public:
	struct FName                                       FunctionName;                                     		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                InputLinkIndex;                                   		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3725 ];

		return pClassPointer;
	};

	class AController* GetControllerFromTarget ( );
};

UClass* USFSeqAct_SFGameInfo::pClassPointer = NULL;

// Class SFGame.SFSeqAct_BroadcastMessage
// 0x000C (0x0100 - 0x00F4)
class USFSeqAct_BroadcastMessage : public USFSeqAct_SFGameInfo
{
public:
	struct FString                                     LocalizedMessage;                                 		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3727 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_BroadcastMessage::pClassPointer = NULL;

// Class SFGame.SFSeqAct_BroadcastMessageByType
// 0x0030 (0x0124 - 0x00F4)
class USFSeqAct_BroadcastMessageByType : public USFSeqAct_SFGameInfo
{
public:
	unsigned char                                      MessageType;                                      		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ActiveTeamIndex;                                  		// 0x00F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MessageLifeTime;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LocalizedMessage;                                 		// 0x00FC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                KeyMessageIndex;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ResultMessage;                                    		// 0x010C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FReplaceMessageInfo >               arrDescMessageInfo;                               		// 0x0118 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3729 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_BroadcastMessageByType::pClassPointer = NULL;

// Class SFGame.SFSeqAct_Captured
// 0x0000 (0x00F4 - 0x00F4)
class USFSeqAct_Captured : public USFSeqAct_SFGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3731 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_Captured::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SpectatorCameraPath
// 0x0028 (0x01E0 - 0x01B8)
class USFSeqAct_SpectatorCameraPath : public USeqAct_Interp
{
public:
	float                                              TravelTimeBetweenStops;                           		// 0x01B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwapForwardAndReverse : 1;                       		// 0x01BC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutomaticFraming : 1;                            		// 0x01BC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCachedInterpData : 1;                            		// 0x01BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class ACameraActor*                                CachedCameraActor;                                		// 0x01C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackMove*                            CachedMoveTrack;                                  		// 0x01C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstMove*                        CachedMoveTrackInst;                              		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackEvent*                           CachedEventTrack;                                 		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstEvent*                       CachedEventTrackInst;                             		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastStopIdx;                                      		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DestinationStopIdx;                               		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpTimeToNextStop;                             		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3733 ];

		return pClassPointer;
	};

	void UpdateCameraPosition ( float DeltaTime );
	void ResetToStartingPosition ( );
	class ACameraActor* GetAssociatedCameraActor ( );
	void MoveToPrevStop ( );
	void MoveToNextStop ( );
};

UClass* USFSeqAct_SpectatorCameraPath::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SyncPawnLocation
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_SyncPawnLocation : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3735 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SyncPawnLocation::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ToggleAIWave
// 0x0000 (0x00EC - 0x00EC)
class USFSeqAct_ToggleAIWave : public USeqAct_Toggle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3737 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_ToggleAIWave::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ToggleNotifyKeyInput
// 0x0008 (0x00F4 - 0x00EC)
class USFSeqAct_ToggleNotifyKeyInput : public USeqAct_Toggle
{
public:
	struct FName                                       KeyName;                                          		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3739 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_ToggleNotifyKeyInput::pClassPointer = NULL;

// Class SFGame.SFSeqAct_WaveFactory
// 0x0024 (0x011C - 0x00F8)
class USFSeqAct_WaveFactory : public USeqAct_Latent
{
public:
	int                                                MinWave;                                          		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                MaxWave;                                          		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                MaxWaves;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveSpawningStartTime;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndOfRoundDelay;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentWave;                                      		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      bDelayActive : 1;                                 		// 0x0110 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              LastUpdateTime;                                   		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemainingTime;                                    		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3741 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_WaveFactory::pClassPointer = NULL;

// Class SFGame.SFSeqCond_AIDifficulty
// 0x0000 (0x00D0 - 0x00D0)
class USFSeqCond_AIDifficulty : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3743 ];

		return pClassPointer;
	};

};

UClass* USFSeqCond_AIDifficulty::pClassPointer = NULL;

// Class SFGame.SFSeqCond_IsSameState
// 0x0008 (0x00D8 - 0x00D0)
class USFSeqCond_IsSameState : public USequenceCondition
{
public:
	struct FName                                       StateName;                                        		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3745 ];

		return pClassPointer;
	};

};

UClass* USFSeqCond_IsSameState::pClassPointer = NULL;

// Class SFGame.SFSeqCond_LocalPlayerTeam
// 0x0000 (0x00D0 - 0x00D0)
class USFSeqCond_LocalPlayerTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3747 ];

		return pClassPointer;
	};

};

UClass* USFSeqCond_LocalPlayerTeam::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Base
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_Base : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3749 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActiveSeqEvent ( struct FName EventType, class AController* EventInstigator, unsigned long bForce, class UObject* OptionalObject );
	void UpdateVariables ( class AController* EventInstigator, class UObject* OptionalObject );
	void ActiveSFSeqEventByClass ( struct FName EventType, class UClass* ObjectClass, class AController* EventInstigator, unsigned long bForce, class UObject* OptionalObject );
	void ActiveSFSeqEvent ( struct FName EventType, class AActor* BaseActor, class AController* EventInstigator, unsigned long bForce, class UObject* OptionalObject );
};

UClass* USFSeqEvent_Base::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_byScript
// 0x0008 (0x0108 - 0x0100)
class USFSeqEvent_byScript : public USFSeqEvent_Base
{
public:
	struct FName                                       MyName;                                           		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3751 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_byScript::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ConvoyanceMove
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ConvoyanceMove : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3753 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ConvoyanceMove::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ConvoyanceNotiRemainGold
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ConvoyanceNotiRemainGold : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3755 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ConvoyanceNotiRemainGold::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_EndRound
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_EndRound : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3757 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_EndRound::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_NotifyKeyInput
// 0x0008 (0x0108 - 0x0100)
class USFSeqEvent_NotifyKeyInput : public USFSeqEvent_Base
{
public:
	struct FName                                       KeyName;                                          		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3759 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_NotifyKeyInput::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ObstacleLevelChanged
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ObstacleLevelChanged : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3761 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ObstacleLevelChanged::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_RespawnCamera
// 0x0001 (0x0101 - 0x0100)
class USFSeqEvent_RespawnCamera : public USFSeqEvent_Base
{
public:
	unsigned char                                      TargetTeam;                                       		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3763 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_RespawnCamera::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_StrongHoldMatchEnd
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_StrongHoldMatchEnd : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3765 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_StrongHoldMatchEnd::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_StrongHoldRoundEnd
// 0x0001 (0x0101 - 0x0100)
class USFSeqEvent_StrongHoldRoundEnd : public USFSeqEvent_Base
{
public:
	unsigned char                                      AreaIndex;                                        		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3767 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_StrongHoldRoundEnd::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_CheckTargetTouch
// 0x0000 (0x0128 - 0x0128)
class USFSeqEvent_CheckTargetTouch : public USeqEvent_Touch
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3769 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_CheckTargetTouch::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Complete
// 0x0030 (0x0130 - 0x0100)
class USFSeqEvent_Complete : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x0104 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	struct FString                                     InteractText;                                     		// 0x0108 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  InteractIcon;                                     		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x0118 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x0124 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3771 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_Complete::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ConvoyanceItem
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ConvoyanceItem : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3773 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ConvoyanceItem::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Killed
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_Killed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3775 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_Killed::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Touch
// 0x0014 (0x013C - 0x0128)
class USFSeqEvent_Touch : public USeqEvent_Touch
{
public:
	unsigned char                                      TargetTeam;                                       		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCanTouchInTrainingGame : 1;                      		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class AActor* >                            FilterdList;                                      		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3777 ];

		return pClassPointer;
	};

	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	void CheckCurrentState ( class APawn* P );
};

UClass* USFSeqEvent_Touch::pClassPointer = NULL;

// Class SFGame.SFSeqVar_GameInfo
// 0x0000 (0x00B4 - 0x00B4)
class USFSeqVar_GameInfo : public USeqVar_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3779 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
};

UClass* USFSeqVar_GameInfo::pClassPointer = NULL;

// Class SFGame.SFSeqVar_LocalPlayerPawn
// 0x0000 (0x00B4 - 0x00B4)
class USFSeqVar_LocalPlayerPawn : public USeqVar_Object
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3781 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
};

UClass* USFSeqVar_LocalPlayerPawn::pClassPointer = NULL;

// Class SFGame.SFSeqVar_NavPointNearbyPlayer
// 0x001C (0x00D0 - 0x00B4)
class USFSeqVar_NavPointNearbyPlayer : public USeqVar_Object
{
public:
	unsigned char                                      PlayerTeamIndex;                                  		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistanceFromPlayer;                            		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistanceFromPlayer;                            		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlayerIndex;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ANavigationPoint* >                  NavPoints;                                        		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3783 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
	void UpdateNavPointList ( class AActor* Target );
};

UClass* USFSeqVar_NavPointNearbyPlayer::pClassPointer = NULL;

// Class SFGame.SFSeqVar_PlayerCounter
// 0x000C (0x00A8 - 0x009C)
class USFSeqVar_PlayerCounter : public USeqVar_Int
{
public:
	unsigned long                                      bOnlyUser : 1;                                    		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      PlayerTeamIndex;                                  		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                PlayerCounter;                                    		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3785 ];

		return pClassPointer;
	};

	int GetPlayerCount ( );
	void UpdatePlayerCounter ( );
};

UClass* USFSeqVar_PlayerCounter::pClassPointer = NULL;

// Class SFGame.SFSeqVar_PlayerSelectTeam
// 0x000D (0x00C1 - 0x00B4)
class USFSeqVar_PlayerSelectTeam : public USeqVar_Object
{
public:
	TArray< class UObject* >                           Players;                                          		// 0x00B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      PlayerTeamIndex;                                  		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3787 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
	void UpdatePlayersList ( );
};

UClass* USFSeqVar_PlayerSelectTeam::pClassPointer = NULL;

// Class SFGame.SFGameEngine
// 0x00F8 (0x08B0 - 0x07B8)
class USFGameEngine : public UGameEngine
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x07B8 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     OggMusicFolder;                                   		// 0x07BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PLAYMAP_OPTION;                                   		// 0x07C8 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PCState_OPTION;                                   		// 0x07D4 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     INTERLUDE_OPTION;                                 		// 0x07E0 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ViewTargetPawnPID_OPTION;                         		// 0x07EC (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUsePacketEncryption : 1;                         		// 0x07F8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bCapturingVideo : 1;                              		// 0x07F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bTwitchTVBroadcast : 1;                           		// 0x07F8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsLobbyTravel : 1;                               		// 0x07F8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bUseOldMeshBuilder : 1;                           		// 0x07F8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPauseActors : 1;                                 		// 0x07F8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLoadingToLobby : 1;                              		// 0x07F8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bEnableIndependentMapLoading : 1;                 		// 0x07F8 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      IsUsePackageVerification : 1;                     		// 0x07F8 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bUseDefaultUnitItems : 1;                         		// 0x07F8 (0x0004) [0x0000000000004000] [0x00000200] ( CPF_Config )
	struct FLinearColor                                OverlayColorWhenDisconnected;                     		// 0x07FC (0x0010) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSectionDebugInfo >                 arrSectionDebug;                                  		// 0x080C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DeltaTime;                                        		// 0x0818 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DedicatedServerGarbageCollectionTime;             		// 0x081C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DedicatedServerRaiseReadyEventPeriod;             		// 0x0820 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastDedicatedServerGarbageCollectionTime;         		// 0x0824 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDedicatedServerRaiseReadyEventTime;           		// 0x0828 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxControlMessageDelay;                           		// 0x082C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PassedControlMessageDelay;                        		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LastControlMessage;                               		// 0x0834 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMICforSFCubeMap* >                  arrMICForSFCubeMap;                               		// 0x0838 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UMITVforSFCubeMap* >                 arrMITVForSFCubeMap;                              		// 0x0844 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       SubDisplayLevelName;                              		// 0x0850 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           AllowSubLanguage;                                 		// 0x0858 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ValidLanguages;                                   		// 0x0864 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VerificationFileName;                             		// 0x0870 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                VerificationSize;                                 		// 0x087C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     GameUniqueKey;                                    		// 0x0880 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DediGameModeID;                                   		// 0x088C (0x0004) [0x0000000000000000]              
	int                                                DediMapID;                                        		// 0x0890 (0x0004) [0x0000000000000000]              
	int                                                GameUniqueKeyByte;                                		// 0x0894 (0x0004) [0x0000000000000000]              
	struct FString                                     MapValue;                                         		// 0x0898 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDFUCrcInfo >                       DFUCrcInfoArray;                                  		// 0x08A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3789 ];

		return pClassPointer;
	};

	bool GetFileSize ( struct FString FilePath, struct FString* outFileSize );
	bool GetFileCrcValueDFUFormat ( struct FString FilePath, struct FString* outCrcValue );
	void GetPackageDump ( TArray< struct FString >* dumped );
	class USFGFxLobby* GetSFLobby ( );
	struct FString GetContentsPrefix ( struct FString strOrg );
	struct FString GetGamePrefix ( struct FString strOrg );
	void GMemReport ( unsigned long bFullReport );
	bool IsDedicatedServerBuild ( );
	bool IsMagazineDrop ( );
	void DebugLogMessage ( struct FString LogMessage );
	void SetLoadingToLobby ( unsigned long bIsLoading );
	bool IsLoadingToLobby ( );
	void SetCurrentStep ( struct FString currentStep );
	void SetUserCodeName ( struct FString UserCodeName );
	void SetRepViaDOREPOnly ( unsigned long bUse );
	void SetRelevantDelay ( unsigned long bUse );
	void SetUnrelevantDelay ( unsigned long bUse );
	float GetDeltaTime ( );
	void MapOpenFade ( );
	struct FLinearColor GetDefaultOverlayColor ( );
	bool IsUseOldMeshBuilder ( );
	void PKT_GameEnd_REQ_OK ( class UPacket* Packet );
	void PKT_GameEndMessage_Auto ( class UPacket* Packet );
	void PumpAsyncLoad ( );
	void AsyncLoadObject ( struct FString ObjectName, class UClass* ObjectClass, class UObject* CompletionOwner, struct FName CompletionFunctionName, class AActor* Caller );
	bool IsUseAsyncDataLoading ( );
	void EndAsyncLoading ( );
	void BeginAsyncLoading ( );
	void CheckSecondsPerCycle ( );
	void PerformGarbageCollection ( unsigned long bPerformFullPurge );
	void ToggleMapobjectWrite ( );
	void StopSectionTime ( struct FString SectionName );
	void StartSectionTime ( struct FString SectionName, int TabCount );
	void eventOnTwicthTVBroadcast ( unsigned long IsBroadCast );
	struct FString GetCaptureVideoQualityString ( int nType );
	void eventCaptureVideo ( int nType );
	void eventFinishedPlayingOgg ( );
	void PrevOgg ( );
	void NextOgg ( );
	void StopOgg ( );
	void PlayOgg ( int nFileIndex );
	void ReleaseOgg ( );
	void InitOgg ( );
	bool IsUsingPacketEncryption ( );
	bool IsRootBranch ( );
	struct FString GetBranchName ( );
	bool IsLowLevelPC ( );
	int GetSkeletalMeshLODBias ( );
	bool IsShaderModel2 ( );
	void RemoveOptionInLastURL ( struct FString Option );
	bool HasOptionInLastURL ( struct FString Option );
	struct FString GetOption ( struct FString InURL, struct FString Match, struct FString Default );
	void SetTitleMsg ( struct FString TitleMsg, unsigned long bOnlyLogTitle );
	struct FString GetMyIP ( );
	void OpenLobby ( );
	void ActiveSeqEvent ( class UClass* SeqEventClass, unsigned char nIndex, struct FName SeqName );
	void RestoreInstigator ( );
	void SetPauseActor ( class AActor* inActor, unsigned long bPause );
	void SetPauseCheckpointActor ( unsigned long bPause );
	void LoadCheckpoint ( unsigned long bLevelData, unsigned long bActorData );
	void SaveCheckpoint ( );
	void SetAudioGroupVolume ( struct FName GroupName, float Volume );
	void SetVideoSetting ( unsigned char Setting, int Value );
	void SetVideoScaleLevel ( int ScaleLevel );
	void SetScreenResolution ( int ResX, int ResY, unsigned long bFullScreen );
	void SetVideoSettingForLobby ( int ResX, int ResY, unsigned long bFullScreen, float GammaValue, int bAdvancedSetting, int ScaleLevel, unsigned long bLobbyFullScreen, unsigned long bInitialLobbyLoaded );
	void SetLobbyFullScreen ( unsigned long bSet, unsigned long bSetPrev );
	bool DynamicShadowAllowed ( );
	float GetGamma ( );
	void SaveGamma ( );
	void SetGamma ( float Value );
	class USFObjectPool* GetSFObjPool ( );
	bool IsDemoPlayMode ( );
	void PKT_ForcedLeaveMessage_Auto ( class UPacket* Packet );
	void PKT_ExitGame_REQ_OK ( class UPacket* Packet );
	void PKT_EasyAntiCheatMakeResponse_Auto ( class UPacket* Packet );
	void PKT_XIGNCODEMakeResponse_Auto ( class UPacket* Packet );
	void PKT_HackShieldMakeResponse_Auto ( class UPacket* Packet );
	void PKT_ExitGameMessage_Auto ( class UPacket* Packet );
	void PKT_UsingRelayMessage_Auto ( class UPacket* Packet );
	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	class USFPacketProcessor* GetSFPacketProcessor ( );
	class USFMeshBlendingScheduler* GetSFMeshBlendingScheduler ( );
	class USFMeshBuilder* GetSFMeshBuilder ( );
	unsigned char eventGetRoomTeamIndex ( int Uid );
	int eventGetLocalPlayerUID ( );
	struct FQWord ConvertStringToQword ( struct FString Source );
	struct FString ConvertQwordToString ( struct FQWord Source );
	void ClearMITVForSFCubeMap ( );
	void ClearMICForSFCubeMap ( );
	void AddMITVForSFCubeMap ( class UMITVforSFCubeMap* MITV );
	void AddMICForSFCubeMap ( class UMICforSFCubeMap* MIC );
	int GetDFUXMLValue ( struct FString FindFileName, struct FString FindParam, struct FString* outCrcValue );
	int GetCRC ( struct FString InStr );
	int GetGameUniqueKeyCRC ( );
	struct FString GetGameUniqueKey ( );
	struct FTime_t GetNextDay ( struct FQWord inTime, int nDay );
	struct FTime_t ChangeJavaTimeToString ( struct FQWord inTime );
	void SleepThisThread ( float Seconds );
	void SetFPS ( int FPS );
	struct FString ToStringFromName ( struct FName Str );
	bool IsLobbyTravel ( );
	bool SetForceRotation ( class AActor* Target, struct FRotator NewRotation );
	bool SetForceLocation ( class AActor* Target, struct FVector NewLocation );
	void SetLastURL ( struct FString InURL );
	void SetTransientType ( unsigned char newTransitionType );
	void SetPersistentLevelVisibility ( unsigned long bShouldBeVisible );
	void LoadStreamingLevel ( unsigned char gamemode, unsigned long IsObserver, struct FName LoadLevelName );
	void ExecuteNativeCommand ( struct FString NativeCommand );
	void UpdateControlMessageDelay ( float DeltaSeconds );
};

UClass* USFGameEngine::pClassPointer = NULL;

// Class SFGame.SFCameraBase
// 0x0000 (0x0044 - 0x0044)
class USFCameraBase : public UGameCameraBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3791 ];

		return pClassPointer;
	};

};

UClass* USFCameraBase::pClassPointer = NULL;

// Class SFGame.SFSpectatorCamera
// 0x0014 (0x0058 - 0x0044)
class USFSpectatorCamera : public USFCameraBase
{
public:
	class USFSpectatorCam_AutoFraming*                 AutoFramingCam;                                   		// 0x0044 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DefaultFOV;                                       		// 0x0048 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ControlInfo_LookRight;                            		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ControlInfo_LookUp;                               		// 0x0050 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ControlInfo_Zoom;                                 		// 0x0054 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3793 ];

		return pClassPointer;
	};

	void OnBecomeActive ( class UGameCameraBase* OldCamera );
	void ProcessViewRotation ( float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ClampAxis ( int Axis, int BaseAxis, int MaxDelta, int* out_Delta );
	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
	void Init ( );
};

UClass* USFSpectatorCamera::pClassPointer = NULL;

// Class SFGame.SFCameraModifier_ShakeByDamage
// 0x0024 (0x007C - 0x0058)
class USFCameraModifier_ShakeByDamage : public UCameraModifier
{
public:
	unsigned char                                      DmgShakeState;                                    		// 0x0058 (0x0001) [0x0000000000000000]              
	struct FRotator                                    DmgShakeRotation;                                 		// 0x005C (0x000C) [0x0000000000000000]              
	struct FRotator                                    DamageShakeGoal;                                  		// 0x0068 (0x000C) [0x0000000000000000]              
	float                                              DamageShakeGoalTime;                              		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageShakeTransitTime;                           		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3795 ];

		return pClassPointer;
	};

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateCameraShake ( float DeltaTime, struct FTPOV* OutPOV );
	void AddCameraDamageShake ( struct FRotator ShakeGoal, float GoalTime );
};

UClass* USFCameraModifier_ShakeByDamage::pClassPointer = NULL;

// Class SFGame.SFPlayerCamera
// 0x0048 (0x0528 - 0x04E0)
class ASFPlayerCamera : public AGamePlayerCamera
{
public:
	class USFSpectatorCamera*                          SpectatorCam;                                     		// 0x04E0 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	float                                              LastBloodEffect;                                  		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseInterpCamera : 1;                             		// 0x04E8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      PunchAngle_bIsPlaying : 1;                        		// 0x04E8 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInsideWaterVolume : 1;                           		// 0x04E8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              InterpCameraTime;                                 		// 0x04EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PunchAngle_Pitch;                                 		// 0x04F0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                PunchAngle_Yaw;                                   		// 0x04F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PunchAngle_Exp;                                   		// 0x04F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PunchAngle_RecoveryTime;                          		// 0x04FC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              PunchAngle_StartTimeSeconds;                      		// 0x0500 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USFCameraModifier_ShakeByDamage*             CameraDamageShakeMod;                             		// 0x0504 (0x0004) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      CameraDamageShakeModClass;                        		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleSystem* >                   InsideWaterEffects;                               		// 0x050C (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystem* >                   OutsideWaterEffects;                              		// 0x0518 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              WaterVolumeExtent;                                		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3797 ];

		return pClassPointer;
	};

	void UpdatePlayerInput ( class UPlayerInput* Input );
	void PlayCameraDamageShake ( struct FRotator ShakeGoal, float GoalTime );
	void FillCameraCache ( struct FTPOV* NewPOV );
	struct FTPOV BlendPOV ( struct FTPOV OldPOV, struct FTPOV NewPOV, float Alpha );
	void eventChangWaterVolumeEffect ( unsigned long bFlag, class APhysicsVolume* WaterVolume );
	void RemoveLensEffectList ( TArray< class UParticleSystem* >* ParticleList );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void ResetCameraEffects ( );
	class UParticleSystemComponent* AddCameraLensEffectParticle ( class UParticleSystem* LensEffectPS, unsigned long bAllowMultipleInstance, int DetermineLODLevel, float InLifeSpan );
	class AEmitterCameraLensEffectBase* FindCameraLensEffectEmitter ( class UParticleSystem* LensEffectParticleSystem );
	float CalcShakeScale ( struct FVector InLocation, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff );
	class UGameCameraBase* FindBestCameraType ( class AActor* CameraTarget );
	class USFCameraBase* CreateSFCamera ( class UClass* CameraClass );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	void ClearPunchAngle ( );
	void UpdateWaterVolumeEffect ( );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void AddPunchAngle ( int Pitch, int Yaw, float Exp, float RecoveryTime, unsigned long bIgnorePreviousPunchAngle );
	void CalcActiveCameraAnims ( struct FVector StandardLocation, struct FRotator StandardRotation, struct FTPOV* OutPOV );
};

UClass* ASFPlayerCamera::pClassPointer = NULL;

// Class SFGame.SFSpectatorCam_AutoFraming
// 0x0094 (0x00D0 - 0x003C)
class USFSpectatorCam_AutoFraming : public UObject
{
public:
	class USFSpectatorCamera*                          SpectatorCam;                                     		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastFOV;                                          		// 0x0040 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVInterpSpeed;                                   		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FOVInterpSpeed_MovingCamera;                      		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    LastDeltaRot;                                     		// 0x004C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              RotInterpSpeed;                                   		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotInterpSpeed_MovingCamera;                      		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLastLookatIsValid : 1;                           		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDebugSkipFOVAdj : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDebugShowWatchedPawns : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bWasInterpolating : 1;                            		// 0x0060 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FVector                                     LastLookat;                                       		// 0x0064 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              LookatInterpSpeed;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookatInterpSpeed_MovingCamera;                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   WorldPitchRange;                                  		// 0x0078 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   RelativeYawRange;                                 		// 0x0080 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   AcceptableFOVRange;                               		// 0x0088 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BorderBufferPercentage_Horizontal;                		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BorderBufferPercentage_Vertical;                  		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomFOVAdjustmentMag;                             		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ZoomBufferAdjustmentMag;                          		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirSelectionWeightMultiplier_Good;                		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirSelectionWeightMultiplier_Bad;                 		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LastCamActorLoc;                                  		// 0x00A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAutoframingWatchedPawn >           RelevantPawnList;                                 		// 0x00B4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              RelevanceLagTime;                                 		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RelevanceFadeTime;                                		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PawnTraceRadius;                                  		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VelBiasFactor;                                    		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3799 ];

		return pClassPointer;
	};

	void SetLookatInterpSpeedMovingCamera ( float Speed );
	void SetLookatInterpSpeed ( float Speed );
	void SetRotInterpSpeedMovingCamera ( float Speed );
	void SetRotInterpSpeed ( float Speed );
	void SetFOVInterpSpeedMovingCamera ( float Speed );
	void SetFOVInterpSpeed ( float Speed );
	void OnBecomeActive ( );
	void UpdateCamera ( class ACameraActor* CamActor, float DeltaTime, struct FTViewTarget* OutVT );
};

UClass* USFSpectatorCam_AutoFraming::pClassPointer = NULL;

// Class SFGame.SFSpectatorPoint
// 0x0048 (0x036C - 0x0324)
class ASFSpectatorPoint : public ACameraActor
{
public:
	struct FString                                     DisplayText;                                      		// 0x0324 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                OrderIndex;                                       		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    UserRotationRange;                                		// 0x0334 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxRotationRate;                                  		// 0x0340 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FZoomPropertyStruct                         ZoomProperty;                                     		// 0x0344 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraMode;                                       		// 0x0350 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FFOVInterpSpeedPropertyStruct               FOVInterpSpeedProperty;                           		// 0x0354 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotInterpSpeedPropertyStruct               RotInterpSpeedProperty;                           		// 0x035C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLookatInterpSpeedPropertyStruct            LookatInterpSpeedProperty;                        		// 0x0364 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3801 ];

		return pClassPointer;
	};

	struct FString RetrieveDisplayString ( struct FString TagName );
	void FOVReset ( );
	void ZoomOut ( );
	void ZoomIn ( );
};

UClass* ASFSpectatorPoint::pClassPointer = NULL;

// Class SFGame.SFThirdPersonCameraModeBase
// 0x0004 (0x022C - 0x0228)
class USFThirdPersonCameraModeBase : public UGameThirdPersonCameraMode
{
public:
	float                                              InterpLocSpeed;                                   		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3803 ];

		return pClassPointer;
	};

	bool IsValidForUpdateViewTarget ( class AActor* Actor );
	bool IsValidForUpdate ( class APawn* P );
};

UClass* USFThirdPersonCameraModeBase::pClassPointer = NULL;

// Class SFGame.SFAIThirdPersonCameraMode
// 0x0018 (0x0244 - 0x022C)
class USFAIThirdPersonCameraMode : public USFThirdPersonCameraModeBase
{
public:
	struct FVector                                     EvadePawnRelativeOffset;                          		// 0x022C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorstLocAimingZOffset;                            		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTemporaryOriginRotInterp : 1;                    		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              TemporaryOriginRotInterpSpeed;                    		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3805 ];

		return pClassPointer;
	};

};

UClass* USFAIThirdPersonCameraMode::pClassPointer = NULL;

// Class SFGame.SFDeadPersonCameraMode
// 0x0040 (0x026C - 0x022C)
class USFDeadPersonCameraMode : public USFThirdPersonCameraModeBase
{
public:
	struct FName                                       DeathCamTargetBone;                               		// 0x022C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeathCamDistance;                                 		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bShowWall : 1;                                    		// 0x0238 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDrawDebug : 1;                                   		// 0x0238 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	float                                              DOF_Distance;                                     		// 0x023C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     DeathCamLocation;                                 		// 0x0240 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FRotator                                    DeathCamRotation;                                 		// 0x024C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActiveTime;                                       		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFDistance;                                      		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFFocusInnerRadius;                              		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFMaxFarBlurAmount;                              		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFMaxNearBlurAmount;                             		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3807 ];

		return pClassPointer;
	};

	void ModifyPostProcessSettings ( struct FPostProcessSettings* PP );
	void UpdatePostProcess ( float DeltaTime, struct FTViewTarget* VT );
	void UpdateDeathCameraRot ( class ASFPawn* SFP, int nDirIndex, struct FRotator* CamRot );
	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
	struct FVector eventGetTargetLocation ( class APawn* Pawn );
	struct FVector eventGetCameraWorstCaseLoc ( class APawn* TargetPawn );
};

UClass* USFDeadPersonCameraMode::pClassPointer = NULL;

// Class SFGame.SFFelloutFirstPersonCameraMode
// 0x0020 (0x024C - 0x022C)
class USFFelloutFirstPersonCameraMode : public USFThirdPersonCameraModeBase
{
public:
	unsigned long                                      bTrackLocationTargetBone : 1;                     		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTrackRotationTargetBone : 1;                     		// 0x022C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHiddePawnMesh : 1;                               		// 0x022C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOwnerNoSeePawnMesh : 1;                          		// 0x022C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              CameraDistanceFromTargetBone;                     		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetBoneName;                                   		// 0x0234 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MouseX;                                           		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MouseY;                                           		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxMouseX;                                        		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxMouseY;                                        		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3809 ];

		return pClassPointer;
	};

	void UpdatePlayerInput ( class UPlayerInput* Input );
	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
};

UClass* USFFelloutFirstPersonCameraMode::pClassPointer = NULL;

// Class SFGame.SFFelloutPersonCameraMode
// 0x000C (0x0238 - 0x022C)
class USFFelloutPersonCameraMode : public USFThirdPersonCameraModeBase
{
public:
	struct FVector                                     InitLocation;                                     		// 0x022C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3811 ];

		return pClassPointer;
	};

	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
};

UClass* USFFelloutPersonCameraMode::pClassPointer = NULL;

// Class SFGame.SFFlashBackCameraMode
// 0x0014 (0x0240 - 0x022C)
class USFFlashBackCameraMode : public USFThirdPersonCameraModeBase
{
public:
	class UTexture*                                    ColorGrading_LookupTable;                         		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             FlashBackScreenEffect;                            		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ProjectileFlashBackScreenEffect;                  		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    SpawnedFlashBackEffect;                           		// 0x0238 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    SpawnedProjectileFlashBackEffect;                 		// 0x023C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3813 ];

		return pClassPointer;
	};

	void ClearProjectileFlashBackScreenEffect ( );
	class UParticleSystemComponent* SpawnProjectileFlashBackScreenEffect ( );
	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
	bool IsValidForUpdate ( class APawn* P );
};

UClass* USFFlashBackCameraMode::pClassPointer = NULL;

// Class SFGame.SFRespawnCameraMode
// 0x0050 (0x027C - 0x022C)
class USFRespawnCameraMode : public USFThirdPersonCameraModeBase
{
public:
	struct FVector                                     StartLocTangent;                                  		// 0x022C (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FRotator                                    StartRotTangent;                                  		// 0x0238 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     EndLocTangent;                                    		// 0x0244 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FRotator                                    EndRotTangent;                                    		// 0x0250 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     StartLocationOffset;                              		// 0x025C (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FRotator                                    StartRotationOffset;                              		// 0x0268 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RespawnCameraDelay;                               		// 0x0274 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              fPassedTime;                                      		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3815 ];

		return pClassPointer;
	};

	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
};

UClass* USFRespawnCameraMode::pClassPointer = NULL;

// Class SFGame.SFTopViewDeadPersonCameraMode
// 0x0024 (0x0250 - 0x022C)
class USFTopViewDeadPersonCameraMode : public USFThirdPersonCameraModeBase
{
public:
	struct FVector                                     InitLocation;                                     		// 0x022C (0x000C) [0x0000000000000000]              
	float                                              DOF_Distance;                                     		// 0x0238 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ActiveTime;                                       		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFDistance;                                      		// 0x0240 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFFocusInnerRadius;                              		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFMaxFarBlurAmount;                              		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DOFMaxNearBlurAmount;                             		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3817 ];

		return pClassPointer;
	};

	void ModifyPostProcessSettings ( struct FPostProcessSettings* PP );
	void UpdatePostProcess ( float DeltaTime, struct FTViewTarget* VT );
	void OnBecomeInActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* NewMode );
	void OnBecomeActive ( class APawn* TargetPawn, class UGameThirdPersonCameraMode* PrevMode );
};

UClass* USFTopViewDeadPersonCameraMode::pClassPointer = NULL;

// Class SFGame.SFTurretCameraMode
// 0x0000 (0x022C - 0x022C)
class USFTurretCameraMode : public USFThirdPersonCameraModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3819 ];

		return pClassPointer;
	};

	float GetDesiredFOV ( class APawn* ViewedPawn );
	void GetBaseViewOffsets ( class APawn* ViewedPawn, unsigned char ViewportConfig, float DeltaTime, struct FVector* out_Low, struct FVector* out_Mid, struct FVector* out_High );
};

UClass* USFTurretCameraMode::pClassPointer = NULL;

// Class SFGame.SFTurretTargetingCameraMode
// 0x0000 (0x022C - 0x022C)
class USFTurretTargetingCameraMode : public USFThirdPersonCameraModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3821 ];

		return pClassPointer;
	};

	float GetDesiredFOV ( class APawn* ViewedPawn );
	void GetBaseViewOffsets ( class APawn* ViewedPawn, unsigned char ViewportConfig, float DeltaTime, struct FVector* out_Low, struct FVector* out_Mid, struct FVector* out_High );
};

UClass* USFTurretTargetingCameraMode::pClassPointer = NULL;

// Class SFGame.SFEmit_Weather
// 0x00B0 (0x02F8 - 0x0248)
class ASFEmit_Weather : public AEmitter
{
public:
	class ASFPlayerController*                         BasePC;                                           		// 0x0248 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   WeatherLoopCue;                                   		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAudioComponent*                             WeatherLoopAC;                                    		// 0x0250 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             WeatherDropsOnPawn;                               		// 0x0254 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             WeatherCameraPS;                                  		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDoWeatherDropsOnCamera : 1;                      		// 0x025C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDoWeatherdropsOnPawn : 1;                        		// 0x025C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      CheckOverHead : 1;                                		// 0x025C (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              WeatherDropsOnCameraInterval;                     		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WeatherDropsOnPawnInterval;                       		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NumWeatherDropsToFireAtOnceOnPawn;                		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastWeatherDropsOnCamera;                         		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastWeatherDropsOnPawn;                           		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ZDistAbovePawn;                                   		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    WeatherPSC;                                       		// 0x0278 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FName >                             ParameterNames;                                   		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PSCRadius;                                        		// 0x0288 (0x0004) [0x0000000000000000]              
	unsigned char                                      CheckFlag;                                        		// 0x028C (0x0001) [0x0000000000000000]              
	int                                                Index;                                            		// 0x0290 (0x0004) [0x0000000000000000]              
	class AEmitterCameraLensEffectBase*                WeatherCameraLensEffect;                          		// 0x0294 (0x0004) [0x0000000000000000]              
	struct FVector                                     Direction[ 0x8 ];                                 		// 0x0298 (0x0060) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3823 ];

		return pClassPointer;
	};

	void SetLODLevel ( int Level );
	void SetHeight ( float Height );
	class AEmitter* eventGetPawnImpactEmitter ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void TurnOffWeatherSound ( );
	void TurnOnWeatherSound ( );
	void FadeOutWeather ( );
	void eventSetBasedOnPlayer ( class ASFPlayerController* PC );
	void PostBeginPlay ( );
	void DeactivateSystem ( );
	void ParticleSystemPossibilityCheck ( );
	void CheckWithinWeatherRadius ( );
	void TurnOffWeatherCameraEffect ( struct FName CameraStyle, unsigned long bForce );
};

UClass* ASFEmit_Weather::pClassPointer = NULL;

// Class SFGame.SFEmit_Rain
// 0x000C (0x0304 - 0x02F8)
class ASFEmit_Rain : public ASFEmit_Weather
{
public:
	float                                              RainDropPitchMin;                                 		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              RainDropPitchMax;                                 		// 0x02FC (0x0004) [0x0000000000000000]              
	unsigned long                                      TurnedOff : 1;                                    		// 0x0300 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3825 ];

		return pClassPointer;
	};

	void TurnOffWeatherCameraEffect ( struct FName CameraStyle, unsigned long bForce );
};

UClass* ASFEmit_Rain::pClassPointer = NULL;

// Class SFGame.SFEmit_Snow
// 0x0010 (0x0308 - 0x02F8)
class ASFEmit_Snow : public ASFEmit_Weather
{
public:
	float                                              ElapsedFrosty;                                    		// 0x02F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateTime;                                   		// 0x02FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FrostyTime;                                       		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              ClearTime;                                        		// 0x0304 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3827 ];

		return pClassPointer;
	};

	void TurnOffWeatherCameraEffect ( struct FName CameraStyle, unsigned long bForce );
};

UClass* ASFEmit_Snow::pClassPointer = NULL;

// Class SFGame.SFParticleModuleResistance
// 0x0008 (0x0074 - 0x006C)
class USFParticleModuleResistance : public UParticleModuleAcceleration
{
public:
	unsigned char                                      ResistMethod;                                     		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ResistanceRatio;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3829 ];

		return pClassPointer;
	};

};

UClass* USFParticleModuleResistance::pClassPointer = NULL;

// Class SFGame.SFParticleSystemComponent
// 0x0010 (0x02EC - 0x02DC)
class USFParticleSystemComponent : public UParticleSystemComponent
{
public:
	unsigned long                                      bHasSavedScale3D : 1;                             		// 0x02DC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	struct FVector                                     SavedScale3D;                                     		// 0x02E0 (0x000C) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3831 ];

		return pClassPointer;
	};

};

UClass* USFParticleSystemComponent::pClassPointer = NULL;

// Class SFGame.SFSoundGroup
// 0x0008 (0x0044 - 0x003C)
class USFSoundGroup : public UObject
{
public:
	int                                                ClassVersion;                                     		// 0x003C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ObjVersion;                                       		// 0x0040 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3833 ];

		return pClassPointer;
	};

	void DumpMemoryUsage ( unsigned long bDetailed );
};

UClass* USFSoundGroup::pClassPointer = NULL;

// Class SFGame.SFSoundGroup_Pawn
// 0x0048 (0x008C - 0x0044)
class USFSoundGroup_Pawn : public USFSoundGroup
{
public:
	TArray< struct FSFFoleyEntry >                     FoleySoundFX;                                     		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSFVoiceFoleyEntry >                VoiceFoleys;                                      		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      LastVoiceFoleyIdx;                                		// 0x005C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsDamageEffectEntry >               DamageEffectFXs;                                  		// 0x0068 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USFSoundGroup_Pawn*                          Parent;                                           		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastPainSound;                                    		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHitSound;                                     		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageSoundMaxDistance;                           		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              LastFallDeadBodyTime;                             		// 0x0084 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             VoiceAudioComp;                                   		// 0x0088 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3835 ];

		return pClassPointer;
	};

	struct FsDamageEffectEntry FindDamageEffectEntry ( unsigned char Id );
	void PlayFoleySound ( class AActor* A, unsigned char Id, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant, float VolumeMultiplier, unsigned long bReuseChannel );
	void PlayVoiceFoley ( class AActor* A, unsigned char Id, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant, float Delay );
	bool FindFoleyCue ( unsigned char FoleyID, TArray< class USoundCue* >* cues );
	class USoundCue* FindVoiceFoleyCue ( unsigned char VoiceFoleyID );
};

UClass* USFSoundGroup_Pawn::pClassPointer = NULL;

// Class SFGame.SFSoundGroup_Voice
// 0x0010 (0x0054 - 0x0044)
class USFSoundGroup_Voice : public USFSoundGroup
{
public:
	TArray< struct FVoiceMessage >                     VoiceMessages;                                    		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USFSoundGroup_Voice*                         Parent;                                           		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3837 ];

		return pClassPointer;
	};

	bool HasEvent ( struct FName EventName );
	class USoundNodeWave* FindWaveByName ( struct FName EventName, unsigned char Team, unsigned long bSelfSound, int WaveIndex, struct FString* Caption, float* CaptionLifeTime );
	class USoundNodeWave* FindWaveByIndex ( int Index, unsigned char Team, unsigned long bSelfSound, int WaveIndex, struct FString* Caption, float* CaptionLifeTime );
	class USoundNodeWave* GetWaveAndCaption ( int Index, unsigned char Team, struct FString* Caption, float* CaptionLifeTime );
	int FindIndexByEventName ( struct FName EventName );
	class USoundNodeWave* InternalFindWaveByName ( struct FName EventName, unsigned char Team, unsigned long bSelfSound, int WaveIndex, struct FString* Caption, float* CaptionLifeTime );
	bool PlayVoiceInternal ( class ASFPlayerController* LocalPC, class ASFPlayerReplicationInfo* EventInstigator, struct FName EventName, int WaveIndex, unsigned long bDrawCaption, unsigned long bPlayVoice );
	void PlayVoice ( class ASFPlayerController* LocalPC, class ASFPlayerReplicationInfo* EventInstigator, struct FName EventName, int WaveIndex, unsigned long bDrawCaption );
};

UClass* USFSoundGroup_Voice::pClassPointer = NULL;

// Class SFGame.SFHandActor
// 0x00A4 (0x02C8 - 0x0224)
class ASFHandActor : public AActor
{
public:
	class USFSkeletalMeshComponent*                    HandMeshComponent;                                		// 0x0224 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ASFPawn*                                     PawnOwner;                                        		// 0x0228 (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               HandPhysicsAsset;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	class ASFWeapon*                                   AttachedWeapon;                                   		// 0x0230 (0x0004) [0x0000000000000000]              
	class USFSkeletalMeshComponent*                    AttachedWeaponMeshComponent;                      		// 0x0234 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USFSkeletalMeshComponent*                    OldAttachedMeshComp;                              		// 0x0238 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USFSkeletalMeshComponent*                    WeaponHolderMesh;                                 		// 0x023C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bIsShowed : 1;                                    		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSteadyWeaponRun : 1;                             		// 0x0240 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateParticlDynamicData : 1;                    		// 0x0240 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	struct FVector                                     LagLocation;                                      		// 0x0244 (0x000C) [0x0000000000000000]              
	struct FVector                                     LagMax;                                           		// 0x0250 (0x000C) [0x0000000000000000]              
	struct FVector                                     LagMaxWhenZoomed;                                 		// 0x025C (0x000C) [0x0000000000000000]              
	struct FVector                                     LagResult;                                        		// 0x0268 (0x000C) [0x0000000000000000]              
	struct FRotator                                    LastViewDirForLag;                                		// 0x0274 (0x000C) [0x0000000000000000]              
	struct FVector                                     MeshTranslation;                                  		// 0x0280 (0x000C) [0x0000000000000000]              
	struct FRotator                                    MeshRotation;                                     		// 0x028C (0x000C) [0x0000000000000000]              
	float                                              MeshFOV;                                          		// 0x0298 (0x0004) [0x0000000000000000]              
	float                                              WeaponSteadyLengthRate;                           		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              WeaponSteadyWalkFrame;                            		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              WeaponSteadyRunFrame;                             		// 0x02A4 (0x0004) [0x0000000000000000]              
	float                                              WeaponSteadyRate;                                 		// 0x02A8 (0x0004) [0x0000000000000000]              
	float                                              PawnSpeed2DSq;                                    		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FVector                                     CurrentPlayerViewLocation;                        		// 0x02B0 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FRotator                                    CurrentPlayerViewRotation;                        		// 0x02BC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3839 ];

		return pClassPointer;
	};

	void SetMaskOutLine ( unsigned long IsMask );
	void UpdateSteadyWalk ( float DeltaSeconds );
	void UpdateSteadyRun ( float DeltaSeconds );
	void WeaponSteady ( float DeltaSeconds );
	struct FRotator GetMeshRotation ( );
	struct FVector GetMeshTranslation ( struct FVector Translation );
	struct FVector GetAdditiveMeshTranslation ( );
	struct FVector SetMeshTranslation ( struct FVector NewTranslation );
	void SetFOV ( float NewFOV );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void ForceZoomOut ( );
	struct FRotator SetMeshRotation ( struct FRotator BaseRotation );
	void UpdateMeshPosition ( );
	struct FVector ApplyPitchTranslation ( struct FVector NewLag );
	struct FVector ApplyYawTranslation ( struct FVector NewLag );
	void UpdateLag ( float DeltaSeconds );
	void eventUpdateHandPosition ( float DeltaSeconds );
	void UpdateMeshState ( float DeltaSeconds );
	void DetachWeapon ( class ASFWeapon* WeaponToDetach );
	void HandMeshChanged ( class USkeletalMesh* NewHandMesh );
	void AttachWeapon ( class ASFWeapon* WeaponToAttach, unsigned long bForce );
	void ChangeViewMode ( unsigned long bIsShow, unsigned long bIgnorePawnMesh );
	void PostBeginPlay ( );
};

UClass* ASFHandActor::pClassPointer = NULL;

// Class SFGame.SFPawn
// 0x09E8 (0x0EC8 - 0x04E0)
class ASFPawn : public AGamePawn
{
public:
	unsigned long                                      bWasCrouched : 1;                                 		// 0x04E0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bLeangingStarted : 1;                             		// 0x04E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bComponentDebug : 1;                              		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFixedView : 1;                                   		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      UseDefaultMesh : 1;                               		// 0x04E0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bWearingDroppableHelmet : 1;                      		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWearingExplosionHelmet : 1;                      		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsZoomedThird : 1;                               		// 0x04E0 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bNoClampLastTakeHitDamage : 1;                    		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bUseMorph : 1;                                    		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUsingFootPlacement : 1;                          		// 0x04E0 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bUsingFootPlacementWhenCrouch : 1;                		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bEnableLookAt : 1;                                		// 0x04E0 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bPlayPawnLanded : 1;                              		// 0x04E0 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bKillCamPlayedDeath : 1;                          		// 0x04E0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bKillCamRestore : 1;                              		// 0x04E0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bDeathAnimBlendToMotors : 1;                      		// 0x04E0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bEnableSkelControlRot : 1;                        		// 0x04E0 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bUseSkelControlRot : 1;                           		// 0x04E0 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bWalkingRotationAimStop : 1;                      		// 0x04E0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIgnoreBlockedByPawn : 1;                         		// 0x04E0 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bCheckedJumpOffInLadder : 1;                      		// 0x04E0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bDamaged : 1;                                     		// 0x04E0 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bMaim : 1;                                        		// 0x04E0 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bWarnAimed : 1;                                   		// 0x04E0 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bNotifyFiring : 1;                                		// 0x04E0 (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bInBlockSightArea : 1;                            		// 0x04E0 (0x0004) [0x0000000000000020] [0x04000000] ( CPF_Net )
	unsigned long                                      bInBlurSightArea : 1;                             		// 0x04E0 (0x0004) [0x0000000000000020] [0x08000000] ( CPF_Net )
	unsigned long                                      bInitSavedLocation : 1;                           		// 0x04E0 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bGodMode : 1;                                     		// 0x04E0 (0x0004) [0x0000000000000020] [0x20000000] ( CPF_Net )
	unsigned long                                      HEBlendOut : 1;                                   		// 0x04E0 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bAdjustStoppingPower : 1;                         		// 0x04E0 (0x0004) [0x0000000000002020] [0x80000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bIgnoreStoppingPowerWhenRecover : 1;              		// 0x04E4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bPeriodicRecordingForKillCam : 1;                 		// 0x04E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFullRagDollApplied : 1;                          		// 0x04E4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bItemListUpdated : 1;                             		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bLocalPawn : 1;                                   		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bZoomWalking : 1;                                 		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bSprintIgnore : 1;                                		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bExposed : 1;                                     		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bNoticed : 1;                                     		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bNotifiedFallDeadBody : 1;                        		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bStun : 1;                                        		// 0x04E4 (0x0004) [0x0000000000002020] [0x00000400] ( CPF_Net | CPF_Transient )
	unsigned long                                      IsObserverViewStun : 1;                           		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bCanDropWeaponOnDeath : 1;                        		// 0x04E4 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bAllowRagdoll : 1;                                		// 0x04E4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUseLeaning : 1;                                  		// 0x04E4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bEnableBackSlash : 1;                             		// 0x04E4 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bHideDeadbody : 1;                                		// 0x04E4 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bShowAimedCodename : 1;                           		// 0x04E4 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bEnableTopView : 1;                               		// 0x04E4 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bUseNotifyBumpLevel : 1;                          		// 0x04E4 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bCanInfluenceKnockBack : 1;                       		// 0x04E4 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bNeedToAdjustMeshTranslation : 1;                 		// 0x04E4 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      IgnoreItemEffects : 1;                            		// 0x04E4 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bUpdateLastDiscoveredTime : 1;                    		// 0x04E4 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bDiscovered : 1;                                  		// 0x04E4 (0x0004) [0x0000000000002020] [0x01000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUseKillVoice : 1;                                		// 0x04E4 (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      bAllowFirstPersonCamera : 1;                      		// 0x04E4 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bDisplayCodeNameOn3rdCam : 1;                     		// 0x04E4 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      IsBoss : 1;                                       		// 0x04E4 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bUseSpawnAnim : 1;                                		// 0x04E4 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bIsAsyncLoading : 1;                              		// 0x04E4 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bComposePawnMeshByFGC : 1;                        		// 0x04E4 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      IsExigencyKill : 1;                               		// 0x04E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceCriticalHeadshot : 1;                       		// 0x04E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseImpactEffect : 1;                             		// 0x04E8 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              SprintingPct;                                     		// 0x04EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              SlowDownPct;                                      		// 0x04F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ForwardVelocity;                                  		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LeftwardVelocity;                                 		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetDirection;                                  		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LeaningTargetRoll;                                		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevPawnYaw;                                      		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxLeaningRoll;                                   		// 0x0508 (0x0004) [0x0000000000000000]              
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x050C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USFWorldCubeMapComponent*                    WorldCubeComp;                                    		// 0x0510 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       PostProcessVolumeName;                            		// 0x0514 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              fLastUpdateCharacterLightEnv;                     		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FixedViewLoc;                                     		// 0x0520 (0x000C) [0x0000000000000000]              
	struct FRotator                                    FixedViewRot;                                     		// 0x052C (0x000C) [0x0000000000000000]              
	float                                              CameraScale;                                      		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentCameraScale;                               		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraZOffset;                                    		// 0x0540 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DefaultCameraZOffset;                             		// 0x0544 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMesh*                               DefaultCharMesh;                                  		// 0x0548 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          RigidBodyCollisionCylinder;                       		// 0x054C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CollisionRadiusForPawn;                           		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EditorDefaultCharMeshPath;                        		// 0x0554 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class ASFDropOnlyHelmet*                           HelmetActor;                                      		// 0x0560 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicsAsset*                               HelmetPhysAsset;                                  		// 0x0564 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               DefaultHelmetMesh;                                		// 0x0568 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               MCHairMesh;                                       		// 0x056C (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               HelmetHairMesh;                                   		// 0x0570 (0x0004) [0x0000000000000000]              
	unsigned char                                      HelmetStatus;                                     		// 0x0574 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CurrentInventoryGroup;                            		// 0x0575 (0x0001) [0x0000000000000000]              
	unsigned char                                      Gender;                                           		// 0x0576 (0x0001) [0x0000000000000000]              
	unsigned char                                      LastTakeHitInfo_HitBoneIndex;                     		// 0x0577 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      LastTakeHitInfo_Mask;                             		// 0x0578 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      SpeedDir;                                         		// 0x0579 (0x0001) [0x0000000000000000]              
	unsigned char                                      WeaponStateOld;                                   		// 0x057A (0x0001) [0x0000000000000000]              
	unsigned char                                      ImpactInfos;                                      		// 0x057B (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      bIsSpawnProtection;                               		// 0x057C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PawnTeamNum;                                      		// 0x057D (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      BuffList[ 0x12 ];                                 		// 0x057E (0x0012) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      PrevBuffList[ 0x12 ];                             		// 0x0590 (0x0012) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NoiseState;                                       		// 0x05A2 (0x0001) [0x0000000000000000]              
	int                                                HelmetPoint;                                      		// 0x05A4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FBonePartsTable >                   BoneNameToBodyParts;                              		// 0x05A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ExplosionAPRatio;                                 		// 0x05B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ArmorPoint;                                       		// 0x05B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LastKillType;                                     		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              RagdollLifespan;                                  		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              CustomGravityScaling;                             		// 0x05C4 (0x0004) [0x0000000000000000]              
	float                                              SlopeBoostFriction;                               		// 0x05C8 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             NoBlockZeroExtentBodyArray;                       		// 0x05CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       HeadBoneName;                                     		// 0x05D8 (0x0008) [0x0000000000000000]              
	struct FName                                       HelmetBoneName;                                   		// 0x05E0 (0x0008) [0x0000000000000000]              
	float                                              ReflexScopeDistance;                              		// 0x05E8 (0x0004) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FSAimProfileInfo >                  AimProfileInfo;                                   		// 0x05EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFTakeHitInfo                              LastTakeHitInfo;                                  		// 0x05F8 (0x0038) [0x0000000000000000]              
	int                                                LastTakeHitInfo_Damage;                           		// 0x0630 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastTakeHitInfo_HitLocation;                      		// 0x0634 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastTakeHitInfo_Momentum;                         		// 0x0640 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      LastTakeHitInfo_DamageType;                       		// 0x064C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LastTakeHitInfo_WeaponID;                         		// 0x0650 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      LastTakeHitInfo_DamagedBy;                        		// 0x0654 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LastTakeHitInfo_DamagedByPID;                     		// 0x0658 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                LastTakeHitInfo_HitType;                          		// 0x065C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     FreeCamStartPos;                                  		// 0x0660 (0x000C) [0x0000000000000000]              
	int                                                RootYaw;                                          		// 0x066C (0x0004) [0x0000000000000000]              
	float                                              RootYawSpeed;                                     		// 0x0670 (0x0004) [0x0000000000000000]              
	int                                                MaxYawAim;                                        		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CurrentSkelAim;                                   		// 0x0678 (0x0008) [0x0000000000000000]              
	class UAnimNodeAimOffset*                          AimNode;                                          		// 0x0680 (0x0004) [0x0000000000000000]              
	TArray< struct FSFaceMorphNode >                   FaceMorphNodeArray;                               		// 0x0684 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkelControlFootPlacement*                   LeftLegControl;                                   		// 0x0690 (0x0004) [0x0000000000000000]              
	class USkelControlFootPlacement*                   RightLegControl;                                  		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              OverrideFootOffset;                               		// 0x0698 (0x0004) [0x0000000000000000]              
	class USkelControlLookAt*                          LookAtControl;                                    		// 0x069C (0x0004) [0x0000000000000000]              
	float                                              CrouchTranslationOffset;                          		// 0x06A0 (0x0004) [0x0000000000000000]              
	struct FVector                                     MeshTranslationOffset;                            		// 0x06A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              MeshYawOffset;                                    		// 0x06B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MeshFloorZOffset;                                 		// 0x06B4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MeshFloorConformTranslation;                      		// 0x06B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxConformToFloorMeshTranslation;                 		// 0x06BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MeshFloorConformTransSpeed;                       		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtMinDistance;                                		// 0x06C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookAtMaxDot;                                     		// 0x06C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFAnimNodeSlot*                             FullBodyNode;                                     		// 0x06CC (0x0004) [0x0000000000000000]              
	class USFAnimNodeSlotPerBone*                      UpperBodyNode;                                    		// 0x06D0 (0x0004) [0x0000000000000000]              
	struct FName                                       PawnLandedAnim;                                   		// 0x06D4 (0x0008) [0x0000000000000000]              
	struct FName                                       PawnActionAnim;                                   		// 0x06DC (0x0008) [0x0000000000000000]              
	class USFAnimBaseBlendNode*                        BaseBlendNode;                                    		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       HeadSocketName;                                   		// 0x06E8 (0x0008) [0x0000000000000000]              
	class USkeletalMeshSocket*                         HeadSocket;                                       		// 0x06F0 (0x0004) [0x0000000000000000]              
	class USkeletalMeshComponent*                      HeadMeshComp;                                     		// 0x06F4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      HelmetHairMeshComp;                               		// 0x06F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CrouchJumpZ;                                      		// 0x06FC (0x0004) [0x0000000000000000]              
	float                                              CrouchChangeLength;                               		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrouchChangeStartTime;                            		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              KillCamDiedTime;                                  		// 0x0708 (0x0004) [0x0000000000000000]              
	TArray< struct FSKillCamProjectile >               KillCamProjectileArray;                           		// 0x070C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                KilledProjectileID;                               		// 0x0718 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      DeathAnimDamageType;                              		// 0x071C (0x0004) [0x0000000000000000]              
	struct FVector                                     DeathAnimHitLoc;                                  		// 0x0720 (0x000C) [0x0000000000000000]              
	TArray< struct FName >                             SpringBonesName;                                  		// 0x072C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DeathDamageRadius;                                		// 0x0738 (0x0004) [0x0000000000000000]              
	float                                              PlayDeathTime;                                    		// 0x073C (0x0004) [0x0000000000000000]              
	class UClass*                                      ThirdAnimNameClass;                               		// 0x0740 (0x0004) [0x0000000000000000]              
	TArray< class USkelControlSingleBone* >            SkelRotationCtrlList;                             		// 0x0744 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              WalkingRotationAim;                               		// 0x0750 (0x0004) [0x0000000000000000]              
	TArray< float >                                    SpeedDirPct;                                      		// 0x0754 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     ActorSpaceAccel;                                  		// 0x0760 (0x000C) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x076C (0x0004) [0x0000000000000000]              
	float                                              MinSpeed;                                         		// 0x0770 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeedWeight;                                   		// 0x0774 (0x0004) [0x0000000000000000]              
	float                                              MinSpeedWeight;                                   		// 0x0778 (0x0004) [0x0000000000000000]              
	float                                              ReloadSpeed;                                      		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipSpeed;                                       		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HealthIncrease;                                   		// 0x0784 (0x0004) [0x0000000000000000]              
	int                                                JumpIncrease;                                     		// 0x0788 (0x0004) [0x0000000000000000]              
	float                                              ThrowSpeed;                                       		// 0x078C (0x0004) [0x0000000000000000]              
	float                                              GearWeight;                                       		// 0x0790 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LuckyPointProbability;                            		// 0x0794 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FollingDamageDecrement;                           		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClanPointIncrease;                                		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AdditionalThrowVelocity;                          		// 0x07A0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FName >                             DisableSocketNames;                               		// 0x07A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSpecialSound >                     SpecialSounds;                                    		// 0x07B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PostEffectRefInfo;                                		// 0x07BC (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FFlashBangPostEffect                        FlashBangEffect;                                  		// 0x07C0 (0x002C) [0x0000000000000000]              
	struct FDistortionPostEffect                       DistortionEffect;                                 		// 0x07EC (0x0010) [0x0000000000000000]              
	class UClass*                                      SFPostEffectClass;                                		// 0x07FC (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ShockDamage;                                      		// 0x0800 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ShockDamageRep;                                   		// 0x0804 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              MinElectricShockInterval;                         		// 0x0808 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxElectricShockInterval;                         		// 0x080C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxElectricShockDuration;                         		// 0x0810 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     MinElectricShockImpulse;                          		// 0x0814 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     MaxElectricShockImpulse;                          		// 0x0820 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              ElectricShockDuration;                            		// 0x082C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              JumpOffPawnTime;                                  		// 0x0830 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                JumpOffPawnCount;                                 		// 0x0834 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxJumpOffPawnCountForDamage;                     		// 0x0838 (0x0004) [0x0000000000000000]              
	class ALadderVolume*                               JumpOffVolume;                                    		// 0x083C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                KillAssistMinDmg;                                 		// 0x0840 (0x0004) [0x0000000000000000]              
	struct FSKillAssist                                KillAssistArray[ 0x4 ];                           		// 0x0844 (0x0060) [0x0000000000000000]              
	TArray< struct FWeaponItemIDSet >                  CachedCurrentWeaponItems;                         		// 0x08A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSAimingInfo                                AimingInfo;                                       		// 0x08B0 (0x001C) [0x0000000000000000]              
	float                                              fLastUpdateAimInfo;                               		// 0x08CC (0x0004) [0x0000000000000000]              
	float                                              DamagedTime;                                      		// 0x08D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaimTime;                                         		// 0x08D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastUpdateBlockSightArea;                         		// 0x08D8 (0x0004) [0x0000000000000000]              
	float                                              LastUpdateBlurSightArea;                          		// 0x08DC (0x0004) [0x0000000000000000]              
	TArray< struct FsDOT >                             SteadyDOTs;                                       		// 0x08E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsDOT >                             ActiveDOTs;                                       		// 0x08EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ProjectileDOTExpireTime;                          		// 0x08F8 (0x0004) [0x0000000000000000]              
	float                                              fSpeedNow;                                        		// 0x08FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RemoteViewPitchBlendSpeed;                        		// 0x0900 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BlendedRemoteViewPitch;                           		// 0x0904 (0x0004) [0x0000000000000000]              
	struct FVector                                     SFSavedLocation;                                  		// 0x0908 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    SFSavedRotation;                                  		// 0x0914 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	int                                                SavedZoomState;                                   		// 0x0920 (0x0004) [0x0000000000000000]              
	int                                                CachedHitType;                                    		// 0x0924 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ImpactLocation[ 0x20 ];                           		// 0x0928 (0x0180) [0x0000000000000020]              ( CPF_Net )
	class USFPawnFX*                                   SFPawnFX;                                         		// 0x0AA8 (0x0004) [0x0000000000000000]              
	struct FString                                     SFPawnFXClassName;                                		// 0x0AAC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              HEStartPhysicsWeight;                             		// 0x0AB8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HEMomentumMultiplier;                             		// 0x0ABC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HEBlendOutTime;                                   		// 0x0AC0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             HEFixedBones;                                     		// 0x0AC4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       BoneNameToDisplayDelta;                           		// 0x0AD0 (0x0008) [0x0000000000000000]              
	float                                              ModifyIndirectLightIntense;                       		// 0x0AD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModifyIndirectLightIntenseDuration;               		// 0x0ADC (0x0004) [0x0000000000000000]              
	float                                              ModifyIndirectLightIntenseSinPeriod;              		// 0x0AE0 (0x0004) [0x0000000000000000]              
	float                                              IndirectLightIntenseWhenHit;                      		// 0x0AE4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              IndirectLightIntenseWhenHitDuration;              		// 0x0AE8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnProtectionIndirectLightIntense;              		// 0x0AEC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnProtectionIndirectLightSinPeriod;            		// 0x0AF0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AppliedStoppingPower;                             		// 0x0AF4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              AppliedStoppingPowerDuration;                     		// 0x0AF8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              AppliedAccelRatePctWhenStoppingPowerDuration;     		// 0x0AFC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	TArray< struct FName >                             BoneNameToStoppingPower;                          		// 0x0B00 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              LastHitTime;                                      		// 0x0B0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentWeaponSet;                                 		// 0x0B10 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ASFPlayerReplicationInfo*                    CachedPRI;                                        		// 0x0B14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CodeNameOffset;                                   		// 0x0B18 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdPersonCameraScale;                           		// 0x0B24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdPersonCameraScaleAtMatchIsOver;              		// 0x0B28 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThirdPersonCameraScaleInterpSpeed;                		// 0x0B2C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFDroppedPickup*                            CurrentValidDroppedPickUp;                        		// 0x0B30 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFProj_Arrow*                               NailProj;                                         		// 0x0B34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FallingDownDamagePct;                             		// 0x0B38 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     DyingLocation;                                    		// 0x0B3C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DyingMomentum;                                    		// 0x0B48 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DyingRotation;                                    		// 0x0B54 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       DyingAnimationName;                               		// 0x0B60 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              DyingTime;                                        		// 0x0B68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecordingPeriod;                                  		// 0x0B6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PerioicRecordingDeltaTime;                        		// 0x0B70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMeshComponent* >                    TempAttaedMeshes;                                 		// 0x0B74 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              FBReduceWhiteOutRatio;                            		// 0x0B80 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FBReduceAlphaRatio;                               		// 0x0B84 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DistanceFromLocalView;                            		// 0x0B88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DotFromLocalView;                                 		// 0x0B8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DotToLocalView;                                   		// 0x0B90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFWeapon*                                   OldWeapon;                                        		// 0x0B94 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      DefaultAnimSetWeaponClass;                        		// 0x0B98 (0x0004) [0x0000000000000000]              
	int                                                PawnItemIDTable[ 0xD ];                           		// 0x0B9C (0x0034) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                PlayerID;                                         		// 0x0BD0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< int >                                      PawnItemList;                                     		// 0x0BD4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PendingHandItemList;                              		// 0x0BE0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AutoMessageHearingDistance;                       		// 0x0BEC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFPhysicalMaterialProperty*                 LastFootStepPhysicalMaterialProperty;             		// 0x0BF0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             NotifyFallDeadBodyBones;                          		// 0x0BF4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DiedTime;                                         		// 0x0C00 (0x0004) [0x0000000000000000]              
	float                                              HelmetDropTime;                                   		// 0x0C04 (0x0004) [0x0000000000000000]              
	int                                                BodyLevelMarkMaterialIndex;                       		// 0x0C08 (0x0004) [0x0000000000000000]              
	int                                                BodyLevelClanMaterialIndex;                       		// 0x0C0C (0x0004) [0x0000000000000000]              
	int                                                HelmetLevelMarkMaterialIndex;                     		// 0x0C10 (0x0004) [0x0000000000000000]              
	float                                              ChangedGroundSpeedRate;                           		// 0x0C14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StunRemainingTime;                                		// 0x0C18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StunLookInputSpeed;                               		// 0x0C1C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StunDurationTime;                                 		// 0x0C20 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                StunInputCounterToReduceOneSec;                   		// 0x0C24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       HeadPointSocketName;                              		// 0x0C28 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlLimb*                            IKCtrl_RightHand;                                 		// 0x0C30 (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	class USkelControlLimb*                            IKCtrl_LeftHand;                                  		// 0x0C34 (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	class USkelControlLimb*                            IKBoneCtrl_RightHand;                             		// 0x0C38 (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	class USkelControlLimb*                            IKBoneCtrl_LeftHand;                              		// 0x0C3C (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	class USkelControlSingleBone*                      IKRotCtrl_RightHand;                              		// 0x0C40 (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	class USkelControlSingleBone*                      IKRotCtrl_LeftHand;                               		// 0x0C44 (0x0004) [0x0000000004022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_EditInline )
	TArray< class AActor* >                            EnteredBarricades;                                		// 0x0C48 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRequestDamageInfo >                arrRequestDamage;                                 		// 0x0C54 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              WeaponBaseDamage;                                 		// 0x0C60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceLocationPeriod;                              		// 0x0C64 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ForceLocationTime;                                		// 0x0C68 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FString >                           DefaultProvideWeaponNames;                        		// 0x0C6C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ReduceDamageAmountRatio;                          		// 0x0C78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LinkedPhysicResourceIndex;                        		// 0x0C7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeStampEnteredRevivingState;                    		// 0x0C80 (0x0004) [0x0000000000000000]              
	TArray< struct FsIgnoreDamageTypeList >            IgnoreDamageTypeList;                             		// 0x0C84 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                KamikazeKillCount;                                		// 0x0C90 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BuffActivatedTime[ 0x12 ];                        		// 0x0C94 (0x0048) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                BuffListChangeCount;                              		// 0x0CDC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              PrevBuffActivatedTime[ 0x12 ];                    		// 0x0CE0 (0x0048) [0x0000000000002000]              ( CPF_Transient )
	float                                              LocalBuffActivatedTime[ 0x12 ];                   		// 0x0D28 (0x0048) [0x0000000000002000]              ( CPF_Transient )
	float                                              BuffTimeList[ 0x12 ];                             		// 0x0D70 (0x0048) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageRatio;                                      		// 0x0DB8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPawnOutlineInfo >                  arrPawnOutlineInfo;                               		// 0x0DBC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFAnimBlendBase*                            UsingVehicle;                                     		// 0x0DC8 (0x0004) [0x0000000000000000]              
	float                                              DefaultGroundFriction;                            		// 0x0DCC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EmotionAnimName;                                  		// 0x0DD0 (0x0008) [0x0000000000000000]              
	TArray< struct FEventServePart >                   EventServeParts;                                  		// 0x0DD8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ExtendDamageDepictionColor;                       		// 0x0DE4 (0x0004) [0x0000000000000000]              
	float                                              ExtendDamageDepictionMesh;                        		// 0x0DE8 (0x0004) [0x0000000000000000]              
	struct FVector                                     OriginalTrans;                                    		// 0x0DEC (0x000C) [0x0000000000000000]              
	TArray< int >                                      PurchacedWeaponIDsAtInGameStore;                  		// 0x0DF8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              SearchDelay;                                      		// 0x0E04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastSearchedTime;                                 		// 0x0E08 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastDiscoveredTime;                               		// 0x0E0C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   ClanMarkMaterial;                                 		// 0x0E10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         SprayMaterialList;                                		// 0x0E14 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     RadioMsgClassName[ 0x4 ];                         		// 0x0E20 (0x0030) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      RadioMessageClass[ 0x4 ];                         		// 0x0E50 (0x0010) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     KillVoiceClassName;                               		// 0x0E60 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      KillVoiceClass;                                   		// 0x0E6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFWeapon* >                         GivenWeaponList;                                  		// 0x0E70 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              BloodStrewRadius;                                 		// 0x0E7C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USkeletalMesh*                               Override1stMesh;                                  		// 0x0E80 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               Override3rdMesh;                                  		// 0x0E84 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicsAsset*                               OverridePhysicsAsset;                             		// 0x0E88 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFExtraBodyPartsManager*                    ExtraBodyParts;                                   		// 0x0E8C (0x0004) [0x0000000000000000]              
	int                                                DroppedExtraParts[ 0x3 ];                         		// 0x0E90 (0x000C) [0x0000000000000020]              ( CPF_Net )
	int                                                LastDroppedExtraPart;                             		// 0x0E9C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                DirtyDroppedExtraPart;                            		// 0x0EA0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     SpawnEffectTypeName;                              		// 0x0EA4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ControllerDetachDelayTime;                        		// 0x0EB0 (0x0004) [0x0000000000000000]              
	float                                              InsightCheckDistance;                             		// 0x0EB4 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            DefaultItemClasses;                               		// 0x0EB8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   WeaponDischargingSound;                           		// 0x0EC4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3841 ];

		return pClassPointer;
	};

	void AttachEquipmentEffect ( );
	bool GetIntersect2DPoint ( struct FVector2D AP1, struct FVector2D AP2, struct FVector2D BP1, struct FVector2D BP2, struct FVector2D* IP );
	bool GetPawnIntersect2DPoint ( struct FsLine2D LineA, struct FsLine2D LineB, struct FVector2D* Cross2D, float* newdist );
	void ForceKidnapingJump ( struct FVector TargetLoc, float KidnapingPower );
	void UpdatedPickedUpPowerItem ( class UClass* PowerUpClass );
	bool IsDisableSocketNames ( struct FName SocketName );
	bool SkipGunTracer ( );
	void ApplyAGLLevelStat ( struct FsPawnTuneInfo PawnTuneInfo );
	void ApplyDEFLevelStat ( struct FsPawnTuneInfo PawnTuneInfo );
	void OnMovePointChanged ( );
	void OnDefencePointChanged ( );
	void OnAttackPointChanged ( );
	class ASFPlayerReplicationInfo* GetCachedPRI ( );
	void DestroyExtraBodyParts ( );
	void eventSetExtraPartsCollisionHide ( unsigned long bHide );
	void SyncDroppedExtraParts ( int ElementIndex );
	void SetDroppedPartsFlag ( int PartID );
	bool IsDroppedExtraParts ( class UClass* PartsClass );
	void eventCheckHitExtraParts ( struct FName BoneName, int* newDamage );
	void UpdateExtraParts ( class USkeletalMeshComponent* newTargetMesh );
	void AddExtraParts ( class UClass* NewParts );
	void UpdateDroppedExtraPart ( int partIdx, unsigned long bFromClient );
	bool CoveredSocketbyExtraParts ( struct FName TestSocketName, int partIdx );
	void ClearExtraParts ( );
	void InitExtraParts ( );
	class USFExtraBodyPartsManager* GetExtraBodyPartsManager ( );
	void eventProcessDotList ( float fdelta );
	void eventCheckSteadyDotExpired ( float DeltaTime );
	void AddDotDamageType ( unsigned long bEnter, class AController* Inst, class AActor* Causer, class UClass* newDamageType, float newRestTime, float BaseDamage );
	void EnterBlurSightArea ( unsigned long bEnter );
	void EnterBlockSightArea ( unsigned long bEnter );
	void EnterEffectiveProjectileArea ( class ASFProj_HG_Gas* DamageInst );
	bool IsSightBlockedBySmoke ( struct FVector ViewLocation, class ASFPawn* TargetPawn );
	struct FString GetSpawnEffectTypeName ( );
	float GetReduceRespawnDelayRatio ( );
	void SetHumanPawnMeshComponent ( );
	void AsyncPawnMeshComponentSetting ( );
	void OnMeshGroupInfoSetted ( TArray< struct FMeshGroup > OwnerMeshGroups, class UTexture2D* CamoTexture, class UMorphTargetSet* FaceMorphSet );
	void PostAsyncPawnMeshSetup ( );
	void OnSetPlayerID ( int NewPlayerID );
	int GetHealthMax ( );
	void SummaryCombatReport ( );
	void AppendCombatReport ( unsigned char CombatReportType, class ASFPlayerReplicationInfo* AttackerPRI, class ASFPlayerReplicationInfo* VictimPRI, int Damage, int WeaponID );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void OnSetBOSS ( class USFSeqAct_SetBOSS* inAction );
	bool EnableStoppingPower ( );
	void ClientSetVelocity ( struct FVector NewVelocity );
	bool HasValideWeapon ( class UClass* WeaponClass );
	class AWeapon* HasWeapon ( class UClass* WeaponClass );
	void IsInsightPawn ( class APawn* Target, float fAggroRatio, unsigned char* bInsight, unsigned char* bEngage );
	class UClass* GetRadioMessageClass ( unsigned char RadioMessageType );
	struct FRotator eventGetFireRotation ( );
	void ServerSetDiscovered ( class ASFPawn* TargetPawn, unsigned long bDiscoveredNow );
	bool IsDiscovered ( class AActor* Target );
	void eventUpdateLastDiscoveredPawn ( );
	void CheckExtendDamageDepiction ( class AActor* Atacker, class UClass* AttackDamageType );
	void eventUpdateMeshTranslation ( struct FVector newTrans );
	void UpdateExtendDamageDepiction ( float fdelta );
	struct FName GetHitBoneNameforDEDIserver ( struct FVector HitLocation );
	void gibbedBy ( class AActor* Other );
	bool JumpOffExecutionCheck ( class APawn* WithPawn );
	void CrushedBy ( class APawn* OtherPawn );
	void JumpOffPawn ( );
	void UpdatEnemyOutLine ( );
	void eventRemovePawnOutlineInfo ( unsigned char Type );
	void AddPawnOutlineInfo ( struct FPawnOutlineInfo* NewOutlineInfo );
	void AddPawnOutlineParam ( unsigned char PawnOutlineType, float OverlapDistance, float Intense, unsigned char ColorIndex, float OutlineWidth );
	void UpdateDrawOutline ( );
	void ClearPawnOutlineInfo ( );
	void ForceDeActivateSkill ( );
	float GetAppliedBuffBonusValue ( unsigned char BonusType );
	void OnBuffEffectFinished ( unsigned char BuffType );
	void UpdateBuffEffect ( unsigned char BuffType, unsigned char BuffState );
	bool IsBuffStateChanged ( unsigned char BuffType );
	void OnBuffStateChanged ( );
	bool IsEffectibleBuff ( unsigned char BuffType );
	void DeactiveAllBuff ( unsigned long bForce );
	float GetBuffRemaingingTime ( unsigned char BuffType );
	void eventUpdateBuffDuration ( float DeltaTime );
	bool IsBuffActivated ( unsigned char BuffType, unsigned long bIncludeEffectOnly );
	bool eventDiscardBuff ( unsigned char BuffType, unsigned long bIgnoreNotify );
	bool TakeBuff ( unsigned char BuffType, unsigned long bEffectOnly, float Value, float Duration );
	void ClientSetBuffDurationTime ( unsigned char BuffType, float Duration );
	void SetBuffState ( unsigned char BuffType, unsigned char BuffState, unsigned long bIgnoreNotify, float Value, float Duration );
	bool CanUseProvideWeapon ( );
	bool IsSteadyWeaponRun ( );
	bool IsCriticalBodyPart ( unsigned char BodyPart );
	class UClass* GetThirdPersonCameraModeClass ( );
	void FillAmmoMAX ( );
	float GetSprintSpeed ( );
	void SetHealthMaxbyPercent ( float Percent );
	void RecoveryHPMAX ( );
	bool IsEnableBackSlash ( );
	void ActivateShockWave ( );
	bool CheckCriticalShot ( struct FName BoneName, class UClass* DamageType );
	bool CheckHeadShot ( struct FName BoneName, class UClass* DamageType );
	bool IsForceCriticalHeadshot ( );
	float GetDBNOLimit ( );
	unsigned char GetDBNOLevel ( );
	void PlaySpraySound ( );
	struct FString eventGetHUDCodeNameAddIconString ( );
	int eventGetHealthPercentageINT ( );
	bool DBNONoDeathAnim ( );
	void ReplicatedHealth ( );
	void SetMovementPhysics ( );
	struct FVector GetAimTargettingLocation ( );
	void SetGaugeValue ( float UsingRate, float GaugeVelocity );
	void SetGaugeRatio ( float newRatio );
	bool GetJustLanded ( );
	void SetJustLanded ( unsigned long bSet );
	void SetLightEnvironmentToHandActor ( );
	void AttachWeaponforPlayer ( class ASFWeapon* WeaponToAttach );
	void NotifyArmMeshChanged ( class ASFPlayerReplicationInfo* SFPRI, class USkeletalMesh* HandMesh );
	void UpdateHandActorMesh ( );
	void DestroyHandActor ( );
	void RecomputeSlowDownPct ( );
	void eventOnQuitBarricadeZone ( class AActor* Barricade );
	void eventOnEnterBarricadeZone ( class AActor* Barricade );
	void EndManningTurret ( );
	void ForceClientStopDriving ( class AVehicle* V );
	void StartManningTurret ( );
	void SetVehicleAnim ( unsigned long bDrive );
	void PostExitVehicle ( class AWeapon* SavedWeapon );
	float PrepareEnterVehicle ( class AWeapon** SavedWeapon );
	void eventStartDriving ( class AVehicle* V );
	void OnSetPawnGroundSpeed ( class USFSeqAct_SetPawnGroundSpeed* Action );
	class ASFPawn* GetVisibleNearestPawn ( class AActor* Tracer, float Distance, int TeamNum, unsigned long bGetSame );
	bool IsVoicePlayAvailable ( class UClass* RadioMessage );
	void PlayVoice ( class UClass* InMessageClass, int MessageIndex );
	void DroppedPickDestroyed ( class ASFDroppedPickup* DroppedItem );
	void SetWorldCubeMap ( );
	void AttachHeadParts ( );
	void SetPawnMeshPhysics ( );
	void SetHelmetHairMesh ( );
	bool FaceIsMask ( TArray< struct FMeshGroup > BodyMeshGroups );
	void SetPawnMeshComponent ( );
	bool IsDefaultMesh ( );
	void SetItemProperties ( );
	bool IsPlayingIdleMotion ( );
	void RemoveIdleMotion ( struct FName AnimName );
	void AddIdleMotion ( float MinTime, float MaxTime, struct FName AnimName );
	void ReplacePawnMeshByFGC ( );
	void SetClanMarkTexture ( );
	void SetLevelMarkTexture ( );
	void UpdateTouchingOutLineVolume ( );
	void CompleteAsyncLoadDefaultItems ( );
	void AsyncLoadDefaultItems ( class UObject* LoadedObject );
	void PostComposePawnMesh ( );
	void ComposePawnMesh ( );
	bool IsHumanPawn ( );
	void LoadPawnParts ( );
	void ParsePawnMeshInfoString ( );
	void eventEndCrouch ( float HeightAdjust );
	void eventStartCrouch ( float HeightAdjust );
	void ClearInventory ( );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void SetDefaultInventory ( int nInvenGroup, int nSlot );
	bool CanLensSplash ( );
	void UpdateSplashTime ( );
	bool CanSplash ( );
	class ASFWeapon* GetSFWeapon ( );
	bool IsZoomed ( );
	void DrawAimInfo ( class AHUD* H );
	struct FString MakeAIDebugString ( class ASFPawn* TestPawn );
	void DisplayAIInfo ( class AHUD* HUD, float FontHeight );
	void DisplayLODInfo ( class AHUD* HUD, float FontHeight );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DrawHeadPoint ( float HeadPointDist );
	void DrawOtherPawnsHeadPoint ( );
	void ShowBoneDelta ( struct FName InBoneNameToDisplay );
	void DisplayWeight ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayBoneTranslation ( class AHUD* HUD, class USkeletalMeshComponent* TargetMesh, struct FName BoneNameToDisplay, float* out_YL, float* out_YPos );
	void DisplayAnimTree ( class USkeletalMeshComponent* Component, class AHUD* HUD, float* out_YL, float* out_YPos );
	void DisplayAnimNode ( class UAnimNode* AnimNode, class AHUD* HUD, int Depth, int ChildIdx, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void UpdateGodModeChanged ( );
	void ToggleGodMode ( );
	void StartFire ( unsigned char FireModeNum );
	void SetNotifyFiring ( unsigned long bStart );
	void ClearShotCount ( );
	float IsfrontMoving ( );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void SetCurrentWeapon ( class ASFWeapon* NewWeapon );
	void SwitchWeapon ( unsigned char NewGroup );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	void MagazineCharge ( int Count );
	void AmmoCharge ( float Percent );
	void HPCharge ( int Percent );
	void SetMeshTranslationOffset ( struct FVector NewOffset, struct FVector BaseTranslationOffset, unsigned long bForce );
	bool IsRelevantFor ( class APlayerController* RealViewer, class AActor* Viewer, struct FVector SrcLocation );
	bool OutDBNO ( class ASFPawn* Reviver, unsigned long bForWaveEnd );
	bool EnterDBNO ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool IsDBNO ( );
	struct FVector GetLocalTransformVector ( struct FVector vWorld );
	bool IsGodMode ( );
	void ForceZoomOut ( unsigned long bOnlyHandActor );
	void SetSprintIgnore ( unsigned long bSet );
	void ZoomStateChanged ( int nZoomNew );
	void PlayRadialAutoMessage ( struct FName AutoMessageName );
	void WeaponStateChanged ( unsigned char WeaponStateNew, unsigned long bRedundance, class ASFWeapon* eventCaller );
	bool IsSlowMoving ( );
	void SetZoomedThird ( int ZState );
	bool IsSprintPossible ( unsigned long bNewIsSprinting );
	bool ForceForward ( );
	void eventSetSprinting ( unsigned long bNewIsSprinting );
	void ZeroMovementVariables ( );
	void InitPRIInfos ( );
	void UpdateSpawnProtection ( );
	void SpawnProjectionDisabled ( );
	bool GetEventPartTypes ( int EventType, TArray< struct FEventServePart >* ServeParts );
	void SetCharacterEventItems ( int EventType );
	void SetPawnMeshInfoString ( );
	void SetSoundEffectName ( struct FString ResourceName );
	void eventInitVoiceResource ( );
	void SetSFPawnFXClass ( class UClass* PawnFXClass );
	void LoadPawnFXComplete ( class UObject* LoadedObject, struct FString RequestedObjectName, class AActor* Caller );
	void PostBeginPlay ( );
	void ReSettingLightEnvirontment ( );
	void DelayReload ( );
	void Reload ( );
	void DetachWeapon ( class ASFWeapon* WeaponToDetach );
	void AttachWeapon ( class ASFWeapon* WeaponToAttach, unsigned long bViaReplication );
	void SetPendingItems ( TArray< int > NewItems, TArray< int >* PendingItems );
	bool CheckPendingHandItems ( TArray< int > NewItems );
	bool NeedToTurn ( struct FVector targ );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void NotifySetupController ( );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity );
	void ThrowActiveWeapon ( );
	struct FRotator eventGetViewRotation ( );
	bool IsNeedToHandHide ( );
	bool IsRecentlyRendered ( );
	bool IsFirstPerson ( );
	void StopFullBodyAnimation ( float BlendOutTime );
	float PlayFullBodyAnimation ( struct FName NewAnimName, float fRate, float BlendInTime, float BlendOutTime, unsigned long bCauseActorAnimEnd, unsigned long bLooping );
	void ClearBoneBlendOut ( );
	float PlayUpperBodyAnim ( struct FName NewAnimName, float BlendInTime, float BlendOutTime, float Duration, unsigned long bLooping, unsigned long bOverride );
	void OnAddMoney ( class USFSeqAct_AddMoney* inAction );
	void OnAddHealth ( class USFSeqAct_AddHealth* inAction );
	void OnCameraShake ( class USeqAct_CameraShake* inAction );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	void PlayPawnActionAnim ( unsigned char WeaponState, unsigned char HitType, unsigned char FallDir );
	struct FName GetTakeHitAnimName ( unsigned char HitType, unsigned char FallDir );
	bool AllowedMagazineDrop ( unsigned char WeaponState );
	void PlayMagazineDrop ( );
	void PlayPawnActionAutoVoice ( unsigned char WeaponState );
	void WeaponChanged ( class ASFWeapon* NewWeapon );
	void SetFlashLocation ( class AWeapon* Who, unsigned char FireModeNum, struct FVector NewLoc );
	void InvalidateImpactLocation ( int ElementIndex );
	void SetImpactLocation ( struct FVector HitLocation, struct FVector HitNormal, struct FVector RayDir, class AActor* HitActor, struct FTraceHitInfo HitInfo, int Index, unsigned long bEnd, class ASFWeapon* myWeapon, int AdditionalDecalAngle );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void SetPuttingDownWeapon ( unsigned long bNowPuttingDownWeapon, unsigned long bViaReplication, unsigned long bIsExtension );
	void PlayDyingSound ( );
	void eventPlayPawnLanded ( );
	int TakeFallingDamage ( );
	void PostLanded ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	int CalcFallingDamage ( );
	void FreezeJump ( float Duration );
	void UnfreezeJump ( );
	void DodgeSpecial ( struct FVector* NewVelocity );
	bool DoJump ( unsigned long bUpdating );
	bool CalcThirdPersonCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	struct FVector GetThirdPersonCamStart ( );
	void SetFreeCamera ( );
	void SetThirdPersonCamera ( unsigned long bNewBehindView, unsigned long bForSpectator, unsigned long bForce );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	struct FRotator eventGetBaseAimRotation ( );
	void eventPostAIFactorySpawned ( class USFSeqAct_AIFactory* SpawningFactory, int SpawnSetIdx );
	void eventAI_AddDefaultInventory ( );
	void AddDefaultInventory ( );
	void MakeInventoryArray ( unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* DefaultInventory );
	bool eventIsAlienPawn ( );
	bool eventUseAimInfo ( );
	void DetachFromController ( unsigned long bDestroyController );
	void eventDestroyed ( );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventSetInitialState ( );
	void eventNotifyFallDeadBody ( );
	unsigned char GetPawnFallDirection ( struct FVector Momentum, unsigned long bFrontBackOnly );
	int GetCurrentWeaponSetForLog ( );
	void SetLogInitialize ( );
	void UpdateIgnoreInput ( );
	void ClientInit ( );
	void eventPlayLandingSound ( );
	void eventPlayFootStepSound ( int FootDown, unsigned long bFirstPerson );
	bool GiveHealth ( int HealAmount, int HealMax );
	void ClientRestart ( );
	void FixedView ( struct FString VisibleMeshes );
	void SetMeshVisibility ( unsigned long bVisible );
	void eventEndViewTarget ( class APlayerController* PC );
	void RefreshForSpectator ( );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void NotifyCameraModeChanged ( class ASFPlayerController* InPC );
	void ChangeViewMode ( unsigned long bIsFirstPerson );
	struct FVector GetPawnViewLocation ( );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void ClimbLadder ( class ALadderVolume* L );
	float GetEyeHeight ( );
	bool RecommendLongRangedAttack ( );
	unsigned char ChooseFireMode ( );
	bool StopFiring ( );
	void eventEncroachedBy ( class AActor* Other );
	void TurnOff ( );
	void SetWeapAimProfile ( unsigned char AimProfile );
	void InitFaceMorphTarget ( );
	void SetFaceMorphTarget ( unsigned long bActive, unsigned char MorphType );
	void SetLookAtControl ( unsigned long bEnable );
	void SetAllSkelControllersEnable ( unsigned long bEnable );
	void SetSkelRotCtrlStrength ( unsigned long bEnable );
	void SetFootIKEnabled ( unsigned long bEnabled );
	void WeaponAttachmentReAttached ( );
	void ThirdAnimSetChange ( class UAnimSet* ThirdPawnAnimSet, class UAnimSet* ThirdPawnWPProfileAnim, class UAnimSet* ThirdWeapAnimSet );
	void SetThirdPawnAnimSet ( unsigned char Index, class UAnimSet* NewAnimSet );
	class UAnimSet* GetThirdPawnAnimSet ( unsigned char Index );
	void WeaponAttachmentChanged ( unsigned long bViaReplication, unsigned long bForce );
	void ResetCharPhysState ( );
	void UpdateIFFParticle ( );
	void EnableLookAt ( unsigned long bEnable );
	void ChangeTranslucentMaterial ( class USkeletalMeshComponent* InComponent );
	void PostUpdateCharMesh ( );
	void SetSkeletalMeshes ( class USkeletalMeshComponent* CharMesh, class USkeletalMeshComponent* HeadMesh, class USkeletalMeshComponent* HandMesh, TArray< int >* ItemList, class USkeletalMesh** HairMesh );
	void NotifyTeamChanged ( );
	void ApplyFunctionalItems ( TArray< int > ItemArray, unsigned long bOption );
	void ForceKill ( );
	void UnPossessed ( );
	struct FName GetBoneNameByBodyPart ( unsigned char bodyParts, unsigned long RandomSelect );
	unsigned char GetBodyPartByBoneName ( struct FName BoneName, struct FVector Line, struct FVector Origin, float fHeadPointDist );
	bool IsInvisible ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector FireOffset );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	bool IsAttachedWeapon ( class ASFWeapon* NewWeapon );
	void ChangedWeaponByReplication ( class ASFWeapon* NewWeapon );
	class ACombatZone* GetCombatZoneForPoint ( struct FVector Point );
	class ACombatZone* GetCombatZoneForNav ( class ANavigationPoint* Nav );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void UpdateDamageLog ( class ASFPlayerReplicationInfo* AssaultPRI, class ASFPlayerReplicationInfo* VictimPRI );
	void eventReplicatedEventEx ( struct FName VarName, int ElementIndex );
	void eventReplicatedEvent ( struct FName VarName );
	void ReattachHelmet ( );
	void SetHairMesh ( );
	void HelmetDropped ( unsigned long bOnlyHideHelmet );
	void HelmetExplosion ( );
	void SetHelmetDrop ( );
	void UpdateClanPointIncrease ( );
	void UpdateLuckyPointProbability ( );
	void UpadteGearOption ( );
	void UpdateHealth ( );
	void UpdateJump ( );
	void SetGroundSpeedByRate ( float fRate );
	void SetGroundSpeedByWeight ( float Weight );
	void eventSetStun ( unsigned long bFlag );
	void InvalidateStun ( );
	void InvalidateShockDamage ( int InShockDamage );
	void TakeShock ( int InShockDamage );
	class ASFPlayerReplicationInfo* GetKillAssistUser ( int KillerPlayerID, int* LadderDiff, int* WeaponID, class UClass** DamageType );
	void SetKillAssistInfo ( class ASFPlayerReplicationInfo* AttackerPRI, class UClass* DamageType, int RealDamage, int OtherLadderPoint, int WeaponID );
	void PlayRagDollDeathPhysicsModify ( );
	void eventDeathAnimRagDoll ( );
	void PlayPurelyRagdollDeath ( );
	void PlayDeathAnimation ( class UClass* DamageType, unsigned long bBlendToMotors );
	struct FName GetEmotionAnimName ( unsigned char EmotionType, unsigned long bWin );
	void PlayEmotionAnim ( unsigned char EmotionType, unsigned long bWin );
	void DeathAnimBlendToMotors ( );
	void SetSpringForBone ( struct FName InBoneName, unsigned long bEnable );
	void SetFullySpring ( unsigned long bEnable );
	void PlayRagDollDeath ( unsigned long bApplyImpulse );
	bool IsIgnoreNailHitActor ( class AActor* HitActor );
	void PlayNailDeath ( );
	void KillCamRestore ( class AActor* OriginalActor );
	void SetRagDollProperties ( unsigned long bRestore );
	void ReadyPawnForRagdoll ( );
	unsigned char eventScriptGetTeamNum ( );
	bool IsSameTeam ( class APawn* Other );
	void ElectricShock ( );
	bool CanEnterDBNO ( );
	void ClearExtraDamageType ( );
	void PlayDeath ( );
	bool IsForceRagdollDeath ( );
	bool IsRagdollAllow ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void eventTornOff ( );
	void HandleDying ( class UClass* DamageType, struct FVector HitLoc, unsigned long bUseKillCam );
	void NotifyKill ( class ASFPawn* Victim );
	void StopWeaponDischargingSound ( );
	void SetDyingPhysics ( );
	void NotifyInstantKill ( int KillType );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventScriptedDeath ( );
	void ChangeDyingWeapon ( class ASFInventoryManager* SFInv, class UClass* dmgType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, unsigned long bIgnoreDeathScore );
	bool CanDropWeaponOnDeath ( );
	class ASFWeapon* GetWeaponByIndicis ( unsigned char InInvenGroup, unsigned char InSlot );
	int GetActualDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, struct FVector* Momentum );
	int GetHealthByArmorPoint ( int Damage, struct FName HitBoneName, class UClass* DamageType, class ASFWeapon* Weap, struct FVector TraceDir, float HeadPointDist, int* ArmorDamage );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void RegistIgnoreDamageType ( class UClass* DamageType );
	bool IsIgnoreDamage ( class UClass* DamageType, int* Idx );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void SetKnockBack ( float KnockBackPower, struct FVector DamageCauserLocation );
	void ProcessKnockBack ( class AActor* DamageCauser );
	float GetKnockBackPower ( class AActor* DamageCauser );
	void AdjustStoppingPower ( class ASFWeapon* DamageCauseWeapon, struct FName BoneName );
	bool CanInfluenceKnockBack ( );
	void StunDamageType ( class UClass* DamageType, class AController* EventInstigator );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool IsIgnoreDeathScore ( class AActor* DamageCauser );
	void TakeActualDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayHit ( float Damage, class AController* EventInstigator, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	bool ShouldCheckInvalidAttackerPosition ( );
	bool CheckOverDamage ( int BaseDamage, int* newDamage );
	void ClientDetectedInvalidDamage ( class AWeapon* WeaponCauser, int HitInfoDamage, float BaseDamage );
	void RequestDamage ( class APawn* Target, struct FVector RequestLocation, struct FVector ShotLocation, struct FSFTakeHitInfo TakeHitInfo, class USFPhysicalMaterialProperty* ClientPhysicalMtrlProp, int PenetrateValue, class AActor* DamageCauser, unsigned char InBodyPart, unsigned char InFiringMode, int RecoilCRC );
	void SendReportInvalidPhysicalMtrl ( );
	void eventClientHackDetected ( unsigned char HackType, unsigned long bForceExit );
	void HackDetected ( unsigned char HackType, unsigned long bForceExit, struct FString HackInfo );
	void eventInvalidPacketDetected ( unsigned long bForceExit );
	void PlayTakeDamageShake ( int DamageAmount, unsigned char BodyPart, class AActor* DamageCauser, class UClass* DamageType );
	bool GetWeaponItemCacheFromPawn ( int InWeaponID, TArray< int >* OutWeaponItemsID );
	void SetWeaponItemCacheToPawn ( unsigned char InSlotIndex, int InWeaponID, TArray< int > InWeaponItemsID );
	void ClearMaim ( );
	void ClearDamaged ( );
	void SetMaim ( class ASFPawn* DamageCauser );
	void SetDamaged ( );
	void PlayTakeHitEffects ( unsigned long bViaReplication, class AController* InstigatedBy );
	void UpdateHitInfoLog ( class ASFPlayerController* LocalPC, unsigned char bodyParts );
	class ASFPlayerReplicationInfo* GetPlayerReplicationInfo ( );
	void SetLastTakeHitInfo ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int InHitType, struct FName HitBone, class AActor* DamageCauser, unsigned char bodyParts, unsigned long bActualDamage );
	void UpdateRequestDamage ( );
	int TakeDamageForLocalPawn ( int Damage, class AController* InstigatedBy, struct FVector ShotLocation, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int InHitType, unsigned long bTargetIsAliveAndWell, unsigned char bodyParts, unsigned char InFiringMode );
	float GetSocketDistToLine ( struct FName SocketName, struct FVector Line, struct FVector Origin );
	void RemoveTempChildActor ( class AActor* InChild );
	void AddTempChildActor ( class AActor* InChild );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventDistortionEnd ( );
	void eventFlashBangEffectEnded ( );
	void UpdatePostEffect ( int inPostEffectRefInfo );
	void FBSceneCapture ( );
	void AddPostEffect ( float AdjustTime, unsigned char Direction, struct FString PostEffectClassName );
	float GetCurrentFlashbangEffectPower ( float* Alpha, float* WhiteOut );
	void HitEffectByPhysics ( struct FName BoneName, struct FVector HitLocation, struct FVector Momentum );
	void SendAppReport ( struct FString Report );
	unsigned char GetIconState ( );
	void ChangeIconState ( unsigned char State );
	void UpdateWalkableFloorZ ( );
	bool IsValidAngle ( class APawn* Other );
};

UClass* ASFPawn::pClassPointer = NULL;

// Class SFGame.SFPawn_Player
// 0x0194 (0x105C - 0x0EC8)
class ASFPawn_Player : public ASFPawn
{
public:
	class UClass*                                      HandActorClass;                                   		// 0x0EC8 (0x0004) [0x0000000000000000]              
	class ASFHandActor*                                HandActor;                                        		// 0x0ECC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFSkeletalMeshComponent*                    ArmsMesh;                                         		// 0x0ED0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USFSkeletalMeshComponent*                    WeaponHolderMesh;                                 		// 0x0ED4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bUpdateEyeHeight : 1;                             		// 0x0ED8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bJustLanded : 1;                                  		// 0x0ED8 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bLandRecovery : 1;                                		// 0x0ED8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      DoingExigencyAttack : 1;                          		// 0x0ED8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      RecoilUpDown : 1;                                 		// 0x0ED8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsInTranslucentView : 1;                         		// 0x0ED8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bRecoilMovingValueFromVelocity : 1;               		// 0x0ED8 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseRetargeting : 1;                              		// 0x0ED8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      IsFeverTimeAction : 1;                            		// 0x0ED8 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              LandEyeHeightDamping;                             		// 0x0EDC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobValue;                                         		// 0x0EE0 (0x0004) [0x0000000000000000]              
	float                                              LandBob;                                          		// 0x0EE4 (0x0004) [0x0000000000000000]              
	float                                              JumpBob;                                          		// 0x0EE8 (0x0004) [0x0000000000000000]              
	float                                              AppliedBob;                                       		// 0x0EEC (0x0004) [0x0000000000000000]              
	float                                              bobtime;                                          		// 0x0EF0 (0x0004) [0x0000000000000000]              
	struct FVector                                     WalkBob;                                          		// 0x0EF4 (0x000C) [0x0000000000000000]              
	struct FVector                                     IdleBob;                                          		// 0x0F00 (0x000C) [0x0000000000000000]              
	struct FVector                                     WeaponBobValue;                                   		// 0x0F0C (0x000C) [0x0000000000000000]              
	float                                              OldWeaponBobValueZ;                               		// 0x0F18 (0x0004) [0x0000000000000000]              
	int                                                BobValueDir;                                      		// 0x0F1C (0x0004) [0x0000000000000000]              
	float                                              fBobSpeed;                                        		// 0x0F20 (0x0004) [0x0000000000000000]              
	int                                                CameraShakeMax;                                   		// 0x0F24 (0x0004) [0x0000000000000000]              
	float                                              CameraShakeRollRatio;                             		// 0x0F28 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraShakeYawRatio;                              		// 0x0F2C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraRestoreRate;                                		// 0x0F30 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraShakeApplyTime;                             		// 0x0F34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USceneCapture2DComponent*                    SceneCaptureForFB;                                		// 0x0F38 (0x0004) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      WeaponClassNow;                                   		// 0x0F3C (0x0004) [0x0000000000000000]              
	class UClass*                                      WeaponClassPrev;                                  		// 0x0F40 (0x0004) [0x0000000000000000]              
	class UClass*                                      WeaponClassExigencyPrev;                          		// 0x0F44 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      OldWeaponSkelComponent;                           		// 0x0F48 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned char                                      IconState;                                        		// 0x0F4C (0x0001) [0x0000000000000000]              
	unsigned char                                      TriggerType;                                      		// 0x0F4D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              GaugeRatio;                                       		// 0x0F50 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              GaugeRatioVelocity;                               		// 0x0F54 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              GaugePassedTime;                                  		// 0x0F58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       LeftArmBandSocketName;                            		// 0x0F5C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RightArmBandSocketName;                           		// 0x0F64 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 LeftArmBandMesh;                                  		// 0x0F6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 RightArmBandMesh;                                 		// 0x0F70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 ClanMarkMesh;                                     		// 0x0F74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        LeftArmBandMeshComponent;                         		// 0x0F78 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        RightArmBandMeshComponent;                        		// 0x0F7C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        ClanMarkMeshComponent;                            		// 0x0F80 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInterface*                          RedArmBandMaterial;                               		// 0x0F84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BlueArmBandMaterial;                              		// 0x0F88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ASFProjectile* >                     GrenadeIndicators;                                		// 0x0F8C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFAutoMessageWeaponType >          AutoMessageWeaponTypeList;                        		// 0x0F98 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FS_RECOIL_RESULT                            RecoilResult;                                     		// 0x0FA4 (0x0044) [0x0000000000000000]              
	float                                              StartFireSecondsForRecoil;                        		// 0x0FE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCrossVertForRecoil;                           		// 0x0FEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpSpeedForRecoilMovingValue;                  		// 0x0FF0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InterpSpeedForRecoilStopValue;                    		// 0x0FF4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    rotRecoil;                                        		// 0x0FF8 (0x000C) [0x0000000000000000]              
	class UParticleSystem*                             ObserverFlashBangEffect;                          		// 0x1004 (0x0004) [0x0000000000000000]              
	class AEmitter*                                    ObserverFlashBangEmitter;                         		// 0x1008 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ObserverFlashBangEffectRelLocation;               		// 0x100C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        ObserverLookAtConeComponent;                      		// 0x1018 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     ObserverLookAtConeRelLocation;                    		// 0x101C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ObserverLookAtConeRelRotation;                    		// 0x1028 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ShakeChanceByBodyParts;                           		// 0x1034 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAddtionalIdleMotion >              AddedIdleMotions;                                 		// 0x1040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SettedIdleMotions;                                		// 0x104C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RetargetingControlName;                           		// 0x1050 (0x0008) [0x0000000000000000]              
	class USFSkelControl_Retargeting*                  RetargetingControl;                               		// 0x1058 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3843 ];

		return pClassPointer;
	};

	void SetFeverTimeAction ( unsigned long IsInteraction );
	bool AutoWeaponMessage ( int Damage, unsigned char WeaponType );
	void EnableMassBoneScaling ( unsigned long bEnable );
	class UClass* GetRadioMessageClass ( unsigned char RadioMessageType );
	bool IsSteadyWeaponRun ( );
	void PlaySpraySound ( );
	void eventFlashBangEffectEnded ( );
	void ChangeTranslucentMaterial ( class USkeletalMeshComponent* InComponent );
	void UpdateObserverPostEffect ( );
	void UpdatePostEffect ( int inPostEffectRefInfo );
	void DisplayRecoil ( class AHUD* HUD, class ASFWeapon* sfWeap, float* out_YL, float* out_YPos );
	void InitRecoilResult ( unsigned long bInitCamera );
	void InitDomValue ( );
	void SetRecoilResult ( float DeltaSeconds, class ASFWeapon* myWeapon, unsigned long bIsTest );
	void IncreaseRecoilResult ( class ASFWeapon* myWeapon );
	void eventDestroyed ( );
	void NotifyProjectileFinished ( class ASFProjectile* Proj );
	void NotifyProjectileFired ( class ASFProjectile* Proj );
	void RegisterProjectileIndicator ( class ASFProjectile* Projectile, unsigned long bRegister );
	void ComposePawnMesh ( );
	void SetVisibleIFFParticle ( unsigned long Show );
	void SetVisibleArmBand ( unsigned char ArmBandMode );
	void PostUpdateCharMesh ( );
	void ClientInactiveMissionWeapon ( class ASFTrigger_Use* UseTrigger, unsigned char MissionType, unsigned long bComplete );
	void ClientActiveMissionWeapon ( class ASFTrigger_Use* UseTrigger, unsigned char eMissionType );
	void ActiveMissionWeapon ( class ASFTrigger_Use* UseTrigger, unsigned char eMissionType );
	unsigned char GetIconState ( );
	void ChangeIconState ( unsigned char State );
	float eventGetGaugeRatio ( );
	void eventSetGaugeRatio ( float newRatio );
	void SetGaugeValue ( float UsingRate, float GaugeVelocity );
	void SetGaugeProgress ( float UsingRate, float DeltaTime, unsigned char TriggerTypeValue );
	void DetachWeapon ( class ASFWeapon* WeaponToDetach );
	void SetExigencyPrevWeaponClass ( class UClass* WeaponClass );
	void ReturnWeaponforExigency ( );
	void ExigencyAttack ( );
	void eventReturnPrevWeapon ( unsigned long bForMissionWeapon, unsigned long bForce );
	void WeaponAttachmentChanged ( unsigned long bViaReplication, unsigned long bForce );
	void BackupPrevWeapon ( );
	void FBSceneCapture ( );
	void UpdateHitInfoLog ( class ASFPlayerController* LocalPC, unsigned char bodyParts );
	void PlayTakeDamageShake ( int DamageAmount, unsigned char BodyPart, class AActor* DamageCauser, class UClass* DamageType );
	float GetShakeChanceByBodyPart ( unsigned char BodyPart );
	struct FVector GetPawnViewLocation ( );
	bool GetJustLanded ( );
	void SetJustLanded ( unsigned long bSet );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void ForceZoomOut ( unsigned long bOnlyHandActor );
	void SetLightEnvironmentToHandActor ( );
	void DetachWeaponFromHandActor ( class ASFWeapon* WeaponToDetach );
	void AttachWeaponToHandActor ( class ASFWeapon* WeaponToAttach );
	void NotifyArmMeshChanged ( class ASFPlayerReplicationInfo* SFPRI, class USkeletalMesh* HandMesh );
	void UpdateHandActorMesh ( );
	bool AllowedMagazineDrop ( unsigned char WeaponState );
	void UpdatEnemyOutLine ( );
	void ClientInit ( );
	void SetPawnMeshComponent ( );
	void AttachHeadParts ( );
	void DestroyHandActor ( );
	struct FVector GetThirdPersonCamStart ( );
	void ChangeViewMode ( unsigned long bIsFirstPerson );
	bool IsAttachedWeapon ( class ASFWeapon* NewWeapon );
	void CreateHandActor ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	bool IsPlayingIdleMotion ( );
	void PlayIdleMotion ( );
	void ReservePlayIdleMotion ( );
	void SetItemProperties ( );
	void RemoveIdleMotion ( struct FName AnimName );
	void AddIdleMotion ( float MinTime, float MaxTime, struct FName AnimName );
	void AttachWeaponforPlayer ( class ASFWeapon* WeaponToAttach );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPawn_Player::pClassPointer = NULL;

// Class SFGame.SFPawn_AlienPlayer
// 0x0020 (0x107C - 0x105C)
class ASFPawn_AlienPlayer : public ASFPawn_Player
{
public:
	unsigned char                                      AlienType;                                        		// 0x105C (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FName >                             AttackAnimName;                                   		// 0x1060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             AltAttackAnimName;                                		// 0x106C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              InteractionAngle;                                 		// 0x1078 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3845 ];

		return pClassPointer;
	};

	void EndManningTurret ( );
	void StartManningTurret ( );
	class UClass* GetThirdPersonCameraModeClass ( );
	struct FName GetAttackAnimName ( int CurFireMode );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bZoomed, unsigned long bCrouch, int* Looping );
	float PlayFullBodyAnimation ( struct FName NewAnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bCauseActorAnimEnd, unsigned long bLooping );
	void SetBaseEyeheight ( );
	void PostLanded ( );
	void eventSetSprinting ( unsigned long bNewIsSprinting );
	bool IsSprintPossible ( unsigned long bNewIsSprinting );
	void SetHelmetDrop ( );
	void SetItemProperties ( );
	void eventInitVoiceResource ( );
	void UpdateHandActorMesh ( );
	void AttachHeadParts ( );
	void SetPawnMeshComponent ( );
	void ParsePawnMeshInfoString ( );
	bool eventIsAlienPawn ( );
	bool IsDefaultMesh ( );
	struct FVector GetPawnViewLocation ( );
	int GetCurrentWeaponSetForLog ( );
	bool IsValidAngle ( class APawn* Other );
};

UClass* ASFPawn_AlienPlayer::pClassPointer = NULL;

// Class SFGame.SFPawn_GlowPlayer
// 0x0064 (0x10C0 - 0x105C)
class ASFPawn_GlowPlayer : public ASFPawn_Player
{
public:
	int                                                GlowModeEffectType;                               		// 0x105C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GlowModeIndex;                                    		// 0x1060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentGlowModeColor;                             		// 0x1064 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentGlowModeScalar;                            		// 0x1070 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StartGlowModeColor;                               		// 0x107C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     NextGlowModeColor;                                		// 0x1088 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     StartGlowModeScalar;                              		// 0x1094 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     NextGlowModeScalar;                               		// 0x10A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentGlowTransitionTime;                        		// 0x10AC (0x0004) [0x0000000000000000]              
	float                                              GlowTransitionTime;                               		// 0x10B0 (0x0004) [0x0000000000000000]              
	int                                                GlowModeEffectMax;                                		// 0x10B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GlowModeKillScore;                                		// 0x10B8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                PrevGlowModeKillScore;                            		// 0x10BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3847 ];

		return pClassPointer;
	};

	void GlowModeEffect ( int nGlowModeEffectType, struct FVector GlowModeColor );
	void UpdateGlowModeScore ( );
	void eventUpdateGlowModeScalar ( );
	void eventUpdateGlowModeColor ( );
	void UpdateGlowModeEffect ( );
	void SetSFPawnFXClass ( class UClass* PawnFXClass );
	void PostBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPawn_GlowPlayer::pClassPointer = NULL;

// Class SFGame.SFPawn_CaptainPlayer
// 0x0020 (0x10E0 - 0x10C0)
class ASFPawn_CaptainPlayer : public ASFPawn_GlowPlayer
{
public:
	int                                                DamageMax;                                        		// 0x10C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsCaptainPoint : 1;                               		// 0x10C4 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	int                                                DamageAdvantage;                                  		// 0x10C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AdvantageTime;                                    		// 0x10CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAdvantage                                  CaptainAdvantage;                                 		// 0x10D0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3849 ];

		return pClassPointer;
	};

	void UpdateObjectIcon ( );
	void eventTakeHealth ( int Demage );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPawn_CaptainPlayer::pClassPointer = NULL;

// Class SFGame.SFPawn_PvEPlayer
// 0x006C (0x10C8 - 0x105C)
class ASFPawn_PvEPlayer : public ASFPawn_Player
{
public:
	unsigned char                                      DBNOLevel;                                        		// 0x105C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      DBNOLevelRep;                                     		// 0x105D (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DBNOEnterLen;                                     		// 0x1060 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DBNOLimit;                                        		// 0x1064 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RevivalAnimLen;                                   		// 0x1068 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                DBNOOutLineColor;                                 		// 0x106C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              WarningDBNOTime;                                  		// 0x1070 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       RevivalSideBoneName;                              		// 0x1074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RevivalDirBoneName;                               		// 0x107C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RevivalAnimFront;                                 		// 0x1084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RevivalAnimBack;                                  		// 0x108C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DBNONodeName;                                     		// 0x1094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DBNOIdleNodeName;                                 		// 0x109C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DBNOAnimBlendRate;                                		// 0x10A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFAnimBlendBase*                            DBNONode;                                         		// 0x10A8 (0x0004) [0x0000000000000000]              
	class USFAnimBlendBase*                            DBNOIdleNode;                                     		// 0x10AC (0x0004) [0x0000000000000000]              
	class UAnimNodeSequence*                           DBNODeathSeq;                                     		// 0x10B0 (0x0004) [0x0000000000000000]              
	float                                              DBNOAnimLen;                                      		// 0x10B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDBNOFrontDown : 1;                               		// 0x10B8 (0x0004) [0x0000000000000000] [0x00000001] 
	class AController*                                 DBNOInstigator;                                   		// 0x10BC (0x0004) [0x0000000000000000]              
	class AController*                                 RevivalInstigator;                                		// 0x10C0 (0x0004) [0x0000000000000000]              
	float                                              CONSUMESCORE_REVIVAL;                             		// 0x10C4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3851 ];

		return pClassPointer;
	};

	bool CanUseProvideWeapon ( );
	void ActivateShockWave ( );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	float GetDBNOLimit ( );
	unsigned char GetDBNOLevel ( );
	void PlayRIP ( );
	void PlayRevival ( );
	void PlayDBNOIdle ( );
	float PlayFullBodyDeathAnimation ( struct FName NewAnimName, float fRate, float BlendInTime, float BlendOutTime, unsigned long bCauseActorAnimEnd );
	void PlayDeathAnimation ( class UClass* DamageType, unsigned long bBlendToMotors );
	void PlayDBNO ( );
	void PlayAlive ( );
	void UpdateDBNOSound ( );
	void ChangeDBNOLevel ( unsigned char NewDBNOLevel, unsigned long bRep );
	void DBNORIP ( );
	void DBNOIdle ( );
	void DoneRevival ( );
	bool CanRevival ( class ASFPawn* Reviver );
	bool OutDBNO ( class ASFPawn* Reviver, unsigned long bForWaveEnd );
	bool EnterDBNO ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool ConsumeWalletAmounts ( class APawn* WalletOwnner, unsigned char ForWhat, int NeedScore, unsigned long bForWaveEnd );
	int GetWalletAmounts ( class ASFPawn* WalletOwnner );
	bool CanEnterDBNO ( );
	bool IsDBNO ( );
	bool DBNONoDeathAnim ( );
	void WarningDBNOState ( int Step );
	void InitPrimaryWeaponAmmo ( );
	void InitInGameShopItem ( );
	bool eventEncroachingOn ( class AActor* Other );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void ReplicatedHealth ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPawn_PvEPlayer::pClassPointer = NULL;

// Class SFGame.SFPawnFX
// 0x00E4 (0x0120 - 0x003C)
class USFPawnFX : public UObject
{
public:
	class ASFPawn*                                     PawnOwner;                                        		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxFootstepDistSq;                                		// 0x0040 (0x0004) [0x0000000000000000]              
	float                                              MaxFootstepParticleDist;                          		// 0x0044 (0x0004) [0x0000000000000000]              
	float                                              MaxJumpSoundDistSq;                               		// 0x0048 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             IFFParticleBLUE;                                  		// 0x004C (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    IFFParticlePSC;                                   		// 0x0050 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       IFFParticleBone;                                  		// 0x0054 (0x0008) [0x0000000000000000]              
	struct FName                                       GodModeEffectBone;                                		// 0x005C (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             GodModeEffect;                                    		// 0x0064 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    GodModeEffectPSC;                                 		// 0x0068 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< struct FSAppliedBuffEffectPSCData >        AppliedBuffEffectPSCList;                         		// 0x006C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class USFSoundGroup_Pawn*                          EffectGroup;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SoundEffectName;                                  		// 0x007C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bIgnoreFaceSoundGroup : 1;                        		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBreathLeft : 1;                                  		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWasSprint : 1;                                   		// 0x0088 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class USoundCue*                                   VoiceSoundCue;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             VoiceAudioComp;                                   		// 0x0090 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             DefaultDeathEffect;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultDeathEffectScale;                          		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DefaultHitEffect;                                 		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultHitEffectScale;                            		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PlayingMessageClass;                              		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SprintStartTime;                                  		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   Breath[ 0x2 ];                                    		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             BreathAudioComponent;                             		// 0x00B4 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystem* >                   CameraBloodLensEffect_Damaged;                    		// 0x00B8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystem*                             CameraBloodLensEffect_Death;                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             CameraBloodLensEffect_Kill;                       		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             DefaultCameraLensEffect;                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDamageTypeLensEffect >             DamageTypeLensEffectArray;                        		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USoundCue*                                   SpraySound;                                       		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SergedSound;                                      		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayTimeForFootStepPhysMaterial;                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastCheckTimeForFootStepPhysMaterial;             		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCheckTimeForSpecialFootSound;                 		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCheckTimeForSpecialKillSound;                 		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxRustleSoundDist;                               		// 0x00F4 (0x0004) [0x0000000000000000]              
	class USFParticleSystemComponent*                  InGameShopPurchasePSC;                            		// 0x00F8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             InGameShopPurchaseSND;                            		// 0x00FC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         TeamMaterials;                                    		// 0x0100 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastAddHitEffect;                                 		// 0x010C (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystemComponent* >          DynamicHitPSCList;                                		// 0x0110 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UPhysicalMaterial*                           DefaultPhysicalMaterial;                          		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3853 ];

		return pClassPointer;
	};

	void PlayWanderingSound ( );
	void PlaySpawnEffect ( );
	void DeactivateHitParticleSystems ( );
	void SetHitEffectTimeOut ( float Lifetime );
	void PlayPurchase ( int ItemId );
	void SetSoundEffectName ( struct FString ResourceName );
	void PlaySurgedSound ( );
	void UpdateDBNOSoundVolume ( );
	void PlayDBNOSound ( );
	void PlaySpraySound ( );
	bool IsVoicePlayAvailable ( class UClass* RadioMessage, unsigned long bAllowSamePriority );
	bool IsVoicePlaying ( );
	void OnVoiceFinished ( class UAudioComponent* AC );
	void PlayVoice ( class UClass* InMessageClass, int MessageIndex );
	void UpdateIFFParticle ( );
	void DestroyIFFParticle ( );
	void UpdateStun ( unsigned long bStun );
	void UpdateBuffEffectDuration ( float DeltaTime );
	void UpdateBuffCameraLensEffect ( class UParticleSystem* EffectPS, unsigned long bActivate );
	bool RemoveBuffEffect ( unsigned char BuffType, unsigned long bIgnoreNoticeToPawnOwner );
	void AddBuffEffect ( unsigned char BuffType, struct FSBuffInfo BuffInfo );
	void UpdateBuffGeneralEffect ( unsigned char BuffType, struct FSBuffInfo BuffInfo, unsigned long bActivate );
	void UpdateBuffEffect ( unsigned char BuffType, unsigned long bActivate, unsigned long bPlayCameraLensEffect );
	void AttachEquipmentEffect ( );
	void UpdateGlowModeScalar ( struct FVector CurrentGlowModeScalar );
	void UpdateGlowModeColor ( struct FVector CurrentGlowModeColor );
	void UpdateGlowModeEffect ( int GlowModeEffectType, struct FVector* StartGlowModeColor, struct FVector* NextGlowModeColor, struct FVector* StartGlowModeScalar, struct FVector* NextGlowModeScalar );
	void UpdateGodModeChanged ( unsigned long bGodMode );
	void LeaveABloodSplatterDecal ( struct FVector HitLocation, struct FVector HitNormal );
	void NotifyFallDeadBody ( );
	void PlayFootSound ( class USoundCue* FootSound, float FootVol, struct FVector vFootLoc );
	void ActuallyPlayRustleSound ( unsigned long bReuseChannel );
	void PlayRustleSound ( );
	class USoundCue* GetFootStepSound ( unsigned char EType, class USFPhysicalMaterialProperty* SFPhysMaterial );
	void ActuallyPlayFootSound ( unsigned char EType );
	void PlayLandingSound ( );
	void PlayFootStepSound ( int FootDown, unsigned long bFirstPerson );
	void PlayKillingSound ( int KillType );
	void PlayDyingSoundInternal ( unsigned long bLocalViewtarget, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	void PlayDyingSound ( unsigned long bIsLocalViewtarget );
	void PlayDeathEffect ( class UClass* DamageType, struct FVector HitLocation, struct FVector HitMomentum, int DamageAmount, int HitType );
	void OnHitParticleFinished ( class UParticleSystemComponent* PSC );
	unsigned char GetAttackedDamageSound ( int HitType, int AdditionalHitType, unsigned char BodyPart, unsigned long bCriticalCondition, class UClass* DamageType );
	unsigned char GetAttackDamageSound ( int HitType, int AdditionalHitType, unsigned char BodyPart, unsigned long bCriticalCondition, class UClass* DamageType );
	void PlayTakeDamageVoiceFoley ( unsigned char BodyPart, class UClass* DamageType );
	void PlayTakeDamageSound ( int HitType, int Damage, unsigned char BodyPart, class ASFPawn* DamageCauser, unsigned long bCriticalCondition, class UClass* DamageType );
	void PlayTakeHitFX ( class UClass* DamageType, struct FVector HitLocation, struct FVector HitMomentum, int DamageAmount, int HitType, unsigned char BodyPart, class ASFPawn* DamageCauser );
	bool BloodEffectIsRelevant ( class UClass* DamageType, int DamageAmount );
	bool BloodSplatterDecalIsRelevant ( class UClass* DamageType, int DamageAmount );
	bool HitEffectIsRelevant ( );
	void PostUpdateOwnerMesh ( );
	void SetOwner ( class ASFPawn* InPawnOwner );
	void NotifyPawnEffect ( unsigned char EffectState );
	void ProcessPawn3rdEffectTickSpecial ( float Delta );
	bool FootStepEffectIsRelevant ( );
};

UClass* USFPawnFX::pClassPointer = NULL;

// Class SFGame.SFPawnFX_Aliens
// 0x001C (0x013C - 0x0120)
class USFPawnFX_Aliens : public USFPawnFX
{
public:
	class UMaterialInterface*                          BloodMarkBaseMateiral;                            		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRateHideDeadbody;                                		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloodMarkBaseSize;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FootStepSound;                                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UTexture2D* >                        BloodMarkTextureArray;                            		// 0x0130 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3855 ];

		return pClassPointer;
	};

	void PlayRustleSound ( );
	void PlayVoice ( class UClass* InMessageClass, int MessageIndex );
	class USoundCue* GetFootStepSound ( unsigned char EType, class USFPhysicalMaterialProperty* SFPhysMaterial );
	void GetBloodMarkMaterialInterface ( class UMaterialInterface** OutMaterialInterface );
	void LeaveABloodSplatterDecal ( struct FVector HitLocation, struct FVector HitNormal );
	void GetNewDamageEffectGroup ( unsigned char BodyPart, struct FsDamageEffectEntry* OutDamageEffectGroup );
	void PlayTakeHitFX ( class UClass* DamageType, struct FVector HitLocation, struct FVector HitMomentum, int DamageAmount, int HitType, unsigned char BodyPart, class ASFPawn* DamageCauser );
	bool PassBloodSplatterDecal ( );
	void PlayDeathEffect ( class UClass* DamageType, struct FVector HitLocation, struct FVector HitMomentum, int DamageAmount, int HitType );
	bool BloodSplatterDecalIsRelevant ( class UClass* DamageType, int DamageAmount );
};

UClass* USFPawnFX_Aliens::pClassPointer = NULL;

// Class SFGame.SFPawnFX_Zombie
// 0x0000 (0x013C - 0x013C)
class USFPawnFX_Zombie : public USFPawnFX_Aliens
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3857 ];

		return pClassPointer;
	};

	void LeaveABloodSplatterDecal ( struct FVector HitLocation, struct FVector HitNormal );
	void PlayWanderingSound ( );
	void GetNewDamageEffectGroup ( unsigned char BodyPart, struct FsDamageEffectEntry* OutDamageEffectGroup );
};

UClass* USFPawnFX_Zombie::pClassPointer = NULL;

// Class SFGame.SFPawnFX_Revenant
// 0x0030 (0x016C - 0x013C)
class USFPawnFX_Revenant : public USFPawnFX_Zombie
{
public:
	TArray< struct FSPawnEffect >                      PawnEffect1stView;                                		// 0x013C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSPawnEffect >                      PawnEffect3rdView;                                		// 0x0148 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSPawnEffect >                      PendingPawnEffect3rdView;                         		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFParticleSystemComponent* >        PawnEffectPSC;                                    		// 0x0160 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3859 ];

		return pClassPointer;
	};

	void PlayDeathEffect ( class UClass* DamageType, struct FVector HitLocation, struct FVector HitMomentum, int DamageAmount, int HitType );
	void StopPawnEffect ( );
	void eventCausePawn3rdEffect ( int PendingEffectIndex, unsigned char EffectState );
	void PlayPendingPawnEffectSound ( class USoundCue* PawnEffectSound );
	bool CheckPawn3rdPSCActive ( );
	int FindPawnEffectState ( TArray< struct FSPawnEffect > EffectList, unsigned char EffectState );
	void NotifyPawnEffect ( unsigned char EffectState );
	void ProcessPawn3rdEffectTickSpecial ( float Delta );
};

UClass* USFPawnFX_Revenant::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup
// 0x0050 (0x0284 - 0x0234)
class ASFDroppedPickup : public ADroppedPickup
{
public:
	class UDynamicLightEnvironmentComponent*           MyLightEnvironment;                               		// 0x0234 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0238 (0x0008) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x0240 (0x0040) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	float                                              AngErrorAccumulator;                              		// 0x0280 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3861 ];

		return pClassPointer;
	};

	void SetPickupMesh ( class UPrimitiveComponent* NewPickupMesh );
	void eventUnRegisterValidPickUp ( );
	void eventRegisterValidPickUp ( );
	bool IsValidAngle ( class APawn* Other );
	bool ValidTouch ( class APawn* Other );
};

UClass* ASFDroppedPickup::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_Weapon
// 0x004D (0x02D1 - 0x0284)
class ASFDroppedPickup_Weapon : public ASFDroppedPickup
{
public:
	class ASFWeapon*                                   InventoryHolder;                                  		// 0x0284 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      PickUpMeshComponent;                              		// 0x0288 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderForTouch;                                 		// 0x028C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ValidTouchAngle;                                  		// 0x0290 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ValidTouchAngleConverted;                         		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CollisionRadius;                                  		// 0x0298 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CollisionHeight;                                  		// 0x029C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     SpawnLocation;                                    		// 0x02A0 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    SpawnRotation;                                    		// 0x02AC (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ThrowLinearVelocity;                              		// 0x02B8 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ThrowAngularVelocity;                             		// 0x02C4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      PhysicsPropertyMask;                              		// 0x02D0 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3863 ];

		return pClassPointer;
	};

	void OnSetOutLine ( class USeqAct_SetOutLine* Action );
	void eventUnRegisterValidPickUp ( );
	void eventRegisterValidPickUp ( );
	bool IsValidAngle ( class APawn* Other );
	bool ValidTouch ( class APawn* Other );
	void GiveTo ( class APawn* P );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventEncroachedBy ( class AActor* Other );
	void CheckForRigidBodySleepState ( );
	void SetTranslucentMaterial ( unsigned long IsTranslucentView, class UMaterialInterface* InMaterial );
	void SetPickUpWeapon ( class ASFWeapon* NewPickUpWeapon, struct FVector RBAngularVelocity, struct FVector RBLinearVelocity );
	bool DropWeapon ( struct FVector InSpawnLocation, struct FVector StartVelocity, class ASFWeapon* InWeapon );
	void ReplicatedEvent ( struct FName VarName );
	void PostBeginPlay ( );
	void Destroyed ( );
};

UClass* ASFDroppedPickup_Weapon::pClassPointer = NULL;

// Class SFGame.SFKAssetNoSync
// 0x0004 (0x02B0 - 0x02AC)
class ASFKAssetNoSync : public ASFKAsset
{
public:
	unsigned long                                      bCollideProjectile : 1;                           		// 0x02AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3865 ];

		return pClassPointer;
	};

	void ForceNetRelevant ( );
	bool StopsProjectile ( class AProjectile* P );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ASFKAssetNoSync::pClassPointer = NULL;

// Class SFGame.SFKAssetMagazine
// 0x001C (0x02CC - 0x02B0)
class ASFKAssetMagazine : public ASFKAssetNoSync
{
public:
	struct FName                                       RootBoneName;                                     		// 0x02B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MagazineBoneName;                                 		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               MagazinePhysicsAsset;                             		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultLifeTime;                                  		// 0x02C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bLateWakeup : 1;                                  		// 0x02C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3867 ];

		return pClassPointer;
	};

	void LifeTimeOut ( );
	void Init ( class ASFWeapon* CauseWeapon, struct FVector WeaponLoc, struct FRotator WeaponRot, class UDynamicLightEnvironmentComponent* LightEnvironment );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ASFKAssetMagazine::pClassPointer = NULL;

// Class SFGame.SFWeapon
// 0x094C (0x0C60 - 0x0314)
class ASFWeapon : public AGameWeapon
{
public:
	unsigned char                                      FireStateDataPickUpType;                          		// 0x0314 (0x0001) [0x0000000000000000]              
	unsigned char                                      ReloadStateDataPickUpType;                        		// 0x0315 (0x0001) [0x0000000000000000]              
	unsigned char                                      InventoryGroup;                                   		// 0x0316 (0x0001) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      SlotIndex;                                        		// 0x0317 (0x0001) [0x0000000000000000]              
	unsigned char                                      bReloaded;                                        		// 0x0318 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      bReloadedCheck;                                   		// 0x0319 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ZoomStateNow;                                     		// 0x031A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      ZoomStateNext;                                    		// 0x031B (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      WeapAimProfile;                                   		// 0x031C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AdditionalWeaponType;                             		// 0x031D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      bIsInExtension;                                   		// 0x031E (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      HitMarkType;                                      		// 0x031F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WeaponHoldHand;                                   		// 0x0320 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentAccessoryState;                            		// 0x0321 (0x0001) [0x0000000000000000]              
	int                                                WeapPartTypeCount;                                		// 0x0324 (0x0004) [0x0000000000000000]              
	struct FString                                     MSG_Weapon_Is_In_Cooltime;                        		// 0x0328 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bCanBestWeapon : 1;                               		// 0x0334 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirectSelectable : 1;                            		// 0x0334 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInvalidFullAmmo : 1;                             		// 0x0334 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bNeverForwardPendingFire : 1;                     		// 0x0334 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAIOnly : 1;                                      		// 0x0334 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bRecommendSplashDamage : 1;                       		// 0x0334 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSniping : 1;                                     		// 0x0334 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bLeadTarget : 1;                                  		// 0x0334 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bConsiderProjectileAcceleration : 1;              		// 0x0334 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFastRepeater : 1;                                		// 0x0334 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bLockedAimWhileFiring : 1;                        		// 0x0334 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNoAnimDelayFiring : 1;                           		// 0x0334 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bReselectableWeapon : 1;                          		// 0x0334 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bIsProvideWeapon : 1;                             		// 0x0334 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bIsAutomatic : 1;                                 		// 0x0334 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bIsBurstAutomatic : 1;                            		// 0x0334 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPlayWeaponFireForSimulateFlashLocation : 1;      		// 0x0334 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bReloadStart : 1;                                 		// 0x0334 (0x0004) [0x0000000000000020] [0x00020000] ( CPF_Net )
	unsigned long                                      bPostReloaded : 1;                                		// 0x0334 (0x0004) [0x0000000000000020] [0x00040000] ( CPF_Net )
	unsigned long                                      bIsExtraMode : 1;                                 		// 0x0334 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bInitRecoilCamera : 1;                            		// 0x0334 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bTestRecoil : 1;                                  		// 0x0334 (0x0004) [0x0000000000000021] [0x00200000] ( CPF_Edit | CPF_Net )
	unsigned long                                      CurrenctPunchDirection : 1;                       		// 0x0334 (0x0004) [0x0000000000002001] [0x00400000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDecayingPunchAngle : 1;                          		// 0x0334 (0x0004) [0x0000000000002001] [0x00800000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bNeedWarnAiming : 1;                              		// 0x0334 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bUseCrossHairWhenZoom : 1;                        		// 0x0334 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bDisplayCrosshair : 1;                            		// 0x0334 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bDisplayCrosshairWhenZoom : 1;                    		// 0x0334 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bDisplayCrosshairWhenThirdPerson : 1;             		// 0x0334 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bDropped : 1;                                     		// 0x0334 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bUseMultiChannelSound : 1;                        		// 0x0334 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bWeaponFireLoop : 1;                              		// 0x0334 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bUseShellDropSound : 1;                           		// 0x0338 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseWeaponSteady : 1;                             		// 0x0338 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCrosshairOverride : 1;                           		// 0x0338 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bQuickEquipUpExigency : 1;                        		// 0x0338 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bIgnorePutDownAni : 1;                            		// 0x0338 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIgnoreEquipUpAni : 1;                            		// 0x0338 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bKeepAnimTimeTransienHitStateChanging : 1;        		// 0x0338 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseCamPunchingLocation : 1;                      		// 0x0338 (0x0004) [0x0000000020000000] [0x00000080] ( CPF_Deprecated )
	unsigned long                                      bUseCamPunchingRotation : 1;                      		// 0x0338 (0x0004) [0x0000000020000000] [0x00000100] ( CPF_Deprecated )
	unsigned long                                      bDisplayDebugLines : 1;                           		// 0x0338 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bWeaponMeshUpdated : 1;                           		// 0x0338 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bHideCrosshair : 1;                               		// 0x0338 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bForceSetupWeapMesh : 1;                          		// 0x0338 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bPendingAttach : 1;                               		// 0x0338 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bLocalWeapon : 1;                                 		// 0x0338 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bReselectedWeapon : 1;                            		// 0x0338 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bWeaponItemIDTable_Mask : 1;                      		// 0x0338 (0x0004) [0x0000000000002020] [0x00010000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bWeaponSetUpdated : 1;                            		// 0x0338 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bSuppressReloadVoice : 1;                         		// 0x0338 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bNeedToAttachBackSide : 1;                        		// 0x0338 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bCanEquipWhenNoAmmo : 1;                          		// 0x0338 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bUseSmallWeaponTextureSet : 1;                    		// 0x0338 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bUseImpulseAnimControl : 1;                       		// 0x0338 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bEnableImpulseAnimControl : 1;                    		// 0x0338 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bPeriodicRecordingForKillCam : 1;                 		// 0x0338 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bForceUpdateAmmoInRep : 1;                        		// 0x0338 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bSetPenalty : 1;                                  		// 0x0338 (0x0004) [0x0000000000002020] [0x04000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bUsePenalty : 1;                                  		// 0x0338 (0x0004) [0x0000000000002020] [0x08000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bItemListUpdated : 1;                             		// 0x0338 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bAltFireWeapon : 1;                               		// 0x0338 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bNeedToSelfUpdateWeaponSet : 1;                   		// 0x0338 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x0338 (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      bInfiniteAmmoInMgzWhenInfiAmmo : 1;               		// 0x033C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceShellOutEffect : 1;                         		// 0x033C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowReActivateSameBuff : 1;                     		// 0x033C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIgnoreBuffActiveCondition : 1;                   		// 0x033C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUseSpread : 1;                                   		// 0x033C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSuppressCustomIdleMotion : 1;                    		// 0x033C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bReloadMgzWhenEquipped : 1;                       		// 0x033C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPassthroughCorpses : 1;                          		// 0x033C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bApplyDOFEffect : 1;                              		// 0x033C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      IgnoreReloadBurstFire : 1;                        		// 0x033C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      IgnoreChangeWeaponBurstFire : 1;                  		// 0x033C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      IgnoreFireStopWeaponBurstFire : 1;                		// 0x033C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bNeedAttachWeaponToEx : 1;                        		// 0x033C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bModifiedByMode : 1;                              		// 0x033C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bIsAsyncLoading : 1;                              		// 0x033C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bPriWeaponExigency : 1;                           		// 0x033C (0x0004) [0x0000000000000000] [0x00008000] 
	class ASFPawn*                                     SFP;                                              		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WeaponRangeDamageMax;                             		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponRangeDamageMin;                             		// 0x0348 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              InstantHitDamageMin;                              		// 0x034C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeadPointDist;                                    		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AmmoCount;                                        		// 0x0354 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                AmmoCountInMgz;                                   		// 0x0358 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                OldAmmoCountInMgz;                                		// 0x035C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AmmoCountInMgzForRep;                             		// 0x0360 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AmmoCountValidationBuffer;                        		// 0x0364 (0x0004) [0x0000000000000000]              
	int                                                TotalAmmoCount;                                   		// 0x0368 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UsedAmmoCountInMgz;                               		// 0x036C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AmmoCountInMgzWhenReloadStart;                    		// 0x0370 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnedProjectileCount;                           		// 0x0374 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AmmoCountMaxInMgz;                                		// 0x0378 (0x0004) [0x0000000000000000]              
	int                                                AmmoCountMax;                                     		// 0x037C (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< int >                                      ShotCost;                                         		// 0x0380 (0x000C) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	float                                              GroupWeight;                                      		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              InventoryWeight;                                  		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              fFrontCheck;                                      		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              ProjectileSpawnOffset;                            		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrontVelocityRatioForProjectile;                  		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BehindVelocityRatioForProjectile;                 		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentRating;                                    		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              AimError;                                         		// 0x03A8 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   AI_AccCone_Min;                                   		// 0x03AC (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_AccCone_Max;                                   		// 0x03B4 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AI_AimDelay;                                      		// 0x03BC (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DelayTimeToFire;                                  		// 0x03C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponEquipWeight;                                		// 0x03C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponUnequipWeight;                              		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      OptionInfo;                                       		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RadarDetectNoiseTime;                             		// 0x03DC (0x0004) [0x0000000000000000]              
	TArray< float >                                    ReloadTimes;                                      		// 0x03E0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    FiringTime;                                       		// 0x03EC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    PreFiringTime;                                    		// 0x03F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    FiringAnimOrgTime;                                		// 0x0404 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    CoolTimes;                                        		// 0x0410 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    LastFiredTimes;                                   		// 0x041C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fStartSprintTime;                                 		// 0x0428 (0x0004) [0x0000000000000000]              
	float                                              fEndSprintTime;                                   		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              fAllowTimeWeaponModeChange;                       		// 0x0430 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FS_RECOIL                                   RecoilDefault;                                    		// 0x0434 (0x0054) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FS_RECOIL                                   RecoilZoomDefault;                                		// 0x0488 (0x0054) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RecoilZoomModifier;                               		// 0x04DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RecoilCrouchModifier;                             		// 0x04E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                RecoilSeed;                                       		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FS_RECOIL                                   RecoilCurrent;                                    		// 0x04E8 (0x0054) [0x0000000000002000]              ( CPF_Transient )
	struct FS_RECOIL                                   Recoil;                                           		// 0x053C (0x0054) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FS_RECOIL                                   RecoilZoom;                                       		// 0x0590 (0x0054) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              RecoilCrouchRatio;                                		// 0x05E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecoilDurationModifier;                           		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               FirstViewWeaponPhysicsAsset;                      		// 0x05EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPunchAngleInfo >                   ZoomPunchAngle;                                   		// 0x05F0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              PunchAngleDamping;                                		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PunchAngleSpringConstant;                         		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PunchAngleRatio;                                  		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpreadAccuracy;                                   		// 0x0608 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              AccuracyDivisor;                                  		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccuracyOffset;                                   		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInaccuracy;                                    		// 0x0614 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRecoilValue                                TestRecoil;                                       		// 0x0618 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CurrentPunchAngle;                                		// 0x0638 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FVector                                     CurrentPunchAngleVelocity;                        		// 0x0644 (0x000C) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              currentCrouchModifier;                            		// 0x0650 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              currentZoomModifier;                              		// 0x0654 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FsWeaponState                               WeaponStateNow;                                   		// 0x0658 (0x0008) [0x0000000000000000]              
	struct FsWeaponState                               WeaponStateNew;                                   		// 0x0660 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FsWeaponState                               WeaponStateOld;                                   		// 0x0668 (0x0008) [0x0000000000000000]              
	float                                              ZoomStateChangedTime;                             		// 0x0670 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CrosshairScaling;                                 		// 0x0674 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarnAimingMinDistance;                            		// 0x0678 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarnAimingAngle;                                  		// 0x067C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarnAimingAngleInternal;                          		// 0x0680 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CameraInitialShakeChance;                         		// 0x0684 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CameraShakeChance;                                		// 0x0688 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageShakeInitialMinAngle;                       		// 0x068C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageShakeInitialMaxAngle;                       		// 0x0690 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageShakeMinAngle;                              		// 0x0694 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageShakeMaxAngle;                              		// 0x0698 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReloadingAmmoCountMax;                            		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     DisplayName;                                      		// 0x06A0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UPhysicsAsset*                               DroppedPhysicsAsset;                              		// 0x06AC (0x0004) [0x0000000000000000]              
	class USoundCue*                                   WeaponHittingGroundSound;                         		// 0x06B0 (0x0004) [0x0000000000000000]              
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x06B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          ThirdPawnAnimSet;                                 		// 0x06C0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          ThirdPawnWPProfileAnim;                           		// 0x06CC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimSet*                                    ThirdWeapAnimSet;                                 		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   ThirdWeaponAnimTreeTemplate;                      		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueWeaponPreFire;                                 		// 0x06E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueWeaponFire;                                    		// 0x06E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueWeaponAltFire;                                 		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueEmptyClick;                                    		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueWhipping;                                      		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueEquipSound;                                    		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueReloadSound3rd;                                		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BobDamping;                                       		// 0x0700 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              JumpDamping;                                      		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DashAnimSpeed;                                    		// 0x0708 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobSpeedMux;                                     		// 0x070C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobWidth;                                        		// 0x0710 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobHeight;                                       		// 0x0714 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobDecRateForZoom;                               		// 0x0718 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBobZDecRateForZoom;                              		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               MeshWeapon1stView;                                		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               MeshWeapon1stViewEx;                              		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               MeshWeapon3rdView;                                		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               MeshWeapon3rdViewEx;                              		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLagMaxDegree;                                    		// 0x0730 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLagMaxDegreeWhenZoomed;                          		// 0x073C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLagSpeed;                                        		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLagRotSpeed;                                     		// 0x074C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLagYawTranslation;                               		// 0x0758 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLagPitchTranslation;                             		// 0x0764 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ShellOut3rdSound;                                 		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ShellOutPSCTemplate;                              		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ShellOutPSCTemplate1stView;                       		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShellOutTimming;                                  		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vShellOut1stScale;                                		// 0x0780 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vShellOutScale;                                   		// 0x078C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShellDropSoundPlayTime;                           		// 0x0798 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ShellDropSoundGroupName;                          		// 0x079C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeaponSteadyLength;                              		// 0x07A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeaponSteadyLengthWalk;                          		// 0x07A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeaponSteadyLengthFire;                          		// 0x07AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vWeaponSteadyTrans;                               		// 0x07B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerWidth;                                       		// 0x07BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BarLength;                                        		// 0x07C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireNoise;                                        		// 0x07C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomBobDamping;                                   		// 0x07C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreReloadTime;                                    		// 0x07CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PostReloadTime;                                   		// 0x07D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLocZoomIN;                                       		// 0x07D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vLocZoomOut;                                      		// 0x07E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotZoomIn;                                        		// 0x07EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotZoomOut;                                       		// 0x07F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomedFOV;                                       		// 0x0804 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomedFOVEx;                                     		// 0x0808 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomOutFOV;                                      		// 0x080C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomedMeshFOV;                                   		// 0x0810 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomOutMeshFOV;                                  		// 0x0814 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpactEffectType;                                 		// 0x0818 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SightBaseSocketName;                              		// 0x0820 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SightCrosshairMaterial;                           		// 0x0828 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SightOnMesh;                                      		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SightOffMesh;                                     		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             TracerTemplateFriend;                             		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             TracerTemplateFoe;                                		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMuzzleFlash >                      MuzzleFlash1stView;                               		// 0x0840 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMuzzleFlash >                      MuzzleFlash3rdView;                               		// 0x084C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ShellOutDuration;                                 		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSWeaponEffect >                    WeaponEffect1stView;                              		// 0x085C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSWeaponEffect >                    WeaponEffect3rdView;                              		// 0x0868 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSWeaponEffect >                    PendingWeaponEffect1stView;                       		// 0x0874 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSWeaponEffect >                    PendingWeaponEffect3rdView;                       		// 0x0880 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MuzzleColorItemID;                                		// 0x088C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MuzzleStyleItemID;                                		// 0x0898 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MuzzleColorIndex;                                 		// 0x08A4 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               ScopeMesh;                                        		// 0x08A8 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ScopeReflectionEffectTemplate;                    		// 0x08AC (0x0004) [0x0000000000000000]              
	float                                              LastHitTime;                                      		// 0x08B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CamPunchingLocationRatio;                         		// 0x08B4 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              CamPunchingRotationRatio;                         		// 0x08B8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	class USFSkeletalMeshComponent*                    WeaponSkelComponent;                              		// 0x08BC (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USFSkeletalMeshComponent*                    WeaponSkelComponentEx;                            		// 0x08C0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UMaterialInterface* >                AssistWeaponMeterial;                             		// 0x08C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponStateData >                  StateData;                                        		// 0x08D0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USFAnimNodeSlot*                             FullBodyNodeNormal;                               		// 0x08DC (0x0004) [0x0000000000000000]              
	class USFAnimNodeSlot*                             FullBodyNodeZoom;                                 		// 0x08E0 (0x0004) [0x0000000000000000]              
	struct FName                                       FullBodyNodeNormalName;                           		// 0x08E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FullBodyNodeZoomName;                             		// 0x08EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ZoomInNodeName;                                   		// 0x08F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ZoomOutNodeName;                                  		// 0x08FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      WeaponAttachmentClass;                            		// 0x0904 (0x0004) [0x0000000000000000]              
	class ASFWeaponAttachment*                         WeaponAttachment;                                 		// 0x0908 (0x0004) [0x0000000000000000]              
	class UClass*                                      WeaponTypeCrosshairClass;                         		// 0x090C (0x0004) [0x0000000000000000]              
	int                                                CrosshairCircleFull;                              		// 0x0910 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CrosshairCircleSmallSize;                         		// 0x0914 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CrosshairCircleBigSize;                           		// 0x0918 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class USFExplosionLight* >                 MuzzleFlashLight;                                 		// 0x091C (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USFParticleSystemComponent* >        MuzzleFlashPSC;                                   		// 0x0928 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USFParticleSystemComponent* >        ShellOutPSC;                                      		// 0x0934 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USFParticleSystemComponent* >        WeaponEffectPSC;                                  		// 0x0940 (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FName >                             ShellOutSocket1stView;                            		// 0x094C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ZoomModeChangeLength;                             		// 0x0958 (0x0004) [0x0000000000000000]              
	float                                              ZoomModeChangeEnd;                                		// 0x095C (0x0004) [0x0000000000000000]              
	float                                              ZoomingFOVTime;                                   		// 0x0960 (0x0004) [0x0000000000000000]              
	float                                              ZoomingInTime[ 0x2 ];                             		// 0x0964 (0x0008) [0x0000000000000000]              
	float                                              ZoomingOutTime;                                   		// 0x096C (0x0004) [0x0000000000000000]              
	float                                              fZoomStartTime;                                   		// 0x0970 (0x0004) [0x0000000000000000]              
	TArray< class USFWeaponRISBase* >                  RISList;                                          		// 0x0974 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            DefaultRISList;                                   		// 0x0980 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            OptionRISList;                                    		// 0x098C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ActionCamoKillTime;                               		// 0x0998 (0x0004) [0x0000000000000000]              
	struct FName                                       SocketNameToAttach;                               		// 0x099C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AdditionalMovement;                               		// 0x09A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              EquipBlendTime;                                   		// 0x09B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipUpExBlendTime;                               		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireBlendTime;                                    		// 0x09B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AltFireBlendTime;                                 		// 0x09BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadBlendTime;                                  		// 0x09C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EquipUpExTime;                                    		// 0x09C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                WeaponItemIDTable[ 0xE ];                         		// 0x09C8 (0x0038) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                WeaponID;                                         		// 0x0A00 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       WeaponItemCode;                                   		// 0x0A04 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      WeaponItemList;                                   		// 0x0A0C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       BackSideSocketName;                               		// 0x0A18 (0x0008) [0x0000000000000000]              
	struct FName                                       BackSideSocketNameEx;                             		// 0x0A20 (0x0008) [0x0000000000000000]              
	struct FVector                                     MaxImpulseAnimRelativePosiion;                    		// 0x0A28 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlLimb*                            ImpulseLeftIK;                                    		// 0x0A34 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLimb*                            ImpulseRightIK;                                   		// 0x0A38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlSingleBone*                      ImpulseWeaponFit;                                 		// 0x0A3C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       ImpulseLeftIKControlName;                         		// 0x0A40 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpulseRightIKControlName;                        		// 0x0A48 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpulseFitControlName;                            		// 0x0A50 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpulseLeftIKBoneName;                            		// 0x0A58 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpulseRightIKBoneName;                           		// 0x0A60 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ImpulseFitBoneName;                               		// 0x0A68 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxFireImpulseCount;                              		// 0x0A70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireImpulseBlendOutTime;                          		// 0x0A74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireImpulseCount;                                 		// 0x0A78 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     WeaponName;                                       		// 0x0A7C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              RecordingPeriod;                                  		// 0x0A88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PerioicRecordingDeltaTime;                        		// 0x0A8C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StoppingPower;                                    		// 0x0A90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StoppingPowerDuration;                            		// 0x0A94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AccelRatePctWhenStoppingPowerDuration;            		// 0x0A98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KnockBackPower;                                   		// 0x0A9C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             GetMuzzleLocHook;                                 		// 0x0AA0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             GetAmmoCountMgzHook;                              		// 0x0AAC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             CauseMuzzleFlashHook;                             		// 0x0AB8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             GetWeaponStateTimeHook;                           		// 0x0AC4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  CamoMaskTexture;                                  		// 0x0AD0 (0x0004) [0x0000000000000000]              
	int                                                CamoItemID;                                       		// 0x0AD4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     WeaponTagString;                                  		// 0x0AD8 (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	TArray< int >                                      RoundBurst;                                       		// 0x0AE4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    BurstInterval;                                    		// 0x0AF0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    APRatioBodyParts;                                 		// 0x0AFC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    DmgScaleBodyParts;                                		// 0x0B08 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     EditorDefaultWeaponMeshPath;                      		// 0x0B14 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ThicknessForPenetrate;                            		// 0x0B20 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WeaponRangeMin;                                   		// 0x0B24 (0x0004) [0x0000000000000000]              
	TArray< float >                                    fAttackableYaw;                                   		// 0x0B28 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    fAttackableDot;                                   		// 0x0B34 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CriticalHeadShotMul;                              		// 0x0B40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackAttackMul;                                    		// 0x0B44 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FAddtionalIdleMotion                        AdditionalIdle;                                   		// 0x0B48 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              CachedThrowMaxRange;                              		// 0x0B58 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldRequestedAmmoCountInMgz;                       		// 0x0B5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldRequestedAmmoCount;                            		// 0x0B60 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       RetargetingControlName;                           		// 0x0B64 (0x0008) [0x0000000000000000]              
	class USFSkelControl_Retargeting*                  RetargetingControl;                               		// 0x0B6C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    SpreadMin;                                        		// 0x0B70 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    SpreadMax;                                        		// 0x0B7C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              SpreadIncRate;                                    		// 0x0B88 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpreadDecRate;                                    		// 0x0B8C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpreadRateNow;                                    		// 0x0B90 (0x0004) [0x0000000000000000]              
	float                                              SpreadNow;                                        		// 0x0B94 (0x0004) [0x0000000000000000]              
	TArray< class UCameraAnim* >                       CameraAnimEffect;                                 		// 0x0B98 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CameraAnimBlendInTime;                            		// 0x0BA4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimBlendOutTime;                           		// 0x0BA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeCancelTime;                                 		// 0x0BAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChargeStartTime;                                  		// 0x0BB0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ChargeEndTime;                                    		// 0x0BB4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             TracerTemplateSetTopViewGame;                     		// 0x0BB8 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             ExtraHitPS;                                       		// 0x0BBC (0x0004) [0x0000000000000000]              
	float                                              DOFBlurStartDistance;                             		// 0x0BC0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DOFBlurEndDistance;                               		// 0x0BC4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BurstFireCount;                                   		// 0x0BC8 (0x0004) [0x0000000000000000]              
	TArray< unsigned long >                            bPendingStopFire;                                 		// 0x0BCC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BeginAltFiringDelay;                              		// 0x0BD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastBeginAltFireTime;                             		// 0x0BDC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioReload;                                      		// 0x0BE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RatioEquip;                                       		// 0x0BE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ModifiedWeaponLevel;                              		// 0x0BE8 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            DefaultItemClasses;                               		// 0x0BEC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFAnimNodeSlotAccessory*                    AccessoryAnimController;                          		// 0x0BF8 (0x0004) [0x0000000000000000]              
	class UAnimTree*                                   AccessoryAnimTree;                                		// 0x0BFC (0x0004) [0x0000000000000000]              
	class UAnimSet*                                    AccessoryAnimSet;                                 		// 0x0C00 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               AccessoryMesh;                                    		// 0x0C04 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               AccessoryMesh3rd;                                 		// 0x0C08 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            CanceledWeaponStateSoundList;                     		// 0x0C0C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsMuzzleFlashPlayTimeInfo >         MuzzleFlashPlayTimeInfo;                          		// 0x0C18 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             WeaponPreviewHideBoneName;                        		// 0x0C24 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetMuzzleLocationHooker__Delegate;              		// 0x0C30 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetAmmoCountInMgzHooker__Delegate;              		// 0x0C3C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CauseMuzzleFlashHooker__Delegate;               		// 0x0C48 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetWeaponStateTimeHooker__Delegate;             		// 0x0C54 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3869 ];

		return pClassPointer;
	};

	void FlashOnOffChangedEnd ( );
	void HadleFlashOnOff ( );
	TArray< struct FName > GetWeaponPreviewHideBoneName ( );
	class USoundCue* GetDischargingSound ( );
	bool IsCanceledSound ( unsigned char WeaponState );
	void eventNotifyAccessoryStateEnd ( unsigned char CurrentState );
	bool IsAbleActiveAccessory ( );
	bool IsValidAccessoryEnvironment ( unsigned char AccessoryState );
	void SetAccessoryState ( unsigned char AccessoryState );
	bool IsAccState ( unsigned char AccessoryState );
	bool GetEnableMeleeSwing ( );
	void ApplyKismetCustomProperties ( );
	void ExigencyAttackTopView ( );
	void OffDOFParameters ( );
	void OnDOFParameters ( );
	unsigned char eventGetFireNoiseType ( );
	bool IsBindingWeapon ( );
	bool CanThrowBindWeapon ( );
	float GetAIRecommRange ( );
	class UParticleSystem* GetExtraHitPS ( );
	class USkeletalMeshComponent* GetWeaponSkelComponent ( );
	int GetMuzzleIndex ( );
	bool Is3rdView ( );
	class USoundCue* GetFireSound ( unsigned char Mode );
	bool IsFireState ( );
	bool IsSetCurrentWhenGiven ( );
	float GetDmgScale ( );
	bool PassThroughDamage ( class AActor* HitActor );
	void UpdateHideMeshWhenDied ( );
	bool IsDualWeapon ( );
	struct FRotator AddSpreadEx ( struct FRotator BaseAim, unsigned long bForce );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	struct FName GetMuzzleSocketName ( );
	bool IsOwner ( class AActor* myOwnerActor );
	class UClass* GetDamageTypeClass ( );
	void OnOwnerBuffDeactivated ( unsigned char buff );
	void OnOwnerBuffActivated ( unsigned char buff );
	bool CheckBuffActivateCondition ( unsigned char buff_type );
	bool DeactivateBuff ( unsigned char buff_type );
	bool ActivateBuff ( unsigned char BuffType );
	bool IsInAIAttackRange ( class AActor* Other, unsigned long forAttack );
	struct FVector2D eventGetCrosshairCenterOffset ( float CenterX, float CenterY );
	float MaxRange ( );
	bool CheckAttackFrustum ( struct FRotator ViewRot, class AActor* TargetActor, unsigned char FireMode );
	int CalcBackAttackDamage ( int inDamage, class ASFPawn* Victim );
	int CalcCriticalHeadDamage ( int inDamage );
	int AdjustDamage ( class ASFPawn* Victim, int CachedHitType, int* inDamage );
	bool ReadyToFire ( unsigned long bFinished );
	float IsFrontOf ( struct FVector vOtherloc );
	void SetBurstInterval ( float NewValue, unsigned char FireModeNum );
	float GetBurstInterval ( unsigned char FireModeNum );
	void SetRoundBurst ( int NewValue, unsigned char FireModeNum );
	int GetRoundBurst ( unsigned char FireModeNum );
	float GetInstantHitDamage ( int FireMode );
	bool eventCanSkipToPlaySprintOutAnim ( );
	void eventAnimNotifyMessage ( struct FString notifyMsg );
	bool CanUseMissionWeapon ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	void ItemRemovedFromInvManager ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	void ChangeAssetbyGLOption ( struct FString SpecificClassName );
	float GetWeaponRating ( );
	void CauseMuzzleFlashLight ( int MuzzleIndex );
	void AttachMuzzleFlash ( );
	float GetMuzzleFlashScale ( unsigned long b1st, int MuzzleIndex );
	void StopMuzzleFlash ( );
	void MuzzleFlashTimer ( );
	bool IsExistMuzzleItem ( );
	bool IsCheckMuzzleItemCondition ( );
	bool ExceptMuzzleItemByItemID ( int WeapID );
	void CauseMuzzleFlash ( );
	void AttachWeaponEffect ( );
	void PlayShellDropSounds ( );
	void EnqueueShellDropSound ( );
	void SetShellOutParams ( class UParticleSystemComponent* PSC );
	void AttachShellOut ( );
	bool IsNeedFireEffect ( );
	void KillEffectStopTimer ( );
	void RelodEffectStopTimer ( );
	void WeaponEffectStopTimer ( unsigned char EffectState, float Duration );
	void eventCauseWeaponEffect ( int PendingEffectIndex, unsigned char EffectState );
	void PendingWeaponEffect ( unsigned char EffectState );
	int GetWeponEffectPSCIndexByState ( unsigned char EffectState );
	void NotifyWeaponEffect ( unsigned char EffectState );
	void eventShellOut ( );
	void CauseShellOut ( );
	void StopFireEffects ( unsigned char FireModeNum );
	struct FVector GetMuzzleLocation ( );
	struct FVector GetFireEffectLocation ( unsigned char* bIsFirstView );
	void RemoveCubeMapMIC ( );
	void AddCubeMapMIC ( );
	bool UsingSilencer ( );
	void UseSilencer ( unsigned long bUse );
	void WeaponExigencyAttack ( );
	void WeaponCommandKilled ( );
	class UAnimSet* GetThirdWeaponAnimSet ( );
	class UAnimSet* GetThirdPawnWeapProfileAnimSet ( unsigned char Gender );
	class UAnimSet* GetThirdPawnAnimSet ( unsigned char Gender );
	bool IsNeedToReEquipping ( );
	bool CanQueueing ( );
	class UTextureRenderTarget2D* GetRenderTarget ( );
	class USwfMovie* GetSwfMovie ( );
	unsigned char GetWeaponStateNow ( );
	void ZoomStateChanged ( unsigned long bForce );
	void ZoomStateChangeEnd ( );
	void ProcessSightMeshView ( unsigned long bSite );
	bool HideSightMesh ( unsigned long bHide );
	void PreprocessZoom ( float ChangeTime );
	bool IsNeedToHideWeaponMesh ( );
	bool ChangeViewMode ( unsigned long bIsShow );
	void WeaponStateChanged ( unsigned long bViaRep );
	bool PlayCustomStateData ( unsigned char WeaponState, unsigned long bIsNormalNode, unsigned long bForcePlayForDead );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	bool GetWeaponStateData ( unsigned char WeaponState, struct FWeaponStateData* DesiredStateData );
	void GetCurrentDamping ( float* outBobDamping, float* outJumpDamping );
	float GetCurrentRecoildomDefault ( );
	void ServerSetZoomState ( int ZNow, int ZNew );
	void SetZoomState ( int ZNow, int ZNew, unsigned long bForce );
	float GetRecoilModifyRatioByCrouch ( class ASFPawn* Pawn );
	float GetRecoilModifyRatioByZoom ( );
	bool IsZoomed ( );
	int GetAvaliableZoomLevel ( );
	bool CanZoomModeChange ( );
	bool CheckAltFire ( );
	int eventGetZoomStateNext ( );
	int eventGetZoomStateNow ( );
	void SetNotifyFiring ( unsigned long bStart );
	void ClientPostReloaded ( );
	void ClearWorkingTimers ( );
	void AllowWeaponModeChange ( );
	void RequestWeaponModeChange ( );
	int GetWeaponID ( );
	struct FName GetWeaponItemCode ( );
	void FillAllAmmo ( );
	float GetFireNoise ( );
	void MakeFireNoise ( );
	void PlayAttachmentAnim ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, float BlendInTime, float BlendOutTime );
	struct FName GetThirdWeaponAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	void NotifyWeaponFired ( unsigned char FireMode );
	void AdjustZoomAdv ( float AddZoomAdv, float AddZoomAdv2nd );
	void AdjustDurability ( float AddDurability );
	void AdjustNoise ( float AddNoise );
	void AdjustWeight ( float AddWeight );
	void AdjustAccuracy ( float AddAccuracy );
	void ApplyIncidenceAngleOption ( float fIncidenceAngle );
	void ApplyPenetrationOption ( float fPenetration );
	void ClientSetAmmoCount ( int InAmmoCount, int InAmmoCountMax );
	void ApplyAmmoCountOption ( int AddAmmoCount );
	void ClientSetMagazineCount ( int InAmmoCountInMgz, int InAmmoCountMaxInMgz );
	void ApplyMagazineCountOption ( int AddMagazineCount );
	void ApplyDamageOption ( float AddDamage, float fInstantHitDamageMin, float fRangeDamageMin, float fRangeDamageMax );
	void ApplyRapidSpeedOption ( float AddRapidSpeed );
	int GetOptionID ( int nOptinoIdx );
	void SetOptionProperties ( );
	int GetSlotIndex ( );
	int GetInventoryGroup ( class ASFPlayerReplicationInfo* SFPRI );
	class ASFGameReplicationInfo* GetGameReplicationInfo ( );
	class ASFPlayerReplicationInfo* GetPlayerReplicationInfo ( );
	float GetAPRatioBodyPart ( unsigned char BodyPart );
	float GetDmgScaleByBodyPart ( unsigned char BodyPart );
	float AdjustDamageForInstant ( class AActor* HitActor, float fDist, unsigned char BodyPart );
	void ClearReloadTimers ( );
	void ClearReloadTimersMain ( );
	void serverClearReloadTimers ( );
	bool CanExigencyAttack ( );
	bool CanWeaponPutDown ( );
	void ActivateWeaponExtension ( );
	struct FRotator StartRecoil ( unsigned long bIsTest );
	struct FString GetOwnerName ( );
	bool PreventDestoryForDying ( );
	float DetourWeight ( class APawn* Other, float PathWeight );
	bool NeedAutoReload ( unsigned char FireModeNum );
	void ClearShellOutTimer ( );
	bool IsExtensionPutDown ( );
	void RefireCheckTimer ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector AimDir );
	void FiringPutDownWeapon ( );
	bool TryPutDown ( );
	bool NeedQuickPutDown ( class AWeapon* NextWeapon );
	void QuickPutDown ( );
	bool AllowSwitchTo ( class AWeapon* NewWeapon );
	void PreloadTextures ( unsigned long bForcePreload );
	float GetReloadTime ( );
	void ClientReloaded ( );
	void ServerReloaded ( );
	void SetReloadedFlag ( );
	void Reloaded ( );
	void ClientReloadStart ( );
	void ServerReloadStart ( int ClientAmmoCountInMgz );
	void Reload ( );
	void ReloadWhenActive ( );
	void SetIgnoreEquipUpAni ( unsigned long bSet );
	void DelayToFire ( );
	void ForceThrow ( );
	void ThrowProjectile ( );
	bool IgnoreReload ( );
	bool IgnoreChangeWeapon ( );
	bool DoOverrideNextWeapon ( );
	bool DoOverridePrevWeapon ( );
	void PendingStopFire ( unsigned char FireModeNum );
	void ClearPendingStopFire ( );
	bool CheckPendingStopFire ( unsigned char FireMove );
	void ForceReload ( );
	void eventWarnAiming ( );
	void ForceZoomOut ( );
	void ChangeBestWeapon ( );
	void RefillEmptyAmmo ( );
	bool ShouldSwitchTo ( class ASFWeapon* InWeapon );
	bool IsAutomatic ( );
	void UpdateLastFiredTime ( int FireModeNum, unsigned long bForce );
	void FireAmmunition ( );
	bool ShouldRefire ( );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void ClientEndFire ( unsigned char FireModeNum );
	void ApplyProjectileProp ( class ASFProjectile* SpawnedProjectile, struct FVector RealStartLoc );
	class AProjectile* ProjectileFire ( );
	class AProjectile* ServerProjectileFire ( struct FVector SpawnLocation, int InAmmoCount, int InAmmoCountInMgz );
	void ProjectileFireAdditionalValue ( class ASFProjectile* SpawnedProjectile );
	bool eventAllowInfiniteProjectile ( );
	void SimulateFlashLocation ( struct FVector HitLocation );
	struct FRotator SpreadForOthers ( );
	void SetFlashLocation ( struct FVector HitLocation );
	struct FVector FireEndTrace ( struct FVector StartTrace, unsigned long bIsTest );
	void SetModifiedByMode ( unsigned long bModified );
	bool IsModifiedByMode ( );
	void ModifybyMode ( );
	bool IsTopViewGame ( );
	struct FVector InstantFireStartTrace ( );
	bool bReadyToFire ( unsigned char FireModeNum );
	void WeaponEmpty ( );
	bool IsReloadPossible ( );
	void serverHandleFinishedFiring ( int ClientAmmoCountInMgz );
	void HandleFinishedFiring ( );
	void ReloadMagazine ( );
	int GetReloadingAmmoCount ( int MyAmmoCountInMgz, int MyAmmoCount );
	void AddAmmoCountInMgz ( int Amount );
	void Loaded ( unsigned long bUseWeaponMax );
	bool eventCanEquipUp ( );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	bool AmmoMaxed ( int Mode );
	int AddAmmo ( int Amount );
	bool eventUsingInfiniteAmmo ( );
	bool UsingInfiniteMagazine ( );
	bool UsingInfiniteAmmoInMgzWhenInfiAmmo ( );
	void ConsumeAmmo ( unsigned char FireModeNum );
	int GetBaseWeaponAmmoCount ( );
	int GetBaseWeaponAmmoCountInMgz ( );
	int GetAmmoCountInMgzScript ( );
	int GetAmmoCountMaxInMgz ( );
	int GetAmmoCountMax ( );
	int GetAmmoCount ( );
	int GetAmmoCountInMgz ( unsigned char FireModeNum );
	void UpdateAmmoCounInMgzForRep ( unsigned long bForceUpdate );
	void SetAmmo ( int MyAmmoCount );
	void AddMagazine ( int Value );
	void SetAmmoCountMaxInMgz ( int NewCount );
	void SetAmmoCountInMgz ( int NewCount );
	void SetMagazine ( int MyAmmoCountInMgz );
	bool IsFullyCharged ( );
	unsigned char BestMode ( );
	struct FRotator GetBaseAIAimRotation ( struct FVector StartFireLoc, struct FVector AimLoc );
	struct FRotator eventGetHoseOffset ( );
	float GetAIAimDelay ( );
	void GetAIAccuracyCone ( struct FVector2D* AccCone_Min, struct FVector2D* AccCone_Max );
	bool CanHit ( struct FVector ViewPt, struct FVector TestLocation, struct FRotator ViewRotation );
	bool CanThrow ( );
	void eventTornOff ( );
	void ForceDetach ( );
	void DetachWeapon ( );
	void DetachFromEx ( class USkeletalMeshComponent* MeshCpnt );
	void FlashCountUpdated ( unsigned char FlashCount, unsigned char FiringMode, unsigned long bViaReplication );
	void eventWeaponStoppedFiring ( unsigned char FiringMode );
	void eventWeaponFired ( unsigned char FiringMode, struct FVector HitLocation );
	void FlashLocationUpdated ( unsigned char FiringMode, struct FVector FlashLocation, unsigned long bViaReplication );
	class USFSkeletalMeshComponent* AttachWeaponToEx ( class ASFPawn* PawnOwner, class USkeletalMeshComponent* MeshCpnt, class USkeletalMeshComponent* OldAttachedSkelMesh );
	void PostDetached ( class USkeletalMeshComponent* TopLevelHolder );
	void PostAttached ( class USkeletalMeshComponent* TopLevelHolder );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	bool IsVisibleLaserPoint ( );
	void OutSprint ( );
	void SetWeaponSprinting ( unsigned long bSprinting );
	bool IsSprintPossible ( );
	float GetPutDownTime ( );
	bool CanPlayIdleMotion ( );
	void AttachWeapon ( unsigned long bViaReplication );
	void TimeWeaponPutDown ( );
	bool IsDisableSocketNames ( struct FName SocketName );
	float GetEquipBlendTime ( );
	float GetEquipTime ( );
	float GetPostReloadTime ( );
	float GetReloadBlendTime ( );
	float GetFireBlendTime ( int Mode );
	float GetWeaponStateTime ( unsigned char StateType );
	float GetWeaponBlendInTime ( unsigned char StateType, float DefaultBlendInTime );
	float GetPutDownExTime ( );
	float GetPreFireAnimLength ( unsigned char FireModeNum );
	float GetFireAnimLength ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void SetItemProperties ( );
	void CompleteAsyncLoadDefaultItems ( );
	void AsyncLoadDefaultItems ( class UObject* LoadedObject );
	void WeaponSetUpdated ( );
	void SetWeaponItemIDTableMask ( unsigned long bFlag );
	void ServerSetWeaponPenalty ( unsigned long UsePenalty );
	void RequestServerSetWeaponPenalty ( );
	void SetWeaponPenalty ( );
	void CalcInventoryWeight ( );
	void GetHUDAmmoCount ( int* nAmmoMgz, int* nAmmo, int* nAmmoCountMaxAndInMgz );
	bool eventIsReloading ( );
	void eventReplicatedEvent ( struct FName VarName );
	class ASFPawn* GetSFP ( );
	class ASFPawn* SetSFP ( );
	void AnimTreeUpdated ( class USkeletalMeshComponent* SkelComp );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void SetSkeletalMesh ( class USkeletalMesh* SkelMesh1st, class USkeletalMesh* SkelMesh3rd, class USkeletalMesh* SkelMesh1stEx, class USkeletalMesh* SkelMesh3rdEx );
	void ApplyResourceGroupProperty ( );
	void ApplyContentsProperty ( );
	void UpdateWeaponMeshForKillCam ( );
	void UpdateWeaponMeshOptions ( );
	void SetWeaponMeshComponent ( class USkeletalMeshComponent* FirstViewWeaponMeshComponent, class USkeletalMeshComponent* ThirdViewWeaponMeshComponent, unsigned char FirstViewMeshGroupLabel, unsigned char ThirdViewMeshGroupLabel );
	void OnPrepareMeshGroupInfo ( class UTexture2D* CamoTexture, class UMorphTargetSet* FaceMorphSet, TArray< struct FMeshGroup >* WeaponMeshGroups );
	bool PrepareMeshGroupInfo ( unsigned char FirstViewMeshGroupLabel, unsigned char ThirdViewMeshGroupLabel );
	void SetWeaponMeshes ( );
	void UpdateWeaponMeshes ( );
	void ParseItemID ( struct FString StringItemID, TArray< int >* WeaponItemIDList );
	void UpdateWeaponAnimSets ( );
	void OnWeaponMeshSetted ( );
	void OnWeaponMeshSetted_Dedicate ( );
	bool AsyncUpdateWeaponMeshes ( );
	void InitImpulseBoneLocation ( );
	void CacheAnimNodes ( );
	void PostUpdateWeaponMeshes ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void eventGivenToForKillCam ( class APawn* NewOwner, unsigned long bDoNotActive );
	void ForceSetInstigator ( class ASFPawn* Pawn );
	void WeaponEquipped ( );
	bool InBurstFiring ( );
	void BurstCheckTimer ( );
	void TimeWeaponEquipping ( );
	int GetModeWeaponID ( class ASFPlayerController* OwnerController );
	void SetExigencyWeapon ( TArray< int > CurInvenItemList, unsigned long bWeapExigency );
	void PostBeginPlay ( );
	void KillCamRestore ( class AActor* OriginalActor );
	struct FString PartsDataToString ( TArray< int > PartsData );
	void DecodeWeapSetData ( TArray< int > ItemList, unsigned long bPriWeap, TArray< int >* PriWeapData );
	void PlayPendingWeaponEffectSound ( class USoundCue* WeaponEffectSound );
	void PlayWeaponSound ( unsigned char WeaponState );
	class USoundCue* GetWeaponSound ( unsigned char WeaponState );
	bool RecommendLongRangedAttack ( );
	bool eventAllowInfiniteAmmo ( );
	void ServerStartFire ( unsigned char FireModeNum, int ClientRecoilSeed, int ClientAmmoCountInMgz );
	void AmmoCountValidation ( int InAmmoCountInMgz, unsigned long ViaReload, int ReloadingAmmoCount );
	bool ShouldCheckAmmoCountValidation ( );
	struct FString eventGetWeaponName ( );
	bool GetCooltimeData ( unsigned char FireModeNum, float* Current_Cooltime, float* Total_Cooltime );
	float GetRemainingCooltime ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	bool CheckAltFireDelay ( int FireModeNum );
	void HolderDied ( );
	void EnableCrosshair ( unsigned long bEnable );
	void EndFire ( unsigned char FireModeNum );
	void UpdateZoomPunchAngle ( );
	void eventInitTestRecoil ( );
	float GetScriptRecoilRandomFraction ( );
	void DecayPunchAngle ( float DeltaTime );
	void SetPunchAngle ( struct FVector NewValue );
	int GetRecoilCRC ( int UniqueKeyCRC );
	void SetTestRecoil ( unsigned long bFlag );
	struct FVector GetPunchAngle ( );
	int GetCurrentThrowWeaponSlotIndex ( );
	struct FVector KickBack ( float KickBackSpread, float Up_Base, float Lateral_Base, float Up_Modifier, float Lateral_Modifier, float Up_Max, float Lateral_Max, int Direction_Change );
	int GetTimingIndex ( struct FSWeaponEffect PendingWeaponEffect );
	void ProcessWeaponEffectTickSpecial ( float Delta );
	void ProcessRISTickSpecial ( float Delta );
	bool ProcessWeaponCommand ( int WeaponCommand, int Optional1, int Optional2 );
	void AddRIS ( class USFWeaponRISBase* RISEntity );
	void AddDefaultRISs ( );
	class USFSkeletalMeshComponent* GetSightMeshComponent ( );
	void Destroyed ( );
	float GetWeaponStateTimeHooker ( unsigned char StateType );
	void CauseMuzzleFlashHooker ( );
	int GetAmmoCountInMgzHooker ( );
	struct FVector GetMuzzleLocationHooker ( );
};

UClass* ASFWeapon::pClassPointer = NULL;

// Class SFGame.SFWeap_InstantHit
// 0x0004 (0x0C64 - 0x0C60)
class ASFWeap_InstantHit : public ASFWeapon
{
public:
	float                                              IncidenceAngle;                                   		// 0x0C60 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3871 ];

		return pClassPointer;
	};

	void ApplyKismetCustomProperties ( );
	void SetImpactLocation ( struct FImpactInfo ImpactEffect, int Index, unsigned long bEnd, int AdditionalDecalAngle );
	struct FImpactInfo InstantFireSub ( struct FVector StartTrace, struct FVector EndTrace, int ShotCnt );
	void InstantFire ( );
	int ProcessInstantHitSub ( struct FVector StartTrace, unsigned char FiringMode, float fDamageScale, struct FImpactInfo* Impact, int* KillType );
	float GetHitIncidenceAngle ( struct FVector HitNormal, struct FVector RayDir );
	bool IsCriticalHeadShot ( int nHelmetPoint, float HitIncidenceAngle );
};

UClass* ASFWeap_InstantHit::pClassPointer = NULL;

// Class SFGame.SFWeap_Bullet
// 0x0114 (0x0D78 - 0x0C64)
class ASFWeap_Bullet : public ASFWeap_InstantHit
{
public:
	float                                              fPenetrationMax;                                  		// 0x0C64 (0x0004) [0x0000000000000000]              
	int                                                MaxPenetrationCount;                              		// 0x0C68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRifleHitResult                             HitResult;                                        		// 0x0C6C (0x0024) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bPendingZoom : 1;                                 		// 0x0C90 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockManualZoom : 1;                              		// 0x0C90 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseLoopReload : 1;                               		// 0x0C90 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNeedToStopReloadLoop : 1;                        		// 0x0C90 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bUseZoomoutBoltAction : 1;                        		// 0x0C90 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bBreanchGunTracer : 1;                            		// 0x0C90 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSkipExtraTracerforFriend : 1;                    		// 0x0C90 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHiddenWeaponAttachmentMagazine : 1;              		// 0x0C90 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bUseSilencer : 1;                                 		// 0x0C90 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bUseSniperScope : 1;                              		// 0x0C90 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bShowPenetrationLine : 1;                         		// 0x0C90 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bCanReloadingFire : 1;                            		// 0x0C90 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bImmediatelyZoom : 1;                             		// 0x0C90 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	int                                                nAvaliableZoomLevel;                              		// 0x0C94 (0x0004) [0x0000000000000000]              
	float                                              fZoomModeChangeEnd;                               		// 0x0C98 (0x0004) [0x0000000000000000]              
	TArray< struct FVector2D >                         PelletSpread;                                     		// 0x0C9C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SGSpread;                                         		// 0x0CA8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SGSpreadSize;                                     		// 0x0CAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SGPelletCount;                                    		// 0x0CB0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fZoomoutBoltAction;                               		// 0x0CB4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMuzzleFlashScale1st;                             		// 0x0CB8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGunTrailInfo                               GunTrailInfos[ 0x3 ];                             		// 0x0CBC (0x0048) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     GunTrailColor;                                    		// 0x0D04 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCountContinuousFireforExtraGunTrail;             		// 0x0D10 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExtraTracerTemplateFriend;                        		// 0x0D14 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ExtraTracerTemplateFoe;                           		// 0x0D18 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ZoomInSound;                                      		// 0x0D1C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ZoomOutSound;                                     		// 0x0D20 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FireAnimMinSpeedThreshold;                        		// 0x0D24 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Lens_CubeMap_Intense;                             		// 0x0D28 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LENS_OPACITY_INTENSE;                             		// 0x0D2C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USFSkeletalMeshComponent*                    SightMeshComponent;                               		// 0x0D30 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      MagazineMeshComponent;                            		// 0x0D34 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              fGunTrailOutLast;                                 		// 0x0D38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SightCrosshairSelector;                           		// 0x0D3C (0x0004) [0x0000000000000000]              
	int                                                SightCrosshairSelectorMax;                        		// 0x0D40 (0x0004) [0x0000000000000000]              
	int                                                ScopeZoomeRate;                                   		// 0x0D44 (0x0004) [0x0000000000000000]              
	int                                                ScopeZoomeRateMax;                                		// 0x0D48 (0x0004) [0x0000000000000000]              
	int                                                nUsingSight;                                      		// 0x0D4C (0x0004) [0x0000000000000000]              
	float                                              LastShotTime;                                     		// 0x0D50 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MagazineBoneName;                                 		// 0x0D54 (0x0008) [0x0000000000000000]              
	struct FName                                       WeaponRootBoneName;                               		// 0x0D5C (0x0008) [0x0000000000000000]              
	float                                              GrazeDamageRate;                                  		// 0x0D64 (0x0004) [0x0000000000000000]              
	float                                              GrazeSize;                                        		// 0x0D68 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AIRecommRange;                                    		// 0x0D6C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TestOldWeaponAmmo;                                		// 0x0D70 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFPhysicalMaterialProperty*                 LastHitMtrl;                                      		// 0x0D74 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3873 ];

		return pClassPointer;
	};

	float eventGetTraceRange ( );
	float GetGunTrailThickness ( float Src );
	void ResetRoundBurst ( TArray< int > newRoundBurst );
	void ResetGrazeExtend ( float newExtend );
	void ResetGrazeDamageRate ( float newDamage );
	void ResetSGPelletCount ( int newNum );
	void ResetSpread ( int NewSpread );
	void ResetUseLoopReload ( int bSet );
	void ResetPenetrationPower ( float newPower );
	void ResetPenetrationCount ( int newNum );
	void ResetForceAutomatic ( int bSet );
	void ResetStoppingPower ( float newPower );
	void ResetKnockBack ( float newKnockBack );
	void ResetAmmoCount ( int newAmmoInMgzCount, int NewAmmoCount );
	void ResetWeaponRange ( float newRange );
	void ResetReloadTime ( float NewTime );
	void ResetInstantHitDamage ( float newDamage );
	void ResetWeaponTuneInfo ( struct FsWeaponInitInfo WeaponInitInfo );
	unsigned char eventGetFireNoiseType ( );
	float GetAIRecommRange ( );
	bool CanAttack ( class AActor* Other );
	void ModifybyMode ( );
	void CalcGrazeforTopMode ( struct FVector StartTrace, struct FVector EndTrace );
	int FindinHitInfos ( class AActor* TestTarget );
	bool IsOwnerFriend ( );
	bool NeedExtraGunTracer ( );
	class UParticleSystem* GetExtraTracerTemplate ( );
	class UParticleSystem* GetMainTracerTemplate ( );
	void SpawnTracerExtra ( struct FVector StartLocation, struct FRotator Direction, float Distance );
	void SpawnTracerMain ( struct FVector StartLocation, struct FVector EndLocation, unsigned long bFirstView );
	unsigned char GetGunTrailMode ( unsigned long bFirstView );
	void SpawnTracer ( struct FVector StartLocation, struct FVector EndLocation, unsigned long bFirstView );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void ChangeAssetbyGLOption ( struct FString SpecificClassName );
	void WeaponModeChange ( );
	void ActivateWeaponExtension ( );
	bool UsingSilencer ( );
	void UseSilencer ( unsigned long bUse );
	void ProcessSightMeshView ( unsigned long bSite );
	void UpdateWeaponMeshOptions ( );
	void SetOptionProperties ( );
	bool IsNeedToHideWeaponMesh ( );
	bool HideSightMesh ( unsigned long bHide );
	void PostDetached ( class USkeletalMeshComponent* TopLevelHolder );
	void PostAttached ( class USkeletalMeshComponent* TopLevelHolder );
	void TimeWeaponFiring ( unsigned char FireModeNum );
	void FireAmmunition ( );
	void ZoomStateChanged ( unsigned long bForce );
	void ClearReloadTimersMain ( );
	float GetPostReloadTime ( );
	float GetPreReloadTime ( );
	void ClientPostReloaded ( );
	void PostReloaded ( );
	void ClientReloaded ( );
	void ServerReloaded ( );
	void ReloadStopByFire ( unsigned char FireModeNum );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	void StartFire ( unsigned char FireModeNum );
	void UpdateAmmoCounInMgzForRep ( unsigned long bForceUpdate );
	void SetMagazineMesh ( );
	void eventSetHiddenWeaponAttachmentMagazine ( unsigned long bHiddenMesh );
	bool IsReloadLoopingPossible ( );
	void SetNewSpread ( float NewSpread );
	void SetNewSpreadSize ( float NewSpreadSize );
	struct FRotator AddSGSpread ( struct FRotator BaseAim );
	int GetSGPelletIndex ( int Index );
	void InstantFireShotgun ( );
	void AmmoCountValidation ( int InAmmoCountInMgz, unsigned long ViaReload, int ReloadingAmmoCount );
	bool ShouldStrongValidationCheck ( );
	struct FVector InstantFireStartTrace ( );
	void InstantFire ( );
	class AProjectile* ProjectileFire ( );
	class AProjectile* ServerProjectileFire ( struct FVector SpawnLocation, int InAmmoCount, int InAmmoCountInMgz );
	void CheckLocalStopFire ( unsigned char FireModeNum );
	void CheckLocalStartFire ( unsigned char FireModeNum );
	bool bReadyToFire ( unsigned char FireModeNum );
	bool IsZoomed ( );
	void AdjustZoomAdv ( float AddZoomAdv, float AddZoomAdv2nd );
	int GetAvaliableZoomLevel ( );
	int eventGetZoomStateNext ( );
	int eventGetZoomStateNow ( );
	void LockManualZoom ( unsigned long bLock );
	void ReadyZoomModeChange ( );
	bool IsPendingZoom ( );
	void SetPendingZoom ( unsigned long bSet );
	int ZoomingProcess ( int ZoomNew );
	void BeginZoom ( unsigned long bForce );
	bool CanDoubleZoom ( );
	void HoldZoom ( );
	void ZoomOut ( );
	void ZoomIn ( );
	bool IsZoomChanging ( );
	void PreprocessZoom ( float ChangeTime );
	bool CanZoomModeChange ( );
	bool CheckAltFire ( );
	void AdjustNoise ( float AddNoise );
	void AdjustWeight ( float AddWeight );
	void ApplyIncidenceAngleOption ( float fIncidenceAngle );
	void ApplyPenetrationOption ( float fPenetration );
	void ClientSetAmmoCount ( int InAmmoCount, int InAmmoCountMax );
	void ApplyAmmoCountOption ( int AddAmmoCount );
	void ClientSetMagazineCount ( int InAmmoCountInMgz, int InAmmoCountMaxInMgz );
	void SetAmmoCountMaxInMgz ( int NewCount );
	void SetAmmoCountInMgz ( int NewCount );
	void ApplyMagazineCountOption ( int AddMagazineCount );
	void ApplyDamageOption ( float AddDamage, float AddDamageMin, float fRangeDamageMin, float fRangeDamageMax );
	void ApplyRapidSpeedOption ( float AddRapidSpeed );
	void ServerReloadStart ( int ClientAmmoCountInMgz );
	void ForceReload ( );
	float GetInstantHitDamage ( int nType );
	int GetInstantHitDamageMin ( int nType );
	float AdjustDamageForInstant ( class AActor* HitActor, float fDist, unsigned char BodyPart );
	int ProcessInstantHitSub ( struct FVector StartTrace, unsigned char FiringMode, float fDamageScale, struct FImpactInfo* Impact, int* KillType );
	struct FName GetHitBoneNameforDEDIserver ( class AActor* HitActor, struct FVector HitLocation );
	struct FRotator SpreadForOthers ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	float GetAIRating ( );
	unsigned char BestMode ( );
	void SetNotifyFiring ( unsigned long bStart );
	void SetImpactEffect ( TArray< struct FImpactInfo > Impacts );
	void GetImpactEffect ( TArray< struct FImpactInfo >* Impacts );
	void NotifyWeaponFired ( unsigned char FireMode );
	struct FImpactInfo MakeImpactInfo ( struct FVector StartTrace, struct FVector EndTrace, int ShotCnt, int KillType );
	int GetCheckKillType ( );
	bool CheckPenetrate2D ( TArray< struct FsHitPawns2d > HitPawns, struct FVector StartTrace );
	void Get2DHitPawns ( struct FVector2D EndTrace, struct FVector2D StartTrace, float MaxDist, unsigned long bTest, TArray< struct FsHitPawns2d >* HitPawns );
	struct FVector2D GetProjectedLocation ( struct FVector WorldPos, class UPlayer* myLocalPlayer );
	void CalcHits2D ( struct FVector StartTrace, struct FVector EndTrace );
	struct FImpactInfo InstantFireSub ( struct FVector StartTrace, struct FVector EndTrace, int ShotCnt );
	void KillCamRestore ( class AActor* OriginalActor );
	class USFSkeletalMeshComponent* GetSightMeshComponent ( );
	void Destroyed ( );
	void CalcHits ( struct FVector StartTrace, struct FVector EndTrace );
};

UClass* ASFWeap_Bullet::pClassPointer = NULL;

// Class SFGame.SFWeap_Crossbow
// 0x0028 (0x0DA0 - 0x0D78)
class ASFWeap_Crossbow : public ASFWeap_Bullet
{
public:
	TArray< struct FName >                             BoneNamesToHide;                                  		// 0x0D78 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              BoneUpdateTime;                                   		// 0x0D84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PenaltySpread;                                    		// 0x0D88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReloadVoiceDelay;                                 		// 0x0D8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    ProjectileFireDelay;                              		// 0x0D90 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClampAmmoCountForUI : 1;                         		// 0x0D9C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3875 ];

		return pClassPointer;
	};

	void GetHUDAmmoCount ( int* nAmmoMgz, int* nAmmo, int* nAmmoCountMaxAndInMgz );
	void ApplyProjectileProp ( class ASFProjectile* SpawnedProjectile, struct FVector RealStartLoc );
	bool PlayCustomStateData ( unsigned char WeaponState, unsigned long bIsNormalNode, unsigned long bForcePlayForDead );
	void InitArrows ( );
	class USoundCue* GetWeaponSound ( unsigned char WeaponState );
	void UpdateArrows ( );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	void AmmoCountValidation ( int InAmmoCountInMgz, unsigned long ViaReload, int ReloadingAmmoCount );
	void ClientSetAmmoCount ( int InAmmoCount, int InAmmoCountMax );
	void PlayReloadVoice ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	void SetServerWeaponState ( unsigned char WeaponState, unsigned char FireModeNum );
	void CheckLocalStopFire ( unsigned char FireModeNum );
	void OutSprint ( );
	void CauseShellOut ( );
};

UClass* ASFWeap_Crossbow::pClassPointer = NULL;

// Class SFGame.SFWeaponDischarger
// 0x0014 (0x0D8C - 0x0D78)
class ASFWeaponDischarger : public ASFWeap_Bullet
{
public:
	unsigned long                                      bDischargingNow : 1;                              		// 0x0D78 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bPlayDischarging : 1;                             		// 0x0D78 (0x0004) [0x0000000000000000] [0x00000002] 
	class USoundCue*                                   CueWeaponFireEnd;                                 		// 0x0D7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            ForceEndDischargeWeaponState;                     		// 0x0D80 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3877 ];

		return pClassPointer;
	};

	void WeaponStateChanged ( unsigned long bViaRep );
	void eventStopDisChargeSound ( );
	class USoundCue* GetDischargingSound ( );
	class USoundCue* GetFireSound ( unsigned char Mode );
	void CheckWeaponDischarging ( );
	void ForceEndDischarging ( );
	void DischargingStateChanged ( unsigned long bON );
	void SpawnDischargingEffect ( struct FVector StartLocation, struct FVector EndLocation, unsigned long bFirstView );
	void SpawnTracerMain ( struct FVector StartLocation, struct FVector EndLocation, unsigned long bFirstView );
	void PostUpdateWeaponDischarger ( );
	void PostUpdateWeaponMeshes ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFWeaponDischarger::pClassPointer = NULL;

// Class SFGame.SFWeaponFlamer
// 0x00A8 (0x0E34 - 0x0D8C)
class ASFWeaponFlamer : public ASFWeaponDischarger
{
public:
	TArray< struct FSFlameType >                       FlameTypeArray;                                   		// 0x0D8C (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FString                                     FlameThrowerAnimTree;                             		// 0x0D98 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FlameThrowerAnim;                                 		// 0x0DA4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           FlameThrowerStringArray;                          		// 0x0DB0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class USFSkeletalMeshComponent* >          FlameThrowerSMCArray;                             		// 0x0DBC (0x000C) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAnimNodeAimOffset* >                FlameAimOffsetArray;                              		// 0x0DC8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFlameShowing : 1;                                		// 0x0DD4 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FName                                       FlameSocketName;                                  		// 0x0DD8 (0x0008) [0x0000000000000000]              
	struct FName                                       TorchSocketName;                                  		// 0x0DE0 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             TorchEffect;                                      		// 0x0DE8 (0x0004) [0x0000000000000000]              
	TArray< class UParticleSystemComponent* >          TorchEffectPSCArray;                              		// 0x0DEC (0x000C) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     CurAim;                                           		// 0x0DF8 (0x000C) [0x0000000000000000]              
	struct FVector                                     AimDiff;                                          		// 0x0E04 (0x000C) [0x0000000000000000]              
	struct FVector                                     vPrevFlameDir;                                    		// 0x0E10 (0x000C) [0x0000000000000000]              
	int                                                FlameRotSpeed;                                    		// 0x0E1C (0x0004) [0x0000000000000000]              
	int                                                FlameYawSensitivity;                              		// 0x0E20 (0x0004) [0x0000000000000000]              
	int                                                FlamePitchSensitivity;                            		// 0x0E24 (0x0004) [0x0000000000000000]              
	float                                              MinAimLimit;                                      		// 0x0E28 (0x0004) [0x0000000000000000]              
	float                                              MaxAimLimit;                                      		// 0x0E2C (0x0004) [0x0000000000000000]              
	float                                              FlameRadius;                                      		// 0x0E30 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3879 ];

		return pClassPointer;
	};

	int GetSGPelletIndex ( int Index );
	void eventTickFlamer ( float DeltaSeconds );
	void UpdateTickDisabled ( );
	void ShowFlame ( unsigned long bShow );
	void DischargingStateChanged ( unsigned long bON );
	struct FName GetPawnFlameSocketName ( );
	void ShowTorch ( unsigned long bShow );
	bool ChangeViewMode ( unsigned long bIsShow );
	void InitFlameSocket ( );
	void PostUpdateWeaponDischarger ( );
	void eventUpdatedDischargePower ( float Delta );
	bool CanZoomModeChange ( );
};

UClass* ASFWeaponFlamer::pClassPointer = NULL;

// Class SFGame.SFWeap_Melee
// 0x0080 (0x0CE4 - 0x0C64)
class ASFWeap_Melee : public ASFWeap_InstantHit
{
public:
	float                                              fCriticalDamageRate;                              		// 0x0C64 (0x0004) [0x0000000000000000]              
	float                                              AddRangeWhenForward;                              		// 0x0C68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      HitDetectSubTicks;                                		// 0x0C6C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    HitDetectVertAngle;                               		// 0x0C78 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    HitDetectHorzAngle;                               		// 0x0C84 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            DetectType;                                       		// 0x0C90 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentSubTick;                                   		// 0x0C9C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitDetectHorzUnitAngle;                           		// 0x0CA0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FireStartTime;                                    		// 0x0CA4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HitDetectTimer;                                   		// 0x0CA8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FireStartDelta;                                   		// 0x0CAC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< float >                                    FireStartInterval;                                		// 0x0CB0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    FireStartIntervalWhenHit;                         		// 0x0CBC (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      HitDecalRotation;                                 		// 0x0CC8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   CueWeaponHitPawn;                                 		// 0x0CD4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CueWeaponHitFire;                                 		// 0x0CD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPreHitCheck : 1;                                 		// 0x0CDC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bApplyMultiTargetDamage : 1;                      		// 0x0CDC (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleSystem*                             ForceFireImpactEffect;                            		// 0x0CE0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3881 ];

		return pClassPointer;
	};

	unsigned char eventGetFireNoiseType ( );
	bool IsExtraFireAnim ( unsigned char myFireMode );
	void PauseFireAnim ( float StopTime );
	void AddDamagedActors ( class AActor* DamagedActor, float DistToEnemy, TArray< struct FsDamagedActor >* DamagedActors );
	void GetHitableTarget ( struct FVector StartTrace, float TraceDist, struct FRotator InstigatorRotator, TArray< struct FsDamagedActor >* DamagedActors );
	bool IsValideDamageablePawn ( class APawn* DamagedPawn );
	bool CanAttack ( class AActor* Other );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	bool NeedAutoReload ( unsigned char FireModeNum );
	struct FImpactInfo CalWeaponFireEx ( TArray< struct FImpactInfo >* ImpactList );
	bool IsNeedFireEffect ( );
	float eventGetTraceRange ( );
	bool IsForceBackSlashKill ( class ASFPawn* HitSFP );
	void ServerSliceStaticMesh ( int MeshID, float X, float Y, float Z, float W );
	void SetSliceMesh ( class UMeshComponent* TargetMeshComponent, class UPhysicalMaterial* PhysMaterial );
	int ProcessInstantHitSub ( struct FVector StartTrace, unsigned char FiringMode, float fDamageScale, struct FImpactInfo* Impact, int* KillType );
	bool IsEnableProcessInstantHitSub ( );
	float GetHitDecalRotation ( );
	bool CanExigencyAttack ( );
	int MeleeInstantHitSub ( struct FVector StartTrace, struct FRotator InstigatorRotator, int StartRange, int EndRange, unsigned long bHitTest );
	void PlayHitSound ( );
	void InstantFire ( );
	int GetCameraAnimNum ( unsigned char WeaponState, int FireMode );
	bool PlayCustomStateData ( unsigned char WeaponState, unsigned long bIsNormalNode, unsigned long bForcePlayForDead );
	class USoundCue* GetWeaponSound ( unsigned char WeaponState );
	struct FRotator GetAimRotation ( );
	unsigned char BestMode ( );
};

UClass* ASFWeap_Melee::pClassPointer = NULL;

// Class SFGame.SFWeap_MeleeSwing
// 0x002C (0x0D10 - 0x0CE4)
class ASFWeap_MeleeSwing : public ASFWeap_Melee
{
public:
	TArray< struct FSSwingPawn >                       SwingPawns;                                       		// 0x0CE4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned long >                            EnableMeleeSwingArray;                            		// 0x0CF0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SwingStartTime;                                   		// 0x0CFC (0x0004) [0x0000000000000000]              
	unsigned long                                      bContinuousAttack : 1;                            		// 0x0D00 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FScriptDelegate                             __SwingPawnSortDelegate__Delegate;                		// 0x0D04 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3883 ];

		return pClassPointer;
	};

	bool GetEnableMeleeSwing ( );
	int SwingPawnSortDelegate ( struct FSSwingPawn A, struct FSSwingPawn B );
	void SwingPawnSort ( TArray< struct FSSwingPawn >* OutArray );
	bool IsContinuousAttackWeapon ( );
};

UClass* ASFWeap_MeleeSwing::pClassPointer = NULL;

// Class SFGame.SFWeap_ThrowingMelee
// 0x0034 (0x0D18 - 0x0CE4)
class ASFWeap_ThrowingMelee : public ASFWeap_Melee
{
public:
	TArray< struct FBoneInfoToHide >                   BoneNamesToHide;                                  		// 0x0CE4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       EmptyMagazineHideBoneName;                        		// 0x0CF0 (0x0008) [0x0000000000000000]              
	struct FWeaponStateData                            EmptyMagazineWeaponState;                         		// 0x0CF8 (0x001C) [0x0000000000000000]              
	float                                              PenaltySpread;                                    		// 0x0D14 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3885 ];

		return pClassPointer;
	};

	void WeaponEmpty ( );
	void StartFire ( unsigned char FireModeNum );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	struct FRotator GetAimRotation ( );
	void RefillEmptyAmmo ( );
	bool IsExtensionPutDown ( );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	void UpdateBoneToHide ( unsigned char WeaponState );
	bool CanUnHideBone ( struct FBoneInfoToHide BoneInfo, unsigned char WeaponState, int FireMode );
	bool CanHideBone ( struct FBoneInfoToHide BoneInfo, unsigned char WeaponState, int FireMode );
	struct FRotator AddSpread ( struct FRotator BaseAim );
};

UClass* ASFWeap_ThrowingMelee::pClassPointer = NULL;

// Class SFGame.SFWeap_Mission
// 0x0018 (0x0C78 - 0x0C60)
class ASFWeap_Mission : public ASFWeapon
{
public:
	unsigned long                                      bAnimationTestMode : 1;                           		// 0x0C60 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bExtensionPutdown : 1;                            		// 0x0C60 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideWeaponWhenPutdown : 1;                       		// 0x0C60 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHideWeaponWhenExtensionPutdown : 1;              		// 0x0C60 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAutoFireWhenActive : 1;                          		// 0x0C60 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh1st;                                  		// 0x0C64 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               SkeletalMesh3rd;                                  		// 0x0C68 (0x0004) [0x0000000000000000]              
	unsigned char                                      MissionType;                                      		// 0x0C6C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class ASFTrigger_Use*                              CurrentMissionTrigger;                            		// 0x0C70 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ReplaceGaugeTime;                                 		// 0x0C74 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3887 ];

		return pClassPointer;
	};

	void GetReplacementMeshAndMaterial ( class UStaticMesh** OutReplacementMesh, class UMaterialInterface** OutReplaceMaterial );
	float GetEquipBlendTime ( );
	float GetEquipTime ( );
	float GetReloadBlendTime ( );
	float GetReloadTime ( );
	void eventShellOut ( );
	void StopPlayerCameraAnim ( );
	bool PlayCustomStateData ( unsigned char WeaponState, unsigned long bIsNormalNode, unsigned long bForcePlayForDead );
	void CustomFire ( );
	void PlayWeaponCharge ( );
	void HideWeapon ( );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	bool IsExtensionPutDown ( );
	void SetExtensionPutDown ( unsigned long bFlag );
	bool NotifyChargeCompleteToTrigger ( );
	class AActor* GetInteractiveActor ( );
	bool IsMatchedInteractiveActor ( class AActor* TouchingActor );
	void SetWeaponMeshes ( );
	bool IsNeedFireEffect ( );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	bool IsSprintPossible ( );
	bool CanQueueing ( );
};

UClass* ASFWeap_Mission::pClassPointer = NULL;

// Class SFGame.SFWeap_Projectile
// 0x0004 (0x0C64 - 0x0C60)
class ASFWeap_Projectile : public ASFWeapon
{
public:
	float                                              PenaltySpread;                                    		// 0x0C60 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3889 ];

		return pClassPointer;
	};

	class AProjectile* ServerProjectileFire ( struct FVector SpawnLocation, int InAmmoCount, int InAmmoCountInMgz );
	void ProjectileFireAdditionalValue ( class ASFProjectile* SpawnedProjectile );
	void ProjectileFireSub ( class ASFProj_Throw* SpawnedProjectile );
	bool ChangeViewMode ( unsigned long bIsShow );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	void NotifyWeaponFired ( unsigned char FireMode );
	bool NeedAutoReload ( unsigned char FireModeNum );
	bool CheckAltFire ( );
	bool IsNeedFireEffect ( );
	void GetHUDAmmoCount ( int* nAmmoMgz, int* nAmmo, int* nAmmoCountMaxAndInMgz );
};

UClass* ASFWeap_Projectile::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment
// 0x008C (0x02B0 - 0x0224)
class ASFWeaponAttachment : public AActor
{
public:
	class USkeletalMeshComponent*                      WeaponSkelComponent;                              		// 0x0224 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      WeaponSkelComponentEx;                            		// 0x0228 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      WeaponSightComponent;                             		// 0x022C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      WeaponAccessoryComponent;                         		// 0x0230 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          MuzzleFlashPSC;                                   		// 0x0234 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          WeaponEffectPSC;                                  		// 0x0240 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class USFExplosionLight* >                 MuzzleFlashLight;                                 		// 0x024C (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FName >                             ShellOutSocket;                                   		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UParticleSystemComponent* >          ShellOutPSC;                                      		// 0x0264 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    ScopeReflectionEffectPSC;                         		// 0x0270 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bNeedAttachMuzzleFlash : 1;                       		// 0x0274 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedAttachShellOut : 1;                          		// 0x0274 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNeedAttachWeaponEffect : 1;                      		// 0x0274 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPendingAttach : 1;                               		// 0x0274 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bForceSetup : 1;                                  		// 0x0274 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bForceShellOut : 1;                               		// 0x0274 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHideMeshWhenDied : 1;                            		// 0x0274 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDualWeapon : 1;                                  		// 0x0274 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FName                                       AttachmentSocket;                                 		// 0x0278 (0x0008) [0x0000000000000000]              
	struct FName                                       ScopeReflectionSocket;                            		// 0x0280 (0x0008) [0x0000000000000000]              
	struct FName                                       AccessorySocketName;                              		// 0x0288 (0x0008) [0x0000000000000000]              
	class ASFPawn*                                     PawnOwner;                                        		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFWeapon*                                   WeaponOwner;                                      		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      OwnerMesh;                                        		// 0x0298 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       MagazineBoneName;                                 		// 0x029C (0x0008) [0x0000000000000000]              
	class UAnimNodeSlot*                               NodeSlotForPlay;                                  		// 0x02A4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FName                                       AnimNodeName;                                     		// 0x02A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3891 ];

		return pClassPointer;
	};

	bool IsDualWeapon ( );
	void AttachShellOut ( );
	void AttachWeaponEffect ( );
	void AttachMuzzleFlash ( );
	struct FVector GetMuzzleLocation ( );
	void DetachFrom ( class ASFPawn* InPawnOwner );
	void eventWarnAiming ( );
	void SetPropertiesForKillCam ( );
	void AttachTo ( class ASFPawn* InPawnOwner );
	void PostUpdateWeaponMeshes ( );
	void SetMuzzleFlashColorParams ( class UParticleSystemComponent* PSC, struct FColor MuzzleFlashColor );
	void eventCauseWeaponEffect ( int PendingEffectIndex, unsigned char EffectState );
	void CauseMuzzleFlash ( );
	void CauseMuzzleLight ( int MuzzleIndex );
	void StopShellOut ( );
	void PendingWeaponEffect ( unsigned char EffectState );
	int GetWeaponEffectPSCIndexByState ( unsigned char EffectState );
	void CauseWeaponEffectDistanceCheck ( unsigned char EffectState );
	void CauseShellOut ( );
	void CauseFireEffect ( unsigned long bForce );
	void PlayPendingWeaponSound ( class USoundCue* WeaponEffectSound );
	void PlayWeaponSound ( unsigned char WeaponState );
	class USoundCue* GetWeaponSound ( unsigned char WeaponState );
	void ShellOut ( );
	void StopWeaponEffect ( );
	void StopMuzzleFlash ( unsigned long bForce );
	void ForceDetach ( );
	void UpdateHideMeshWhenDied ( );
	void StopFireEffects ( );
	void ProcessSightMeshView ( class USkeletalMesh* MirrorSightMesh, struct FName BoneOrSocketName );
	void Destroyed ( );
	void InitializeForWeapon ( class ASFWeapon* InOwner, class USkeletalMesh* MirrorSkeletalMesh, class USkeletalMesh* MirrorSkeletalMeshEx, class UAnimTree* ThirdWeaponAnimTree, class UAnimSet* ThirdWeaponAnimSet, class USkeletalMesh* Accessory3rdMesh );
	void StopCustomAnim ( );
	void PlayCustomAnim ( struct FName NewAnimName, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	class ASFWeaponAttachment* CreateWeaponAttachment ( class ASFWeapon* InOwner, class UClass* InClass );
	void ProcessWeaponEffectTickSpecial ( float Delta );
};

UClass* ASFWeaponAttachment::pClassPointer = NULL;

// Class SFGame.SFWeaponRISBase
// 0x0018 (0x0054 - 0x003C)
class USFWeaponRISBase : public UObject
{
public:
	int                                                SupportedFlags;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	TArray< int >                                      SupportFlagList;                                  		// 0x0040 (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class ASFWeapon*                                   WeaponOwner;                                      		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsHasState : 1;                                  		// 0x0050 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsProcessForViewTarget : 1;                      		// 0x0050 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsePreTestCommand : 1;                           		// 0x0050 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUsePostTestCommand : 1;                          		// 0x0050 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3893 ];

		return pClassPointer;
	};

	bool eventTestWeaponCommand ( int WeaponCommand, int OptionalArg1, int OptionalArg2 );
	void Init ( class ASFWeapon* InWeaponOwner );
	bool InitRIS ( class ASFWeapon* InWeaponOwner );
	void TickSpecial ( float fdelta );
	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
	void OnPostTestCommand ( int WeaponCommand );
	void OnPreTestCommand ( int WeaponCommand );
	bool OwnerWeaponExigencyAttack ( );
	bool OwnerNotWeaponChange ( );
	bool OwnerSprintChange ( unsigned long bSprintStart );
	bool OwnerKill ( );
	bool OwnerEquip ( );
	bool OwnerStopFire ( int FireModeNum );
	bool OwnerForceDetach ( );
	bool OwnerChangeWeaponState ( unsigned char NowWeaponState, unsigned char OldWeaponState );
	bool OwnerChangeViewMode ( unsigned long bIsShow );
	bool OwnerPostReload ( );
	bool OwnerReload ( );
	bool OwnerPostFire ( int FireModeNum );
	bool OwnerPutDown ( );
	bool OwnerReselected ( );
	bool OwnerFire ( int FireModeNum );
	bool OwnerDetached ( );
	bool OwnerAttached ( );
	bool OwnerZoomStateChanged ( int InZoomStateNext, unsigned long bForce );
	bool OwnerZoomStateChanging ( int InZoomStateNext, unsigned long bForce );
};

UClass* USFWeaponRISBase::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_LaserSightBase
// 0x0080 (0x00D4 - 0x0054)
class USFWeaponRIS_LaserSightBase : public USFWeaponRISBase
{
public:
	class USFSkeletalMeshComponent*                    RISkelComponent;                                  		// 0x0054 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LaserStartSocketName;                             		// 0x0058 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LaserParticleTemplate;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             LaserHitPointParticleTemplate;                    		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             EnemyDetectLaserParticleTemplate;                 		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             EnemyDetectLaserHitPointParticleTemplate;         		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LaserTargetParameterName;                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    LaserParticleComponent;                           		// 0x0078 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LaserParticle3rdComponent;                        		// 0x007C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    LaserHitPointParticleComponent;                   		// 0x0080 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LaserHitPointMinDistance;                         		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LaserHitPointMaxDistance;                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LaserHitPointScale;                               		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDotVisibleDistance;                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseSureFire : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHasScope : 1;                                    		// 0x0094 (0x0004) [0x0000000000002001] [0x00000002] ( CPF_Edit | CPF_Transient )
	class USpotLightComponent*                         SureFireComponent;                                		// 0x0098 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SureFireSocketName;                               		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMeshComponent*                        SureFireComponent3rd;                             		// 0x00A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LaserParticleLength;                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LaserParticle3rdLength;                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBeamSocketAlignment >              AlignmentInfo;                                    		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshSocket*                         LaserStartSocket;                                 		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AlignIndex;                                       		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FRotator >                          OriginSocketRotation;                             		// 0x00C4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              OriginLaserZoomLength;                            		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3895 ];

		return pClassPointer;
	};

	bool OwnerDetached ( );
	bool OwnerAttached ( );
	void eventUpdateLaserParticleParameter ( );
	class USkeletalMeshComponent* GetParentMeshComponent3rd ( );
	class USkeletalMeshComponent* GetParentMeshComponent ( );
	bool eventIsVisibleLaserPoint ( );
	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
	bool OwnerZoomStateChanged ( int InZoomStateNext, unsigned long bForce );
	void eventSetSocketAlignment ( unsigned long bUseAlignInfo );
};

UClass* USFWeaponRIS_LaserSightBase::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_SkelComponentBase
// 0x003C (0x0090 - 0x0054)
class USFWeaponRIS_SkelComponentBase : public USFWeaponRISBase
{
public:
	class USFSkeletalMeshComponent*                    RISkelComponent;                                  		// 0x0054 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPhysicsAsset*                               RISkelComponentPhysicsAsset;                      		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RISocketName;                                     		// 0x005C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAttachToSocket : 1;                            		// 0x0064 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowRISkelComponentScreenCenter : 1;            		// 0x0064 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsAttachToSocket3rd : 1;                         		// 0x0064 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsParentAnim : 1;                                		// 0x0064 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAttachRISOnce : 1;                               		// 0x0064 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsAttached : 1;                                  		// 0x0064 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bCheckMinMax : 1;                                 		// 0x0064 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	struct FVector                                     MaxScreenAlignDistance;                           		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinScreenAlignDistance;                           		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      RISkelComponent3rd;                               		// 0x0080 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPhysicsAsset*                               RISkelComponent3rdPhysicsAsset;                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RISocketName3rd;                                  		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3897 ];

		return pClassPointer;
	};

	bool OwnerDetached ( );
	void SetRISkelComponent3RdPhysics ( );
	void SetRISkelComponentPhysics ( class USkeletalMeshComponent* ParentComponent );
	bool OwnerAttached ( );
	bool AttachSkeletalMeshComponent ( class USkeletalMeshComponent* ParentMeshComponent, class USkeletalMeshComponent* RISMeshComponent, unsigned long bAttachToSocket, struct FName NameToAttach );
	bool IsValidForAttach ( );
	class USkeletalMeshComponent* GetParentMeshComponent3rd ( );
	class USkeletalMeshComponent* GetParentMeshComponent ( );
	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
};

UClass* USFWeaponRIS_SkelComponentBase::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_AimingBase
// 0x0018 (0x00A8 - 0x0090)
class USFWeaponRIS_AimingBase : public USFWeaponRIS_SkelComponentBase
{
public:
	int                                                AimingStateNow;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              CurrentZoomFOV;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              ZoomInFOV;                                        		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              ZoomOutFOV;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   SightCrosshairMIC;                                		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDefaultSightMeshVisible : 1;                     		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEnableEnemyDetect : 1;                           		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCalculateTargetDistance : 1;                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3899 ];

		return pClassPointer;
	};

	void HideSightCrosshair ( unsigned long bHide );
	void UpdateFOV ( float DesiredFOV, unsigned long bNeedHide, unsigned long bImmediateUpdate );
	bool OwnerChangeViewMode ( unsigned long bIsShow );
	bool OwnerZoomStateChanging ( int InZoomStateNext, unsigned long bForce );
	bool IsValidForAttach ( );
	class USkeletalMeshComponent* GetParentMeshComponent ( );
	void InitCrosshair ( class ASFWeapon* InWeaponOwner );
	void SettingUpZoomVariable ( class ASFWeapon* InWeaponOwner );
	void Init ( class ASFWeapon* InWeaponOwner );
};

UClass* USFWeaponRIS_AimingBase::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_DotSight
// 0x0004 (0x00AC - 0x00A8)
class USFWeaponRIS_DotSight : public USFWeaponRIS_AimingBase
{
public:
	unsigned long                                      bDefaultDotSightVisible : 1;                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3901 ];

		return pClassPointer;
	};

	void HideSightCrosshair ( unsigned long bHide );
	bool OwnerAttached ( );
};

UClass* USFWeaponRIS_DotSight::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_ACOG
// 0x0008 (0x00B4 - 0x00AC)
class USFWeaponRIS_ACOG : public USFWeaponRIS_DotSight
{
public:
	struct FName                                       DetectParameterName;                              		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3903 ];

		return pClassPointer;
	};

	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
};

UClass* USFWeaponRIS_ACOG::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_TargetSeeker
// 0x0020 (0x00D4 - 0x00B4)
class USFWeaponRIS_TargetSeeker : public USFWeaponRIS_ACOG
{
public:
	class ASFPawn*                                     DetectedPawn;                                     		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFPawn_Player*                              WeaponOwnerPawn;                                  		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetingMaxDistance;                             		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutLineDistance;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutLineDistance;                               		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutLineWidth;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutLineWidth;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bActiveOutLine : 1;                               		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3905 ];

		return pClassPointer;
	};

	void ReleasedDetectedPawn ( );
	bool OwnerDetached ( );
	bool OwnerAttached ( );
	float GetOutLineWidth ( float Distance );
	bool GetZoomStateChanging ( );
	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
};

UClass* USFWeaponRIS_TargetSeeker::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_AimPoint
// 0x0004 (0x00B0 - 0x00AC)
class USFWeaponRIS_AimPoint : public USFWeaponRIS_DotSight
{
public:
	float                                              EnemyDetectedDotSightScale;                       		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3907 ];

		return pClassPointer;
	};

	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
};

UClass* USFWeaponRIS_AimPoint::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_Reflex
// 0x0034 (0x00E0 - 0x00AC)
class USFWeaponRIS_Reflex : public USFWeaponRIS_DotSight
{
public:
	struct FName                                       GaugeBlendNodeName;                               		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GaugeSocketName;                                  		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomingTime;                                      		// 0x00BC (0x0004) [0x0000000000000000]              
	class UAnimNodeBlend*                              GaugeBlendNode;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	class USFSkeletalMeshComponent*                    GaugeComponent;                                   		// 0x00C4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USFSkeletalMeshComponent*                    ReflexScopeComponent;                             		// 0x00C8 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              GaugeMoveTime;                                    		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GaugeStep;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	TArray< float >                                    LaserDistanceStep;                                		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3909 ];

		return pClassPointer;
	};

	void Init ( class ASFWeapon* InWeaponOwner );
	void InitZomming ( class ASFWeapon* InWeaponOwner );
	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
};

UClass* USFWeaponRIS_Reflex::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_SubWeapon
// 0x0088 (0x0118 - 0x0090)
class USFWeaponRIS_SubWeapon : public USFWeaponRIS_SkelComponentBase
{
public:
	TArray< class UAnimSet* >                          SubWeaponAnimSets;                                		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          SubWeapon3rdAnimSets;                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       SubWeaponMuzzleFlashSocketName;                   		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SubWeaponMuzzleFlashPS;                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFParticleSystemComponent*                  SubWeaponMuzzleFlashPSC;                          		// 0x00B4 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      SubWeaponMuzzleFlashLightClass;                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFExplosionLight*                           SubWeaponMuzzleFlashLight;                        		// 0x00BC (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bIsActivated : 1;                                 		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     SubWeaponAnimPreFix;                              		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OwnerWeaponAnimPreFix;                            		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      OldWeaponFireType;                                		// 0x00DC (0x0001) [0x0000000000000000]              
	unsigned char                                      SubWeaponFireType;                                		// 0x00DD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              SubWeaponFiringTime;                              		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OldWeaponFiringTime;                              		// 0x00E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SubWeaponFireBlendTime;                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OldWeaponFireBlendTime;                           		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SubWeaponReloadTime;                              		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OldWeaponReloadTime;                              		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SubWeaponReloadBlendTime;                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OldWeaponReloadBlendTime;                         		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShotTime;                                     		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SwitchToSubWeaponTime;                            		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwitchToOriginalTime;                             		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubWeaponAmmoCount;                               		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OldWeaponAmmoCount;                               		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldWeaponAmmoInMgz;                               		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3911 ];

		return pClassPointer;
	};

	struct FVector GetMuzzleLocation ( );
	void CloseMuzzleFlash ( );
	void CauseSubWeaponMuzzleFlash ( );
	void DeactivateSubWeapon ( unsigned long bPlayChangeAnimation );
	void ActivateSubWeapon ( );
	void AnimationNameSetup ( unsigned long bIsActivate );
	bool OwnerPostFire ( int FireModeNum );
	bool OwnerPutDown ( );
	bool OwnerReselected ( );
	bool OwnerFire ( int FireModeNum );
	void SetupSubWeaponMuzzle ( );
	bool OwnerAttached ( );
	void EnableWeapon ( );
	float GetSubWeaponStateTime ( unsigned char WeaponState );
	class USkeletalMeshComponent* GetParentMeshComponent3rd ( );
	class USkeletalMeshComponent* GetParentMeshComponent ( );
	void Init ( class ASFWeapon* InWeaponOwner );
};

UClass* USFWeaponRIS_SubWeapon::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_TacticalLight
// 0x0090 (0x00E4 - 0x0054)
class USFWeaponRIS_TacticalLight : public USFWeaponRISBase
{
public:
	float                                              LightRadian;                                      		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USpotLightComponent*                         SpotLightComponent;                               		// 0x0058 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             LightHighBeamParticle3rdTemplate;                 		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    LightHighBeamParticle3rdComponent;                		// 0x0060 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        LightMesh3rdComponent;                            		// 0x0064 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LightHighBeam3rdScale;                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x006C (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       LightSocketName;                                  		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBrightMax;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBrightMin;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAngleMax;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAngleMin;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDistNear;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDistFar;                                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IgnoreHighBeamFriend : 1;                         		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFlash1stOn : 1;                                  		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFlash3rdOn : 1;                                  		// 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsAttached : 1;                                  		// 0x0090 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIsAttachToSocket : 1;                            		// 0x0090 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              LightURadian;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              LightUDistance;                                   		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              LightHighBeamDot;                                 		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              fCameraDotMax;                                    		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              fCameraDotMin;                                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              fUDistNear;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              fUDistFar;                                        		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FVector                                     LightMeshScale;                                   		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LightMesh3rdScale;                                		// 0x00BC (0x000C) [0x0000000000000000]              
	struct FVector                                     Light3rdMeshScale;                                		// 0x00C8 (0x000C) [0x0000000000000000]              
	class UMaterialInstance*                           LightMaterialInst;                                		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              InSightPower;                                     		// 0x00D8 (0x0004) [0x0000000000000000]              
	float                                              InSightDelay;                                     		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutSightDelay;                                    		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3913 ];

		return pClassPointer;
	};

	void eventUpdateLighthBeam ( float fdelta );
	bool OwnerDetached ( );
	class USkeletalMeshComponent* GetParentMeshComponent3rd ( );
	class USkeletalMeshComponent* GetParentMeshComponent ( );
	void eventUpdateLightHighBeam ( float fdelta );
	void TickSpecial ( float fdelta );
	bool OwnerForceDetach ( );
	void PartsUpdate ( unsigned long b1stOn, unsigned long b3rdOn );
	bool OwnerChangeWeaponState ( unsigned char NowWeaponState, unsigned char OldWeaponState );
	bool AttachSkeletalMeshComponent3rd ( class USkeletalMeshComponent* ParentMeshComponent, struct FName NameToAttach );
	bool AttachSkeletalMeshComponent1st ( class USkeletalMeshComponent* ParentMeshComponent, struct FName NameToAttach );
	bool AttachSkeletalMeshComponent ( );
	bool OwnerAttached ( );
	void PreRenderRIS ( struct FVector CameraPosition, class UCanvas* InCanvas );
};

UClass* USFWeaponRIS_TacticalLight::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_TacticalLight_Horror
// 0x0000 (0x00E4 - 0x00E4)
class USFWeaponRIS_TacticalLight_Horror : public USFWeaponRIS_TacticalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3915 ];

		return pClassPointer;
	};

	void LightFlashStateCheck ( );
	bool OwnerChangeWeaponState ( unsigned char NowWeaponState, unsigned char OldWeaponState );
};

UClass* USFWeaponRIS_TacticalLight_Horror::pClassPointer = NULL;

// Class SFGame.SFTurret
// 0x019C (0x06EC - 0x0550)
class ASFTurret : public AVehicle
{
public:
	class AController*                                 Claim;                                            		// 0x0550 (0x0004) [0x0000000000000000]              
	TArray< class UClass* >                            DefaultInventory;                                 		// 0x0554 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRotator                                    AimDir;                                           		// 0x0560 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    DesiredAimDir;                                    		// 0x056C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector2D                                   YawLimit;                                         		// 0x0578 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurretTurnRateScale;                              		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimingTurretTurnRateScale;                        		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CannonFireOffset;                                 		// 0x0588 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       PitchBone;                                        		// 0x0594 (0x0008) [0x0000000000000000]              
	struct FName                                       BaseBone;                                         		// 0x059C (0x0008) [0x0000000000000000]              
	struct FVector                                     EntryPosition;                                    		// 0x05A4 (0x000C) [0x0000000000000000]              
	unsigned long                                      bRelativeExitPos : 1;                             		// 0x05B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUnableToLeave : 1;                               		// 0x05B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSpottedSomething : 1;                            		// 0x05B0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebugTurret : 1;                                 		// 0x05B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowTargetingCamera : 1;                        		// 0x05B0 (0x0004) [0x0000000000020001] [0x00000010] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bRotationalMomentum : 1;                          		// 0x05B0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEnforceHardAttach : 1;                           		// 0x05B0 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMovingToEnforceHardAttach : 1;                   		// 0x05B0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bUseLimitRot : 1;                                 		// 0x05B0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNotTarget : 1;                                   		// 0x05B0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNeedResetIdleDesiredAimDir : 1;                  		// 0x05B0 (0x0004) [0x0000000000000000] [0x00000400] 
	struct FsPointOfView                               POV;                                              		// 0x05B4 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class AWeapon*                                     myWeapon;                                         		// 0x05C8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       LeftHandBoneHandleName;                           		// 0x05CC (0x0008) [0x0000000000000000]              
	struct FName                                       RightHandBoneHandleName;                          		// 0x05D4 (0x0008) [0x0000000000000000]              
	struct FName                                       LeftHandleSocketName;                             		// 0x05DC (0x0008) [0x0000000000000000]              
	struct FName                                       RightHandleSocketName;                            		// 0x05E4 (0x0008) [0x0000000000000000]              
	float                                              InitialEntryZOffset;                              		// 0x05EC (0x0004) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       ReservedDriver;                                   		// 0x05F0 (0x0004) [0x0000000000000000]              
	class AWeapon*                                     LastWeapon;                                       		// 0x05F4 (0x0004) [0x0000000000000000]              
	struct FVector                                     CameraViewOffsetHigh;                             		// 0x05F8 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     CameraViewOffsetMid;                              		// 0x0604 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     CameraViewOffsetLow;                              		// 0x0610 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     CameraTargetingViewOffsetHigh;                    		// 0x061C (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     CameraTargetingViewOffsetMid;                     		// 0x0628 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     CameraTargetingViewOffsetLow;                     		// 0x0634 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              CameraFOV;                                        		// 0x0640 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CameraTargetingFOV;                               		// 0x0644 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FName                                       WorstCamLocSocketName;                            		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ViewRotVel;                                       		// 0x0650 (0x000C) [0x0000000000000000]              
	float                                              ViewRotInterpSpeed;                               		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMatrix                                     LastBaseTM;                                       		// 0x0660 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	class UDynamicLightEnvironmentComponent*           MyLightEnvironment;                               		// 0x06A0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CameraScale;                                      		// 0x06A4 (0x0004) [0x0000000000000000]              
	float                                              CurrentCameraScale;                               		// 0x06A8 (0x0004) [0x0000000000000000]              
	struct FName                                       currState;                                        		// 0x06AC (0x0008) [0x0000000000000020]              ( CPF_Net )
	class USFGameExplosion*                            DestroyEffectInfo;                                		// 0x06B4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              ExtendDamageDepictionColor;                       		// 0x06B8 (0x0004) [0x0000000000000000]              
	TArray< class UMaterialInstanceConstant* >         DamagedMICs;                                      		// 0x06BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FBonePartsTable >                   BoneNameToBodyParts;                              		// 0x06C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FVector                                     IconLocationOffset;                               		// 0x06D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastTakeHitInfo_Mask;                             		// 0x06E0 (0x0001) [0x0000000000000020]              ( CPF_Net )
	class AActor*                                      LastTakeHitInfo_DamagedBy;                        		// 0x06E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      LastTakeHitInfo_DamageType;                       		// 0x06E8 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3917 ];

		return pClassPointer;
	};

	void CheckExtendDamageDepiction ( class AActor* Atacker, class UClass* AttackDamageType );
	int eventGetHealthPercentageINT ( );
	void UpdateExtendDamageDepiction ( float fdelta );
	bool IsValidTargetFor ( class AController* C );
	unsigned char GetBodyPartByBoneName ( struct FName BoneName, struct FVector Line, struct FVector Origin, float fHeadPointDist );
	void SpawnDestroyEffects ( );
	void ResetAimDir ( class ASFAIController* Ctrler );
	void SetThirdPersonCamera ( unsigned long bNewBehindView, unsigned long bForSpectator, unsigned long bForce );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void ApplyCheckpointRecord ( struct ASFTurret_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASFTurret_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	bool WantsCrosshair ( class APlayerController* PC );
	void Tick ( float DeltaTime );
	void UpdateForMovingBase ( class AActor* BaseActor );
	bool StopFiring ( );
	struct FVector GetCameraWorstCaseLoc ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* OutDeltaRot );
	void OnSFExitVehicle ( class USeqAct_SFExitVehicle* inAction );
	bool ShouldTargetingModeZoomCamera ( );
	void DriverLeft ( );
	void PrepareEnd ( );
	bool TryToDrive ( class APawn* P );
	bool CanEnterVehicle ( class APawn* P );
	void StartFire ( unsigned char FireModeNum );
	void UnPossessed ( );
	void Reset ( );
	void FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication );
	void PlayPawnActionAutoVoice ( unsigned char WeaponState );
	void PlayPawnActionAnim ( unsigned char WeaponState, unsigned char HitType, unsigned char FallDir );
	void WeaponStateChanged ( unsigned char WeaponStateNew, unsigned long bRedundance, class ASFWeapon* eventCaller );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	struct FRotator GetTurretAimDir ( );
	bool TurretClampYaw ( struct FRotator* Rot );
	struct FRotator eventGetBaseAimRotation ( );
	struct FVector eventGetPawnViewLocation ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector FireOffset );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	struct FRotator GetIdleRotForTurretScan ( class ASFAIController* C, unsigned long bCenter );
	void AIIdleNotification ( class ASFAIController* C );
	void UpdateAIController ( class ASFAIController* C, float DeltaTime );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void ClientRestart ( );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void eventReplicatedEvent ( struct FName VarName );
	void SetMuzzleHooks ( );
	void SetAnimNodes ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void AddDefaultInventory ( );
	bool UnclaimTurret ( class AController* C );
	bool ClaimTurret ( class AController* C );
	bool eventDriverLeave ( unsigned long bForceLeave );
	bool DriverEnter ( class APawn* P );
	bool IsControllerFireInputPressed ( unsigned char InFiringMode );
	bool PawnCommitToFiring ( unsigned char InFiringMode );
	bool IsWeaponPendingFire ( unsigned char InFiringMode );
	void Restart ( );
	void PostBeginPlay ( );
	struct FRotator eventGetDriverIdealRotation ( );
	struct FVector eventGetDriverIdealPosition ( );
	void UpdateDriver ( float DeltaTime );
};

UClass* ASFTurret::pClassPointer = NULL;

// Class SFGame.SFTurret_MiniGunBase
// 0x0080 (0x076C - 0x06EC)
class ASFTurret_MiniGunBase : public ASFTurret
{
public:
	float                                              TraceSpeed;                                       		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SearchSpeed;                                      		// 0x06F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TooCloseDist;                                     		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    TurretControlRot;                                 		// 0x06F8 (0x000C) [0x0000000000000000]              
	struct FVector                                     SpottedLoc;                                       		// 0x0704 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredSpottedLoc;                                		// 0x0710 (0x000C) [0x0000000000000000]              
	class USkelControlLookAt*                          Pivot_Latitude;                                   		// 0x071C (0x0004) [0x0000000000000000]              
	class USkelControlLookAt*                          Pivot_Longitude;                                  		// 0x0720 (0x0004) [0x0000000000000000]              
	struct FName                                       Pivot_Latitude_BoneName;                          		// 0x0724 (0x0008) [0x0000000000000000]              
	struct FName                                       PlayerRefSocketName;                              		// 0x072C (0x0008) [0x0000000000000000]              
	TArray< struct FMuzzle >                           Muzzles;                                          		// 0x0734 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UAnimNodeSequence*                           FireSeqNode;                                      		// 0x0740 (0x0004) [0x0000000000000000]              
	float                                              EntryRadius;                                      		// 0x0744 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             IFFEnemy;                                         		// 0x0748 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    IFFPSC;                                           		// 0x074C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       IFFBone;                                          		// 0x0750 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      FocusEnemy;                                       		// 0x0758 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              fFocusStartTime;                                  		// 0x075C (0x0004) [0x0000000000000000]              
	float                                              fFireSimulating;                                  		// 0x0760 (0x0004) [0x0000000000000000]              
	float                                              RandomRotdir;                                     		// 0x0764 (0x0004) [0x0000000000000000]              
	class USkeletalMesh*                               DestroyedMesh;                                    		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3919 ];

		return pClassPointer;
	};

	void UpdateIFFParticle ( );
	void StopShellOut ( int MuzzleNum );
	void StopShellOut1 ( );
	void StopShellOut0 ( );
	void ShellOut ( );
	void StopMuzzleFlash ( int MuzzleNum );
	void StopMuzzleFlash1 ( );
	void StopMuzzleFlash0 ( );
	void SetMuzzleFlashParams ( class USFParticleSystemComponent* PSC );
	void CauseMuzzleFlashLight ( int MuzzleNum );
	void CauseMuzzleFlash ( );
	void CauseShellOut ( );
	void CauseFireEffect ( unsigned long bForce );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	struct FVector GetMuzzleLoc ( );
	int GetMuzzleSocketNum ( );
	struct FName eventGetMuzzleSocketName ( int num );
	struct FVector GetPawnViewLocation ( );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void SpawnDestroyEffects ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, unsigned long bIgnoreDeathScore );
	void eventAttach ( class AActor* Other );
	bool WantsCrosshair ( class APlayerController* PC );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	struct FRotator eventGetViewRotation ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector FireOffset );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRot, struct FRotator* OutDeltaRot );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void SetMovementPhysics ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	bool PlaceExitingDriver ( class APawn* Who );
	void UpdateTurret ( float DeltaTime );
	struct FRotator eventGetDriverIdealRotation ( );
	void Tick ( float DeltaTime );
	struct FRotator GetIdleRotForTurretScan ( class ASFAIController* C, unsigned long bCenter );
	void AIIdleNotification ( class ASFAIController* C );
	void UpdateAIIdleController ( class ASFAIController* C, float DeltaTime );
	struct FVector UpdateAIBusyController ( class ASFAIController* C, float DeltaTime );
	void UpdateAIController ( class ASFAIController* C, float DeltaTime );
	bool CanEnterVehicle ( class APawn* P );
	struct FVector eventGetEntryLocation ( );
	void ClearAnimNodes ( );
	void SetMuzzleHooks ( );
	void SetAnimNodes ( );
	void Destroyed ( );
	void PostBeginPlay ( );
};

UClass* ASFTurret_MiniGunBase::pClassPointer = NULL;

// Class SFGame.SFVehicle
// 0x0014 (0x0564 - 0x0550)
class ASFVehicle : public AVehicle
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0550 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     BaseOffset;                                       		// 0x0554 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CamDist;                                          		// 0x0560 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3921 ];

		return pClassPointer;
	};

	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
};

UClass* ASFVehicle::pClassPointer = NULL;

// Class SFGame.SFVehicle_ConvoyTarget
// 0x0000 (0x0564 - 0x0564)
class ASFVehicle_ConvoyTarget : public ASFVehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3923 ];

		return pClassPointer;
	};

	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, unsigned long bIgnoreDeathScore );
};

UClass* ASFVehicle_ConvoyTarget::pClassPointer = NULL;

// Class SFGame.SFVehicleSimCar
// 0x0078 (0x0140 - 0x00C8)
class USFVehicleSimCar : public USVehicleSimCar
{
public:
	struct FInterpCurveFloat                           TorqueVSpeedCurve;                                		// 0x00C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           EngineRPMCurve;                                   		// 0x00D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LSDFactor;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThrottleSpeed;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRPM;                                           		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              MaxRPM;                                           		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              ActualThrottle;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceThrottle : 1;                               		// 0x00FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHasForcedThrottle : 1;                           		// 0x00FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDriverlessBraking : 1;                           		// 0x00FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutoHandbrake : 1;                               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              SteeringReductionFactor;                          		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringReductionRampUpRate;                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentSteeringReduction;                         		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                NumWheelsForFullSteering;                         		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringReductionSpeed;                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringReductionMinSpeed;                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinHardTurnSpeed;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HardTurnMotorTorque;                              		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeSpeed;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActualHandbrake;                                  		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              FrontalCollisionGripFactor;                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleHardTurnGripFactor;                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedBasedTurnDamping;                            		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AirControlTurnTorque;                             		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InAirUprightTorqueFactor;                         		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InAirUprightMaxTorque;                            		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3925 ];

		return pClassPointer;
	};

};

UClass* USFVehicleSimCar::pClassPointer = NULL;

// Class SFGame.AIAvoidanceCylinder
// 0x0014 (0x0238 - 0x0224)
class AAIAvoidanceCylinder : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UAIAvoidanceCylinderComponent*               AvoidanceComp;                                    		// 0x0228 (0x0004) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      TeamThatShouldFleeMe;                             		// 0x022C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       OwnerName;                                        		// 0x0230 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3927 ];

		return pClassPointer;
	};

	bool ShouldEvade ( class ASFAIController* AskingAI, class UAIAvoidanceCylinderComponent* TriggeringComponent );
	bool ShouldAvoid ( class ASFAIController* AskingAI, class UAIAvoidanceCylinderComponent* TriggeringComponent );
	void eventBaseChange ( );
	void SetAvoidanceTeam ( unsigned char TeamThatShouldAvoid );
	void SetCylinderSize ( float Radius, float Height );
	void SetEnabled ( unsigned long bInEnabled );
	void OnToggle ( class USeqAct_Toggle* Action );
	void PostBeginPlay ( );
	void ForceReTouch ( );
};

UClass* AAIAvoidanceCylinder::pClassPointer = NULL;

// Class SFGame.AIAvoidanceCylinderComponent
// 0x008D (0x0289 - 0x01FC)
class UAIAvoidanceCylinderComponent : public UCylinderComponent
{
public:
	unsigned char                                      UnknownData00[ 0x3C ];                            		// 0x01FC (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.AIAvoidanceCylinderComponent.LinkedNavigationPoints
	unsigned char                                      UnknownData01[ 0x3C ];                            		// 0x0238 (0x003C) UNKNOWN PROPERTY: MapProperty SFGame.AIAvoidanceCylinderComponent.LinkedReachSpecs
	struct FVector                                     LastReLinkLocation;                               		// 0x0274 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              UpdateThreshold;                                  		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      TeamThatShouldFleeMe;                             		// 0x0288 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3929 ];

		return pClassPointer;
	};

	void AIEnteredAvoidanceCylinder ( class ASFAIController* EnteringAI );
	bool ShouldAIEvade ( class ASFAIController* AskingAI );
	bool eventInternalShouldAIAvoidMe ( class ASFAIController* AskingAI );
	bool ShouldAIAvoidMe ( class ASFAIController* AskingAI );
	bool BuildListOfAffectingCylinders ( class ASFAIController* AskingAI, TArray< class UAIAvoidanceCylinderComponent* >* InAffectingCylinders );
	bool DoesSpecIntersect ( class UReachSpec* Spec );
	bool IsNavPointWithin ( class ANavigationPoint* Pt );
	void eventSetEnabled ( unsigned long bInEnabled );
	void eventForceReLink ( );
};

UClass* UAIAvoidanceCylinderComponent::pClassPointer = NULL;

// Class SFGame.AIReactCond_NewEnemy
// 0x0004 (0x0080 - 0x007C)
class UAIReactCond_NewEnemy : public UAIReactCond_Conduit_Base
{
public:
	float                                              TimeSinceSeenThresholdSeconds;                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3931 ];

		return pClassPointer;
	};

};

UClass* UAIReactCond_NewEnemy::pClassPointer = NULL;

// Class SFGame.AIReactCond_SurpriseEnemyLoc
// 0x0000 (0x007C - 0x007C)
class UAIReactCond_SurpriseEnemyLoc : public UAIReactCond_Conduit_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3933 ];

		return pClassPointer;
	};

};

UClass* UAIReactCond_SurpriseEnemyLoc::pClassPointer = NULL;

// Class SFGame.AIReactCond_Targeted
// 0x0010 (0x0070 - 0x0060)
class UAIReactCond_Targeted : public UAIReactCondition_Base
{
public:
	class APawn*                                       shooter;                                          		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              ShooterRangeThreshold;                            		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookToTargetThreshold;                            		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOnlyInstantHitWeapon : 1;                        		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3935 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_Targeted::pClassPointer = NULL;

// Class SFGame.AIVisibilityManager
// 0x0018 (0x0054 - 0x003C)
class UAIVisibilityManager : public UObject
{
public:
	int                                                ControllerIttStartPoint;                          		// 0x003C (0x0004) [0x0000000000000000]              
	unsigned long                                      bDrawVisTests : 1;                                		// 0x0040 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FPointer                                    FreeLineCheckResList;                             		// 0x0044 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    BusyLineCheckResList;                             		// 0x0048 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    PendingLineCheckHead;                             		// 0x004C (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    PendingLineCheckTail;                             		// 0x0050 (0x0004) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3937 ];

		return pClassPointer;
	};

	void Reset ( );
	void NotifyPawnDestroy ( class APawn* Pawn );
};

UClass* UAIVisibilityManager::pClassPointer = NULL;

// Class SFGame.CombatZoneRenderingComponent
// 0x0000 (0x01EC - 0x01EC)
class UCombatZoneRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3939 ];

		return pClassPointer;
	};

};

UClass* UCombatZoneRenderingComponent::pClassPointer = NULL;

// Class SFGame.NavMeshPath_AvoidPoint
// 0x0014 (0x0064 - 0x0050)
class UNavMeshPath_AvoidPoint : public UNavMeshPathConstraint
{
public:
	TArray< struct FVector >                           AvoidPoints;                                      		// 0x0050 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AvoidDistance;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              MuxCost;                                          		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3941 ];

		return pClassPointer;
	};

	bool AvoidPoint ( class UNavigationHandle* NavHandle, TArray< struct FVector > myAvoidPoints, float myAvoidDistance, float myMuxCost );
};

UClass* UNavMeshPath_AvoidPoint::pClassPointer = NULL;

// Class SFGame.SFAggroSystem
// 0x0078 (0x00B4 - 0x003C)
class USFAggroSystem : public UObject
{
public:
	TArray< struct FsAWaitTime >                       AwaitDefList;                                     		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    AINoiseLevelList;                                 		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsAINoise >                         AINoiseDefList;                                   		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsAINoise >                         AINoiseList;                                      		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    AggroChaseTime;                                   		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsAggro >                           AggroList;                                        		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsAWaitTime                                 AwaitTime;                                        		// 0x0084 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASFAIController*                             Owner;                                            		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              AggroDPS;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              RecommRange;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                MaxAggroMultiplier;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	class ASFGameReplicationInfo*                      SFGRI;                                            		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3943 ];

		return pClassPointer;
	};

	void eventNotifyOwnerDied ( );
	void eventNotifyTakeDamage ( class APawn* Killer, int newDamage );
	bool eventMakeVisibleProjectileList ( );
	void eventMakeCollidingPawnList ( );
	int GetAggroIndex ( class APawn* NewTarget );
	float GetDistance ( class APawn* NewTarget );
	bool IsEngage ( class APawn* NewTarget );
	int AddNewAggro ( class APawn* NewTarget );
	float GetWaitTime ( class APawn* NewTarget );
	void ClearNonePawnInfo ( );
	void Update ( );
	void Init ( class ASFAIController* NewOwner );
};

UClass* USFAggroSystem::pClassPointer = NULL;

// Class SFGame.SFAI_Info
// 0x0090 (0x00CC - 0x003C)
class USFAI_Info : public UObject
{
public:
	TArray< struct FEnemyWeapon >                      AIWeapons;                                        		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FEnemySpawnInfo >                   AIList;                                           		// 0x0048 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      BossWaves;                                        		// 0x0054 (0x000C) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AI_CombatType_Melee;                              		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_CombatType_Range;                              		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_CombatType_Hide;                               		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_AttackType_Claw;                               		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_AttackType_RecoverHealth;                      		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_AttackType_Kamikaze;                           		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_AttackType_Dash;                               		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_AttackType_Split;                              		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AI_AttackType_Adrenalin;                          		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3945 ];

		return pClassPointer;
	};

	float GetAIWeaponRating ( unsigned char AIType, int WeapSlot );
	float GetAIRating ( int WeaponType );
	void DumpAIList ( );
	int GetAISquadCharge ( int AIIndex );
	int GetAIWaveCost ( int AIIndex );
	int GetAIMaxCount ( int AIIndex );
	int GetAIMinCount ( int AIIndex );
	int GetAIMaxWave ( int AIIndex );
	int GetAIMinWave ( int AIIndex );
	bool GetAIInventoryTypes ( int AIIndex, TArray< unsigned char >* InventoryTypes );
	bool IsBoss ( int AIIndex );
	unsigned char GetAIType ( int AIIndex );
	int GetAIListCount ( );
	int GetAIIndexByType ( int AIType );
	void GetAIWeapon ( int nIndex, struct FEnemyWeapon* Weapon );
	int GetAllAIWeaponCount ( );
	bool GetAIWeaponIDByPawn ( class APawn* TargetPawn, int Count, int* nSet, int* nSlot, int* WeaponID, int* AI_Type );
	int GetAIWeaponCountByPawn ( class APawn* TargetPawn );
	int GetAITypeByPawn ( class APawn* TargetPawn );
	bool GetAIWeaponIDByAIType ( int AIType, int Count, int* nSet, int* nSlot, int* WeaponID );
	bool GetAIWeaponIDByType ( unsigned char WeaponType, int* nSet, int* nSlot, int* WeaponID );
	bool GetAIWeaponIndex ( int AIIndex, int Count, int* nSet, int* nSlot, int* WeaponID );
	int GetAIWeaponCountByAIType ( int AIType );
	int GetAIWeaponCount ( int AIIndex );
	bool IsValidIndex ( int AIIndex );
};

UClass* USFAI_Info::pClassPointer = NULL;

// Class SFGame.SFAICommand
// 0x0010 (0x0068 - 0x0058)
class USFAICommand : public UGameAICommand
{
public:
	class ASFAIController*                             AIOwner;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	class USFAICommand*                                CachedSFChildCommand;                             		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              CommandStartTime;                                 		// 0x0060 (0x0004) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3947 ];

		return pClassPointer;
	};

	void NotifySniperAim ( );
	void NotifyEndGame ( );
	void CommandSuccess ( );
	void LostTarget ( );
	void NotifyLureProjectileExploded ( class AProjectile* Projectile );
	void NotifyLureProjectileTargeted ( class AProjectile* Projectile );
	void NotifySurpriseNewEnemy ( class AActor* NewTarget );
	void NotifyTargetLost ( );
	void NotifyTargetInsight ( );
	void ClearChildCommand ( );
	bool MoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	void NotifyMoveSuccess ( );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void NotifyNeedRepath ( );
	void CommandEnd ( );
	void Popped ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
	void PostPopped ( );
	void PrePushed ( class AGameAIController* AI );
};

UClass* USFAICommand::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_Mesh
// 0x0074 (0x00DC - 0x0068)
class UAICmd_MoveToGoal_Mesh : public USFAICommand
{
public:
	unsigned long                                      bValidRouteCache : 1;                             		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanPathfind : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowPartialPath : 1;                            		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFinalApproach : 1;                               		// 0x0068 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHastriedToEscapeFromAnchor : 1;                  		// 0x0068 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bSavedIgnoreStepAside : 1;                        		// 0x0068 (0x0004) [0x0000000000000000] [0x00000020] 
	struct FVector                                     IntermediatePoint;                                		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     LastMovePoint;                                    		// 0x0078 (0x000C) [0x0000000000000000]              
	int                                                NumMovePointFails;                                		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                MaxMovePointFails;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FVector                                     InitialFinalDestination;                          		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     FailSafeDestination;                              		// 0x0098 (0x000C) [0x0000000000000000]              
	struct FBasedPosition                              LastMoveTargetPathLocation;                       		// 0x00A4 (0x0034) [0x0000000000000000]              
	float                                              FinalApproachTime;                                		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3949 ];

		return pClassPointer;
	};

	bool GetTacticMoveDir ( class AActor* AttentionTarget, struct FVector* vTargetLoc );
	void NotifyMoveSuccess ( );
	void NotifyNeedRepath ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	float GetMoveDestinationOffset ( );
	void eventDrawDebug ( class AHUD* H, struct FName Category );
	void CommandSuccess ( );
	void CommandFailed ( );
	bool ShouldWalk ( );
	void StartingMove ( );
	bool HandlePathObstruction ( class AActor* BlockedBy );
	bool MoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	bool MovePointIsValid ( struct FVector Point );
	void MoveToGoalTimedOut ( );
	bool ReachedTargetActor ( );
	bool HasReachedGoal ( );
	struct FVector GetMovePoint ( );
	void ReEvaluatePath ( );
	void Resumed ( struct FName OldCommandName );
	void Paused ( class UGameAICommand* NewCommand );
	void Popped ( );
	void Pushed ( );
	struct FString eventGetDumpString ( );
	bool MoveToGoal ( class ASFAIController* AI, struct FVector NewMovePoint, class AActor* NewMoveToActor, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bInAllowPartialPath );
};

UClass* UAICmd_MoveToGoal_Mesh::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToMesh
// 0x0020 (0x0088 - 0x0068)
class UAICmd_MoveToMesh : public USFAICommand
{
public:
	unsigned long                                      bSavedIgnoreStepAside : 1;                        		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FVector >                           ValidPositionOnMesh;                              		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     BestValidPosition;                                		// 0x0078 (0x000C) [0x0000000000000000]              
	float                                              ValidSearchRadius;                                		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3951 ];

		return pClassPointer;
	};

	void eventDrawDebug ( class AHUD* H, struct FName Category );
	bool HasReachedGoal ( );
	void Popped ( );
	void Pushed ( );
	struct FString eventGetDumpString ( );
	bool MoveToMesh ( class ASFAIController* AI );
};

UClass* UAICmd_MoveToMesh::pClassPointer = NULL;

// Class SFGame.SFAIController_Human
// 0x0158 (0x07AC - 0x0654)
class ASFAIController_Human : public ASFAIController
{
public:
	unsigned long                                      bForAIBalance : 1;                                		// 0x0654 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      RecklessLevel;                                    		// 0x0658 (0x0001) [0x0000000000000000]              
	unsigned char                                      BattleLevel;                                      		// 0x0659 (0x0001) [0x0000000000000000]              
	unsigned char                                      HumanAIType;                                      		// 0x065A (0x0001) [0x0000000000000000]              
	unsigned char                                      AILevelLast;                                      		// 0x065B (0x0001) [0x0000000000000000]              
	float                                              RoamingStart;                                     		// 0x065C (0x0004) [0x0000000000000000]              
	TArray< int >                                      CachedWeaponSet;                                  		// 0x0660 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CachedPawnItemList;                               		// 0x066C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPawnInventorySet                           PawnInventoryInfo;                                		// 0x0678 (0x0034) [0x0000000000002000]              ( CPF_Transient )
	struct FWeaponInventorySet                         WeaponInventoryInfo;                              		// 0x06AC (0x008C) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FsTacticMove >                      TacticMoveDelays;                                 		// 0x0738 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsTacticMove >                      TacticMoveDirs;                                   		// 0x0744 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    SpreadAdjust;                                     		// 0x0750 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    PassSpecialBomb;                                  		// 0x075C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    SpreadTargetMeter;                                		// 0x0768 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    BackupChance;                                     		// 0x0774 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    BattleRotationRate;                               		// 0x0780 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    SniperAvoidChance;                                		// 0x078C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    SpreadTargetDistSq;                               		// 0x0798 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APawn*                                       AimmingTarget;                                    		// 0x07A4 (0x0004) [0x0000000000000000]              
	float                                              vsAIspread;                                       		// 0x07A8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3953 ];

		return pClassPointer;
	};

	void AddBasePathConstraints ( );
	void NotifyDmgFromOtherEnemy ( class AActor* Attacker );
	bool SniperAvoidReady ( );
	bool BackupReady ( );
	bool eventPassSpecialBombEffect ( );
	float VariationTacticTime ( struct FsTacticMove BaseInfo );
	float GetTacticMoveDelay ( );
	float GetTacticMoveDir ( );
	unsigned char GetTeamAILevel ( );
	void ResetAILevel ( int newLevel );
	void TryChangeMoveTarget ( class AActor* OldTarget );
	void AutoAttackEnd ( );
	void ResetEndFire ( float WaitTime );
	void NotifyTargetLost ( );
	void ResetFireWait ( );
	void NotifyTargetInsight ( );
	unsigned char GetRecklessLevel ( );
	unsigned char GetBattleLevel ( );
	float GetSpreadAdjust ( );
	unsigned char GetAIType ( );
	void PawnDied ( class APawn* P );
	void FiretoNewTarget ( class APawn* NewFireTarget );
	class AActor* GetFocusTarget ( );
	void ToPeaceState ( );
	void PostBeginPlay ( );
	float GetRecommRange ( );
	bool CanAttack ( class AActor* Other );
	void MoveCommandPopped ( );
	bool MoveToTarget ( class AActor* TargettoMove );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	struct FWeaponInventorySet GetWeaponInventoryInfo ( int myInvSetSlot );
	bool IsUseHumanInventory ( );
	int GetCachedWeaponSet ( TArray< int >* AvaliableWeaponSet );
	void GetInventory ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	void SetupCharItems ( );
	void UpdateTeamIndex ( unsigned char NewTeamIndex );
	bool MovingFront ( struct FVector MovingTargetLoc );
	bool ShouldWalk ( struct FVector IntermediatePoint, unsigned long bFinalApproach );
	void StartSpectating ( );
	void CallMoveToGoal ( class AActor* NewMoveGoal, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bAllowPartialPath );
	void ReCheckForcerespawn ( );
	bool IsBulletWeaponNow ( );
	void AutoAttackStart ( );
	bool ReadyToFire ( );
	void eventNoticedEnemySeen ( class APawn* SeenEnemy );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void EnemyInsight ( class AActor* MovedTarget, class UAIReactChannel* OrigChannel );
	void AddReactionsEnemyInsight ( class ASFAIController* AI );
	void AddReactions ( );
	int SelectBestWeapon ( );
};

UClass* ASFAIController_Human::pClassPointer = NULL;

// Class SFGame.SFAIController_Solider
// 0x006C (0x0818 - 0x07AC)
class ASFAIController_Solider : public ASFAIController_Human
{
public:
	struct FVector                                     vDiedLocationLast;                                		// 0x07AC (0x000C) [0x0000000000000000]              
	float                                              AloneRoamingLimit;                                		// 0x07B8 (0x0004) [0x0000000000000000]              
	float                                              AloneRoamingTime;                                 		// 0x07BC (0x0004) [0x0000000000000000]              
	TArray< struct FsTacticMove >                      PointCampingStay;                                 		// 0x07C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsTacticMove >                      PointCampingDist;                                 		// 0x07CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    CampingRatio;                                     		// 0x07D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    SniperCampingRatio;                               		// 0x07E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< float >                                    EvadeChance;                                      		// 0x07F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              AvoidJumpCoolTime;                                		// 0x07FC (0x0004) [0x0000000000000000]              
	float                                              LastAvoidJump;                                    		// 0x0800 (0x0004) [0x0000000000000000]              
	TArray< class AActor* >                            PendingBombingSupportTarget;                      		// 0x0804 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bPendingFire : 1;                                 		// 0x0810 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LastBomingSurportTime;                            		// 0x0814 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3955 ];

		return pClassPointer;
	};

	bool SuppressiveCommandActived ( );
	void SuppressiveFire ( class AActor* NewTarget );
	void ChangeThrowableWeapon ( );
	bool IsThrowableWeapon ( class ASFWeapon* W );
	float GetSpreadTargetDistSq ( );
	void CallBackup ( class AActor* NewTarget );
	bool IsReadyBombingSupport ( class AActor* Target );
	void CancelBombingSupport ( int TargetID );
	void SetPendingBombingSupportTarget ( class AActor* Target );
	class AActor* GetPendingBombingSupportTarget ( );
	bool HasThrowableWeapon ( );
	void CommandBombingSupport ( class AActor* Target );
	void RequestBombingSupport ( class AActor* Target );
	void CrouchOut ( );
	void AvoidCrouch ( );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void DoJump ( );
	void AvoidJump ( );
	void AvoidSniperAim ( );
	void eventNotifySniperAimmingMe ( class APawn* Target );
	bool SniperAvoidReady ( );
	bool BackupReady ( );
	bool eventPassSpecialBombEffect ( );
	bool eventIsInCombat ( unsigned long bForceCheck );
	float eventGetEvadeChanceScale ( );
	bool CheckCombatContinue ( );
	void SearchOtherTarget ( class AActor* myTarget );
	void eventNotifyEnemyPerceptionRange ( class AActor* NewTarget );
	void NotifyTakeDamage ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	unsigned char GetNeededNavPointType ( );
	struct FVector GetPointCampingDist ( struct FVector vOrg );
	float GetPointCampingTime ( );
	void PointRoaming ( class AActor* NewMoveTarget );
	bool IsValidTarget ( class AActor* NewTarget );
	void AutoAttackEnd ( );
	void ResetFireWait ( );
	bool ShouldWalk ( struct FVector IntermediatePoint, unsigned long bFinalApproach );
	void EndCombat ( );
	unsigned char GetAIType ( );
	bool CanAttack ( class AActor* Other );
	void FiretoNewTarget ( class APawn* NewFireTarget );
	void CommandTacticalMove ( class AActor* NewMoveTarget );
	void SetEnemy ( class AActor* NewTarget, float fNewDist );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	bool ResetRoamTarget ( );
	void SetMyFirstTarget ( );
	void SetRoamTarget ( class AActor* NewTarget, struct FVector TargetLoc );
	bool HasValidRoamingTarget ( class AActor* TestTarget );
	bool IsValidRoamingTarget ( class AActor* NewTarget );
	bool IsRecycleDeadController ( );
	void AddBasePathConstraints ( );
	struct FVector GetLastDiedLocation ( );
	float CommandRoaming ( );
	void PrepareCombat ( );
};

UClass* ASFAIController_Solider::pClassPointer = NULL;

// Class SFGame.SFAIController_TEST
// 0x0000 (0x0654 - 0x0654)
class ASFAIController_TEST : public ASFAIController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3957 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_TEST::pClassPointer = NULL;

// Class SFGame.SFAIController_Dummy
// 0x0000 (0x0654 - 0x0654)
class ASFAIController_Dummy : public ASFAIController_TEST
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3959 ];

		return pClassPointer;
	};

	void DoJump ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
};

UClass* ASFAIController_Dummy::pClassPointer = NULL;

// Class SFGame.SFAIController_FLYTEST
// 0x0004 (0x0658 - 0x0654)
class ASFAIController_FLYTEST : public ASFAIController_TEST
{
public:
	float                                              HoverHeight;                                      		// 0x0654 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3961 ];

		return pClassPointer;
	};

	void MoveToNearestEnemyByHovering ( );
	void eventSetHoverToGoal ( class AActor* NewMoveGoal );
};

UClass* ASFAIController_FLYTEST::pClassPointer = NULL;

// Class SFGame.SFAIVisibleControl
// 0x0004 (0x0228 - 0x0224)
class ASFAIVisibleControl : public AActor
{
public:
	class UAIVisibilityManager*                        AIVisMan;                                         		// 0x0224 (0x0004) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3963 ];

		return pClassPointer;
	};

	void NotifyBeginPendingMatch ( );
};

UClass* ASFAIVisibleControl::pClassPointer = NULL;

// Class SFGame.SFHeadQuarters
// 0x00DC (0x0300 - 0x0224)
class ASFHeadQuarters : public AInfo
{
public:
	class ASFTeamInfo*                                 myTeam;                                           		// 0x0224 (0x0004) [0x0000000000000000]              
	class ASFTeamInfo*                                 EnemyTeam;                                        		// 0x0228 (0x0004) [0x0000000000000000]              
	TArray< class ASFModeVolume* >                     StrategicPoints;                                  		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ASFSquad* >                          Squads;                                           		// 0x0238 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OrderOffset;                                      		// 0x0244 (0x0004) [0x0000000000000000]              
	struct FName                                       OrderList[ 0x8 ];                                 		// 0x0248 (0x0040) [0x0000000000000000]              
	unsigned long                                      bUseSquadBalence : 1;                             		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpawnBalence : 1;                                		// 0x0288 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class ASFGamePlayerStart* >                SpawnPointsAlly;                                  		// 0x028C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class ASFGamePlayerStart* >                SpawnPointsEnemy;                                 		// 0x0298 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsRecommendNavPoint >               RecommendNavPoints;                               		// 0x02A4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsEnemyReport >                     EnemyReports;                                     		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsAvoidActor >                      AvoidActors;                                      		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsKillingChain >                    KillingChains;                                    		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsBombingSupport >                  BombingSupportList;                               		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsKillerPlaceRecord >               KillerPlaceRecords;                               		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CamperMagicNumber;                                		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoolTimeBombingSupport;                           		// 0x02F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class ASFPathNode* >                       ValidPathNode;                                    		// 0x02F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3965 ];

		return pClassPointer;
	};

	class AActor* GetItemCarrierPathNode ( class ASFAIController* AIController );
	void UpdateValidPathNode ( );
	float GetPlaceStandardDeviation ( class AController* Killer );
	int RecordKillerPlace ( class AController* Killer );
	bool IsCampper ( class AController* Killer );
	int GetDyingChains ( int PlayerID );
	int GetKillingChains ( int PlayerID );
	class AController* GetBomingApplicant ( class AController* Target );
	void BombingSupport ( );
	void ClearRequestBombingSupport ( int TargetID );
	void RequestBombingSupport ( class AController* Target );
	void SpreadEnemyReport ( class APawn* Observer, class APawn* SeenEnemy );
	void UpdateChainKilling ( class AController* Killer, class AController* Killed );
	class AActor* GetRecommendMoveTarget ( class APawn* Inst, class AActor* IgnoreActor, unsigned long bIgnorePawn );
	void RoammingTargetReached ( class ASFAIController* Inst, class AActor* Target );
	class AActor* GetRecommendNavPoint ( class APawn* Inst );
	void DeleteEnemyReport ( class APawn* Target );
	void ReportNewEnemy ( class APawn* Observer, class APawn* SeenEnemy );
	bool ProposeRoamingTarget ( class AController* MyController, unsigned long ForceTargetPawn, class AActor** NewTarget, struct FVector* TargetLoc );
	bool GetReportedEnemyPosition ( class AActor** NewTarget, struct FVector* TargetLoc );
	class AActor* GetEnemyLocation ( class ASFAIController* Inst );
	class AActor* GetEnemySpawnPoint ( class AActor* OldTarget );
	void StockRoamingPoints ( );
	bool GetPurposeMoveTarget ( class AController* NewMember, struct FName* PurposeSquadName, float* fDist );
	float GetDistanceToAvoidFriend ( unsigned long bMax );
	void GetLocationToAvoidFriend ( TArray< struct FVector >* vLocs );
	void RegistAvoidActor ( class AActor* Target, float Dist );
	void UnregistAvoidActor ( class AActor* Target );
	void GetLocationToAvoidActor ( TArray< struct FVector >* vLocs );
	float GetDistanceToAvoidActor ( unsigned long bMax );
	bool IsOverLoadSquadCharge ( class AActor* Target );
	int GetMemberCountbyTarget ( class AActor* Target );
	void UnregisterSquadMember ( class AController* Inst );
	void RequestSquadsRegist ( class AController* Inst, class AActor* NewTarget, float newdist );
	class APawn* GetRecommendedEnemy ( class APawn* Inst, class APawn* ExceptionPawn, float* bestDist );
	int GetSquadIdxbyName ( struct FName SquadName );
	void UpdateSpawnBalence ( );
	void RequestSquadsBalence ( int Idx, int Variance );
	void SortMemberNumbers ( struct FName ChangedSquadName );
	void UpdateSquadsBalence ( );
	void Tick ( float DeltaTime );
	void ReflushSquad ( );
	class ASFSquad* ConditionalCreateSquad ( struct FName SquadName, class UClass* SquadClass );
	struct FName GetChargingSquadName ( class APawn* NewMember, class AActor* NearstTarget );
	class ASFPawn* GetNearestEnemy ( class APawn* Pawn, float* bestDist );
	bool GetPurposeSquad ( class AController* NewMember, struct FName* PurposeSquadName, float* fDist );
	void JoinSquad ( struct FName SquadName, class AController* NewMember, unsigned long bLeader, class UClass* SquadClass );
	void FindNewStrategicPointFor ( class ASFSquad* S, unsigned long bForceUpdate );
	void FindNewStrategicPoint ( class ASFModeVolume* DisabledStrategicPoint );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	class APawn* GetPawnbyPlayerID ( int PlayerNum );
	void ReAssessStrategy ( );
	void Reset ( );
	void Timer ( );
	void PostBeginPlay ( );
};

UClass* ASFHeadQuarters::pClassPointer = NULL;

// Class SFGame.SFPawn_AI
// 0x00C0 (0x0F88 - 0x0EC8)
class ASFPawn_AI : public ASFPawn
{
public:
	unsigned long                                      bLockRotation : 1;                                		// 0x0EC8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSpawning : 1;                                    		// 0x0EC8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bakUpdateSkelWhenNotRendered : 1;                 		// 0x0EC8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoNotSprintWhenMove : 1;                         		// 0x0EC8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDebugTrigger : 1;                                		// 0x0EC8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsWanderingOnly : 1;                             		// 0x0EC8 (0x0004) [0x0000000000000000] [0x00000020] 
	class ASFWeapon*                                   MySFWeapon;                                       		// 0x0ECC (0x0004) [0x0000000000000000]              
	int                                                AIEnemyIndex;                                     		// 0x0ED0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      CustomAIWeapon;                                   		// 0x0ED4 (0x0001) [0x0000000000000000]              
	unsigned char                                      SpecialMarked;                                    		// 0x0ED5 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FName                                       SightBoneName;                                    		// 0x0ED8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FWeaponStartTraceLocationCacheStruct        WeaponStartTraceLocationCache;                    		// 0x0EE0 (0x0014) [0x0000000000000000]              
	struct FDelayedDamageInfoStruct                    DelayedDamageInfo;                                		// 0x0EF4 (0x0024) [0x0000000000000000]              
	TArray< struct FFullBodyAnimation >                DefaultFullBodyAnimations;                        		// 0x0F18 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AIFullBodyAnimCount;                              		// 0x0F24 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                AIFullBodyAnimIndex;                              		// 0x0F28 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SpawnAnimPlayStat;                                		// 0x0F2C (0x0004) [0x0000000000000000]              
	float                                              SpawnAnimLength;                                  		// 0x0F30 (0x0004) [0x0000000000000000]              
	float                                              DefaultSpawnAnimLength;                           		// 0x0F34 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAdjMin;                                     		// 0x0F38 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageAdjMax;                                     		// 0x0F3C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SprintAttackPreferRate;                           		// 0x0F40 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AggressiveDistance;                               		// 0x0F44 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DisplayedName;                                    		// 0x0F48 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              DamageAdj;                                        		// 0x0F54 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              DamageAdjRadi;                                    		// 0x0F58 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              CustomScaleRate;                                  		// 0x0F5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ApplyedScaleRate;                                 		// 0x0F60 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DelaySuicideTime;                                 		// 0x0F64 (0x0004) [0x0000000000000000]              
	float                                              CollisionRadiusRep;                               		// 0x0F68 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CollisionHeightRep;                               		// 0x0F6C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                AIID;                                             		// 0x0F70 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              TotalAIRating;                                    		// 0x0F74 (0x0004) [0x0000000000000000]              
	int                                                DropItemCount;                                    		// 0x0F78 (0x0004) [0x0000000000000000]              
	int                                                PawnAggroMultiplier;                              		// 0x0F7C (0x0004) [0x0000000000000000]              
	class USoundCue*                                   WanderingSound;                                   		// 0x0F80 (0x0004) [0x0000000000000000]              
	int                                                WanderingSoundCount;                              		// 0x0F84 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3967 ];

		return pClassPointer;
	};

	bool GetReactLureGrenade ( );
	bool GetPawnIsWanderingOnly ( );
	void PlayWanderingSound ( );
	void SetPlayWanderingSound ( );
	int GetJumpMoveSpeed ( );
	bool CheckOverDamage ( int BaseDamage, int* newDamage );
	int GetDropItemCount ( );
	void SetPawnMeshInfoString ( );
	void UpdateInsightPawns ( );
	void eventPostAIFactorySpawned ( class USFSeqAct_AIFactory* SpawningFactory, int SpawnSetIdx );
	void HandleDying ( class UClass* DamageType, struct FVector HitLoc, unsigned long bUseKillCam );
	void DelaySuicide ( );
	void SetDelaySuicideTime ( int DelayTime );
	void ApplyKismetCustomProperties ( int AIType );
	void SetPointedColor ( struct FLinearColor NewColor );
	void SetSpecialMark ( unsigned char newMark );
	void UnlockMovement ( unsigned long bLock );
	bool IsCriticalBodyPart ( unsigned char BodyPart );
	bool CheckCriticalShot ( struct FName BoneName, class UClass* DamageType );
	bool IsDefaultMesh ( );
	void DoDelayedDamage ( );
	void NotifyShockWaveDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, float DelayTime );
	float GetApplyedScaleRate ( );
	void SetCustomScale ( float ScaleRate );
	void SetPersonality ( );
	void eventPostBeginPlay ( );
	float GetSpawnAnimLength ( );
	void AIStartingMove ( );
	void eventDestroyed ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, unsigned long bIgnoreDeathScore );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	float GetFullBodyAnimLengthByType ( unsigned char AnimType );
	float PlayFullBodyAnimation ( struct FName NewAnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bCauseActorAnimEnd, unsigned long bLooping );
	int GetFullBodyAnimIndex ( struct FName AnimName );
	float PerformFullBodyAnimation ( struct FName AnimName, int AnimIndex, float AdjustLen, unsigned long bRep );
	float PlaySpawnAnim ( );
	void ClientRestart ( );
	void Restart ( );
	void AddDefaultInventory ( );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool eventUseAimInfo ( );
	void NotifySetupController ( );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void SetWeaponStartTraceLocationCache ( class AWeapon* ValidWeap, struct FVector StartLoc );
	void AttachWeapon ( class ASFWeapon* WeaponToAttach, unsigned long bViaReplication );
	void ChangedWeaponByReplication ( class ASFWeapon* NewWeapon );
	void eventSetSprinting ( unsigned long bNewIsSprinting );
	bool IsSprintPossible ( unsigned long bNewIsSprinting );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void CheckDelaySuicide ( );
	void PlaySpawnEffectAnim ( );
	void Tick ( float DeltaTime );
	bool ForceUsingAISpawnAnim ( );
	void SetLevelMarkTexture ( );
	struct FVector eventGetPawnViewLocation ( );
	bool IsReloading ( );
	void UpdateMeshBoneControllersNative ( float DeltaTime );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFPawn_AI::pClassPointer = NULL;

// Class SFGame.SFPawn_AI_Aliens
// 0x0084 (0x100C - 0x0F88)
class ASFPawn_AI_Aliens : public ASFPawn_AI
{
public:
	int                                                nDyingShoot;                                      		// 0x0F88 (0x0004) [0x0000000000000000]              
	TArray< int >                                      AnimList_attack;                                  		// 0x0F8C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AnimList_attackAlt;                               		// 0x0F98 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AnimList_death;                                   		// 0x0FA4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AnimList_preAttack;                               		// 0x0FB0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      AnimList_postAttack;                              		// 0x0FBC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterialInstanceConstant*                   DamagedMIC;                                       		// 0x0FC8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ExposureType;                                     		// 0x0FCC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExposureRate;                                     		// 0x0FD0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ExposureInRate;                                   		// 0x0FD4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExposureOutRate;                                  		// 0x0FD8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxNormalAttackCount;                             		// 0x0FDC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxNormalAttackCountAngry;                        		// 0x0FE0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bIgnoreSameTeamBlock : 1;                         		// 0x0FE4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseTeamColor : 1;                                		// 0x0FE4 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              InteractionAngle;                                 		// 0x0FE8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FsReplaceMaterialSet >              ReplaceMaterialSets;                              		// 0x0FEC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                RepBossMaterialIdx;                               		// 0x0FF8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     RepBossMaterial;                                  		// 0x0FFC (0x000C) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	float                                              LastFiredTime;                                    		// 0x1008 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3969 ];

		return pClassPointer;
	};

	void eventInitVoiceResource ( );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void ReplaceWeapons ( class USFSeqAct_SetBOSS* inAction );
	void ReplaceMaterials ( struct FString ReplaceMaterial, int newidx, unsigned long bFromSetReplication );
	void ReplaceMaterialsIdx ( int newidx );
	void OnSetBOSS ( class USFSeqAct_SetBOSS* inAction );
	bool EnableStoppingPower ( );
	void UpdateExtendDamageDepiction ( float fdelta );
	void ApplyTeamColor ( );
	void SetPawnMeshComponent ( );
	void SetSFPawnFXClass ( class UClass* PawnFXClass );
	void EndManningTurret ( );
	void StartManningTurret ( );
	void SwitchWeapon ( unsigned char NewGroup );
	void PlayDeathAnimation ( class UClass* DamageType, unsigned long bBlendToMotors );
	void PlayDeath ( );
	float GetSpawnAnimLength ( );
	float PlayUpperBodyAnim ( struct FName NewAnimName, float BlendInTime, float BlendOutTime, float Duration, unsigned long bLooping, unsigned long bOverride );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bZoomed, unsigned long bCrouch, int* Looping );
	struct FName GetTakeHitAnimName ( unsigned char HitType, unsigned char FallDir );
	void MakeFullBodyAnimList ( );
	bool eventIsAlienPawn ( );
	void eventPostBeginPlay ( );
	void EndSpawnAnim ( );
	float PlaySpawnAnim ( );
	void SetLookAtControl ( unsigned long bEnable );
	void SetHelmetDrop ( );
	void SetGroundSpeedByWeight ( float Weight );
	float PlayAnimArray ( TArray< int > AnimList, float AnimLen );
	unsigned char GetBodyPartByBoneName ( struct FName BoneName, struct FVector Line, struct FVector Origin, float fHeadPointDist );
	void PlayTakeHitEffects ( unsigned long bViaReplication, class AController* InstigatedBy );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsValidAngle ( class APawn* Other );
};

UClass* ASFPawn_AI_Aliens::pClassPointer = NULL;

// Class SFGame.SFPawn_AI_Aliens_Base
// 0x0004 (0x1010 - 0x100C)
class ASFPawn_AI_Aliens_Base : public ASFPawn_AI_Aliens
{
public:
	unsigned long                                      bReactionToFlashbang : 1;                         		// 0x100C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bApplyDefaultStunDurationTime : 1;                		// 0x100C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3971 ];

		return pClassPointer;
	};

	bool ReactionToFlashbang ( );
	void AddPostEffect ( float AdjustTime, unsigned char Direction, struct FString PostEffectClassName );
};

UClass* ASFPawn_AI_Aliens_Base::pClassPointer = NULL;

// Class SFGame.SFPawnAI_Revenant
// 0x0000 (0x1010 - 0x1010)
class ASFPawnAI_Revenant : public ASFPawn_AI_Aliens_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3973 ];

		return pClassPointer;
	};

	void eventProcessPawn3rdEffectTickSpecial ( float Delta );
	void eventPostBeginPlay ( );
};

UClass* ASFPawnAI_Revenant::pClassPointer = NULL;

// Class SFGame.SFPawnAI_Zombie
// 0x0018 (0x1028 - 0x1010)
class ASFPawnAI_Zombie : public ASFPawn_AI_Aliens_Base
{
public:
	TArray< class UAnimSet* >                          ZombiePawnRandomAnimset;                          		// 0x1010 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                ZombiePawnRandomMaterial;                         		// 0x101C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3975 ];

		return pClassPointer;
	};

	bool GetReactLureGrenade ( );
	void PlayPawnActionAutoVoice ( unsigned char WeaponState );
	void PostUpdateCharMesh ( );
};

UClass* ASFPawnAI_Zombie::pClassPointer = NULL;

// Class SFGame.SFPawnAI_ZombieWalker
// 0x0000 (0x1028 - 0x1028)
class ASFPawnAI_ZombieWalker : public ASFPawnAI_Zombie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3977 ];

		return pClassPointer;
	};

};

UClass* ASFPawnAI_ZombieWalker::pClassPointer = NULL;

// Class SFGame.SFPawn_AI_Human
// 0x0020 (0x0FA8 - 0x0F88)
class ASFPawn_AI_Human : public ASFPawn_AI
{
public:
	struct FRotator                                    SightDegree;                                      		// 0x0F88 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightRatioWalk;                                   		// 0x0F94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightRatioStop;                                   		// 0x0F98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fInsightDot;                                      		// 0x0F9C (0x0004) [0x0000000000000000]              
	float                                              fInsightDotWalk;                                  		// 0x0FA0 (0x0004) [0x0000000000000000]              
	float                                              fInsightDotStop;                                  		// 0x0FA4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3979 ];

		return pClassPointer;
	};

	void SetPawnMeshInfoString ( );
	void PostUpdateCharMesh ( );
	void SetPawnMeshComponent ( );
	void AttachHeadParts ( );
	bool IsDefaultMesh ( );
	bool ReadyToFire ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PostBeginPlay ( );
};

UClass* ASFPawn_AI_Human::pClassPointer = NULL;

// Class SFGame.SFSquad
// 0x00B0 (0x02D4 - 0x0224)
class ASFSquad : public AInfo
{
public:
	struct FName                                       SquadName;                                        		// 0x0224 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class ASFTeamInfo*                                 Team;                                             		// 0x022C (0x0004) [0x0000000000000000]              
	TArray< struct FSquadMemberInfo >                  SquadMembers;                                     		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AController*                                 SquadLeader;                                      		// 0x023C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class ASFSquad*                                    NextSquad;                                        		// 0x0240 (0x0004) [0x0000000000000000]              
	class ASFSquadFormation*                           Formation;                                        		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              FormationSize;                                    		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayerSquad : 1;                                 		// 0x024C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFreelance : 1;                                   		// 0x024C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFreelanceAttack : 1;                             		// 0x024C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bFreelanceDefend : 1;                             		// 0x024C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInterSquadCommunication : 1;                     		// 0x024C (0x0004) [0x0000000000000000] [0x00000010] 
	class ASFModeVolume*                               SquadStrategicPoint;                              		// 0x0250 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            RouteObjective;                                   		// 0x0254 (0x0004) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  ObjectiveRouteCache;                              		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class ANavigationPoint* >                  PreviousObjectiveRouteCache;                      		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       CurrentOrders;                                    		// 0x0270 (0x0008) [0x0000000000000000]              
	float                                              GoalDistance;                                     		// 0x0278 (0x0004) [0x0000000000000000]              
	int                                                MaxSquadSize;                                     		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                Size;                                             		// 0x0280 (0x0004) [0x0000000000000000]              
	struct FsEnemyInfo                                 EnemyInfo;                                        		// 0x0284 (0x002C) [0x0000000000000000]              
	TArray< struct FsSquadChargePoint >                SquadChargePoints;                                		// 0x02B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDelayUpdateInfo >                  DelayUpdateList;                                  		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastTimeUpdateTakeDamages;                        		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              LastTimeUpdateMemberInfo;                         		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                UpdateMemberIdx;                                  		// 0x02D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3981 ];

		return pClassPointer;
	};

	bool IsMember ( class AController* Test );
	bool IsOverLoadSquadCharge ( );
	void Destroyed ( );
	class ASFHeadQuarters* GetHeadQuarter ( );
	void RemoveEnemy ( class APawn* DeadEnemy );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void Initialize ( class ASFTeamInfo* T, class AController* C );
	void GetMembers ( TArray< class AController* >* out_Members );
	float GetAISquadCharge ( int AIEnemyType );
	void UnregisterSquadMember ( class AController* OldMember );
	void SortTargetDist ( int MemberIdx );
	void ADDSquadMember ( struct FSquadMemberInfo NewMemberInfo );
	void RegisterSquadMember ( class AController* NewMember, unsigned long bLeader, float fEnemyDist );
	bool IsPrimaryTarget ( class AActor* NewTarget );
	float GetMaxChargePoint ( class AActor* NewTarget );
	bool SetTarget ( class ASFAIController* AI, class AActor* NewTarget );
	bool FriendlyToward ( class APawn* Other );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	void PostBeginPlay ( );
	void AllMembers ( class UClass* BaseClass, class AController** C );
	struct FVector GetSquadLeaderLocation ( );
	class AActor* GetSquadLeaderPosition ( );
	struct FVector GetEnemyLocation ( class APawn* TestPawn, unsigned char LT );
	bool BroadcastStimulus ( class APawn* Enemy, unsigned char Type, struct FName EventName );
	bool ProcessStimulus ( class ASFAIController* AI, class APawn* Enemy, unsigned char Type, struct FName EventName );
};

UClass* ASFSquad::pClassPointer = NULL;

// Class SFGame.SFSquadFormation
// 0x0028 (0x024C - 0x0224)
class ASFSquadFormation : public AInfo
{
public:
	class ASFSquad*                                    Squad;                                            		// 0x0224 (0x0004) [0x0000000000000000]              
	TArray< struct FFormationPosition >                Positions;                                        		// 0x0228 (0x000C) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FVector                                     LastSquadPosition;                                		// 0x0234 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentSquadPosition;                             		// 0x0240 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3983 ];

		return pClassPointer;
	};

	void ClearPositions ( class AActor* LeaderPos, int PositionIdx );
	class ANavigationPoint* GetPosition ( class ASFAIController* AI );
	void UpdatePositions ( int RequestedIdx, unsigned long bForce );
	struct FVector GetIdealPosition ( int Idx );
	struct FVector GetSquadLeaderDir ( int Idx );
	bool DoesIdealSquadPosOverlapAnother ( class ASFAIController* AI );
	bool GetCurrentIdealPosition ( class ASFAIController* AI, struct FVector* out_IdealPos );
	void DismissPosition ( class ASFAIController* AI );
	int AssignPosition ( class ASFAIController* AI );
	struct FVector GetSquadLeaderLocation ( );
	class AActor* GetSquadLeaderPosition ( );
	class AController* GetSquadLeader ( );
	int GetNumSquadMembersThatUsePositions ( );
};

UClass* ASFSquadFormation::pClassPointer = NULL;

// Class SFGame.SFFacebookManager
// 0x0128 (0x0164 - 0x003C)
class USFFacebookManager : public UObject
{
public:
	class USFOnlineSubsystemPC*                        OnlineSubOwner;                                   		// 0x003C (0x0004) [0x0000000000000000]              
	struct FString                                     RequestAuthorityURL;                              		// 0x0040 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FacebookClientID;                                 		// 0x004C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FacebookClientSecretID;                           		// 0x0058 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AuthorityResponseURL;                             		// 0x0064 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AuthorityFailedResponseURL;                       		// 0x0070 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FacebookURL;                                      		// 0x007C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FacebookLogoutURL;                                		// 0x0088 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TokenPrefix;                                      		// 0x0094 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CookieURL;                                        		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CookieClearData;                                  		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                FrameWidth;                                       		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FrameHeight;                                      		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     NoticeURL_CodenameChanged;                        		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoticeURL_Interlocked;                            		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoticeURL_RareItemReceived;                       		// 0x00D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoticeURL_Promoted;                               		// 0x00E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoticeURL_ClanCreated;                            		// 0x00F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoticeURL_ClanMatchWon;                           		// 0x00FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_CodenameChanged;                    		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_Interlocked;                        		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_RareItemReceived;                   		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_Promoted;                           		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_FacebookAuthTokenNullified;         		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_ClanCreated;                        		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeMessage_ClanMatchWon;                       		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              LastFriendsListUpdatedTime;                       		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              FriendListUpdateDelay;                            		// 0x0160 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3985 ];

		return pClassPointer;
	};

	void eventOnFriendsListUpdated ( TArray< struct FSFacebookUserInfo > FriendsList );
	void OnClanMatchWon ( struct FString WinClanName, struct FString DefeatClanName );
	void OnClanCreated ( struct FString ClanName );
	void OnRankUp ( int CurrentRank );
	void OnRareGashaRewarded ( int ItemId );
	void OnCodenameChanged ( struct FString NewCodename );
	void OnFacebookInterlocked ( );
	bool UploadEvent ( unsigned char EventType, TArray< struct FString > args );
	void OnCancelRenewFacebookAuth ( );
	void OnConfirmRenewFacebookAuth ( );
	void eventOnFacebookActionFailed ( int ResultCode );
	void OnWebNavigateComplete ( struct FString RedirectedURL );
	void OpenLobbyFacebookDialog ( unsigned long bAuthPage );
	void UpdateAuthToken ( struct FString NewToken );
	void UpdateFacebookInfo ( struct FString FBToken, struct FQWord FBID );
	struct FString ExtractAuthToken ( struct FString RedirectedURL );
	struct FString GetFacebookPageURL ( );
	struct FString GetRequestAuthorityURL ( );
	bool eventIsActivated ( );
	void Init ( class USFOnlineSubsystemPC* Owner );
	bool ClearCookie ( );
	bool GetFriendsListFromFacebook ( struct FString AuthToken );
	void UploadMovieToFacebook ( struct FString AuthToken, struct FString Text, struct FString MovieURL );
	void UploadImageToFacebook ( struct FString AuthToken, struct FString Text, struct FString ImageURL );
	void UploadLinkToFacebook ( struct FString AuthToken, struct FString Text, struct FString LinkURL );
	void UploadTextToFacebook ( struct FString AuthToken, struct FString Text );
	struct FString GetFacebookID ( struct FString AuthToken );
	bool ConvertFacebookAuthtoken ( struct FString ClientID, struct FString ClientSecretID, struct FString SourceToken, struct FString* ResultToken );
};

UClass* USFFacebookManager::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCBase
// 0x004C (0x0260 - 0x0214)
class USFOnlineSubsystemPCBase : public UOnlineSubsystemPC
{
public:
	TArray< struct FConnectionPolling >                ConnectionPollings;                               		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPacket*                                     g_packet;                                         		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     PlayerIP;                                         		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerLoginViewID;                                		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ProfileFileName;                                  		// 0x023C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          AsyncTasks;                                       		// 0x0248 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USFServerConnection* >               ServerConnectionArray;                            		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3987 ];

		return pClassPointer;
	};

	bool GetLoginAuthorizationCode ( );
	struct FString eventGetProfileFileName ( );
	struct FString eventGetPlayerLoginViewID ( );
	void ProcessRecvPacket ( int ProtocolID, int ResultID, class UPacket* Packet );
	void eventOnReceived ( class UPacket* Packet );
	bool eventOpenForceExitDialog ( int ExitType, int ErrCode );
	void DisconnectAllServerConnection ( );
	void eventExit ( );
	void nativeExit ( );
	void EACConnectionReset ( );
	bool EACLoadCheck ( );
	void MakeEACResponse ( class UPacket* Packet );
	void MakeXCResponse ( class UPacket* Packet );
	class UPacket* GetPacket ( );
	bool eventGetIsConnect ( class USFServerConnection* Connection );
	void eventEasyAntiCheatSendResponse ( TArray< unsigned char > Buffer );
	void eventXIGNCODESendResponse ( TArray< unsigned char > Buffer );
	void AddAsyncTaskMakeHSResponse ( class UPacket* Packet );
	bool ServerToSendConnect ( class USFServerConnection* Connection, unsigned long bNonBlocking );
	void eventResetLobbyPingPongTime ( class USFServerConnection* Connection );
	bool eventCannotConnectServer ( int LastError, class USFServerConnection* Connection );
	bool eventOnServerDisconnectedForce ( class USFServerConnection* Connection, int nLastError );
	void eventOnServerDisconnected ( class USFServerConnection* Connection );
	void eventOnServerConnected ( class USFServerConnection* Connection );
	struct FString GetHexCode ( struct FString strMsg );
	struct FString ConvertStringDataToMD5 ( struct FString String );
	void ClearConnectionBuffer ( );
	void TickProcessBuffer ( );
	bool SendtoServer ( class USFServerConnection* Connection, class UPacket* Packet );
	void DisconnectServer ( class USFServerConnection* Connection );
	bool ConnectServer ( class USFServerConnection* Connection, unsigned long bNonBlocking );
};

UClass* USFOnlineSubsystemPCBase::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPC
// 0x0250 (0x04B0 - 0x0260)
class USFOnlineSubsystemPC : public USFOnlineSubsystemPCBase
{
public:
	unsigned long                                      UseMessenger : 1;                                 		// 0x0260 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bEnableHackReport : 1;                            		// 0x0260 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bUseEventSubLanguage : 1;                         		// 0x0260 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bHackReportSended : 1;                            		// 0x0260 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      PlayerIsLogined : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bLoginFromLoginView : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      PlayerIsGhostMode : 1;                            		// 0x0260 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bChangeLoginEUR : 1;                              		// 0x0260 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bCollectMacAddress : 1;                           		// 0x0260 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bInitSSOWebBrowser : 1;                           		// 0x0260 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bSuccessAuthCode : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bEncryptLoginPacket : 1;                          		// 0x0260 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bForceAdult : 1;                                  		// 0x0260 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      bCashChargeWeb : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bIsMiniGacha : 1;                                 		// 0x0260 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bUseFacebook : 1;                                 		// 0x0260 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bSteamActivated : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00010000] 
	class USFOnlineSubsystemInternet*                  Internet;                                         		// 0x0264 (0x0004) [0x0000000000000000]              
	class USFFacebookManager*                          FacebookManager;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerLoginViewPW;                                		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerConnectID;                                  		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerConnectPW;                                  		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerLoginOKID;                                  		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerCodeName;                                   		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PlayerTicket;                                     		// 0x02A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerUSN;                                        		// 0x02B4 (0x0004) [0x0000000000000000]              
	unsigned char                                      PlayerGradeLV;                                    		// 0x02B8 (0x0001) [0x0000000000000000]              
	unsigned char                                      PlayerIDIsFirst;                                  		// 0x02B9 (0x0001) [0x0000000000000000]              
	struct FString                                     PlayerUniID;                                      		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerCreateLV;                                   		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                PlayerIsAdult;                                    		// 0x02CC (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerAddInfos;                                   		// 0x02D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ClanSN;                                           		// 0x02DC (0x0004) [0x0000000000000000]              
	struct FString                                     SpareCookie;                                      		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FQWord                                      PlayerFacebookID;                                 		// 0x02EC (0x0008) [0x0000000000000000]              
	struct FString                                     PlayerFacebookToken;                              		// 0x02F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlockExpirationDate;                              		// 0x0300 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LoginedServerYear;                                		// 0x030C (0x0004) [0x0000000000000000]              
	int                                                LoginedServerMonth;                               		// 0x0310 (0x0004) [0x0000000000000000]              
	int                                                LoginedServerDay;                                 		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                LoginedServerHour;                                		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                LoginedServerMinute;                              		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                LoginedServerTimeM;                               		// 0x0320 (0x0004) [0x0000000000000000]              
	int                                                LoginOKCount;                                     		// 0x0324 (0x0004) [0x0000000000000000]              
	struct FString                                     QueryAuthorizationCode;                           		// 0x0328 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DelayTime;                                        		// 0x0334 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPingSendTime;                                    		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                nPingTime;                                        		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     BillingPageBase;                                  		// 0x0340 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BillingPageWebPage;                               		// 0x034C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AppID;                                            		// 0x0358 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PamentGroup;                                      		// 0x035C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     AppSecret;                                        		// 0x0360 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ContentType;                                      		// 0x036C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ElapsedTimeFromLoginS;                            		// 0x0378 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ElapsedLoginTimeForTest;                          		// 0x037C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LoginedLocalTimeS;                                		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrevNotifyTimeM;                                  		// 0x0384 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LastRequestItemTableTime;                         		// 0x0388 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USFPacketCryptHelper*                        CryptHelper;                                      		// 0x0394 (0x0004) [0x0000000000000000]              
	struct FString                                     InGameForceExitMessage;                           		// 0x0398 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CashChargeURL;                                    		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CashChargeURL_EUR;                                		// 0x03B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CashChargeURL_USA;                                		// 0x03BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      WaitingAckProtocolArray;                          		// 0x03C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastSendTime;                                     		// 0x03D4 (0x0004) [0x0000000000000000]              
	float                                              WaitingTimeOutTime;                               		// 0x03D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     RequestSupplyCode;                                		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             AdditionalGoreSuppress;                           		// 0x03E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPointer                                    WebBrowserControl;                                		// 0x03F4 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	struct FPointer                                    WebBrowserEvent;                                  		// 0x03F8 (0x0004) [0x0000000000021002]              ( CPF_Const | CPF_Native | CPF_EditConst )
	struct FPointer                                    SteamManager;                                     		// 0x03FC (0x0004) [0x0000000000001000]              ( CPF_Native )
	int                                                WebControlLastError;                              		// 0x0400 (0x0004) [0x0000000000000000]              
	struct FString                                     OpenWebTargetFrameName;                           		// 0x0404 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OpenWebHeaders;                                   		// 0x0410 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OpenWebPostData;                                  		// 0x041C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                OpenWebPostDataLen;                               		// 0x0428 (0x0004) [0x0000000000000000]              
	TArray< struct FHTTP_ARG >                         ArgsArray;                                        		// 0x042C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSRecvPacketHandler >               RecvPacketHandlerArray;                           		// 0x0438 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPacketRecv__Delegate;                         		// 0x0444 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnChangedWaitingAckSize__Delegate;              		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnNotifyMinuteHasPassedDelegate__Delegate;      		// 0x045C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOpenForceExitDialog__Delegate;                		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHandlingPacketErrorDelegate__Delegate;        		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCashChargePageClosedDelegate__Delegate;       		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProcessTwitchTVCallback__Delegate;            		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProcessTwitchTVCallbackInGame__Delegate;      		// 0x0498 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DisconnectedMessengerserverDelegate__Delegate;  		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3989 ];

		return pClassPointer;
	};

	void eventOpenBillingWebPage ( struct FString RedirectedURL );
	void ServerToSendGiveCombineUserDesignItem ( int DBIndex, int HiddenItemID, struct FQWord HiddenItemISN, unsigned char BuyType, int ItemPrice );
	void ServerToSendGetCombineDesign ( );
	void ServerToSendGetCombineCnt ( );
	void ServerToSendSetUseRandomBoxItem ( struct FQWord BoxItemNSN, struct FQWord KeyItemNSN );
	void ServerToSendGetGetRandomBoxItemList ( );
	void ServerToSendGetGetRandomBoxList ( );
	void ServerToSendGetMonthlyRewardList ( );
	void ServerToSendGetMonthlyRewardUserCash ( );
	int ServerToSendInitBillingPageTHA ( struct FString strTimeStamp, struct FString strToken, TArray< struct FString >* ReturnResults );
	void AddArgument ( struct FString InName, struct FString InValue, unsigned long IsNotHexCode );
	void SetOpenWebPostData ( struct FString TargetFrameName, struct FString headers, struct FString PostData, int PostDataLen );
	void SendZombiePlayerLogToDatabase ( struct FString ForceItemCode, unsigned char ModeIndex, unsigned char MapIndex, int PlayLevel, int PlayTime, int KillCount, int AssistCount, int DeadCount, int RevivalCount, TArray< int > ZombieKillArray, int EarnScore, int MatchClear, int CurrentWave, int HeadShotCount );
	void SendConvoyancePlayerLogToDatabase ( struct FString ForceItemCode, int PlayTime, int KillCntByType_A, int AssistCntByType_A, int DeadCntByType_A, int KillCntByType_B, int AssistCntByType_B, int DeadCntByType_B, int KillCntByType_C, int AssistCntByType_C, int DeadCntByType_C, int HeadShotCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int AliveCount, int MissionInfo, int MissionInfo01, int MissionInfo02, int AttackPlayRound, int DefensePlayRound, int TotalWinCount, int TotalLoseCount, unsigned char ModeIndex, unsigned char MapIndex, int CSN, int PlayerWithCount, int EarnScore, int LuckyPoint, int AttackWinCount, int DefenseWinCount, int TotalHitEnemyCount, unsigned char EndState, int HeadHitCount, struct FString MainWeaponItemCode, int TotalHitCount, unsigned char bWinner, int GameScore, int Team, int PCRoomType, int AccquireItemAmount, int ConvoyanceMoveSec, int ReturnItemAmount );
	void ServerToSendSetRecommendClan ( int USN, int CSN );
	void ServerToSendSetUseGachaBonusGauge ( struct FString SupplyCode );
	void ServerToSendGetGachaBonusGaugeList ( );
	void ServerToSendGetQuickJoinInfo ( );
	void ServerToSendGetGachaBonusGauge ( struct FString SupplyCode );
	void ServerToSendGetPCRoomUserRank ( );
	void ServerToSendGetFirstBuySaleItemList ( );
	void ServerToSendReportUser ( int ReportUserUSN, struct FString ReportUserCodeName, int ReportedUserUSN, struct FString ReportedUserCodeName, int ReportType );
	void ServerToSendGetWeeklyRealtimeRank ( int RankType );
	void eventServerToSendRequestCashChargeToken ( int Protocal );
	void ServerToSendUploadCommonLog ( int CodeID, TArray< struct FString > ColumnArray );
	void ServerToSendGetRealTimeRank ( );
	bool AllowRetryLogin ( );
	void OnAITDMMatchOver ( struct FSFGameLog GameLog );
	void SendAITDMPlayerLogToDataBase ( struct FString ForceItemCode, int PlayTime, int KillCntByType_A, int AssistCntByType_A, int DeadCntByType_A, int KillCntByType_B, int AssistCntByType_B, int DeadCntByType_B, int KillCntByType_C, int AssistCntByType_C, int DeadCntByType_C, int HeadShotCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int AliveCount, int MissionInfo, int MissionInfo01, int MissionInfo02, int AttackPlayRound, int DefensePlayRound, int TotalWinCount, int TotalLoseCount, unsigned char ModeIndex, unsigned char MapIndex, int CSN, int PlayerWithCount, int EarnScore, int LuckyPoint, int AttackWinCount, int DefenseWinCount, int TotalHitEnemyCount, unsigned char EndState, int HeadHitCount, struct FString MainWeaponItemCode, int TotalHitCount, unsigned char bWinner, int DeathbyAI );
	void SendAITDMGameLogToDatabase ( struct FString GameRule, struct FString WinnerTeam, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, unsigned char RoundCount, unsigned char AttackWinCnt_A, unsigned char DefenseWinCnt_A, unsigned char AttackWinCnt_B, unsigned char DefenseWinCnt_B, int ClanPoint_A, int ClanPoint_B, int CSN_A, int CSN_B, int WinnerCSN, int TargetScore, unsigned char Difficult, int TotalPlayer, TArray< struct FsTeamScore > TeamScores );
	bool IsFacebookInterlocked ( );
	void UpdateFacebookFriends ( struct FString Token );
	void UploadMovieToFacebook ( struct FString Text, struct FString MovieURL, struct FString Token );
	void UploadImageToFacebook ( struct FString Text, struct FString ImageURL, struct FString Token );
	void UploadLinkToFacebook ( struct FString Text, struct FString LinkURL, struct FString Token );
	void UploadTextToFacebook ( struct FString Text, struct FString Token );
	void UpdateProfileName ( );
	void OnHeroMatchOver ( struct FSFGameLog GameLog );
	void OnMatchOver ( struct FSFGameLog GameLog );
	void OnPendingMatch ( );
	void OnWinningKill ( );
	void OnStartSwitchingSide ( );
	void OnRoundOver ( );
	void OnPreRoundOver ( );
	void OnMatchInProgress ( );
	void OnPreCountDown ( );
	void OnCountDown ( );
	void OnPreMatchIntro ( );
	void OnPreMatchInProgress ( );
	void ServerToSendSteamBillingFinalizeTxn ( struct FString OrderID );
	void ServerToSendSteamBillingInitializeTxn ( int AP );
	void ServerToSendUpdateFacebookInfo ( struct FQWord FacebookID, struct FString FacebookToken );
	void ServerToSendGetFacebookInfo ( );
	void ServerToSendGetLuckyPoint ( );
	void ServerToSendGetNetmarbleDailyDiscountList ( );
	void ServerToSendGetWeaponProgressionTask ( );
	void ServerToSendGetItemTableInfo ( unsigned long bPacketError );
	void ServerToSendSetItemProperty ( struct FQWord ItemNSN, struct FString UseOption );
	void ServerToSendGetNetmarbleDiscountCouponForVIP ( );
	void ServerToSendGetNetmarbleDiscountCoupon ( );
	void SendToServerSetGroupTag ( int LocalTagID, int HighSchoolTagID, int ArmyTagID );
	void SendToServerRequstAutoCompleteList ( int TagType, struct FString SearchText );
	void ServerToSendSetModeArmsStore ( int mode_id, struct FQWord active_item, struct FQWord active_item01, struct FQWord active_item02, struct FQWord passive_item, struct FQWord passive_item01, struct FQWord passive_item02 );
	void ServerToSendGetModeArmsStoreList ( );
	void ServerToSendGetModeItemList ( );
	void ServerToSendGetPromotionEventInfo ( );
	void ServerToSendGetMyPromotionEvent ( );
	void ServerToSendUserGroupGiveItem ( struct FString SupplyCode, int SupplyStep );
	void ServerToSendUserGroupCheck ( int nType );
	void SendSurvivalPlayLog ( struct FString ForceItemCode, unsigned char MapIndex, unsigned char ModeIndex, int PlayLevel, int PlayTime, int KillCount, int BossKill, int CriticalKill, int AssistCount, int AccmulationMoney, int SpendMoney, int RevivalCount, int EliteCrawlerKill, int NamedCrawlerKill, int EliteRipperKill, int NamedRipperKill, int CloakingRipperKill, int EliteLibertineKill, int NamedLibertineKill, int EliteStunnerKill, int NamedStunnerKill, int GasStunnerKill, int EliteTyrantKill, int NamedTyrantKill, int TotalExp, int CurrentWave, int MatchClear, int LuckyPoint );
	void ServerToSendGiveCapsuleItem ( );
	void ServerToSendUserCapsuleInfo ( );
	void ServerToSendGashaLogList ( );
	void ServerToSendSendGift ( int ItemId, unsigned char BuyType, int GiftReceiverUSN, struct FString GiftReceiverCodeName, struct FString GiftMessage, struct FString CouponID );
	void ServerToSendDeleteSendedGiftList ( struct FQWord GiftUniqueID );
	void ServerToSendIsExistNick ( struct FString CodeName );
	void ServerToSendSetUseGift ( struct FQWord ItemNSN );
	void ServerToSendGetGiftSendedList ( );
	void ServerToSendGetGiftReceivedList ( );
	void ServerToSendGetGiftCount ( );
	void ServerToSendGetAllInOneGashaGroup ( );
	void ServerToSendPKT_GetGashaRewardList ( );
	void ServerToSendGetGashaVIPList ( struct FString SupplyCode );
	void ServerToSendGetRewardForSerial ( struct FString UsingSerial );
	void ServerToSendGetMiniGacha ( );
	void ServerToSendGetRewardForHero ( );
	void ServerToSendGetRewardForExtraCare ( struct FString UsingUnitCode );
	void ServerToSendGetRewardForGacha ( int CapsuleID, struct FString SupplyCode );
	void ServerToSendGetMatchingLinkedRoomInfo ( );
	void ServerToSendSetAcceptMatching ( int RoomNumber, unsigned char nIsAccept );
	void ServerToSendGetMatchingRoomList ( );
	void ServerToSendStopSearchingMatch ( );
	void ServerToSendStartSearchingMatch ( );
	void SendTestData ( struct FString UniqueId, unsigned char IsHost, struct FString PlayerName, float AvgFps, float Above30Fps, float AvgGpuTime, int HitchTotal, int HitGamBndCnt, int HitRenBnbCnt, int HitGpuBndCnt, int Sec_100, int Sec_150, int Sec_200, int Sec_300, int Sec_500_INF, struct FString Desc1, float PingAvr, int PktLoss, int PktOutOrder, float PktUploadAvr, float PktDownAvr, struct FString Desc2, struct FString OS, struct FString Memory, struct FString CPU, struct FString GPU, struct FString Software, int ScaleLevel, int TotalPlayerCounter, unsigned char MapID, unsigned char ModeID );
	bool ServerToSendDestroyClan ( );
	bool ServerToSendMessengerRemoveClanMember ( int USN );
	bool ServerToSendMessengerAddClanMember ( int USN, int CSN, struct FString nick, struct FString p_info, int Level );
	bool ServerToSendMessengerGameInviteRespond ( int ToUsn, unsigned char InviteResult );
	bool ServerToSendMessengerGameInvite ( int ToUsn, struct FString InviteInfo );
	bool ServerToSendMessengerForceDisconnect ( );
	void OnMessengerServerDisconnected ( );
	void DisconnectedMessengerserverDelegate ( );
	void RequestMessengerLogin ( );
	void RequestMessengerConnect ( );
	void SetClanSN ( int CSN );
	void SetAddInfos ( struct FString Addstr );
	bool ServerToSendMessengerPing ( );
	bool ServerToSendMessengerInstantMessage ( int ToUsn, struct FString InChatMsg );
	bool ServerToSendMessengerGetBuddyLocation ( int USN );
	bool ServerToSendMessengerGetUSNbyCodeName ( struct FString CodeName );
	bool ServerToSendMessengerRemoveBuddyFL ( int USN );
	bool ServerToSendMessengerRemoveBuddyBL ( int USN );
	bool ServerToSendMessengerChangeLocation ( int ChannelTyp, int channelNum, int RoomNumber, unsigned char inGame );
	bool ServerToSendMessengerChangeUserInfo ( int CSN, int Status, int inGame, struct FString CodeName, struct FString strInfo );
	bool ServerToSendMessengerAddBuddyBL ( int USN );
	bool ServerToSendMessengerRemoveBuddyAL ( int USN );
	bool ServerToSendMessengerAddBuddyAL ( int USN, struct FString CodeName );
	bool ServerToSendMessengerAddBuddyFL ( int USN, unsigned char GroupSN );
	bool ServerToSendMessengerBuddyLocationsReq ( );
	bool ServerToSendMessengerBuddyFLListReq ( );
	bool ServerToSendMessengerBuddyListReq ( );
	bool ServerToSendMessengerGroupListReq ( );
	bool ServerToSendMessengerLogin ( );
	void ServerToSendGetUserInfoByFacebook ( TArray< struct FSFacebookUserInfo > FacebookUserInfo );
	void ServerToSendGetFacebookFriends ( );
	void ServerToSendGetUserLocation ( int InUSN, struct FString InCodeName );
	void ServerToSendGameMasterCommad ( struct FString strCommand );
	void ServerToSendSetPmcForceEquip ( struct FString strPmcCode );
	void ServerToSendSetPsersonalinfos ( int SelectedImage, struct FString Type, struct FString LogText );
	int GetCurrentTimeFromServerAtDailySec ( );
	int GetCurrentTimeFromServerAtDaily ( );
	float GetAppSeconds ( );
	int GetCurrentTimeFromServerSec ( );
	int GetCurrentTimeFromServer ( );
	void SetLoginedServerTime ( struct FString strLoginedServerTime );
	void ServerToSendRequestDelegationRoomOwner ( int USN, int RoomNumber );
	void ServerToLeftChannel ( );
	void ServerToGetChannelList ( );
	void ServerToSendJoinChannel ( int ChannelNo, int myChannelType, int JoinType, int TargetUSN );
	void ServerToSendLookupServerAddr ( int ServerID );
	void ServerToSendCreateCharacter ( int UnitNum, int WeaponNum );
	void ServerToSendCreateCodeName ( struct FString NewCodename, int CreateLevel );
	void eventServerToSendGlobalAddr ( struct FString IP, int Port );
	void ServerToSendChangeMainUnit ( struct FString UnitItemCode );
	void ServerToSendWhisperMsg ( struct FString InCodeName, struct FString ChatMsg );
	void ServerToSendChatMsg ( unsigned char ChatRoomType, int roomid, struct FString ChatMsg, int ChatType );
	void ServerToSendUnitEquipItem ( struct FString UnitItemCode, TArray< struct FQWord > ItemSNArray );
	void ServerToSendSetWeaponSetSN ( int WeaponSetSN );
	void ServerToSendInvenWeaponSet ( int ArmorySN, struct FQWord MainItemSN, struct FQWord SubItemSN, struct FQWord EtcItemSN0, struct FQWord EtcItemSN1, struct FQWord EtcItemSN2, struct FQWord SpecialItemSN );
	void ServerToSendGameIntrusion ( );
	void ServerToSendGetRoomUserlist ( int RoomNumber );
	void SendWarriorPlayerLogToDataBase ( struct FString ForceItemCode, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, int EarnScore, unsigned char bWinner, int Kill, int Death, int Assist, int TomahawkKill, int WeaponKill, int SpecialKill, int SequentialKill, int MonsterKill, int MonsterWeakKill, int DeathPlayTime, int Money, int TurretRemove, int TowerRemove, int GiveDamage, int ReceiveDamage, int GiveBackAttack, int ReceiveBackAttack, int AttackPoint, int DefensePoint, int MovePoint, int ModeLevel, int ModeExps, int MoneyTreatment, int MoneyPoint, int MoneyRecall, int MoneyWeapon, int MoneyEtc, int NeutralMonsterKill, int TowerDamage, int LuckyPoint );
	void SendManHuntPlayerLogToDataBase ( struct FString ForceItemCode, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, int PlayerWithCount, int EarnScore, unsigned char bWinner, int PlayTimeByHuman, int KillCntByHuman, int AssistCntByHuman, int DeadCntByHuman, int PlayTimeByBeast_A, int KillCntByBeast_A, int AssistCntByBeast_A, int DeadCntByBeast_A, int PlayTimeByBeast_B, int KillCntByBeast_B, int AssistCntByBeast_B, int DeadCntByBeast_B, int PlayTimeByBeast_C, int KillCntByBeast_C, int AssistCntByBeast_C, int DeadCntByBeast_C, int LuckyPoint );
	void SendUploadKillInfo ( TArray< int > KillCounter );
	void SendHeroGameLogToDatabase ( struct FString GameRule, struct FString WinnerTeam, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, unsigned char RoundCount, unsigned char AttackWinCnt_A, unsigned char DefenseWinCnt_A, unsigned char AttackWinCnt_B, unsigned char DefenseWinCnt_B, int ClanPoint_A, int ClanPoint_B, int CSN_A, int CSN_B, int WinnerCSN, int ATeam_TotalLevel, int ATeam_TotalKill, int ATeam_Tower1Health, int ATeam_Tower2Health, int ATeam_AliveTower, int ATeam_TotalModeMoney, int ATeam_TotalDesertion, int ATeam_TotalIntrude, int BTeam_TotalLevel, int BTeam_TotalKill, int BTeam_Tower1Health, int BTeam_Tower2Health, int BTeam_AliveTower, int BTeam_TotalModeMoney, int BTeam_TotalDesertion, int BTeam_TotalIntrude );
	void SendGameLogToDatabase ( struct FString GameRule, struct FString WinnerTeam, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, unsigned char RoundCount, unsigned char AttackWinCnt_A, unsigned char DefenseWinCnt_A, unsigned char AttackWinCnt_B, unsigned char DefenseWinCnt_B, int ClanPoint_A, int ClanPoint_B, int CSN_A, int CSN_B, int WinnerCSN );
	void SendWeaponLogToDataBase ( struct FString WeaponSetName, struct FString WeaponItemGroup, int PlayTime, int EarnScore, int KillCount, int AssistCount, int DeadCount, int HeadShotCount, int HeadHitCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int HitEnemyCount, int AimKillCount, int TotalHitCount, int WeapSetUsedCount, unsigned char MapIndex, unsigned char ModeIndex, int HeadPointHitCount, int KillCountBySecondWeapon, int KillCountBySpecialWeapon, int KillCountByGreranadeKill );
	void SendPlayerLogToDataBase ( struct FString ForceItemCode, int PlayTime, int KillCntByType_A, int AssistCntByType_A, int DeadCntByType_A, int KillCntByType_B, int AssistCntByType_B, int DeadCntByType_B, int KillCntByType_C, int AssistCntByType_C, int DeadCntByType_C, int HeadShotCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int AliveCount, int MissionInfo, int MissionInfo01, int MissionInfo02, int AttackPlayRound, int DefensePlayRound, int TotalWinCount, int TotalLoseCount, unsigned char ModeIndex, unsigned char MapIndex, int CSN, int PlayerWithCount, int EarnScore, int LuckyPoint, int AttackWinCount, int DefenseWinCount, int TotalHitEnemyCount, unsigned char EndState, int HeadHitCount, struct FString MainWeaponItemCode, int TotalHitCount, unsigned char bWinner, int GameScore );
	void ServerToSendSetTeamSwitch ( );
	void ServerToSendSetTeamBalance ( );
	void ServerToJoinGameRoom ( int MyUSN, int RoomNumber, struct FString Password );
	void ServerToSendCreateGameRoom ( struct FString strRoomName, int NumPlayers, int GameModeID, int MapID, unsigned long bIntrude, unsigned char AIDifficulty, unsigned long bPassword, struct FString strPW, unsigned long bSwitchingSide, int NumRound, int MatchPoint, unsigned char RedTeamPlayerCount, unsigned char BlueTeamPlayerCount, unsigned char RedTeamAICount, unsigned char BlueTeamAICount, unsigned long bKillCam, unsigned long bThirdPerson, unsigned long bTeamBalance, unsigned char RoomType, int MatchTimeLimit, unsigned char VipGrade, unsigned long bLastStand, unsigned char CustomModeType, unsigned char EnablePickUpWeapon );
	void ClearChannelingService ( );
	void InitChannelingService ( );
	struct FString GetChannelingServiceCode ( );
	bool GetIsChannelingService ( );
	void SetHackShieldMonitorServer ( struct FString HSPlayerUSN );
	void SetXignCodeUserAccount ( );
	void InitXignCode ( );
	void SetURLPlayerUSN ( int USN );
	void SetPlayerUniID ( struct FString strPlayerUniID );
	bool OpenCashChargePageURL ( struct FString strURL );
	bool OpenCashChargePage ( );
	bool IsStartFromWeb ( );
	struct FString GetCashChargeURLParam ( );
	struct FString GetAuthParam ( );
	void ProcessFeverTimeEventFinish ( class UPacket* Packet );
	void ProcessFeverTimeEventStart ( class UPacket* Packet );
	void ProcessRealTimeEventFinish ( class UPacket* Packet );
	void ProcessRealTimeEventStart ( class UPacket* Packet );
	int GetPlayerCreateLevel ( );
	void SetPlayerCreateLevel ( int newLevel );
	void SetOTPLoginDialog ( );
	void ProcessRecvPacket ( int ProtocolID, int ResultID, class UPacket* Packet );
	void UpdateChildGoreOption ( unsigned long bIsAdult );
	void SetOnChangedWaitingAckSize ( struct FScriptDelegate InDelegate );
	void eventSetWaitingTimeOut ( );
	void RemoveWaitingProtocolID ( int ProtocolID );
	void eventClearDelegateMapping ( );
	void SetWaitingProtocol ( int ProtocolID );
	bool packetSendtoMessengerServer ( class UPacket* SendPacket );
	void packetSend ( class UPacket* SendPacket, unsigned long bCheckWaiting );
	void SetNotifyMinuteHasPassedDelegate ( struct FScriptDelegate InDelegate );
	void PingPong ( float DeltaTime, class USFServerConnection* Connection );
	void eventUpdateOnlineTime ( float DeltaTime );
	void ServerToSendCheckSameClanMark ( struct FString ClanMark );
	void ServerToSendClanMessage ( int CSN, unsigned char Type, TArray< struct FString > Users, struct FString strMsg );
	void eventServerToSendUpdateGameScore ( int nKill, int nAssist, int nDeath, int MissionInfo1, int MissionInfo2, int MissionInfo3, int SPCounter, int nHeadShot );
	void ServerToSendGetInGameScore ( int RoomNumber );
	void ServerToSendSetInGameScore ( int RedScore, int BlueScore );
	void ServerToSendUserPing ( );
	void CST_ServerToSendGetGameRoomUserInfo ( class UPacket* Packet );
	void CST_ServerToSendGetGameRoomUserInfo_REQ ( unsigned char CSTType, int recvuserid, int SenduserId );
	void ServerToSendRefreshClanInfo ( );
	void ServerToSendUserKeyBinding ( struct FString KeySet );
	void ServerToSendRemoveMessageBoard ( struct FString strIndex );
	void ServerToSendInsertMessageBoard ( struct FString strMsg );
	void ServerToSendUpdateClanInfo ( struct FString WebURL, struct FString IntroMsg, struct FString Notice, struct FString ModeNo, struct FString MapNo, TArray< struct FString > OptionDataValue );
	void ServerToSendSetClanMemberLevel ( struct FString strUSN, struct FString strLevel );
	void ServerToSendCloseClan ( );
	void ServerToSendGiveClanMaster ( struct FString strNewUSN, struct FString strNewMasterRank );
	void ServerToSendRemoveClanMember ( struct FString strSendUSN );
	void ServerToSendRemoveClanRecommend ( struct FString ClanIndex );
	void ServerToSendAcceptClanMember ( struct FString strSendUSN );
	void ServerToSendUpdateFiringRangeNote ( struct FString WeaponType, struct FString Initial );
	void ServerToSendGetMyFiringRangeScore ( );
	void ServerToSendUpdateFiringRangeScore ( struct FString WeaponType, int Score );
	void ServerToSendSetMiniGameScore ( unsigned char MapID, unsigned char GameModeID, int Score, int Exp, int PlayingTime );
	void ServerToSendStartMiniGame ( unsigned char MapID, unsigned char GameModeID );
	void ServerToSendGetTutorialScoreList ( );
	void ServerToSendGetGameRoomUserInfo ( int USN );
	void ServerToSendGetGameRoomInfo ( int roomid );
	void ServerToSetUserLevel ( unsigned char Level );
	void ServerToSendQuickJoin ( int GameModeID, int MapID );
	void ServerToSendRepairItemMulti ( struct FQWord ISN1, struct FQWord ISN2, struct FQWord ISN3 );
	void ServerToSendRepairItem ( struct FQWord ItemSN );
	void ServertoSendReSellItem ( struct FQWord ItemSN, struct FString ItemType, int ItemCount );
	void ServerToSendBuyItem ( int ItemId, unsigned char BuyTP, struct FString CouponID, unsigned char IsDailyDiscountItem, int RequestPrice );
	void ServerToGetGameRoomList ( );
	void ServerToSendSetUseCoupon ( struct FString strCoupon );
	void ServerToSendGetPartsList ( );
	void ServerToSendRemovePart ( struct FQWord WeaponItemSN );
	void ServerToSendDeathPart ( struct FQWord WeaponItemSN, struct FQWord PartItemSN );
	void ServerToSendApplyPart ( struct FQWord WeaponItemSN, struct FQWord PartItemSN );
	void ServerToSendOpenChoicePackageItem ( struct FQWord ItemNSN, int ItemId );
	void ServerToSendOpenPackageItem ( struct FQWord ItemNSN );
	void ServerToSendSetUseNewItem ( struct FQWord ItemNSN, struct FString UseOption );
	void ServerToSendGetNotUsedItemList ( );
	void ServerToSendGetForceItemList ( );
	void ServerToSendGetArmsStoreList ( );
	void ServerToSendGetUsedItemList ( );
	void ServerToSendGetOp ( );
	void ServerToSendGetCash ( );
	void ServerToSendGetTp ( );
	void ServerToSendGetSp ( );
	void ServerToSendUpdateTaskList ( TArray< struct FChallengeProgressData > UpdateList );
	void ServerToSendGetTaskList ( );
	void ServerToSendGetUserKillInfo ( );
	void ServerToSendGetZombieTwoRankAccTop100 ( int mode_id );
	void ServerToSendGetZombieRankAccTop100 ( int mode_id );
	void ServerToSendGetPveRankAccTop100 ( int mode_id );
	void ServerToSendGetUserRealRanking ( );
	void ServerToSendGetUserRankingList ( );
	void ServerToSendBuyRecycle ( TArray< struct FQWord > RecycleDisplayNSN, int RecycleScore, int RecyclePrice );
	void ServerToSendGetRecycleInfo ( );
	void ServerToSendBuyEnchantPartsItem ( int PartsItemID, unsigned char BuyType, int ItemPrice, int SelectParts );
	void ServerToSendGiveEnchantUserDesignItem ( int EnchantDesignID, int BaseItemID, struct FQWord ItemNSN, struct FQWord ItemSN, unsigned char BuyType, int ItemPrice );
	void ServerToSendGetEnchantUserDesignItemcnt ( );
	void ServerToSendGetEnchantDesign ( );
	void ServerToSendGiveEnchantUserDesign ( int EnchantDesignID );
	void ServerToSendDestroyEnchantDesignItem ( int ItemId, struct FQWord ItemNSN, struct FQWord ItemSN, int SelectParts );
	void ServerToSendSaveVipMapRotationInfo ( TArray< struct FMapRotationInfo > TempSaveMapList );
	void ServerToSendGetVipMapRotationInfo ( );
	void ServerToSendGetVipItemInfo ( );
	void ServerToSendGetVipGradeInfo ( );
	void ServerToSendGetLeagueSeasonDate ( );
	void ServerToSendGetLeagueTicketCount ( );
	void ServerToSendGetPlayerVipInfo ( );
	void ServerToSendGetUserInfo ( int MyUSN );
	void ServerToSendChangeRoomSetting ( int GameModeID, int MapID, int Round, int nIsSwitchSide, int nIsIntrusion, struct FString RoomName, int nAIDifficulty, struct FString Password, int Players, int bKillCam, int MatchPoint, int nIsThirdPerson, int nIsTeamBalance, int RoomNumber, int MatchTimeLimit, unsigned char RedTeamPlayerCount, unsigned char BlueTeamPlayerCount, unsigned char RedTeamAICount, unsigned char BlueTeamAICount, unsigned char bLastStand, unsigned char CustomModeType, unsigned char EnablePickUpWeapon );
	void ServerToSendKickout ( int USN, int RoomNumber );
	void ServerToSendSlotChangeMessage ( int SlotIndex, int RoomNumber );
	void ServerToSendLeftWaitingRoom ( int RoomNumber );
	void ServerToSendRoomUserStatus ( unsigned char UserStatus, int RoomNumber );
	void eventServerToSendExitGameWithError ( struct FString ErrorMsg );
	void ServerToSendNotResonseHost ( int BadHostUSN );
	bool eventServerToInsertHackLog ( unsigned char HackType );
	void ServerToSendMapLoaded ( );
	void ServerToSendExitGame ( );
	void ServerToSendGameEnd ( );
	void ServerToSendStartGame ( );
	void ServerToSend_SystemSpec ( );
	void ServerToSendOTP ( struct FString OTPNum );
	void ServerToSendLogOut ( );
	void ServerToSendLogin ( );
	struct FString GetLoginSpareParam ( );
	bool IsConnectedServer ( class USFServerConnection* Connection, struct FString NewServerIP, int NewServerPort );
	void DisconnectAllServerConnection ( );
	void eventEasyAntiCheatSendResponse ( TArray< unsigned char > Buffer );
	void eventXIGNCODESendResponse ( TArray< unsigned char > Buffer );
	void eventHackShieldSendResponse ( TArray< unsigned char > Buffer );
	void eventSetConnectIDPW ( struct FString strID, struct FString strPW );
	void SetLoginViewIDPW ( struct FString strID, struct FString strPW );
	void eventOnInit ( );
	void SetGameServerConnect ( );
	void eventpostCheckAutoLogin ( );
	void ReturnToLogin ( );
	bool CheckAutoLogin ( );
	void NotifyLobbyManagerLoaded ( );
	bool eventOnServerDisconnectedForce ( class USFServerConnection* Connection, int nLastError );
	void eventOnServerDisconnected ( class USFServerConnection* Connection );
	void SetPlayerCodeName ( struct FString CodeName );
	void SetGhostMode ( unsigned long bSet );
	bool IsGhostMode ( );
	bool eventIsProLeaguer ( );
	bool IsAbleSpecatorInLeagueChannel ( );
	bool eventIsSpectatingPlayer ( );
	bool eventIsGameMaster ( );
	class USFServerConnection* GetMessengerServerConnection ( );
	class USFServerConnection* GetGameServerConnection ( );
	void ProcessPacketHandler ( int ProtocolID, int ResultID, class UPacket* Packet );
	void AddRecvPacketHandler ( int ProtocolID, int ResultID, struct FScriptDelegate OnPacketRecvHandler );
	bool eventProcessTwitchTVCallbackInGame ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	bool eventProcessTwitchTVCallback ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	bool eventOpenForceExitDialog ( int ExitType, int ErrCode );
	bool eventCannotConnectServer ( int LastError, class USFServerConnection* Connection );
	bool eventOnCashChargePageClosed ( );
	void SetProcessTwitchTVCallbackInGame ( struct FScriptDelegate InDelegate );
	void SetProcessTwitchTVCallback ( struct FScriptDelegate InDelegate );
	void SetCashChargePageClosedDelegate ( struct FScriptDelegate InDelegate );
	void SetHandlingPacketErrorDelegate ( struct FScriptDelegate InDelegate );
	void SetForceExitDialogDelegate ( struct FScriptDelegate InDelegate );
	void OnProcessTwitchTVCallbackInGame ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void OnProcessTwitchTVCallback ( int CurrentStatus, unsigned long IsFail, int ErrorCode );
	void OnCashChargePageClosedDelegate ( );
	void OnHandlingPacketErrorDelegate ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void OnOpenForceExitDialog ( int ExitType, int ErrCode, struct FString ForceExitMessage );
	void OnReceivedLoginOK ( );
	void OpenBillingToken ( struct FString CashChargeToken );
	void eventOnWebNavigateComplete ( struct FString RedirectedURL );
	void eventOnWebDocumentComplete ( struct FString RedirectedURL );
	void eventOnCloseWebBrowser ( struct FString Message );
	void SetCashChargeWeb ( unsigned long bSet );
	void eventOnMicroTxnAuthorizationReceived ( struct FString OrderID );
	void ActivateGameOverlayToWebPage ( struct FString WebPage );
	void ActivateGameOverlayStore ( );
	void ActivateGameOverlay ( struct FString OverlayType );
	bool SetSteamAchievement ( struct FString StatName );
	bool GetSteamAchievement ( struct FString StatName, int* Value );
	bool SetSteamStat ( struct FString StatName, int Value );
	bool GetSteamStat ( struct FString StatName, int* Value );
	void RequestSteamAchievements ( );
	void ClearSteamAuthSessionTicket ( );
	struct FString GetSteamAuthSessionTicket ( );
	struct FString GetSteamID ( );
	struct FString GetSteamAppID ( );
	void CloseNewWindowWeb ( );
	bool OpenNewWindowWeb ( struct FString URL );
	struct FString GetHTMLText ( );
	struct FString GetMacAddressString ( );
	void ClearWebControlBoarder ( );
	int GetWebBodyHeight ( );
	bool GetWebControlSize ( int* Width, int* Height );
	bool IsWebControllVisible ( );
	void SetWebControlSize ( int Width, int Height );
	void SetWebControlPosition ( int PosX, int PosY );
	void ShowWebControl ( unsigned long IsShow );
	void CloseWeb ( unsigned long bTerminate );
	void SetPostProcess ( unsigned long isEnable );
	void NavigateWeb ( struct FString URL );
	bool OpenWeb ( struct FString URL, struct FString Title, int PosX, int PosY, int Width, int Height, unsigned long bVisible, int BrowserStyle, unsigned long bSilent, unsigned long bForceRunScriptWhenError );
	void InitializeArguments ( );
	bool CloseSSOWeb ( );
	void nativeExit ( );
	void SetLoginedLocalTime ( );
	int GetGameRevision ( );
	void TickProcessBuffer ( );
	void ucGettickCount ( float* Time );
	bool eventInit ( );
	void OnNotifyMinuteHasPassedDelegate ( );
	void OnChangedWaitingAckSize ( int nSize );
	void OnPacketRecv ( class UPacket* Packet );
};

UClass* USFOnlineSubsystemPC::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCCHN
// 0x0034 (0x04E4 - 0x04B0)
class USFOnlineSubsystemPCCHN : public USFOnlineSubsystemPC
{
public:
	TArray< struct FSPacketError >                     LoginPacketErrorArray;                            		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SaveVerifyCodeImagePath;                          		// 0x04BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ModuleCodeImage;                                  		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ModuleMatrixImage;                                		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsVerifyNeedCheck : 1;                           		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsMatrixNeedCheck : 1;                           		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsForceVerifyCapthcha : 1;                       		// 0x04E0 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3991 ];

		return pClassPointer;
	};

	void ProcessRecvPacket ( int ProtocolID, int ResultID, class UPacket* Packet );
	void eventServerToSendTCProtectEcho ( );
	void eventServerToSendTCProtectError_CHN ( int ErrorCode );
	struct FString eventGetPacketError ( int InProtocolID, int InErrorID );
	void SetModuleMatrixImage ( struct FString Image );
	void SetModuleCodeImage ( struct FString Image );
	bool AuthVerifyProc ( struct FString Id, struct FString Password, int ServerNumber, struct FString* TokenInfo, struct FString* ResultDesc );
	bool LoadMatrixCodeImage ( struct FString Id, struct FString* ResultDesc );
	bool LoadVerifyCodeImage ( struct FString Id, struct FString* ResultDesc );
	bool InitChnLoginSDKClient ( );
	bool LoginTestCode ( struct FString Id, struct FString Password );
	void nativeExit ( );
	bool DLLCheckMD5 ( struct FString Arg1, struct FString Arg2 );
	bool GetCheckDllFunction ( );
	bool GetCheckLoadDll ( );
	bool TCProtectCheck ( class UPacket* Packet, struct FString Arg1, struct FString Arg2 );
	struct FString GetLoginCHNAuthorizationCode ( struct FString Id, struct FString Password );
};

UClass* USFOnlineSubsystemPCCHN::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCESP
// 0x003C (0x04EC - 0x04B0)
class USFOnlineSubsystemPCESP : public USFOnlineSubsystemPC
{
public:
	int                                                FrameWidth;                                       		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FrameHeight;                                      		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     CmdParam;                                         		// 0x04B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           GGOParamArray;                                    		// 0x04C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GGOLoginParam;                                    		// 0x04D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GGOParserParam;                                   		// 0x04DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsLoginAuthorizationCode : 1;                     		// 0x04E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3993 ];

		return pClassPointer;
	};

	void eventpostCheckAutoLogin ( );
	void eventSetParserCmdLine ( struct FString FullCmdParam, struct FString GGOParam );
	bool CheckAutoLogin ( );
	bool GetLoginAuthorizationCode ( );
};

UClass* USFOnlineSubsystemPCESP::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCEUR
// 0x0018 (0x04C8 - 0x04B0)
class USFOnlineSubsystemPCEUR : public USFOnlineSubsystemPC
{
public:
	int                                                FrameWidth;                                       		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FrameHeight;                                      		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSteamLanguage >                    SteamLanguages;                                   		// 0x04B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bLoginAfterSteamLoginFailed : 1;                  		// 0x04C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3995 ];

		return pClassPointer;
	};

	void eventpostCheckAutoLogin ( );
	struct FString GFCInitialize ( );
	void ShowWebControl ( unsigned long IsShow );
	struct FString GetSteamID ( );
	bool CheckAutoLogin ( );
	struct FString GetSteamLanguage ( );
	struct FString GetLoginSpareParam ( );
	void OpenBillingToken ( struct FString CashChargeToken );
};

UClass* USFOnlineSubsystemPCEUR::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCIDN
// 0x009C (0x054C - 0x04B0)
class USFOnlineSubsystemPCIDN : public USFOnlineSubsystemPC
{
public:
	struct FString                                     GameCode;                                         		// 0x04B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RedirectUrl;                                      		// 0x04BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     Domain;                                           		// 0x04C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     XmlURL;                                           		// 0x04D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OSSWebDomain;                                     		// 0x04E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OSSWebactCookieURL;                               		// 0x04EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OSSWebrefCookieURL;                               		// 0x04F8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     OSSWebpathValueName;                              		// 0x0504 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                QueryInfoStatusCode;                              		// 0x0510 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsLoginSuccess : 1;                               		// 0x0514 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsLoginProcessExecution : 1;                      		// 0x0514 (0x0004) [0x0000000000000000] [0x00000002] 
	struct FString                                     UserToken;                                        		// 0x0518 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AuthErrorMsg;                                     		// 0x0524 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AuthErrorCode;                                    		// 0x0530 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                QueryInfoStatesCode;                              		// 0x053C (0x0004) [0x0000000000000000]              
	TArray< struct FSNMAuthError >                     NMAuthErrorArray;                                 		// 0x0540 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3997 ];

		return pClassPointer;
	};

	struct FString GetNMAuthErrorMsg ( int ErrorID );
	bool IsNMComplete ( struct FString* ErrorMsg );
	bool AuthProcessExecution ( struct FString* ErrorMsg );
	bool SetNMClientAuth ( struct FString Id, struct FString Password, struct FString* ErrorMsg );
	bool WebSetting ( int SizeX, int SizeY, struct FString WebURL );
	bool OpenCouponWeb ( );
	bool CloseSSOWeb ( );
	bool OpenSSOWeb ( );
	bool OpenCashChargePage ( );
	bool GetLoginAuthorizationCode ( );
	void nativeExit ( );
	void NotifyLobbyManagerLoaded ( );
	int GetNMAuthParam ( );
	int IsComplete ( );
	int ProcessExecution ( );
	int SetLoginData ( struct FString Id, struct FString Password );
	void ClearAuthenticationData ( );
};

UClass* USFOnlineSubsystemPCIDN::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCJPN
// 0x0000 (0x04B0 - 0x04B0)
class USFOnlineSubsystemPCJPN : public USFOnlineSubsystemPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 3999 ];

		return pClassPointer;
	};

	void eventpostCheckAutoLogin ( );
	void ServerToSendOTP ( struct FString OTPNum );
	void ServerToSendLogin ( );
	bool GetLoginAuthorizationCode ( );
	bool CheckAutoLogin ( );
	bool eventInit ( );
};

UClass* USFOnlineSubsystemPCJPN::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCKOR
// 0x0000 (0x04B0 - 0x04B0)
class USFOnlineSubsystemPCKOR : public USFOnlineSubsystemPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4001 ];

		return pClassPointer;
	};

	void SendTestData ( struct FString UniqueId, unsigned char IsHost, struct FString PlayerName, float AvgFps, float Above30Fps, float AvgGpuTime, int HitchTotal, int HitGamBndCnt, int HitRenBnbCnt, int HitGpuBndCnt, int Sec_100, int Sec_150, int Sec_200, int Sec_300, int Sec_500_INF, struct FString Desc1, float PingAvr, int PktLoss, int PktOutOrder, float PktUploadAvr, float PktDownAvr, struct FString Desc2, struct FString OS, struct FString Memory, struct FString CPU, struct FString GPU, struct FString Software, int ScaleLevel, int TotalPlayerCounter, unsigned char MapID, unsigned char ModeID );
	void ClearChannelingService ( );
	void InitChannelingService ( );
	void nativeExit ( );
	void NotifyLobbyManagerLoaded ( );
	bool CloseSSOWeb ( );
	bool OpenKORSSOWeb ( );
	bool OpenCashChargePage ( );
	bool GetLoginAuthorizationCode ( );
};

UClass* USFOnlineSubsystemPCKOR::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCPMS
// 0x003C (0x04EC - 0x04B0)
class USFOnlineSubsystemPCPMS : public USFOnlineSubsystemPC
{
public:
	TArray< struct FString >                           ContactDomain;                                    		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                FrameWidth;                                       		// 0x04BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FrameHeight;                                      		// 0x04C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ConnectFacebookURL;                               		// 0x04C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ConnectGoogleURL;                                 		// 0x04D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AuthenticURL;                                     		// 0x04DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                LoginDomain;                                      		// 0x04E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4003 ];

		return pClassPointer;
	};

	void SocialLogin ( struct FString SocialID, struct FString SocialToken, struct FString SocialName );
	void GetHTMLSourceText ( );
	void eventOnWebDocumentComplete ( struct FString RedirectedURL );
	void eventOnCloseWebBrowser ( struct FString Message );
	void eventOpenBillingWebPage ( struct FString RedirectedURL );
	void ServerToSendOTP ( struct FString OTPNum );
	void ServerToSendLogin ( );
	bool OpenCashChargePage ( );
	bool GetLoginAuthorizationCode ( );
	bool NotifyLobbyLoaded ( );
	bool eventInit ( );
};

UClass* USFOnlineSubsystemPCPMS::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCTHA
// 0x003C (0x04EC - 0x04B0)
class USFOnlineSubsystemPCTHA : public USFOnlineSubsystemPC
{
public:
	int                                                FrameWidth;                                       		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FrameHeight;                                      		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     CmdParam;                                         		// 0x04B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           GGOParamArray;                                    		// 0x04C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GGOLoginParam;                                    		// 0x04D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GGOParserParam;                                   		// 0x04DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsLoginAuthorizationCode : 1;                     		// 0x04E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4005 ];

		return pClassPointer;
	};

	void eventpostCheckAutoLogin ( );
	void eventSetParserCmdLine ( struct FString FullCmdParam, struct FString GGOParam );
	bool CheckAutoLogin ( );
	bool GetLoginAuthorizationCode ( );
};

UClass* USFOnlineSubsystemPCTHA::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCTWN
// 0x0000 (0x04B0 - 0x04B0)
class USFOnlineSubsystemPCTWN : public USFOnlineSubsystemPC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4007 ];

		return pClassPointer;
	};

	void eventpostCheckAutoLogin ( );
	void ServerToSendOTP ( struct FString OTPNum );
	void ServerToSendLogin ( );
	bool GetLoginAuthorizationCode ( );
	bool CheckAutoLogin ( );
	bool eventInit ( );
};

UClass* USFOnlineSubsystemPCTWN::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCWeb
// 0x00F4 (0x05A4 - 0x04B0)
class USFOnlineSubsystemPCWeb : public USFOnlineSubsystemPC
{
public:
	struct FString                                     AuthURL;                                          		// 0x04B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestAuthURL;                                      		// 0x04BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AuthCodeWord;                                     		// 0x04C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ValidateURL;                                      		// 0x04D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestValidateURL;                                  		// 0x04E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                WebControlWidth;                                  		// 0x04EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WebControlHeight;                                 		// 0x04F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WebControlPosXRatio;                              		// 0x04F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WebControlPosYRatio;                              		// 0x04F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     PublisherSteamAuthURL;                            		// 0x04FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PublisherSteamInterlockURL;                       		// 0x0508 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PublisherSteamInterlockResponseURL;               		// 0x0514 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestPublisherSteamAuthURL;                        		// 0x0520 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestPublisherSteamInterlockURL;                   		// 0x052C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestPublisherSteamInterlockResponseURL;           		// 0x0538 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestLoginURL;                                     		// 0x0544 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             WebLoginOKdelegate;                               		// 0x0550 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             WebLoadingCompletedelegate;                       		// 0x055C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             SetWebLoginAutoSizedelegate;                      		// 0x0568 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotiWebLoginOK__Delegate;                       		// 0x0574 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotiWebLoadingComplete__Delegate;               		// 0x0580 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetWebLoginDialogSize__Delegate;                		// 0x058C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SetWebLoginAutoSize__Delegate;                  		// 0x0598 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4009 ];

		return pClassPointer;
	};

	void SetWebLoginViewAutoSizedelegate ( struct FScriptDelegate InDelegate );
	void SetWebLoadingCompleteDelegate ( struct FScriptDelegate InDelegate );
	void SetOnWebLoginOKDelegate ( struct FScriptDelegate InDelegate );
	void eventOnWebLoginDocumentComplete ( int Width, int Height );
	void eventOnWebLoadingComplete ( );
	struct FString eventGetPublisherSteamInterlockResponseURL ( );
	struct FString eventGetPublisherSteamInterlockURL ( );
	struct FString eventGetPublisherSteamAuthURL ( );
	struct FString eventGetPublisherAuthResponseURL ( );
	struct FString eventGetPublisherAuthURL ( );
	void TestLogIn ( );
	void WebLoginAutoSize ( );
	void eventClearDelegateMapping ( );
	bool ShowPublisherLogin ( );
	bool PublisherLogin ( );
	bool IsInternalTest ( );
	void SetWebLoginAutoSize ( );
	void SetWebLoginDialogSize ( int Width, int Height );
	void NotiWebLoadingComplete ( );
	void NotiWebLoginOK ( struct FString AuthCode );
};

UClass* USFOnlineSubsystemPCWeb::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCUSA
// 0x0000 (0x05A4 - 0x05A4)
class USFOnlineSubsystemPCUSA : public USFOnlineSubsystemPCWeb
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4011 ];

		return pClassPointer;
	};

	void eventOnSuccessWebLogin ( struct FString ReceiveAuthCode );
	void UpdateAchievement ( struct FString Achievement, int CurrentScore, unsigned long bCompleted );
	struct FString GetAeriaCodeFromAuthResponse ( struct FString RedirectedURL );
	struct FString GetSteamAeriaSocialConnected ( struct FString RedirectedURL );
	void eventOnWebNavigateComplete ( struct FString RedirectedURL );
	void eventOnWebDocumentComplete ( struct FString RedirectedURL );
	struct FString GetLoginSpareParam ( );
	bool AllowRetryLogin ( );
	void LoginWithSteam ( );
	void RequestSteamInterlocked ( );
	bool ShowAeriaLogin ( );
};

UClass* USFOnlineSubsystemPCUSA::pClassPointer = NULL;

// Class SFGame.SFOnlineSubsystemPCDedi
// 0x000C (0x026C - 0x0260)
class USFOnlineSubsystemPCDedi : public USFOnlineSubsystemPCBase
{
public:
	struct FScriptDelegate                             __ProcessDediRecvPacketDelegate__Delegate;        		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4013 ];

		return pClassPointer;
	};

	void ServerToSendInGameBombSPInfo ( int USN, struct FQWord ItemSN, unsigned char SlotIndex );
	void ServerSetRequestEndGameExit ( int USN, int Kills, int Assists, int Deaths, int HeadShotCount );
	void OnAITDMMatchOver ( struct FSFGameLog GameLog, struct FString UniqueKey, int channelType, int ChannelId );
	void OnHeroMatchOver ( struct FSFGameLog GameLog, struct FString UniqueKey, int channelType, int ChannelId );
	void ServerToSendZombiePlayerLogToDatabase ( int USN, struct FString ForceItemCode, unsigned char ModeIndex, unsigned char MapIndex, int PlayLevel, int PlayTime, int KillCount, int AssistCount, int DeadCount, int RevivalCount, TArray< int > ZombieKillArray, int EarnScore, int CurrentWave, int MatchClear, int HeadShotCount );
	void ServerToSendGoldRushPlayerLogToDatabase ( int USN, struct FString ForceItemCode, int PlayTime, int KillCntByType_A, int AssistCntByType_A, int DeadCntByType_A, int KillCntByType_B, int AssistCntByType_B, int DeadCntByType_B, int KillCntByType_C, int AssistCntByType_C, int DeadCntByType_C, int HeadShotCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int AliveCount, int MissionInfo, int MissionInfo01, int MissionInfo02, int AttackPlayRound, int DefensePlayRound, int TotalWinCount, int TotalLoseCount, unsigned char ModeIndex, unsigned char MapIndex, int CSN, int PlayerWithCount, int EarnScore, int LuckyPoint, int AttackWinCount, int DefenseWinCount, int TotalHitEnemyCount, unsigned char EndState, int HeadHitCount, struct FString MainWeaponItemCode, int TotalHitCount, unsigned char bWinner, int GameScore, struct FString Team, int PCRoomType, int AccquireItemAmount, int ConvoyanceMoveSec, int ReturnItemAmount );
	void ServerToSendAIDTMPlayerLogToDataBase ( int USN, struct FString ForceItemCode, int PlayTime, int KillCntByType_A, int AssistCntByType_A, int DeadCntByType_A, int KillCntByType_B, int AssistCntByType_B, int DeadCntByType_B, int KillCntByType_C, int AssistCntByType_C, int DeadCntByType_C, int HeadShotCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int AliveCount, int MissionInfo, int MissionInfo01, int MissionInfo02, int AttackPlayRound, int DefensePlayRound, int TotalWinCount, int TotalLoseCount, unsigned char ModeIndex, unsigned char MapIndex, int CSN, int PlayerWithCount, int EarnScore, int LuckyPoint, int AttackWinCount, int DefenseWinCount, int TotalHitEnemyCount, unsigned char EndState, int HeadHitCount, struct FString MainWeaponItemCode, int TotalHitCount, unsigned char bWinner, int GameScore, int DiebyAI );
	void ServerToSendWarriorPlayerLogToDataBase ( int USN, struct FString ForceItemCode, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, int EarnScore, unsigned char bWinner, int Kill, int Death, int Assist, int TomahawkKill, int WeaponKill, int SpecialKill, int SequentialKill, int MonsterKill, int MonsterWeakKill, int DeathPlayTime, int Money, int TurretRemove, int TowerRemove, int GiveDamage, int ReceiveDamage, int GiveBackAttack, int ReceiveBackAttack, int AttackPoint, int DefensePoint, int MovePoint, int ModeLevel, int ModeExps, int MoneyTreatment, int MoneyPoint, int MoneyRecall, int MoneyWeapon, int MoneyEtc, int NeutralMonsterKill, int TowerDamage, int LuckyPoint );
	void ServerToSendManHuntPlayerLogToDataBase ( int USN, struct FString ForceItemCode, int PlayTime, unsigned char ModeIndex, unsigned char MapIndex, int PlayerWithCount, int EarnScore, unsigned char bWinner, int PlayTimeByHuman, int KillCntByHuman, int AssistCntByHuman, int DeadCntByHuman, int PlayTimeByBeast_A, int KillCntByBeast_A, int AssistCntByBeast_A, int DeadCntByBeast_A, int PlayTimeByBeast_B, int KillCntByBeast_B, int AssistCntByBeast_B, int DeadCntByBeast_B, int PlayTimeByBeast_C, int KillCntByBeast_C, int AssistCntByBeast_C, int DeadCntByBeast_C, int LuckyPoint );
	void ServerToSendPVEPlayerLogToDataBase ( int USN, struct FString ForceItemCode, unsigned char MapIndex, unsigned char ModeIndex, int PlayLevel, int PlayTime, int KillCount, int BossKill, int CriticalKill, int AssistCount, int AccmulationMoney, int SpendMoney, int RevivalCount, int EliteCrawlerKill, int NamedCrawlerKill, int EliteRipperKill, int NamedRipperKill, int CloakingRipperKill, int EliteLibertineKill, int NamedLibertineKill, int EliteStunnerKill, int NamedStunnerKill, int GasStunnerKill, int EliteTyrantKill, int NamedTyrantKill, int TotalExp, int CurrentWave, int MatchClear, int LuckyPoint );
	void ServerToSendPlayerLogToDataBase ( int USN, struct FString ForceItemCode, int PlayTime, int KillCntByType_A, int AssistCntByType_A, int DeadCntByType_A, int KillCntByType_B, int AssistCntByType_B, int DeadCntByType_B, int KillCntByType_C, int AssistCntByType_C, int DeadCntByType_C, int HeadShotCount, int ChestHitCount, int StomachHitCount, int LimbsHitCount, int AliveCount, int MissionInfo, int MissionInfo01, int MissionInfo02, int AttackPlayRound, int DefensePlayRound, int TotalWinCount, int TotalLoseCount, unsigned char ModeIndex, unsigned char MapIndex, int CSN, int PlayerWithCount, int EarnScore, int LuckyPoint, int AttackWinCount, int DefenseWinCount, int TotalHitEnemyCount, unsigned char EndState, int HeadHitCount, struct FString MainWeaponItemCode, int TotalHitCount, unsigned char bWinner, int GameScore );
	void ServerToSendAITDGameLogToDatabase ( struct FSFGameLog GameLog, struct FString UniqueKey, int channelType, int ChannelId, int TargetScore, unsigned char Difficult, int TotalPlayer, TArray< struct FsTeamScore > TeamScores );
	void ServerToSendHeroGameLogToDatabase ( struct FSFGameLog GameLog, struct FString UniqueKey, int channelType, int ChannelId, int ATeam_TotalLevel, int ATeam_TotalKill, int ATeam_Tower1Health, int ATeam_Tower2Health, int ATeam_AliveTower, int ATeam_TotalModeMoney, int ATeam_TotalDesertion, int ATeam_TotalIntrude, int BTeam_TotalLevel, int BTeam_TotalKill, int BTeam_Tower1Health, int BTeam_Tower2Health, int BTeam_AliveTower, int BTeam_TotalModeMoney, int BTeam_TotalDesertion, int BTeam_TotalIntrude );
	void ServerToSendGameLogToDatabase ( struct FSFGameLog GameLog, struct FString UniqueKey, int channelType, int ChannelId );
	void ServerToSendInGameOverMatch ( int ChannerType, int ChannerID, struct FString UniqueKey, int MatchOver );
	void ServerToSendUserCondition ( int PlayerID, int GameModeID, int MimimumPlayTime );
	void ServerToSendInGameUserKick ( int myProposerPID, int myTargetPID, int myModeID, int myMapID, unsigned long myVoteResult, unsigned char myAssentient, unsigned char myObjection, unsigned char myInvalide, int myKills, int myDeaths, int myRedScore, int myBlueScore, int myRedMembers, int myBlueMembers );
	void ServerToSendGetPlayerInfo ( int USN );
	void ServerToUpdatePlayInfo ( struct FString GameIndex, int ModeIndex, int MapIndex, int PlayTime, struct FString ResultString, int USN, int Kill, int Assist, int Death, int GainExp );
	void eventServerToSendDisconnectUser ( int UserSerialNumber, struct FString DisconnectReason, int UserExecute );
	void DisconnectAllServerConnection ( );
	void SetProcessDediRecvPacketDelegate ( struct FScriptDelegate InDelegate );
	void ProcessRecvPacket ( int ProtocolID, int ResultID, class UPacket* Packet );
	void packetSendtoDediGS ( class UPacket* SendPacket );
	void ServerToSendSlaughtererUserInfo ( int USN, int TO_USN );
	void ServerToSendSetInGameUserPoint ( int USN, int Exp, int LP );
	void ServerToSendSpendUsableInGameData ( int USN, struct FUsableInGameItemData ItemData );
	void ServerToSendDediItemValidation ( int USN, TArray< struct FString > ItemCodeArray );
	class USFServerConnection* GetDediBridgeConnection ( );
	void ProcessDediRecvPacketDelegate ( int ProtocolID, int ResultID, class UPacket* Packet );
	bool eventInit ( );
};

UClass* USFOnlineSubsystemPCDedi::pClassPointer = NULL;

// Class SFGame.SFServerConnection
// 0x005C (0x0098 - 0x003C)
class USFServerConnection : public UObject
{
public:
	struct FString                                     Tag;                                              		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     IP;                                               		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Port;                                             		// 0x0054 (0x0004) [0x0000000000000000]              
	float                                              nowtime;                                          		// 0x0058 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsPolling : 1;                                   		// 0x005C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceExitWhenDisconnect : 1;                     		// 0x005C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                PollingCount;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FSFSocket                                   SocketInfo;                                       		// 0x0064 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ConnectTryCount;                                  		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 4015 ];

		return pClassPointer;
	};

};

UClass* USFServerConnection::pClassPointer = NULL;

// Class SFGame.ActorFactoryBarricade
// 0x0007 (0x0078 - 0x0071)
class UActorFactoryBarricade : public UActorFactoryDynamicSM
{
public:
	unsigned long                                      bDamageEncroachedActor : 1;                       		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSlowDownEncroachedActor : 1;                     		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41373 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryBarricade::pClassPointer = NULL;

// Class SFGame.SFBarricadeActor
// 0x0000 (0x0328 - 0x0328)
class ASFBarricadeActor : public ASFObstaclesActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41377 ];

		return pClassPointer;
	};

	void ObstacleStatChanged ( );
};

UClass* ASFBarricadeActor::pClassPointer = NULL;

// Class SFGame.ActorFactoryAlienSpore
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryAlienSpore : public UActorFactoryBarricade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41378 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryAlienSpore::pClassPointer = NULL;

// Class SFGame.SFAlienSporeActor
// 0x0000 (0x0328 - 0x0328)
class ASFAlienSporeActor : public ASFObstaclesActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41380 ];

		return pClassPointer;
	};

	void CheckInstallAim ( );
	void PreViewUpdate ( );
	void UpdateObjectIcon ( );
	void ObstacleStatChanged ( );
	void OnSetBarricade ( class USFSeqAct_SetBarricade* Action );
	bool IsInstallableBy ( class APawn* InstPawn );
	void SetupStaticMesh ( int LevelNew );
	void AddWalletToTeam ( class AController* Target, int Money );
	void AddWallet ( class AController* Target, int Money );
	void PostTakeDamage ( class AController* EventInstigator );
	int GetHealthMax ( );
	int eventGetHealthPercentageINT ( );
};

UClass* ASFAlienSporeActor::pClassPointer = NULL;

// Class SFGame.ActorFactoryHelicopter
// 0x0000 (0x0071 - 0x0071)
class UActorFactoryHelicopter : public UActorFactoryMover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41381 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryHelicopter::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_Area
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_Area : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41383 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_Area::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_Area
// 0x0004 (0x035C - 0x0358)
class ASFGamePlayerStart_Area : public ASFGamePlayerStart
{
public:
	int                                                AreaIndex;                                        		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41385 ];

		return pClassPointer;
	};

	int GetAreaIndex ( );
};

UClass* ASFGamePlayerStart_Area::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_DM
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_DM : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41386 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_DM::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_Mission
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_Mission : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41388 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_Mission::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_Mission_vs16
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_Mission_vs16 : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41390 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_Mission_vs16::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_SH
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_SH : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41392 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_SH::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_SH
// 0x0001 (0x0359 - 0x0358)
class ASFGamePlayerStart_SH : public ASFGamePlayerStart
{
public:
	unsigned char                                      StartingAreaIndex;                                		// 0x0358 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41394 ];

		return pClassPointer;
	};

	int GetAreaIndex ( );
};

UClass* ASFGamePlayerStart_SH::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_TDM
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_TDM : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41395 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_TDM::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_TDM
// 0x0000 (0x0358 - 0x0358)
class ASFGamePlayerStart_TDM : public ASFGamePlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41397 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStart_TDM::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_TDM_vs16
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_TDM_vs16 : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41398 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_TDM_vs16::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_TDM_vs16
// 0x0000 (0x0358 - 0x0358)
class ASFGamePlayerStart_TDM_vs16 : public ASFGamePlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41400 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStart_TDM_vs16::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStart_Tut
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStart_Tut : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41401 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStart_Tut::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStart_Tut
// 0x0000 (0x0358 - 0x0358)
class ASFGamePlayerStart_Tut : public ASFGamePlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41403 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStart_Tut::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStartMovable_Area
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStartMovable_Area : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41404 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStartMovable_Area::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStartMovable_Area
// 0x0000 (0x035C - 0x035C)
class ASFGamePlayerStartMovable_Area : public ASFGamePlayerStart_Area
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41406 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStartMovable_Area::pClassPointer = NULL;

// Class SFGame.ActorFactoryPlayerStartMovable_SH
// 0x0000 (0x005C - 0x005C)
class UActorFactoryPlayerStartMovable_SH : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41407 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPlayerStartMovable_SH::pClassPointer = NULL;

// Class SFGame.SFGamePlayerStartMovable_SH
// 0x0000 (0x0359 - 0x0359)
class ASFGamePlayerStartMovable_SH : public ASFGamePlayerStart_SH
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41409 ];

		return pClassPointer;
	};

};

UClass* ASFGamePlayerStartMovable_SH::pClassPointer = NULL;

// Class SFGame.ActorFactoryPrimaryTarget
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryPrimaryTarget : public UActorFactoryBarricade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41410 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryPrimaryTarget::pClassPointer = NULL;

// Class SFGame.ActorFactorySFBreakableActorByDamage
// 0x0000 (0x0071 - 0x0071)
class UActorFactorySFBreakableActorByDamage : public UActorFactorySFBreakableActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41420 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFBreakableActorByDamage::pClassPointer = NULL;

// Class SFGame.ActorFactorySFBreakableGlassActor
// 0x0000 (0x0071 - 0x0071)
class UActorFactorySFBreakableGlassActor : public UActorFactoryMover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41423 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFBreakableGlassActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFBreakableGlassSyncActor
// 0x0000 (0x0071 - 0x0071)
class UActorFactorySFBreakableGlassSyncActor : public UActorFactorySFBreakableGlassActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41425 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFBreakableGlassSyncActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFConvoyTargetPathNode
// 0x0000 (0x005C - 0x005C)
class UActorFactorySFConvoyTargetPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41427 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFConvoyTargetPathNode::pClassPointer = NULL;

// Class SFGame.ActorFactorySFConvoyTargetStart
// 0x0000 (0x005C - 0x005C)
class UActorFactorySFConvoyTargetStart : public UActorFactoryPlayerStart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41429 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFConvoyTargetStart::pClassPointer = NULL;

// Class SFGame.ActorFactorySFEmitterNoSync
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFEmitterNoSync : public UActorFactoryEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41431 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFEmitterNoSync::pClassPointer = NULL;

// Class SFGame.ActorFactorySFKActor
// 0x0000 (0x0071 - 0x0071)
class UActorFactorySFKActor : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41433 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFKActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFKAssetNoSync
// 0x0000 (0x0080 - 0x0080)
class UActorFactorySFKAssetNoSync : public UActorFactoryPhysicsAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41435 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFKAssetNoSync::pClassPointer = NULL;

// Class SFGame.SFPawnAI_Sentinel
// 0x0054 (0x0FDC - 0x0F88)
class ASFPawnAI_Sentinel : public ASFPawn_AI
{
public:
	unsigned char                                      Team;                                             		// 0x0F88 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SentinelName;                                     		// 0x0F8C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ObservingRange;                                   		// 0x0F94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ObservingAngle;                                   		// 0x0F98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      WeaponClass;                                      		// 0x0F9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FiringPosition;                                   		// 0x0FA0 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              PreFireDelayTime;                                 		// 0x0FAC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WeaponBoneName;                                   		// 0x0FB0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTrackingEnemyWhenFire : 1;                       		// 0x0FB8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                DefaultHealth;                                    		// 0x0FBC (0x0004) [0x0000000000000000]              
	class USkelControlLookAt*                          AimSkelControlYaw;                                		// 0x0FC0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USkelControlLookAt*                          AimSkelControlPitch;                              		// 0x0FC4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class URadialBlurComponent*                        RadialBlur;                                       		// 0x0FC8 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x0FCC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UCameraShake*                                ExplosionShake;                                   		// 0x0FD0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UPointLightComponent*                        ExplosionLight;                                   		// 0x0FD4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              HurtRadiusExtraEffectTo;                          		// 0x0FD8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41441 ];

		return pClassPointer;
	};

	void eventInitVoiceResource ( );
	void PlayDeath ( );
	void HandleDying ( class UClass* DamageType, struct FVector HitLoc, unsigned long bUseKillCam );
	void OnSetFiringPosition ( );
	void SetFiringPosition ( struct FVector InFiringPosition );
	void MakeInventoryArray ( unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* DefaultInventory );
	struct FVector GetPawnViewLocation ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void PostBeginPlay ( );
	void eventShutDown ( );
	void Reset ( );
	void SpawnDefaultController ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* ASFPawnAI_Sentinel::pClassPointer = NULL;

// Class SFGame.SFStaticMeshActor
// 0x0014 (0x0240 - 0x022C)
class ASFStaticMeshActor : public AStaticMeshActor
{
public:
	TArray< struct FOriginMtrlData >                   OriginMtrlDatas;                                  		// 0x022C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UStaticMesh*                                 BreakedMesh;                                      		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActorNoSyncSpawnable*              BreakedMeshActor;                                 		// 0x023C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41442 ];

		return pClassPointer;
	};

	void ChangedMaterial ( int MaterialIndex, class UMaterialInterface* Material );
	void OnReset ( class USFSeqAct_Reset* Action );
	void RecoverToOrigin ( );
	void NotifyChangedStaticMesh ( unsigned long bBreakedMesh );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void Reset ( );
	void ClientReset ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

UClass* ASFStaticMeshActor::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_Bomb
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_Bomb : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41444 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_Bomb::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_Capture
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_Capture : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41446 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_Capture::pClassPointer = NULL;

// Class SFGame.SFTrigger_Capture
// 0x0000 (0x03E8 - 0x03E8)
class ASFTrigger_Capture : public ASFTrigger_ReplaceMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41448 ];

		return pClassPointer;
	};

	void OnUsed ( class AController* Ctrl );
	void Init ( );
	void SetCaptureTeam ( unsigned char TeamIndex, int PlayerID );
	bool CanUse ( class APawn* User, unsigned long bNoCheckCanUsing );
};

UClass* ASFTrigger_Capture::pClassPointer = NULL;

// Class SFGame.SFTrigger_Elevator
// 0x004C (0x0400 - 0x03B4)
class ASFTrigger_Elevator : public ASFTrigger_Use
{
public:
	struct FLinearColor                                UpButtonColor;                                    		// 0x03B4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       UpButtonParamName;                                		// 0x03C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DownButtonColor;                                  		// 0x03CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DownButtonParamName;                              		// 0x03DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ASFElevatorActor*                            ElevatorActor;                                    		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x03E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       AllowElevatorState;                               		// 0x03EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __OnInterpolationFinished__Delegate;              		// 0x03F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41449 ];

		return pClassPointer;
	};

	void SetEmissiveButton ( unsigned long bUpButton );
	void OnInterpolationFinished ( class AInterpActor* Mover, class APawn* User );
	bool CanUsing ( class APawn* User );
	void PostBeginPlay ( );
	void OnComplete ( class AController* Ctrl );
};

UClass* ASFTrigger_Elevator::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_Escape
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_Escape : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41450 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_Escape::pClassPointer = NULL;

// Class SFGame.SFTrigger_Escape
// 0x0030 (0x0418 - 0x03E8)
class ASFTrigger_Escape : public ASFTrigger_ReplaceMesh
{
public:
	float                                              TimeOfArrival;                                    		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaitingTime;                                      		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReturnTime;                                       		// 0x03F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HelicopterPassedTime;                             		// 0x03F4 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              HelicopterTimerPeriod;                            		// 0x03F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      HelicopterActor;                                  		// 0x03FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     HelicopterWaitingMessage;                         		// 0x0400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HelicopterComeBackMessage;                        		// 0x040C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41452 ];

		return pClassPointer;
	};

	class AActor* GetHelicopterActor ( );
	struct FName GetHelicopterState ( );
	void SetHelicopterState ( struct FName NewState );
	void ShowWaitingTime ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFTrigger_Escape::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_PlasticBomb
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_PlasticBomb : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41453 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_PlasticBomb::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_PvENextWave
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_PvENextWave : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41455 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_PvENextWave::pClassPointer = NULL;

// Class SFGame.SFTrigger_PvENextWave
// 0x0000 (0x03B8 - 0x03B8)
class ASFTrigger_PvENextWave : public ASFTrigger_PvE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41457 ];

		return pClassPointer;
	};

	void OnUsed ( class AController* InstigatedBy );
};

UClass* ASFTrigger_PvENextWave::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_PvEWaveInfo
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_PvEWaveInfo : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41458 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_PvEWaveInfo::pClassPointer = NULL;

// Class SFGame.SFTrigger_PvEWaveInfo
// 0x000C (0x03C0 - 0x03B4)
class ASFTrigger_PvEWaveInfo : public ASFTrigger_Use
{
public:
	float                                              MaxAliveRatio;                                    		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndOfRoundDelay;                                  		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MultiplyValueForAliveRatio;                       		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41460 ];

		return pClassPointer;
	};

	bool UsedBy ( class APawn* User );
};

UClass* ASFTrigger_PvEWaveInfo::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_ReplaceMeshMovable
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_ReplaceMeshMovable : public UActorFactorySFTrigger_ReplaceMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41461 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_ReplaceMeshMovable::pClassPointer = NULL;

// Class SFGame.SFTrigger_ReplaceMeshMovable
// 0x0000 (0x03E8 - 0x03E8)
class ASFTrigger_ReplaceMeshMovable : public ASFTrigger_ReplaceMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41463 ];

		return pClassPointer;
	};

};

UClass* ASFTrigger_ReplaceMeshMovable::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_StrongHold
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_StrongHold : public UActorFactorySFTrigger_ReplaceMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41464 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_StrongHold::pClassPointer = NULL;

// Class SFGame.SFTrigger_StrongHold
// 0x0001 (0x03E9 - 0x03E8)
class ASFTrigger_StrongHold : public ASFTrigger_ReplaceMesh
{
public:
	unsigned char                                      EnableAreaIndex;                                  		// 0x03E8 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41466 ];

		return pClassPointer;
	};

};

UClass* ASFTrigger_StrongHold::pClassPointer = NULL;

// Class SFGame.ActorFactorySFTrigger_UseByWeaponGroup
// 0x0000 (0x0060 - 0x0060)
class UActorFactorySFTrigger_UseByWeaponGroup : public UActorFactorySFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41467 ];

		return pClassPointer;
	};

};

UClass* UActorFactorySFTrigger_UseByWeaponGroup::pClassPointer = NULL;

// Class SFGame.ActorFactoryShop
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryShop : public UActorFactoryBarricade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41469 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryShop::pClassPointer = NULL;

// Class SFGame.SFShopActor
// 0x0000 (0x0328 - 0x0328)
class ASFShopActor : public ASFObstaclesActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41471 ];

		return pClassPointer;
	};

};

UClass* ASFShopActor::pClassPointer = NULL;

// Class SFGame.ActorFactoryTargetPaper
// 0x0000 (0x0071 - 0x0071)
class UActorFactoryTargetPaper : public UActorFactoryMover
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41472 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryTargetPaper::pClassPointer = NULL;

// Class SFGame.SFTargetPaper
// 0x002D (0x02E1 - 0x02B4)
class ASFTargetPaper : public AInterpActor
{
public:
	TArray< struct FRandomTargetInfo >                 RandomTargetInfos;                                		// 0x02B4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SelectedIndex;                                    		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHitOnce : 1;                                     		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHitted : 1;                                      		// 0x02C4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSpatializeTargetHitSound : 1;                    		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOnlyDamagedByExigency : 1;                       		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                SectionID;                                        		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   PositiveTargetHitSound;                           		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   NegativeTargetHitSound;                           		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageTypeAllows;                                 		// 0x02D4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      DefaultCollisionForReset;                         		// 0x02E0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41474 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	bool IsValidDamageType ( class UClass* inDamageType );
	void eventReset ( );
	void eventPostBeginPlay ( );
};

UClass* ASFTargetPaper::pClassPointer = NULL;

// Class SFGame.ActorFactoryWarriorAlienController
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryWarriorAlienController : public UActorFactoryPrimaryTarget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41475 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWarriorAlienController::pClassPointer = NULL;

// Class SFGame.SFObstaclesActor_AlienController_Warrior
// 0x0010 (0x0354 - 0x0344)
class ASFObstaclesActor_AlienController_Warrior : public ASFPrimaryTargetActor
{
public:
	TArray< struct FSDamageResist >                    DamageResistList;                                 		// 0x0344 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              OutLineOverlapDistance;                           		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41477 ];

		return pClassPointer;
	};

	void SetIconState ( unsigned long bActive );
	void ResistDamage ( class UClass* DamageTypeClass, int* Damage );
	bool IsAttackable ( );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* dmgType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void UpdateOutLineSetting ( unsigned long bShow );
	void PostBeginPlay ( );
};

UClass* ASFObstaclesActor_AlienController_Warrior::pClassPointer = NULL;

// Class SFGame.ActorFactoryWireEntanglement
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryWireEntanglement : public UActorFactoryBarricade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41478 ];

		return pClassPointer;
	};

};

UClass* UActorFactoryWireEntanglement::pClassPointer = NULL;

// Class SFGame.SFWireEntanglementActor
// 0x0038 (0x0360 - 0x0328)
class ASFWireEntanglementActor : public ASFObstaclesActor
{
public:
	unsigned long                                      bDamage : 1;                                      		// 0x0328 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageSameTeam : 1;                              		// 0x0328 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSlowDown : 1;                                    		// 0x0328 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSlowDownSameTeam : 1;                            		// 0x0328 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              DamageCheckTime;                                  		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DamagePerSecound;                                 		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType;                                       		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlowDownPct;                                      		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TakeDamagebyWreakedDamage;                        		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMaterialInstanceConstant* >         DamageActivatedMaterials;                         		// 0x0340 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      nDamageActivated;                                 		// 0x034C (0x0001) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FsEffectOn >                        EffectiveTargetList;                              		// 0x0350 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              OldEffectiveTime;                                 		// 0x035C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 41480 ];

		return pClassPointer;
	};

	void ObstacleStatChanged ( );
	void DamageDeactivated ( );
	void DamageActivated ( );
	float GetSlowDownPct ( class ASFPawn* TargetPawn );
	void DamageTo ( int Idx, float DamageTime );
	void UpdateValideEffectiveTargetList ( );
	void UpdateEffectiveTargets ( float DeltaTime );
	void UpdateEffectiveTimer ( );
	bool ChangedLevelNow ( int LevelNew );
	void UnRegistEffectiveList ( class ASFPawn* TargetPawn );
	void RegistEffectiveList ( class ASFPawn* TargetPawn );
	void eventUnTouch ( class AActor* Other );
	void Touched ( class ASFPawn* TargetPawn );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFWireEntanglementActor::pClassPointer = NULL;

// Class SFGame.SFCustomBuilder
// 0x0000 (0x003C - 0x003C)
class USFCustomBuilder : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42743 ];

		return pClassPointer;
	};

};

UClass* USFCustomBuilder::pClassPointer = NULL;

// Class SFGame.SFWeap_BossSkill
// 0x000C (0x0C6C - 0x0C60)
class ASFWeap_BossSkill : public ASFWeapon
{
public:
	float                                              SkillTimeLength;                                  		// 0x0C60 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CoolTime;                                         		// 0x0C64 (0x0004) [0x0000000000000000]              
	float                                              LastUseTime;                                      		// 0x0C68 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 42963 ];

		return pClassPointer;
	};

	bool InCoolTime ( );
	bool eventAllowInfiniteProjectile ( );
	void Activate ( );
};

UClass* ASFWeap_BossSkill::pClassPointer = NULL;

// Class SFGame.SFDamageType
// 0x0034 (0x00AC - 0x0078)
class USFDamageType : public UDamageType
{
public:
	unsigned long                                      bDirectDamage : 1;                                		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCausesBloodSplatterDecals : 1;                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bComplainFriendlyFire : 1;                        		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bElectricShock : 1;                               		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bKamiKaze : 1;                                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUseDamageBasedDeathEffects : 1;                  		// 0x0078 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIsNailImpact : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bBloodUseOnlyDistanceLOD : 1;                     		// 0x0078 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bForceScreenBlood : 1;                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bPlayExtendDamageDepiction : 1;                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	struct FString                                     DeathString;                                      		// 0x007C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              fIgnoreWhenOverlap;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NailImpactMinDistance;                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NailImpactForce;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRatio;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RespawnDelay;                                     		// 0x0098 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      WeaponType;                                       		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VoiceFoleyID;                                     		// 0x009D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VoiceFoleyIDCritical;                             		// 0x009E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FoleyID;                                          		// 0x009F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDamageToSameTeam;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAllowSelfInjury;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TermAddHitEffect;                                 		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43025 ];

		return pClassPointer;
	};

	unsigned char GetTakeDamageVoiceID ( unsigned long IsCritical );
	float GetRespawnDelay ( );
	bool IsStunSameTeam ( );
	bool IsStunRecover ( );
	bool IsStun ( );
	void SpawnExtraHitEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FVector HitLocationarray, class USFPawnFX* FXObect, class UParticleSystem* EffectParticle );
	void SpawnHitEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FVector HitLocationarray, class USFPawnFX* FXObect );
	void SpawnDeathEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
	struct FString DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim );
};

UClass* USFDamageType::pClassPointer = NULL;

// Class SFGame.SFDmgType_LongTime
// 0x0020 (0x00CC - 0x00AC)
class USFDmgType_LongTime : public USFDamageType
{
public:
	int                                                HitEffectCount;                                   		// 0x00AC (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             HitParticleSystem;                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	class UParticleSystem*                             DeathEffectParticleSystem;                        		// 0x00B4 (0x0004) [0x0000000000000000]              
	struct FName                                       BoneNameForDeathEffect;                           		// 0x00B8 (0x0008) [0x0000000000000000]              
	float                                              DotEffectLifeTime;                                		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              DotDamage;                                        		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              DotDamageRadius;                                  		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43024 ];

		return pClassPointer;
	};

	void ProcessExtraDamage ( class AController* EventInstigator, class AActor* DamageCauser, class AActor* DamagedTarget );
	int GetActualDamage ( struct FsDOT ActiveDOT );
	void SpawnDeathEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
	void SpawnHitEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FVector HitLocation, class USFPawnFX* FXObect );
};

UClass* USFDmgType_LongTime::pClassPointer = NULL;

// Class SFGame.AIObjectAvoidanceInterface
// 0x0000 (0x003C - 0x003C)
class UAIObjectAvoidanceInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43067 ];

		return pClassPointer;
	};

	bool ShouldEvade ( class ASFAIController* AskingAI, class UAIAvoidanceCylinderComponent* TriggeringComponent );
	bool ShouldAvoid ( class ASFAIController* AskingAI, class UAIAvoidanceCylinderComponent* TriggeringComponent );
};

UClass* UAIObjectAvoidanceInterface::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_Base
// 0x000C (0x0074 - 0x0068)
class UAICmd_Attack_Base : public USFAICommand
{
public:
	int                                                FailAttack;                                       		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedWeaponChange : 1;                            		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bForceAttack : 1;                                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                PendingFiremode;                                  		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43151 ];

		return pClassPointer;
	};

	void AttackEnd ( );
	void CommandSuccess ( );
	void LostTarget ( );
	bool CanAttack ( );
	void StopAttack ( );
	float DoAttack ( );
	void PostAttack ( );
	void PreAttack ( );
	void Resumed ( struct FName OldCommandName );
	void Pushed ( );
	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_Base::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_Melee
// 0x0000 (0x0074 - 0x0074)
class UAICmd_Attack_Melee : public UAICmd_Attack_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43158 ];

		return pClassPointer;
	};

};

UClass* UAICmd_Attack_Melee::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_BossSkill
// 0x0014 (0x0088 - 0x0074)
class UAICmd_Attack_BossSkill : public UAICmd_Attack_Base
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0074 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsActive : 1;                                     		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              SkillEndDelay;                                    		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43195 ];

		return pClassPointer;
	};

	void AttackSucceedProcess ( );
	void AttackFailedProcess ( );
	void Popped ( );
	void Pushed ( );
	bool SkillActive ( class ASFAIController* AI );
};

UClass* UAICmd_Attack_BossSkill::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_Breath
// 0x0004 (0x0078 - 0x0074)
class UAICmd_Attack_Breath : public UAICmd_Attack_Base
{
public:
	float                                              AttackDelayTime;                                  		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43216 ];

		return pClassPointer;
	};

	void NotifyLureProjectileTargeted ( class AProjectile* Projectile );
	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_Breath::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_MeleeJump
// 0x0018 (0x008C - 0x0074)
class UAICmd_Attack_MeleeJump : public UAICmd_Attack_Melee
{
public:
	struct FVector                                     vMovingAttackPosition;                            		// 0x0074 (0x000C) [0x0000000000000000]              
	float                                              fFireStatDuration;                                		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              fFyingTime;                                       		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              fRestTime;                                        		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43231 ];

		return pClassPointer;
	};

	void StopAttackMoving ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	struct FVector GetMovingAttackPosition ( int FireMode );
	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_MeleeJump::pClassPointer = NULL;

// Class SFGame.SFWeap_Melee_AI
// 0x001C (0x0D00 - 0x0CE4)
class ASFWeap_Melee_AI : public ASFWeap_Melee
{
public:
	TArray< int >                                      EnableHitCount;                                   		// 0x0CE4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned long >                            bIsMovingAttack;                                  		// 0x0CF0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SprintAttackMinDist;                              		// 0x0CFC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43246 ];

		return pClassPointer;
	};

	float GetFireBlendTime ( int Mode );
	bool IsMovingAttack ( unsigned char FiringMode );
	float GetSprintAttackMinDist ( );
	float GetDmgScale ( );
	struct FVector SetImpactInfo ( class AActor* DamagedActor, float Damage );
	float GetInstantHitDamage ( int FireMode );
	void ProcessAIInstantHitSub ( struct FsDamagedActor DamagedActor );
	bool IsEnableProcessInstantHitSub ( );
	class USoundCue* GetWeaponSound ( unsigned char WeaponState );
	void Reload ( );
	bool CanExigencyAttack ( );
	float eventGetTraceRange ( );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	void TimeWeaponPutDown ( );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
};

UClass* ASFWeap_Melee_AI::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_MeleeRange
// 0x0000 (0x0074 - 0x0074)
class UAICmd_Attack_MeleeRange : public UAICmd_Attack_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43268 ];

		return pClassPointer;
	};

	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_MeleeRange::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_Range
// 0x0000 (0x0074 - 0x0074)
class UAICmd_Attack_Range : public UAICmd_Attack_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43281 ];

		return pClassPointer;
	};

	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_Range::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_RangeTurret
// 0x0000 (0x0074 - 0x0074)
class UAICmd_Attack_RangeTurret : public UAICmd_Attack_Range
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43290 ];

		return pClassPointer;
	};

	bool CanAttack ( );
	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_RangeTurret::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_RollingAttack
// 0x0024 (0x0098 - 0x0074)
class UAICmd_Attack_RollingAttack : public UAICmd_Attack_Range
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0074 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LineCheckStartLocation;                           		// 0x0080 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsRolling : 1;                                    		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      OldFreeze : 1;                                    		// 0x008C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHitEnemyPawn : 1;                                		// 0x008C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	int                                                FailedRollingCount;                               		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AttackEndDelay;                                   		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43301 ];

		return pClassPointer;
	};

	void AttackSucceedProcess ( );
	void AttackFailedProcess ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void Popped ( );
	void Pushed ( );
	bool RollingAttack ( class ASFAIController* AI );
};

UClass* UAICmd_Attack_RollingAttack::pClassPointer = NULL;

// Class SFGame.SFWeap_Charge_AI
// 0x0008 (0x0CEC - 0x0CE4)
class ASFWeap_Charge_AI : public ASFWeap_Melee
{
public:
	float                                              MuxSpeed;                                         		// 0x0CE4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PrimaryTargeDamage;                               		// 0x0CE8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43323 ];

		return pClassPointer;
	};

	float GetRushSpeedMux ( );
	float ReduceDamage ( class AActor* Other, float OrgDamage );
	bool CanAttack ( class AActor* Other );
};

UClass* ASFWeap_Charge_AI::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_SelfDestruction
// 0x0000 (0x0074 - 0x0074)
class UAICmd_Attack_SelfDestruction : public UAICmd_Attack_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43359 ];

		return pClassPointer;
	};

	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_SelfDestruction::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_ThrowWeapon
// 0x0020 (0x0094 - 0x0074)
class UAICmd_Attack_ThrowWeapon : public UAICmd_Attack_Range
{
public:
	float                                              ThrowPitch;                                       		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              DistStep;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	class ASFWeapon*                                   CurWeapon;                                        		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                LoopCount;                                        		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FString                                     ProjectileClassName;                              		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      ProjClass;                                        		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43368 ];

		return pClassPointer;
	};

	bool CanAttack ( );
	bool InitParam ( );
	bool SimulateThrowWeapon ( float Pitch );
	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_ThrowWeapon::pClassPointer = NULL;

// Class SFGame.AICmd_Attack_ZombieMelee
// 0x0004 (0x0078 - 0x0074)
class UAICmd_Attack_ZombieMelee : public UAICmd_Attack_Melee
{
public:
	float                                              CombatStateDistance;                              		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43409 ];

		return pClassPointer;
	};

	bool Attack ( class ASFAIController* AI, class AActor* InTarget, unsigned long NeedForceAttack );
};

UClass* UAICmd_Attack_ZombieMelee::pClassPointer = NULL;

// Class SFGame.AICmd_Base_UtilitySelectedCmd
// 0x0000 (0x0068 - 0x0068)
class UAICmd_Base_UtilitySelectedCmd : public USFAICommand
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43418 ];

		return pClassPointer;
	};

	float EvaluateActivation ( class ASFAIController* AI, class UUtilBasedAICmdMetaDataPacket* ActivationData );
	bool InitUtilitySelectedCommand ( class ASFAIController* Controller, class UUtilBasedAICmdMetaDataPacket* MetaData );
};

UClass* UAICmd_Base_UtilitySelectedCmd::pClassPointer = NULL;

// Class SFGame.UtilBasedAICmdMetaDataPacket
// 0x000C (0x0048 - 0x003C)
class UUtilBasedAICmdMetaDataPacket : public UObject
{
public:
	float                                              LastActivationTime;                               		// 0x003C (0x0004) [0x0000000000000000]              
	int                                                NumberOfActivations;                              		// 0x0040 (0x0004) [0x0000000000000000]              
	class UClass*                                      CommandClass;                                     		// 0x0044 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43422 ];

		return pClassPointer;
	};

};

UClass* UUtilBasedAICmdMetaDataPacket::pClassPointer = NULL;

// Class SFGame.AICmd_Base_UtilActionSelector
// 0x000C (0x0074 - 0x0068)
class UAICmd_Base_UtilActionSelector : public UAICmd_Base_UtilitySelectedCmd
{
public:
	TArray< class UUtilBasedAICmdMetaDataPacket* >     PossibleCommands;                                 		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43431 ];

		return pClassPointer;
	};

	bool ExecuteBestCommand ( );
	float PostCommandExecution ( );
	float PrePickBestCommand ( );
	int PickBestCommand ( );
	void Pushed ( );
};

UClass* UAICmd_Base_UtilActionSelector::pClassPointer = NULL;

// Class SFGame.AICmd_EvadeGrenade
// 0x0028 (0x0090 - 0x0068)
class UAICmd_EvadeGrenade : public USFAICommand
{
public:
	struct FVector                                     MoveDir;                                          		// 0x0068 (0x000C) [0x0000000000000000]              
	struct FVector                                     TargetPosition;                                   		// 0x0074 (0x000C) [0x0000000000000000]              
	float                                              WaitTimeMin;                                      		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              WaitTimeMax;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	class ASFProjectile*                               EvadeProj;                                        		// 0x0088 (0x0004) [0x0000000000000000]              
	class ASFPawn*                                     ProjInstigator;                                   		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43451 ];

		return pClassPointer;
	};

	void SetTargetPosition ( );
	void Pushed ( );
	bool EvadeGrenade ( class ASFAIController* AI, class ASFProjectile* Proj );
};

UClass* UAICmd_EvadeGrenade::pClassPointer = NULL;

// Class SFGame.AICmd_FullBodyAnimation
// 0x0024 (0x008C - 0x0068)
class UAICmd_FullBodyAnimation : public USFAICommand
{
public:
	struct FVector                                     AnimFocus;                                        		// 0x0068 (0x000C) [0x0000000000000000]              
	int                                                AnimIndex;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FName                                       AnimName;                                         		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              StartTime;                                        		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              PlayingTimeLeft;                                  		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              fWanaPlayTime;                                    		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43475 ];

		return pClassPointer;
	};

	void Pushed ( );
	bool FullBodyAnimation ( class ASFAIController* AI, struct FName NewAnimName, int NewAnimIndex, struct FVector NewAnimFocus, unsigned long NewIgnoreNotifies, float fPlayTime );
};

UClass* UAICmd_FullBodyAnimation::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToDir
// 0x0010 (0x0098 - 0x0088)
class UAICmd_MoveToDir : public UAICmd_MoveToMesh
{
public:
	float                                              MoveDist;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FVector                                     MoveDir;                                          		// 0x008C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43518 ];

		return pClassPointer;
	};

	void Pushed ( );
	bool MoveToDir ( class ASFAIController* AI, float Dist, struct FVector VDir );
};

UClass* UAICmd_MoveToDir::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_Jump
// 0x0014 (0x007C - 0x0068)
class UAICmd_MoveToGoal_Jump : public USFAICommand
{
public:
	struct FVector                                     vTargetDir;                                       		// 0x0068 (0x000C) [0x0000000000000000]              
	float                                              fTargetDist;                                      		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                JumpMoveSpeed;                                    		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43529 ];

		return pClassPointer;
	};

	void Popped ( );
	void Pushed ( );
	bool MoveToGoal_Jump ( class ASFAIController* AI, class AActor* NewJumpToActor );
};

UClass* UAICmd_MoveToGoal_Jump::pClassPointer = NULL;

// Class SFGame.SFProjectileM18
// 0x0000 (0x0488 - 0x0488)
class ASFProjectileM18 : public ASFProj_HG_Gas
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43651 ];

		return pClassPointer;
	};

	void InitSmokeColor ( );
	void StartSmokeEffect ( );
	void SpawnFlightEffects ( );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProjectileM18::pClassPointer = NULL;

// Class SFGame.SFProj_AILureGrenade
// 0x0000 (0x0488 - 0x0488)
class ASFProj_AILureGrenade : public ASFProjectileM18
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43650 ];

		return pClassPointer;
	};

	class AActor* ToStop ( );
	void Destroyed ( );
};

UClass* ASFProj_AILureGrenade::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_Roaming
// 0x0000 (0x00DC - 0x00DC)
class UAICmd_MoveToGoal_Roaming : public UAICmd_MoveToGoal_Mesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43678 ];

		return pClassPointer;
	};

	void NotifySniperAim ( );
	void NotifyTargetInsight ( );
	void NotifySurpriseNewEnemy ( class AActor* NewTarget );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void Popped ( );
	bool MoveToGoal ( class ASFAIController* AI, struct FVector NewMovePoint, class AActor* NewMoveToActor, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bInAllowPartialPath );
};

UClass* UAICmd_MoveToGoal_Roaming::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_PointRoaming
// 0x0010 (0x00EC - 0x00DC)
class UAICmd_MoveToGoal_PointRoaming : public UAICmd_MoveToGoal_Roaming
{
public:
	float                                              StartTime;                                        		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              StayTime;                                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              RoamingTime;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              lapTime;                                          		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43719 ];

		return pClassPointer;
	};

	void Crouch ( );
	void Popped ( );
	bool NeedCrouched ( );
	struct FVector GetCampingViewLoc ( );
	void StartingMove ( );
	bool TooFar ( );
	bool MoveToGoal ( class ASFAIController* AI, struct FVector NewMovePoint, class AActor* NewMoveToActor, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bInAllowPartialPath );
};

UClass* UAICmd_MoveToGoal_PointRoaming::pClassPointer = NULL;

// Class SFGame.SFPathNode
// 0x0002 (0x02FE - 0x02FC)
class ASFPathNode : public APathNode
{
public:
	unsigned char                                      TeamIndex;                                        		// 0x02FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PointType;                                        		// 0x02FD (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43758 ];

		return pClassPointer;
	};

	unsigned char eventScriptGetTeamNum ( );
};

UClass* ASFPathNode::pClassPointer = NULL;

// Class SFGame.SFDefensePoint
// 0x0006 (0x0304 - 0x02FE)
class ASFDefensePoint : public ASFPathNode
{
public:
	unsigned long                                      bCrouched : 1;                                    		// 0x0300 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43757 ];

		return pClassPointer;
	};

};

UClass* ASFDefensePoint::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_SuppressiveTarget
// 0x001C (0x00F8 - 0x00DC)
class UAICmd_MoveToGoal_SuppressiveTarget : public UAICmd_MoveToGoal_Roaming
{
public:
	float                                              StartTime;                                        		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              StayTime;                                         		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              RoamingTime;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              lapTime;                                          		// 0x00E8 (0x0004) [0x0000000000000000]              
	struct FVector                                     BaseLocation;                                     		// 0x00EC (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43764 ];

		return pClassPointer;
	};

	void Pushed ( );
	bool MoveToGoal ( class ASFAIController* AI, struct FVector NewMovePoint, class AActor* NewMoveToActor, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bInAllowPartialPath );
};

UClass* UAICmd_MoveToGoal_SuppressiveTarget::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_Tactic
// 0x0004 (0x00E0 - 0x00DC)
class UAICmd_MoveToGoal_Tactic : public UAICmd_MoveToGoal_Mesh
{
public:
	float                                              NeedMoveDelay;                                    		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43786 ];

		return pClassPointer;
	};

	void NotifyTargetLost ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void Pushed ( );
	bool MoveToGoal ( class ASFAIController* AI, struct FVector NewMovePoint, class AActor* NewMoveToActor, class AActor* NewMoveFocus, unsigned long bIsValidCache, unsigned long bInCanPathfind, unsigned long bInAllowPartialPath );
};

UClass* UAICmd_MoveToGoal_Tactic::pClassPointer = NULL;

// Class SFGame.AICmd_MoveToGoal_Wandering
// 0x0054 (0x00BC - 0x0068)
class UAICmd_MoveToGoal_Wandering : public USFAICommand
{
public:
	unsigned long                                      bValidRouteCache : 1;                             		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNotifyBumped : 1;                                		// 0x0068 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWanderingSprint : 1;                             		// 0x0068 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FVector                                     IntermediatePoint;                                		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     InitialFinalDestination;                          		// 0x0078 (0x000C) [0x0000000000000000]              
	int                                                WanderDistance;                                   		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              WanderJitter;                                     		// 0x0088 (0x0004) [0x0000000000000000]              
	struct FVector                                     WanderTargetDir;                                  		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     WanderTarget;                                     		// 0x0098 (0x000C) [0x0000000000000000]              
	float                                              JitterThisTimeSlice;                              		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              MoveDurationTime;                                 		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                NeedUpdateCount;                                  		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FVector                                     BumpedDir;                                        		// 0x00B0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43813 ];

		return pClassPointer;
	};

	float RandomClamped ( );
	float GetWanderDistance ( unsigned long bNewSprint );
	void NotifyTargetInsight ( );
	void NotifySurpriseNewEnemy ( class AActor* NewTarget );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void UpdateWanderTarget ( );
	void Popped ( );
	void Pushed ( );
	bool MoveToGoal_Wandering ( class ASFAIController* AI );
};

UClass* UAICmd_MoveToGoal_Wandering::pClassPointer = NULL;

// Class SFGame.AICmd_StepAside
// 0x006C (0x00D4 - 0x0068)
class UAICmd_StepAside : public USFAICommand
{
public:
	struct FBasedPosition                              PreStepAsideLocation;                             		// 0x0068 (0x0034) [0x0000000000000000]              
	struct FBasedPosition                              StepAsideLocation;                                		// 0x009C (0x0034) [0x0000000000000000]              
	unsigned long                                      bDelayStep : 1;                                   		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43858 ];

		return pClassPointer;
	};

	void eventDrawDebug ( class AHUD* H, struct FName Category );
	void Popped ( );
	void Pushed ( );
	struct FString eventGetDumpString ( );
	bool StepAside ( class ASFAIController* AI, class AActor* NewStepAsideGoal, unsigned long InDelayStep );
};

UClass* UAICmd_StepAside::pClassPointer = NULL;

// Class SFGame.AIReactChan_Damage
// 0x0038 (0x008C - 0x0054)
class UAIReactChan_Damage : public UAIReactChannel
{
public:
	class APawn*                                       DamageInstigator;                                 		// 0x0054 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDirectDamage : 1;                                		// 0x0058 (0x0004) [0x0000000000000000] [0x00000001] 
	class UClass*                                      DamageType;                                       		// 0x005C (0x0004) [0x0000000000000000]              
	struct FTraceHitInfo                               HitInfo;                                          		// 0x0060 (0x001C) [0x0000000000080000]              ( CPF_Component )
	struct FVector                                     LastInstigatorLoc;                                		// 0x007C (0x000C) [0x0000000000000000]              
	int                                                DamageAmt;                                        		// 0x0088 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43931 ];

		return pClassPointer;
	};

};

UClass* UAIReactChan_Damage::pClassPointer = NULL;

// Class SFGame.AIReactCond_BombSupport
// 0x0000 (0x0060 - 0x0060)
class UAIReactCond_BombSupport : public UAIReactCondition_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43964 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* Target, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_BombSupport::pClassPointer = NULL;

// Class SFGame.AIReactCond_DmgFromOtherEnemy
// 0x0000 (0x007C - 0x007C)
class UAIReactCond_DmgFromOtherEnemy : public UAIReactCond_Conduit_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43984 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_DmgFromOtherEnemy::pClassPointer = NULL;

// Class SFGame.AIReactCond_DmgThreshold
// 0x0008 (0x0084 - 0x007C)
class UAIReactCond_DmgThreshold : public UAIReactCond_Conduit_Base
{
public:
	int                                                CurrentDamage;                                    		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                DamageThreshold;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 43993 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OrigChan );
};

UClass* UAIReactCond_DmgThreshold::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyAttack
// 0x0004 (0x0064 - 0x0060)
class UAIReactCond_EnemyAttack : public UAIReactCondition_Base
{
public:
	float                                              AttackNotifyThreshold;                            		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44005 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_EnemyAttack::pClassPointer = NULL;

// Class SFGame.Interface_AIAttackWarning
// 0x0000 (0x003C - 0x003C)
class UInterface_AIAttackWarning : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44016 ];

		return pClassPointer;
	};

	struct FVector GetEnemyEvadeDir ( );
	struct FVector GetWarnAttackLocation ( );
};

UClass* UInterface_AIAttackWarning::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyCloseAndVisible
// 0x0004 (0x0080 - 0x007C)
class UAIReactCond_EnemyCloseAndVisible : public UAIReactCond_Conduit_Base
{
public:
	float                                              DistanceThreshold;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44028 ];

		return pClassPointer;
	};

	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OrigChan );
};

UClass* UAIReactCond_EnemyCloseAndVisible::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyCloseEnoughToMelee
// 0x0000 (0x0080 - 0x0080)
class UAIReactCond_EnemyCloseEnoughToMelee : public UAIReactCond_EnemyCloseAndVisible
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44035 ];

		return pClassPointer;
	};

};

UClass* UAIReactCond_EnemyCloseEnoughToMelee::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyInsight
// 0x0000 (0x007C - 0x007C)
class UAIReactCond_EnemyInsight : public UAIReactCond_Conduit_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44037 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_EnemyInsight::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyOutOfRange
// 0x0004 (0x0080 - 0x007C)
class UAIReactCond_EnemyOutOfRange : public UAIReactCond_Conduit_Base
{
public:
	float                                              Range;                                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44057 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OrigChan );
};

UClass* UAIReactCond_EnemyOutOfRange::pClassPointer = NULL;

// Class SFGame.AIReactCond_EnemyVisibleForThresh
// 0x0004 (0x0080 - 0x007C)
class UAIReactCond_EnemyVisibleForThresh : public UAIReactCond_Conduit_Base
{
public:
	float                                              SeenThresh;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44067 ];

		return pClassPointer;
	};

	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_EnemyVisibleForThresh::pClassPointer = NULL;

// Class SFGame.AIReactCond_GenericCallDelegate
// 0x0014 (0x0074 - 0x0060)
class UAIReactCond_GenericCallDelegate : public UAIReactCondition_Base
{
public:
	float                                              MinTimeBetweenOutputsSeconds;                     		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              LastOutputTime;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OutputFunction__Delegate;                       		// 0x0068 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44076 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	void BeginMeleeCommandWrapper ( class AActor* Inst, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OrigChannel );
	void OutputFunction ( class AActor* EventInstigator, class UAIReactChannel* OrigChannel );
};

UClass* UAIReactCond_GenericCallDelegate::pClassPointer = NULL;

// Class SFGame.AIReactCond_GenericPushCommand
// 0x000C (0x006C - 0x0060)
class UAIReactCond_GenericPushCommand : public UAIReactCondition_Base
{
public:
	class UClass*                                      CommandClass;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              MinTimeBetweenOutputsSeconds;                     		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              LastOutputTime;                                   		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44094 ];

		return pClassPointer;
	};

	class UClass* GetCommandClass ( );
	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OrigChannel );
};

UClass* UAIReactCond_GenericPushCommand::pClassPointer = NULL;

// Class SFGame.AIReactCond_Grenade
// 0x0000 (0x0060 - 0x0060)
class UAIReactCond_Grenade : public UAIReactCondition_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44109 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_Grenade::pClassPointer = NULL;

// Class SFGame.AIReactCond_HealthThresh
// 0x0008 (0x0084 - 0x007C)
class UAIReactCond_HealthThresh : public UAIReactCond_Conduit_Base
{
public:
	int                                                HealthThreshold;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAutoSuppressAfterInitialTrigger : 1;             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44124 ];

		return pClassPointer;
	};

	void eventActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
	bool eventShouldActivate ( class AActor* EventInstigator, class UAIReactChannel* OriginatingChannel );
};

UClass* UAIReactCond_HealthThresh::pClassPointer = NULL;

// Class SFGame.SFPvEMapInfo
// 0x000C (0x0118 - 0x010C)
class USFPvEMapInfo : public USFMapInfo
{
public:
	TArray< class AActor* >                            PvEPrimaryTargets;                                		// 0x010C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44212 ];

		return pClassPointer;
	};

};

UClass* USFPvEMapInfo::pClassPointer = NULL;

// Class SFGame.SFLogCondition
// 0x0054 (0x0090 - 0x003C)
class USFLogCondition : public UObject
{
public:
	int                                                Condition[ 0x9 ];                                 		// 0x003C (0x0024) [0x0000000000000000]              
	int                                                AICondition[ 0xC ];                               		// 0x0060 (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44229 ];

		return pClassPointer;
	};

	void AILogTemplate ( struct FString S, unsigned char Type, struct FName Tag );
	void LogTemplate ( struct FString S, unsigned char Type, struct FName Tag, unsigned char LogColor, unsigned char Background );
	bool GetAICondition ( unsigned char Type );
	bool GetCondition ( unsigned char Type );
};

UClass* USFLogCondition::pClassPointer = NULL;

// Class SFGame.SFCustomBuildHelper
// 0x0000 (0x0224 - 0x0224)
class ASFCustomBuildHelper : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44422 ];

		return pClassPointer;
	};

};

UClass* ASFCustomBuildHelper::pClassPointer = NULL;

// Class SFGame.DynamicSMActorNoSyncSpawnable
// 0x0000 (0x0274 - 0x0274)
class ADynamicSMActorNoSyncSpawnable : public ADynamicSMActor_Spawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44498 ];

		return pClassPointer;
	};

	void eventForceNetRelevant ( );
};

UClass* ADynamicSMActorNoSyncSpawnable::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Helicopter
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_Helicopter : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44553 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_Helicopter::pClassPointer = NULL;

// Class SFGame.Interface_AIMoveFailed
// 0x0000 (0x003C - 0x003C)
class UInterface_AIMoveFailed : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44555 ];

		return pClassPointer;
	};

	bool HasPathFailedRecently ( class ASFAIController* AskingAI );
	void AIFailedToPathToMe ( class ASFAIController* FailingAI );
};

UClass* UInterface_AIMoveFailed::pClassPointer = NULL;

// Class SFGame.RB_NailActor
// 0x0000 (0x0240 - 0x0240)
class ARB_NailActor : public ARB_ConstraintActorSpawnable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44579 ];

		return pClassPointer;
	};

	void InitConstraintEx ( struct FVector TargetPosition, float TargetForce, struct FVector TargetMomentum, class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold );
};

UClass* ARB_NailActor::pClassPointer = NULL;

// Class SFGame.SeqAct_AISetTarget
// 0x0010 (0x00F8 - 0x00E8)
class USeqAct_AISetTarget : public USequenceAction
{
public:
	TArray< class AActor* >                            FocusTargets;                                     		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bOverwriteExisting : 1;                           		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceFireAtTarget : 1;                           		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceFireEvenWhenNoLos : 1;                      		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44615 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_AISetTarget::pClassPointer = NULL;

// Class SFGame.SeqAct_ChangeStandardActorForCombatZone
// 0x0000 (0x00F4 - 0x00F4)
class USeqAct_ChangeStandardActorForCombatZone : public USFSeqAct_SFGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44631 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USeqAct_ChangeStandardActorForCombatZone::pClassPointer = NULL;

// Class SFGame.SeqAct_SFExitVehicle
// 0x0004 (0x00EC - 0x00E8)
class USeqAct_SFExitVehicle : public USequenceAction
{
public:
	class AActor*                                      TargetVehicle;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44635 ];

		return pClassPointer;
	};

};

UClass* USeqAct_SFExitVehicle::pClassPointer = NULL;

// Class SFGame.SeqEvt_VehicleDriven
// 0x0000 (0x0100 - 0x0100)
class USeqEvt_VehicleDriven : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44647 ];

		return pClassPointer;
	};

};

UClass* USeqEvt_VehicleDriven::pClassPointer = NULL;

// Class SFGame.SFUIDataStore
// 0x0000 (0x0078 - 0x0078)
class USFUIDataStore : public UUIDataStore_Remote
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44652 ];

		return pClassPointer;
	};

	class USFUIDataStore_ClanLeague* GetClanLeagueDataStore ( );
	class USFUIDataStore_Enchant* GetEnchantDataStore ( );
	class USFUIDataStore_InGame* GetInGameDataStore ( );
	class USFUIDataStore_InGameScore* GetInGameScoreDataStore ( );
	class USFUIDataStore_ClanRank* GetClanRankDataStore ( );
	class USFUIDataStore_CombatReport* GetCombatReportStore ( );
	class USFUIDataStore_Rank* GetRankDataStore ( );
	class USFUIDataStore_Community* GetCommunityDataStore ( );
	class USFUIDataStore_GashaList* GetGashaListDataStore ( );
	class USFUIDataStore_GameResult* GetGameResultDataStore ( );
	class USFUIDataStore_RealTimeEvent* GetRealTimeEventDataStore ( );
	class USFUIDataStore_ClanList* GetClanListDataStore ( );
	class USFUIDataStore_ClanHome* GetClanHomeDataStore ( );
	class USFUIDataStore_InvenChar* GetInvenCharDataStore ( );
	class USFUIDataStore_InvenWeap* GetInvenWeapDataStore ( );
	class USFUIDataStore_ItemList* GetItemListDataStore ( );
	class USFUIDataStore_RoomList* GetRoomListDataStore ( );
	class USFUIDataStore_RoomUserList* GetRoomUserListDataStore ( );
	class USFUIDataStore_RoomSetting* GetRoomSettingDataStore ( );
	class USFUIDataStore_ChannelList* GetChannelListDataStore ( );
	class USFUIDataStore_Chatting* GetChattingDataStore ( );
	class USFUIDataStore_Messenger* GetMessengerDataStore ( );
	class USFUIDataStore_PlayerInfo* GetPlayerInfoDataStore ( );
};

UClass* USFUIDataStore::pClassPointer = NULL;

// Class SFGame.SFWavePlayer
// 0x0014 (0x0050 - 0x003C)
class USFWavePlayer : public UObject
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             WaveComponent;                                    		// 0x0040 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       WaveParamName;                                    		// 0x0044 (0x0008) [0x0000000000000000]              
	class AActor*                                      Owner;                                            		// 0x004C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44667 ];

		return pClassPointer;
	};

	void Play ( class USoundNodeWave* Wave );
	void SetOwner ( class AActor* InOwner );
};

UClass* USFWavePlayer::pClassPointer = NULL;

// Class SFGame.SFRenderTextureManager
// 0x0014 (0x0050 - 0x003C)
class USFRenderTextureManager : public UObject
{
public:
	class ULevelStreaming*                             SceneCaptureLevel;                                		// 0x003C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFSceneCaptureActor* >              SceneCaptureActors;                               		// 0x0040 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NextPrepareIndex;                                 		// 0x004C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44822 ];

		return pClassPointer;
	};

	bool GetSceneCaptureActor ( int SceneCaptureIndex, class ASFSceneCaptureActor** OutSceneCapture );
	void SetSceneCaptureActors ( class ASFSceneCaptureActor* InSceneCaptureActor );
	void release ( );
	void Init ( );
};

UClass* USFRenderTextureManager::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyInGame
// 0x000C (0x05BC - 0x05B0)
class USFGFxLobbyInGame : public USFGFxLobby
{
public:
	TArray< struct FSFViewInfo >                       ViewDataWithHUD;                                  		// 0x05B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44830 ];

		return pClassPointer;
	};

	bool GetViewNameListbySwfName ( struct FString Caller, TArray< struct FName >* ViewNames );
	struct FName GetViewNamebySwfName ( struct FString Caller );
	void SetWaitingAckDialog ( int nSize );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OpenGameExitDialog ( );
	void OpenForceExitDialog ( int ExitType, int ErrCode, struct FString ForceExitMessage );
	void ASCloseLobbyDialog ( class USFGFxDialog* TargetDialog );
	void ASOpenLobbyDialog ( class USFGFxDialog* TargetDialog );
	bool IsInViewDataArray ( struct FName InViewName );
	bool IsAllWidgetInitialized ( );
	void OnLobbyWidgetInitCompleted ( );
	void LoadViews ( );
	void ASInitLanguageBar ( unsigned long bSet );
	void InitLobbyScreenSize ( unsigned long bFromLogin );
	void InitializeLobby ( );
};

UClass* USFGFxLobbyInGame::pClassPointer = NULL;

// Class SFGame.SFLocalMessage
// 0x0018 (0x006C - 0x0054)
class USFLocalMessage : public ULocalMessage
{
public:
	int                                                MessageArea;                                      		// 0x0054 (0x0004) [0x0000000000000000]              
	int                                                AnnouncementPriority;                             		// 0x0058 (0x0004) [0x0000000000000000]              
	float                                              AnnouncementVolume;                               		// 0x005C (0x0004) [0x0000000000000000]              
	struct FName                                       SoundGroupName;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      bRemoveSamePriorMessage : 1;                      		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 44979 ];

		return pClassPointer;
	};

	bool HasEvent ( struct FName EventName );
	bool ClientReceiveEx ( class ASFPlayerController* P, struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bDrawCaption, unsigned long bPlayVoice );
	bool IsTeamGameCommonMessage ( int Index );
	struct FString GetString ( int Index, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	class USoundNodeWave* AnnouncementSound ( int MessageIndex, int TeamIndex );
};

UClass* USFLocalMessage::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Observer
// 0x0000 (0x020C - 0x020C)
class USFGFxHUD_Observer : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45006 ];

		return pClassPointer;
	};

	void OnRoundStarted ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_Observer::pClassPointer = NULL;

// Class SFGame.SFPacketError
// 0x0018 (0x0054 - 0x003C)
class USFPacketError : public UObject
{
public:
	TArray< struct FSPacketError >                     PacketErrorArray;                                 		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSInternetError >                   InternetErrorArray;                               		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45096 ];

		return pClassPointer;
	};

	struct FString GetLocalizedInternetError ( struct FString InProtocalURL, int InErrorID );
	struct FString GetLocalizedPacketError ( int InProtocolID, int InErrorID );
};

UClass* USFPacketError::pClassPointer = NULL;

// Class SFGame.SFReverbVolume
// 0x0000 (0x02D4 - 0x02D4)
class ASFReverbVolume : public AReverbVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45149 ];

		return pClassPointer;
	};

	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFReverbVolume::pClassPointer = NULL;

// Class SFGame.SFActionMessage
// 0x0024 (0x0090 - 0x006C)
class USFActionMessage : public USFLocalMessage
{
public:
	TArray< struct FActionMessageData >                ActionStrings;                                    		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ProhibitionStrings;                               		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsEmoticonData >                    EmoticonStrings;                                  		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45213 ];

		return pClassPointer;
	};

	struct FString GetTransformEmoticonString ( struct FString Key );
	struct FString GetRemoveProhibitionString ( struct FString BidingKey );
	unsigned char GetIconBidingKey ( int MessageIndex, TArray< struct FString >* outIconKeyArray );
	struct FString GetMessage ( int MessageIndex );
};

UClass* USFActionMessage::pClassPointer = NULL;

// Class SFGame.SFRadioMessage
// 0x0014 (0x0080 - 0x006C)
class USFRadioMessage : public USFLocalMessage
{
public:
	class USFSoundGroup_Voice*                         RadioVoice;                                       		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned char                                      RadioMsgPriority;                                 		// 0x0070 (0x0001) [0x0000000000000000]              
	TArray< struct FMenuString >                       MenuStrings;                                      		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45383 ];

		return pClassPointer;
	};

	int FindIndexById ( struct FName Id );
	class USoundNodeWave* AnnouncementSound ( int MessageIndex, int TeamIndex );
	void ClientReceive ( class APlayerController* P, int MessageIndex, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetMenuName ( int MessageIndex, int TeamIndex );
};

UClass* USFRadioMessage::pClassPointer = NULL;

// Class SFGame.SFAntiFatigue
// 0x001C (0x0058 - 0x003C)
class USFAntiFatigue : public UObject
{
public:
	int                                                MessageDurationTime;                              		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSAntiFatigueInfo >                 AntiFatigueArray;                                 		// 0x0040 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSAntiFatigueMessage >              AntiFatigueMessage;                               		// 0x004C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45416 ];

		return pClassPointer;
	};

	float GetAntiFatigueReduceRatio ( int TotalElapesdTime );
	struct FString GetAntiFatigueMessageColor ( int TotalElapesdTime );
	struct FString GetAntiFatigueMessage ( int TotalElapesdTime );
	int GetAntiFatigueTimeInterval ( int TotalAccumulatedTime );
	int GetCurrentAntiFatigueLevel ( int TotalElapesdTime );
};

UClass* USFAntiFatigue::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_Chatting
// 0x031C (0x03A8 - 0x008C)
class USFUIDataStore_Chatting : public USFUIDataStoreBase
{
public:
	TArray< struct FSChatMsgInfo >                     ChattingMessageList;                              		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSChatMsgInfo                               SendPendingChatMsg;                               		// 0x0098 (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      ChatSendType;                                     		// 0x0104 (0x0001) [0x0000000000000000]              
	unsigned char                                      CencoredChat[ 0x10 ];                             		// 0x0105 (0x0010) [0x0000000000000000]              
	int                                                MaxChattingLength;                                		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                MassiveChatCheckTime;                             		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MassiveChatCount;                                 		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MassiveChatPenaltyTime;                           		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MassiveChatSameTextCount;                         		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ChatRestrictRank;                                 		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MassiveChatPenaltyStartTime;                      		// 0x0130 (0x0004) [0x0000000000000000]              
	TArray< float >                                    MassiveChatTimeArray;                             		// 0x0134 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           MassiveChatMsgArray;                              		// 0x0140 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MassiveChatPenaltyMessage;                        		// 0x014C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strChattingFrom;                                  		// 0x0158 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strChattingto;                                    		// 0x0164 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotChannelConnect;                                		// 0x0170 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeGaChaPercentage;                            		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEAllEXPStartMessage;                            		// 0x0188 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEAllEXPFinishMessage;                           		// 0x0194 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEAllSPStartMessage;                             		// 0x01A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEAllSPFinishMessage;                            		// 0x01AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeEventStartMessage;                       		// 0x01B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeEventEndMessage;                         		// 0x01C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeAddEXPMessage;                           		// 0x01D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeAddSPMessage;                            		// 0x01DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeAddLPMessage;                            		// 0x01E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeAddBenefitMessage;                       		// 0x01F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEGameModeEXPStartMessage;                       		// 0x0200 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEGameModeEXPFinishMessage;                      		// 0x020C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEGameModeSPStartMessage;                        		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEGameModeSPFinishMessage;                       		// 0x0224 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEMapEXPStartMessage;                            		// 0x0230 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEMapEXPFinishMessage;                           		// 0x023C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEMapSPStartMessage;                             		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEMapSPFinishMessage;                            		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LastTalkMeUserCodeName;                           		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           LastTalkMeUserCodeNameInverse;                    		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           LastChatUserCodeName;                             		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           WhisperErrors;                                    		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                RemindTalkUserNum;                                		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RemindTalkUserPos;                                		// 0x0294 (0x0004) [0x0000000000000000]              
	TArray< struct FsChatCommand >                     ChatCommands;                                     		// 0x0298 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsChatCommand >                     LocalizedChatCmds;                                		// 0x02A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ChattingHelpMessage;                              		// 0x02B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteClanHomeMessage;                            		// 0x02BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteClanHomeMessageToMe;                        		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteClanHomeToInGame;                           		// 0x02D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InviteClanHomeAlready;                            		// 0x02E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      InviteClanUserArray;                              		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strCaptureStartMsg;                               		// 0x02F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCaptureFinishMsg;                              		// 0x0304 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCapturingMsg;                                  		// 0x0310 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           strGetRareRewardItemMsgArray;                     		// 0x031C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           strGetRareRewardSPMsgArray;                       		// 0x0328 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           strGetCombineRareRewardArray;                     		// 0x0334 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strSP;                                            		// 0x0340 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strTP;                                            		// 0x034C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strLP;                                            		// 0x0358 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBombSP;                                        		// 0x0364 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           BlockUserNameArray;                               		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ChatBloakMessage;                                 		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSBlockWhisperUserInfo >            BlockWhisperUserArray;                            		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BlockWhisperState;                                		// 0x0394 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseBlockWhisper : 1;                             		// 0x0398 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsWhisperListPopup : 1;                           		// 0x0398 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< unsigned char >                            SendBlockChatTypeList;                            		// 0x039C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45558 ];

		return pClassPointer;
	};

	void SetBlockWhisperState ( int BlockState );
	void ClearBlockedWhisperUser ( );
	void ClearAllBlockedWhisperUser ( );
	void RemoveBlockWhisperUserArray ( int UserState );
	bool IsBlockedWhisperUser ( int USN );
	bool IsFriend ( int USN );
	bool isClanMember ( int USN );
	int IsBlockedUser ( struct FString UserName );
	void OnGameStarted ( );
	int GetInverseRemindTalkUserPos ( );
	TArray< struct FString > GetWhisperListArray ( );
	struct FString RemoveChatCmd ( struct FString strOrg );
	bool IsAlreadyInvitedClanUser ( int InUSN );
	struct FString GetChatWithStr ( unsigned long bFromMe, struct FString CodeName );
	int AutoChatTargetChange ( int Dir, struct FString InChatCmd, struct FString* CharRes );
	struct FString GetChatCommandString ( unsigned char cmdtype );
	struct FString GetLastTalkMeUserCodeName ( int Dir );
	void AddChatMessage ( unsigned char myChatSendType, struct FString strCodeName, struct FString strChatMsg, unsigned char UserGradeLV );
	void PKT_RealTimeEventFinish ( class UPacket* recvPacket );
	struct FString GetRealTimeEventModeNames ( TArray< int > ParsedExpValues );
	struct FString GetRealTimeEventMapNames ( TArray< int > ParsedExpValues );
	void PKT_RealTimeEventStart ( class UPacket* recvPacket );
	void ProcessRealTimeEventMessage ( unsigned long bAdd, struct FSRealTimeEvent* RealTimeEvent );
	void ProcessFeverTimeEventMessage ( unsigned long bAdd, struct FSFeverTimeEvent* FeverTimeEvent );
	bool IsAutoChatTargetCmds ( struct FString InCmd );
	unsigned char GetChatCommandType ( struct FString InCmd );
	void UpdateLastTalkMeUserCodeName ( struct FString CodeName );
	void ClearNullStringArray ( TArray< struct FString >* OutArray );
	void SendWhisperMessage ( struct FString FromCodeName, struct FString ToCodeName, struct FString InChatMsg );
	void HandlingVoteToKick ( unsigned char KickState );
	int HandlingVoteToKickStart ( struct FString CodeName );
	int HandlingWhisper ( struct FString strInChatMsg, class UGFxObject* InChatInputText, unsigned long bFromLobby, int* nIsInstantShow );
	int HandlingBlockClearUser ( struct FString strInChatMsg, class UGFxObject* InChatInputText, unsigned long bFromLobby, int* nIsInstantShow );
	int HandlingWhispBlockUser ( struct FString strInChatMsg, class UGFxObject* InChatInputText, unsigned long bFromLobby, int* nIsInstantShow );
	int HandlingHelp ( );
	void HandlingGameMasterCommand ( struct FString strInChatMsg, class UGFxObject* InChatInputText, int* nIsInstantShow );
	int HandlingChatMsgCommand ( struct FString strInChatMsg, class UGFxObject* InChatInputText, unsigned long bFromLobby, int* nIsInstantShow );
	bool IsChatRestrictRank ( );
	bool IsSendBlockChatType ( unsigned char InChatSendType );
	int GetLastestChatMessge ( struct FSChatMsgInfo* OutChatMsgInfo );
	void DeleteChatListByType ( unsigned char InChatType, unsigned long bForceDelete );
	void ClearChattingList ( );
	int GetChatType ( int InPlayerGradeLV, int InChatSendType, struct FString ChatMsg );
	void RemoveOptionalParamArray ( struct FString strToFind, int I );
	void RemoveOptionalParam ( );
	struct FSChatMsgInfo GetSendPendingChatMsg ( );
	void SetSendPendingChatMsg ( struct FSChatMsgInfo NewSendPendingChatMsg );
	void AddChattingMsgToDataStore ( int InChatType, struct FString InChatMsg, unsigned long bIgnoreChatFilter );
	void OnChatMessageSended ( );
	void PKT_ServerNoticeMessage_Auto ( class UPacket* Packet );
	void PKT_GetRareRewardUser_Auto ( class UPacket* Packet );
	void PKT_WhisperMessage_Auto ( class UPacket* Packet );
	void UpdateLastChatUserCodeName ( struct FString CodeName );
	void PKT_ChatMessage_Auto ( class UPacket* Packet );
	void PKT_Whisper_REQ_OK ( class UPacket* recvPacket );
	void PKT_Say_REQ_OK ( class UPacket* recvPacket );
	void ClearMassiveChatPenalty ( );
	int GetPenaltyRemainTime ( );
	bool UpdateMassiveChatMsgArray ( );
	void UpdateMassiveChatTimeArray ( );
	bool CheckMassiveChatting ( struct FString InChatMsg );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_Chatting::pClassPointer = NULL;

// Class SFGame.SFGameStateMessage
// 0x0000 (0x006C - 0x006C)
class USFGameStateMessage : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45579 ];

		return pClassPointer;
	};

	void UnRegisterMessage ( class APlayerController* P );
	void GameStateMessageReceive ( class APlayerController* P, unsigned char Type, int Index );
	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFGameStateMessage::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ChannelList
// 0x0114 (0x01A0 - 0x008C)
class USFUIDataStore_ChannelList : public USFUIDataStoreBase
{
public:
	int                                                SeparationCounter;                                		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LocChannelNameMessage;                            		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocChannelNumberMessage;                          		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocRoomNumberMessage;                             		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocRoomNumNameMessage;                            		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectToVipToolTip;                              		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CannotConnectToVipToolTip;                        		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectToNormalToolTip;                           		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSChannelSetting >                  ChannelSettingsArray;                             		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSChannelSetting >                  FilteredChannelSettingsArray;                     		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvChannelListCount;                             		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                CurChannelListCount;                              		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                SelectedGroupIndex;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                SelectedChannelIndex;                             		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FSChannelSetting                            JoinedChannel;                                    		// 0x010C (0x0028) [0x0000000000000000]              
	int                                                ChannelListRefreshCount;                          		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRequestQuickJoin : 1;                            		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bEnableRookiePopUp : 1;                           		// 0x0138 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      IsVipToolTipVisible : 1;                          		// 0x0138 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	TArray< struct FSQuickJoin >                       QuickJoinConditionArray;                          		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                QuickJoinCurTryCount;                             		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                QuickJoinMaxTryCount;                             		// 0x014C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSQuickJoin >                       PrevQuickJoinConditionArray;                      		// 0x0150 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                QuickJoinMaxPlayerRatio;                          		// 0x015C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSChannelSetting >                  QuickJoinChannelArray;                            		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSChannelSetting >                  QuickJoinFailedChannelArray;                      		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSChannelSetting >                  QuickJoinPrevChannelArray;                        		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nRookiePopUpShowCount;                            		// 0x0184 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __ChannelSortByChannelNumberDelegate__Delegate;   		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ChannelSortByTypeDelegate__Delegate;            		// 0x0194 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45608 ];

		return pClassPointer;
	};

	bool IsFullChannelofFilterd ( int Index );
	int IsValideChannel ( int ChanType, int ChanNum );
	bool IsEnableRookieChannel ( );
	bool IsClanChannelAndLeagueChannel ( );
	bool IsDisablePasswordRoom ( );
	bool IsCanInGameKick ( );
	bool IsUseEnemyCharacter ( );
	bool IsInVIPChannel ( );
	bool IsInRookieChannel ( );
	bool IsInBeginnerChannel ( );
	bool IsInProLeagueChannel ( );
	bool IsInFreeLeagueChannel ( );
	bool IsInLeagueChannel ( );
	bool IsInAllLeagueChannel ( );
	bool IsInClanMatchingChannel ( );
	bool IsInClanChannel ( );
	bool IsInChannel ( );
	struct FSChannelSetting GetChannel ( int ChanType, int ChanNum );
	int GetChannelID ( int ChanType, int ChanNum );
	int GetFilteredServerID ( int nChannelNumber );
	struct FString GetChannelGroupName ( int InGroup );
	struct FString GetChannelGroupToolTip ( int InGroup );
	struct FString GetChannelGroupText ( int InGroup );
	void GetChannelCountPerGroup ( TArray< int >* OutChannelCountArray );
	int GetChannelGroupByType ( int nType );
	int GetChannelTypeInfoIdx ( int nType );
	struct FString GetChannelListTooltip ( int Index );
	void GetChannelInfoStrings ( int nType, struct FString* OutShortName, struct FString* OutLongName );
	struct FString ReplLocationString ( struct FString Src, int channelType, int ChannelNumber, int RoomNumber, struct FString RoomName );
	struct FString GetScoreBoardTitle ( int RoomNumber, struct FString RoomName );
	void SetJoinedChannel ( int nChannelIdx );
	int ChannelSortByTypeDelegate ( struct FSChannelSetting A, struct FSChannelSetting B );
	int ChannelSortByChannelNumberDelegate ( struct FSChannelSetting A, struct FSChannelSetting B );
	void Sort ( TArray< struct FSChannelSetting >* OutArray );
	void GetPrevQuickJoinCondition ( int* OutGameModeID, int* OutMapID );
	void SetFilteringQuickJoinChannel ( );
	void SetBackUpBeforeQuickJoin ( );
	void SetDefaultChannelGroup ( int nRecommendChannelType );
	void SetChannelColor ( );
	void Filltering ( );
	bool IsInitialChannelList ( );
	int IsDisableChannelForInvitation ( int nChannelType );
	int IsDisableChannel ( int Index );
	bool IsNoReceive ( );
	bool IsAllReceived ( );
	void PKT_GetChannelList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetChannelList_REQ_OK ( class UPacket* recvPacket );
	void ClearChannelList ( );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_ChannelList::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_InvenWeap
// 0x00C0 (0x014C - 0x008C)
class USFUIDataStore_InvenWeap : public USFUIDataStoreBase
{
public:
	TArray< struct FsMuzzleColorUpgrade >              MuzzleColorUpgrade;                               		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsMuzzleStyleUpgrade >              MuzzleStyleUpgrade;                               		// 0x0098 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           MuzzleColorNameList;                              		// 0x00A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FsMuzzleInfo                                MuzzleInfo;                                       		// 0x00B0 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvWeaponSetCount;                               		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                CurWeaponSetCount;                                		// 0x00D8 (0x0004) [0x0000000000000000]              
	TArray< struct FSInvenWeaponSet >                  InvenWeaponSetArray;                              		// 0x00DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSRecvPartsItemInfo >               PartsItemArray;                                   		// 0x00E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PartsItemCount;                                   		// 0x00F4 (0x0004) [0x0000000000000000]              
	TArray< struct FSWeaponMCData >                    WeaponMCDataArray;                                		// 0x00F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      WeaponMCItemArray;                                		// 0x0104 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                reserveCheckArmoryIdx;                            		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNeedServerUpdateMainWPSet : 1;                   		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      NeedServerUpdateWPSetArray;                       		// 0x0118 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PartsItemID;                                      		// 0x0124 (0x0004) [0x0000000000000000]              
	struct FQWord                                      PartsParentItemSN;                                		// 0x0128 (0x0008) [0x0000000000000000]              
	struct FQWord                                      PartsItemSN;                                      		// 0x0130 (0x0008) [0x0000000000000000]              
	struct FString                                     PartsProperty;                                    		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FQWord                                      DeathPartsItemSN;                                 		// 0x0144 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45760 ];

		return pClassPointer;
	};

	int GetMuzzleColorIndex ( struct FString StyleID, int ColorIndex );
	void SetMuzzleColor ( class UParticleSystemComponent* PSC, struct FString StyleID, int MuzzleColorIndex );
	class UParticleSystem* SetupMuzzleFlash ( class UParticleSystemComponent* PSC, struct FString StyleID, int MuzzleColorIndex, unsigned long Is1stView, unsigned long IsNoZoom );
	void InitMuzzleInfo ( );
	bool CheckRecivedPartsItemList ( );
	void GetMuzzleFlashColorTooltip ( struct FSFItemData ItemData, struct FQWord MuzzleItemSN, struct FString* Message );
	struct FString GetPartsItemToolTipMessage ( struct FQWord WeaponISN );
	void RemoveWeaponCamoParts ( int ItemId, struct FQWord ItemSN );
	void RequestApplyPartsItem ( int ItemId, struct FQWord ItemSN );
	void GetUsingPartsBombSPCouponSN ( TArray< struct FQWord >* BombCouponSNArray );
	struct FString GetUsingPartsWeaponTagString ( );
	void GetPartsItemList ( struct FQWord WeaponISN, TArray< struct FSRecvPartsItemInfo >* OutPartsArray );
	int GetPartsItemIndexByClass ( struct FQWord ParentsSN, class UClass* OptionClass );
	void RemovePartsItem ( struct FQWord ItemSN );
	void InsertPartsItem ( struct FQWord ParentsSN, struct FQWord PartsSN, int PartsID, struct FString Propertys );
	void PKT_RemoveParts_REQ_OK ( class UPacket* recvPacket );
	void PKT_DeathParts_REQ_OK ( class UPacket* recvPacket );
	void PKT_ApplyParts_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetPartsList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetPartsList_REQ_TRANSACTION ( class UPacket* recvPacket );
	int UpdateChangedInvenSetting ( );
	struct FString GetInvenMainWeaponName ( int SetNo );
	bool IsValidateWeaponSetbyMainWeapon ( int SetNo );
	int GetValidateWeaponSetbyMainWeapon ( int SetNo );
	int CopyThrowWeaponInfo ( int weaponsetidx );
	int SerializeThrowWeaponSlot ( );
	bool CheckRecivedAllWeaponSetList ( );
	int GetDurabilityWeaponinWeaponSet ( int SetNo, int Slot, unsigned long bConvert );
	int GetThrowWeaponSlot ( int nSet, struct FQWord ItemSN );
	int GetWeaponSlotbyISN ( struct FQWord ItemSN );
	int GetWeaponSetbyISN ( struct FQWord ItemSN );
	int PutDownWeapon ( int Id, struct FQWord ItemSN, unsigned long bRemoveLocalOnly, int* nSet );
	int GetThrowWeaponSlotbyID ( int Id );
	int GetAvailableThrowWeaponslot ( int nSet );
	int FindThrowItemSNArray ( TArray< struct FQWord > ThrowItemSNArray, struct FQWord ItemSN );
	int EquipWeapon ( int Id, struct FQWord ItemSN, int nSet, struct FQWord* UnequipedISN );
	struct FQWord GetWeaponSetItemSN ( int SetNo, int Slot );
	int GetWeaponSetItemID ( int SetNo, int Slot );
	struct FString GetWeaponTagString ( struct FQWord ItemSN );
	int GetWeaponTagID ( struct FQWord ItemSN );
	struct FString GetUsingPartsMuzzleColorString ( int Index );
	struct FString GetMuzzleFlashColor ( struct FQWord ItemSN );
	int GetMuzzleFlashID ( struct FQWord ItemSN );
	struct FQWord GetBombSPCouponSN ( struct FQWord ItemSN );
	int GetBombSPCouponID ( struct FQWord ItemSN );
	int GetWeaponCamoID ( int ItemId, struct FQWord ItemSN );
	struct FString GetWeaponCamoIcon ( int ItemId, struct FQWord ItemSN );
	void SetupWeaponMCDataForGame ( );
	bool IsThrowWeaponEquipped ( int WPSetIndex, int ItemId );
	int GetEmptyThrowArrayIndex ( int WPSetIndex );
	int GetThrowArrayIndexByItemSN ( int WPSetIndex, struct FQWord ItemSN );
	bool IsWeaponSelectedForGame ( int WPSetIndex );
	bool IsInDataStore ( int WPSetIndex, struct FQWord ItemSN );
	bool IsEquipItem ( struct FQWord ItemSN );
	int GetWeaponSetTotalItemID ( );
	void InsertInvenWeaponSet ( struct FSInvenWeaponSet InvenWeaponSet );
	void PKT_GetWeaponSetInfo_REQ_OK ( class UPacket* recvPacket );
	void GetPropertyItemsFromItemSN ( struct FQWord ItemSN, TArray< struct FString >* PropertyItems );
	void SetItemDataByItemSN ( struct FQWord ItemSN, struct FSFItemData* ItemData );
	void PKT_GetWeaponSetInfo_REQ_TRANSACTION ( class UPacket* recvPacket );
	void SetRecvPacketHandler ( );
	void Clear ( );
};

UClass* USFUIDataStore_InvenWeap::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ItemList
// 0x0368 (0x03F4 - 0x008C)
class USFUIDataStore_ItemList : public USFUIDataStoreBase
{
public:
	TArray< struct FSRecvItemInfo >                    UsedItemArray;                                    		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSRecvItemInfo >                    NotUsedItemArray;                                 		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSRecvItemInfo >                    RemoveVipFreeItemArray;                           		// 0x00A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FQWord >                            WeaponItems;                                      		// 0x00B0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FQWord >                            CharacterItems;                                   		// 0x00BC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FQWord >                            WeaponOptionItems;                                		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FQWord >                            FunctionalItems;                                  		// 0x00D4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FQWord >                            GashaItems;                                       		// 0x00E0 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSModeItemData >                    ModeItems;                                        		// 0x00EC (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSModeItemData >                    PendingModeItem;                                  		// 0x00F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FQWord >                            RemoveVipFreeItems;                               		// 0x0104 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bIsSearching : 1;                                 		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreRecommendItem : 1;                         		// 0x0110 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bFailedCashBuy : 1;                               		// 0x0110 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      RecvNewItemIsInUse : 1;                           		// 0x0110 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bProcessNewItemTableWithError : 1;                		// 0x0110 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      IsUseItemName : 1;                                		// 0x0110 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      IsOpenItemDialog : 1;                             		// 0x0110 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsOptimizeInventory : 1;                         		// 0x0110 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	struct FString                                     SearchedText;                                     		// 0x0114 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     ItemSearchFailMessage;                            		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemSearchLackCharacters;                         		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ItemSearchLimitCharacters;                        		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UsedItemCount;                                    		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                NotUsedItemCount;                                 		// 0x0140 (0x0004) [0x0000000000000000]              
	struct FString                                     ItemPriceNotMatchSrc;                             		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strNoSellMessage;                                 		// 0x0150 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCountText;                                     		// 0x015C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                nItemWarningDay;                                  		// 0x0168 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nRepurchaseCheckDay;                              		// 0x016C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UsedPropItemID;                                   		// 0x0170 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           UsedParsePropertys;                               		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RepairSPMAX;                                      		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ItemAdditionalValueIncreseFontColor;              		// 0x0184 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ItemAdditionalValueDecreseFontColor;              		// 0x0190 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ItemAdditionalValueZeroFontColor;                 		// 0x019C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSToBuyItem >                       ToBuyItemArray;                                   		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      BuyAllType;                                       		// 0x01B4 (0x0001) [0x0000000000000000]              
	int                                                PurchaseGuideItemType;                            		// 0x01B8 (0x0004) [0x0000000000000000]              
	TArray< struct FSRecvReward >                      RecvRewardArray;                                  		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvRewardCount;                                  		// 0x01C8 (0x0004) [0x0000000000000000]              
	int                                                RecvPackageItemCount;                             		// 0x01CC (0x0004) [0x0000000000000000]              
	TArray< struct FSRecvReward >                      RecvPackageItemArray;                             		// 0x01D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvNewItemID;                                    		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                RecvNewItemPrice;                                 		// 0x01E0 (0x0004) [0x0000000000000000]              
	struct FString                                     RecvNewItemEndDate;                               		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FQWord                                      RecvNewItemSN;                                    		// 0x01F0 (0x0008) [0x0000000000000000]              
	struct FString                                     RecvRewardType;                                   		// 0x01F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ModeRewardCount;                                  		// 0x0204 (0x0004) [0x0000000000000000]              
	TArray< struct FSRecvReward >                      ModeRewardArray;                                  		// 0x0208 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvChallengeRewardCount;                         		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                CurChallengeRewardCount;                          		// 0x0218 (0x0004) [0x0000000000000000]              
	TArray< struct FSRecvChallengeReward >             RecvChallengeRewardArray;                         		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NewUsedItemID;                                    		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                NewUsedItemModeID;                                		// 0x022C (0x0004) [0x0000000000000000]              
	struct FQWord                                      NewUseGiftNSN;                                    		// 0x0230 (0x0008) [0x0000000000000000]              
	int                                                GiftReceivedCount;                                		// 0x0238 (0x0004) [0x0000000000000000]              
	int                                                GiftSendedCount;                                  		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                GiftReceivedTotalCount;                           		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                GiftSendedTotalCount;                             		// 0x0244 (0x0004) [0x0000000000000000]              
	TArray< struct FSGiftItem >                        GiftReceivedItemArray;                            		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGiftItem >                        GiftSendedItemArray;                              		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GiftReceiverCodeName;                             		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GiftRecvLimitSize;                                		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GiftNoticeType;                                   		// 0x0270 (0x0004) [0x0000000000000000]              
	struct FQWord                                      UsedGiftNSN;                                      		// 0x0274 (0x0008) [0x0000000000000000]              
	int                                                RecvItemTableInfoCount;                           		// 0x027C (0x0004) [0x0000000000000000]              
	int                                                CurItemTableInfoCount;                            		// 0x0280 (0x0004) [0x0000000000000000]              
	int                                                RecvDailyDiscountInfoCount;                       		// 0x0284 (0x0004) [0x0000000000000000]              
	int                                                CurNetmarbleDailyDiscount;                        		// 0x0288 (0x0004) [0x0000000000000000]              
	struct FString                                     CashIconImg;                                      		// 0x028C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SPIconImg;                                        		// 0x0298 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TPIconImg;                                        		// 0x02A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LPIconImg;                                        		// 0x02B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSCashIcon >                        CashIconImgArray;                                 		// 0x02BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           VipItemCodeArray;                                 		// 0x02C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSRecvPromoEventReward >            RecvPromoEventRewardArray;                        		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvModeItemShopListCount;                        		// 0x02E0 (0x0004) [0x0000000000000000]              
	TArray< struct FSGuideItem >                       PurchaseGuideExpiredItems;                        		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGuideItem >                       PurchaseGuideWillExpireItems;                     		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGuideItem >                       PurchaseGuideModeItems;                           		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGuideItem >                       PurchaseGuideRecommendItems;                      		// 0x0308 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PurchaseGuideIgnoreItems;                         		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PurchaseGuideIgnoreTypes;                         		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNetmarbleCoupon >                 RecvNetmarbleCouponList;                          		// 0x032C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvFirstBuySaleItemCount;                        		// 0x0338 (0x0004) [0x0000000000000000]              
	TArray< struct FSFirstBuySaleItem >                FirstBuySaleItemArray;                            		// 0x033C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFirstBuySaleItemInfo >            SaleItemInfoArray;                                		// 0x0348 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsVipItemListInfo >                 RecvVipItemArray;                                 		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsVipGradeInfo >                    RecvVipGradeInfoArray;                            		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvVipMapRotationCount;                          		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                RecvSaveVipMapRotationCount;                      		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                RepairCouponCount;                                		// 0x0374 (0x0004) [0x0000000000000000]              
	int                                                RepairCouponID;                                   		// 0x0378 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           PlayAniStatTagName;                               		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMapRotationInfo >                  VipMapRotationInfoList;                           		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                VIPMapMaxSlotCount;                               		// 0x0394 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                StoredMaterialRewardItemID;                       		// 0x0398 (0x0004) [0x0000000000000000]              
	TArray< struct FsRecvRandomBoxReward >             RecvRandomBoxRewardArray;                         		// 0x039C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsRandomBoxInfo >                   RandomBoxInfoArray;                               		// 0x03A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CombineDesignCount;                               		// 0x03B4 (0x0004) [0x0000000000000000]              
	TArray< struct FCombineDesignInfo >                CombineDesignList;                                		// 0x03B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCombineParts                               CurrentCombineParts;                              		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CodeNameColorSortByVersionNumberDelegate__Delegate;		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DiscountCouponListSortDelegate__Delegate;       		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortByDBIndex__Delegate;                        		// 0x03E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45768 ];

		return pClassPointer;
	};

	void GiveCombineUserDesignItem ( int CombineResult, class UPacket* recvPacket, int SendCombineRewardItemID );
	void PKT_GetCombineCnt_REQ_OK ( class UPacket* recvPacket );
	int SortByDBIndex ( struct FCombineDesignInfo A, struct FCombineDesignInfo B );
	void PKT_GetCombineDesign_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetCombineDesign_REQ_TRANSACTION ( class UPacket* recvPacket );
	void AddNetmarbleCoupon ( struct FString CouponID, struct FString CouponName, int DiscountRate, struct FString ExpireDate, int Count );
	void ClearModeRewardArray ( );
	bool CheckVipMapRotationInfoList ( );
	struct FMapRotationInfo GetVipMapRotationInfoList ( int Index );
	void SetVipMapRotationInfoList ( int Index, struct FMapRotationInfo VipMapRotation );
	struct FString GetSearchedText ( );
	void SetSearchedText ( struct FString SearchText );
	bool GetSearching ( );
	void SetSearching ( unsigned long IsSearch );
	void PKT_SetUseGachaBonusGauge_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_SetUseGachaBonusGauge_REQ_OK ( class UPacket* recvPacket );
	void ClearPlayAniStatTagName ( );
	void SetPlayAniStatTagName ( struct FString InputData );
	void SetItemAdditionalEffectArray ( struct FsItemAdditionalEffect ItemAdditionalEffects, unsigned long bNeedPlusSign, unsigned long bShowZeroData, unsigned long bSetDefaultZeroData, TArray< struct FsUIItemStat >* Attribs );
	void SetAttribsArray ( struct FString TagStr, float AdvNum, unsigned long bNeedPlusSign, unsigned long bSetZeroData, TArray< struct FsUIItemStat >* Attribs );
	int IsInFirstBuySaleItem ( int ItemId );
	bool IsStoredMaterialClass ( );
	int GetSaleItemInfoArrayByCode ( struct FString ItemCode, TArray< int >* OutIDArray, TArray< int >* EnableArray );
	bool IsFirstBuySaleItemByCode ( struct FString ItemCode );
	int GetFirstBuySaleItemOriginalPrice ( int ItemId );
	bool IsOnlyOneBuyItemByID ( int ItemId, unsigned long bBuy );
	bool IsFirstBuySaleItemByItemData ( struct FSFItemData* ItemData, float* OutDiscountRatio );
	bool IsFirstBuySaleItemByID ( int ItemId, float* OutDiscountRatio );
	void SetFirstSaleItemInfoEnable ( int ItemId, struct FString ItemCode, unsigned long bEnable );
	void InitFirstSaleItemInfoArray ( );
	void PKT_GetFirstBuySaleItemList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetFirstBuySaleItemList_REQ_OK ( class UPacket* recvPacket );
	void ClearNewItemTableCount ( );
	bool IsAllReceivedNetmarbleDailyDiscount ( );
	void PKT_GetNetmarbleDailyDiscountList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetNetmarbleDailyDiscountList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetItemTableInfo_REQ_TRANSACTION ( class UPacket* recvPakcet );
	void UpdateDiscountItemList ( int ItemId, int discount_rate );
	bool IsAllReceivedNewItemTable ( );
	void PKT_GetItemTableInfo_REQ_OK ( class UPacket* recvPacket );
	struct FString GetCombineProperty ( TArray< struct FString > Property );
	void SetRepairCouponCount ( );
	void PKT_SendGift_Auto ( class UPacket* Packet );
	bool SetGiftItemUsed ( struct FQWord GiftNSN );
	struct FString GetGiftReceiverCodeName ( );
	void PKT_SendGift_REQ_OK ( class UPacket* recvPacket );
	void PKT_SaveVipMapRotationInfo_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetVipMapRotationInfo_REQ_OK ( class UPacket* recvPacket );
	int GetUsedVipItemID ( );
	bool CheckRecvVipItembyItemID ( int ItemId );
	int GetVipItemAddPointByItemID ( int ItemId );
	bool GetUsedVipItemList ( TArray< struct FsVipItemListInfo >* outVipItemList );
	int GetVipGradeByTotalVipPoint ( int TotalPoint );
	bool GetVipGradeInfo ( int VipGrade, struct FsVipGradeInfo* VipInfo );
	void PKT_GetVipItemInfo_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetVipItemInfo_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetVipGradeInfo_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetVipGradeInfo_REQ_OK ( class UPacket* recvPacket );
	int DiscountCouponListSortDelegate ( struct FsNetmarbleCoupon A, struct FsNetmarbleCoupon B );
	void PKT_GetNetmarbleDiscountCoupon_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetNetmarbleDiscountCoupon_REQ_OK ( class UPacket* recvPacket );
	void UpdatePurchaseGuideItemByIgnore ( TArray< struct FSGuideItem >* OutArray );
	bool IsIgnorePurchaseGuideType ( int nType );
	void AddPurchaseGuideIgnore ( int nType, int ItemId );
	void GetPurchaseGuideItemArray ( TArray< struct FSGuideItem >* OutArray, int* OutGuideItemType );
	void UpdatePurchaseGuideRecommendItem ( );
	void UpdatePurchaseGuideModeItem ( );
	void ToggleEquippedModeItem ( int game_mode_id, unsigned char slot_index );
	void UnEquipModeItem ( int game_mode_id, struct FQWord item_sn );
	void EquipModeItem ( int game_mode_id, struct FQWord item_sn );
	bool AutoEquipModeItem ( struct FQWord ItemSN );
	struct FQWord GetEquippedModeItem ( unsigned char SlotID );
	void ProcessPendingModeItem ( );
	bool GetModeItemList ( int game_mode_id, TArray< struct FSFItemData >* out_list );
	bool CheckOverlapModeItemType ( int game_mode_id, struct FQWord item_sn );
	bool IsEquippedModeItem ( int game_mode_id, struct FQWord item_sn );
	void PKT_SetModeArmsStore_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetModeArmsStoreList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetModItemList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetModItemList_REQ_OK ( class UPacket* recvPacket );
	bool IsHaveProvideHealthItem ( int gamemode, struct FString* OutItemImg );
	struct FString GetLocalizedPaymentType ( struct FString strPaymentType );
	struct FString GetChannelingCashIconImg ( );
	struct FString GetPaymentTypeIcon ( struct FString strType );
	int GetItemDefaultPriceInfo ( struct FString ItemCode, TArray< struct FSItemPriceInfo >* PriceInfoList );
	void GetNotUsedGashaCouponbySupplyCode ( struct FString SupplyCode, TArray< struct FSFItemData >* OutItemDataArray );
	int GetGashaCouponCountbySupplyCode ( struct FString SupplyCode );
	struct FQWord GetFirstWeaponISN ( unsigned char Group );
	float GetWeaponPreviewZoomOutMaxFOV ( int ItemId );
	float GetWeaponPreviewFieldOfViewbyItemId ( int ItemId );
	void GetWeaponPreviewDisplayStat ( int ItemId, unsigned long IsMuzzleFlash, struct FVector* vOrgLoc, struct FVector* vOrgLocZoom, struct FVector* vStepLoc, struct FRotator* rOrgRot, struct FRotator* rStepRot, float* fScale );
	bool GetSFItem_WeapClass ( int ItemId, class UClass** ItemClass );
	void UpdateFreeItem ( unsigned char InFreeItemType );
	void GetFreeItemArray ( unsigned char InFreeItemType, unsigned long IsAdd, TArray< int >* outFreeItem );
	void CheckFreeItemForMonthlyReward ( );
	void CheckFreeItemForVip ( );
	void DeleteBuyItemArray ( );
	void CheckFreeItemByPcRoomCare ( );
	void GetVipItemNameArray ( int VipGrade, TArray< struct FString >* outVipItemNameArray );
	void UpdateFreeItemArray ( unsigned char InItemType, TArray< int > ItemsArray, unsigned long bAdd, TArray< int >* OutItemArray );
	bool GetRandomBoxEndData ( int ItemId, struct FString* EndDate );
	struct FString GetNotUsedItemName ( struct FSFItemData InItemData, unsigned long IsOnlyCodeName );
	struct FString GetNotUsedItemNameFormatHtml ( struct FSFItemData InItemData );
	struct FString GetRemainTimeString ( float InHour, unsigned long bHTML );
	float GetRemainHourToEndDate ( struct FString EndDate );
	struct FString GetItemRemainTimeTextWithISN ( struct FQWord InItemSN, struct FString* OutIsEndDateWarning );
	float GetItemRemainTimeWithISN ( struct FQWord ItemSN );
	bool IsItemToCheckRepurchase ( int ItemId );
	bool CheckOutDateItem ( );
	bool IsUsingFuncSPImmediatelyItem ( );
	bool GetUsingFuncSPImmediatelyItem ( TArray< struct FString > ReceiveFunctionalItems );
	bool GetUsingFuncCombatReportItem ( );
	int CodeNameColorSortByVersionNumberDelegate ( struct FSCodeNameColor A, struct FSCodeNameColor B );
	int GetUsingFuncChangeDisguiseRank ( );
	void CodeNameColorSort ( TArray< struct FSCodeNameColor >* OutArray );
	struct FSCodeNameColor GetUsingFuncCodeNameColorString ( );
	bool IsUsingCodeNameColorV2 ( int* CodeNameColorV2ItemID, struct FQWord* ItemSN );
	bool GetUsingFuncMagazineUpString ( int WeaponID, int AmmoCountMax, struct FString* outstrMagazineUp );
	int GetUsingFuncAdditionalValue ( TArray< struct FString > ReceiveFunctionalItems, class UClass* BaseClass, unsigned char Type, unsigned long bIsMine );
	bool IsUsingFuncPmcItem ( TArray< struct FString > strFunctionalItems, int* outPmcItemID );
	TArray< struct FString > GetUsingFunctionalItemList ( int game_mode_id );
	bool IsSameToPlayerSprayItem ( int ItemId );
	struct FString GetItemEndDateByISN ( struct FQWord ItemSN );
	struct FString GetItemUseTypebyID ( int ItemId );
	struct FString GetItemUseTypebyISN ( struct FQWord ItemSN );
	float GetItemRepairNeedSPbyISN ( struct FQWord ItemSN );
	bool IsThrowWeapon ( int ItemId );
	int GetMainWeaponCount ( );
	bool IsLastMainWeaponForResell ( int ItemId );
	TArray< int > GetItemDurabilityRatebyItemSNArray ( TArray< struct FQWord > ItemSNArray, unsigned long bConvert );
	float GetItemDurabilityRatebyItemSN ( struct FQWord ItemSN, unsigned long bConvert );
	bool IsAccessory ( int Type );
	struct FString GetWeaponMakerStr ( int ItemId );
	void GetWeaponDisplayStat ( int ItemId, TArray< int >* WeaponStats, struct FString* Maker, TArray< struct FsUIItemStat >* Attribs );
	void GetEquipmentItemDisplayStat ( int ItemId, TArray< struct FsUIItemStat >* Attrib );
	struct FString GetItemCode ( int ItemId );
	struct FString GetItemSaleEvent ( int ItemId );
	struct FString GetAvailableUnitImage ( int ItemId, int UnitItemID );
	struct FString GetAvailableUnit ( int ItemId );
	bool CheckRecivedNotUsedItemList ( );
	bool CheckRecivedUsedItemList ( );
	int PutDownItem ( struct FQWord ItemSN );
	int EquipItem ( struct FQWord ItemSN );
	int GetItemDurability ( struct FQWord ItemSN, int* MaxDurability );
	bool SetItemDurability ( struct FQWord ItemSN, int InDurability );
	bool IsInInventory ( struct FString ItemCode );
	bool IsExistUsedItemByISN ( struct FQWord ItemSN );
	bool IsExistRemoveVipFreeItemByID ( int ItemId, int* Index );
	bool IsExistUsedItemByID ( int ItemId );
	bool GetItemDataByItemSN ( struct FQWord ItemSN, struct FSFItemData* ItemData );
	struct FString GetItemNameByISN ( struct FQWord ItemSN );
	void GetPropertyItemsFromItemCode ( struct FString ItemCode, TArray< struct FString >* ParsePropertys );
	void GetPropertyItemsFromItemID ( int ItemId, TArray< struct FString >* ParsePropertys );
	void GetPropertyItemsFromItemSN ( struct FQWord ItemSN, TArray< struct FString >* ParsePropertys );
	struct FQWord GetItemSNFromItemCode ( struct FString ItemCode );
	void GetItemSNListFromItemID ( int ItemId, TArray< struct FQWord >* OutItemSNList );
	struct FQWord GetItemSNFromItemID ( int ItemId );
	int GetItemIDFromItemCode ( struct FString InItemCode );
	int GetItemIDFromItemSN ( struct FQWord ItemSN );
	struct FString GetItemCodeFromItemSN ( struct FQWord ItemSN );
	void RemoveGashacoupon ( int ItemId );
	void RemoveNotUsedItem ( int ItemId, int ItemCount );
	void RemoveUsedItem ( struct FQWord ItemSN, unsigned long bVipItem );
	int GetItemArrayColumn ( TArray< struct FQWord > Items, struct FQWord Key );
	int GetItemSNCount ( int ItemId );
	void GetItemNSNListByItemID ( int ItemId, TArray< struct FQWord >* OutItemNSNList );
	struct FQWord GetItemNSNByItemID ( int ItemId );
	int GetUsedItemIndexByItemSN ( struct FQWord InItemSN );
	void UpdateUsedItemProperties ( struct FQWord ItemSN, TArray< struct FString > ParsePropertys );
	void PKT_SetItemProperty_REQ_OK ( class UPacket* recvPacket );
	void RemoveWeaponCamoProperty ( struct FQWord ItemSN );
	void UpdateUsedItem ( struct FQWord ItemSN, int ItemId, struct FString EndDate, int Durability, int MaxDurability, TArray< struct FString > ParsePropertys );
	void InsertNotUsedItem ( int ItemId, struct FQWord ItemNSN, int ItemCount );
	void InsertUsedItem ( struct FQWord ItemSN, int ItemId, struct FString EndDate, int Durability, int MaxDurability, TArray< struct FString > ParsePropertys );
	void PKT_DeleteSendedMail_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetUseGift_REQ_OK ( class UPacket* recvPacket );
	int GetGiftItemIDByGiftNSN ( struct FQWord InGiftNSN );
	bool GetGiftDataByID ( struct FQWord InGiftNSN, struct FSGiftItem* OutGiftItem );
	void PKT_GetGiftSendedList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGiftReceivedList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGiftSendedList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGiftReceivedList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGiftCount_REQ_OK ( class UPacket* recvPacket );
	bool IsAllReceivedGiftList ( );
	void PKT_SetUseCoupon_REQ_OK ( class UPacket* recvPacket );
	void RemoveUsedCoupon ( );
	void PKT_BuyItem_REQ_OK ( class UPacket* recvPacket );
	void RecvNewItem ( class UPacket* recvPacket, unsigned long bFromBuy, int PacketCount );
	int GetBuyItemCount ( );
	bool IsCheckingItemPrice ( struct FSToBuyItem ToBuyItem );
	void GetCommonLogData ( struct FSToBuyItem BuyItem, TArray< struct FString >* OutCommonLogs );
	void RealRequestBuyItem ( );
	void PKT_GetCash_REQ_OK ( class UPacket* recvPacket );
	bool GetIsChannelingServiceRelease ( );
	void RequestBuyItem ( );
	void AddBuyGiftItemList ( int InItemID, int PaymentIndex, int RecvUSN, struct FString RecvCodeName, struct FString GiftMsg, struct FString CouponID, int CouponDiscountPrice );
	void AddBuyItemList ( int InItemID, int PaymentIndex, struct FString logType, struct FString CouponID, int CouponDiscountPrice );
	void ClearBuyItemList ( );
	bool IsAllReceivedReward ( );
	void PKT_GetRewardItem_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetRewardItem_REQ_OK ( class UPacket* recvPacket );
	bool IsAllReceivedChallengeReward ( );
	void PKT_UpdateTaskList_REQ_Transaction ( class UPacket* Packet );
	void PKT_ChallengeCompleteFromServer_AUTO ( class UPacket* Packet );
	void PKT_UpdateTaskList_REQ_OK ( class UPacket* Packet );
	void SetNewReward ( struct FSRecvReward RecvReward );
	void ClearPromoEventRewardArray ( );
	void RecvNewRewardForPromoEvent ( class UPacket* recvPacket, int* StartIndex );
	void PKT_GetPromotionEventItemListMessage_Auto ( class UPacket* recvPacket );
	void PKT_GiveItemInfoMessage_AUTO ( class UPacket* recvPacket );
	int RecvNewRewardForChallenge ( class UPacket* recvPacket, struct FName TaskCode, int TaskIndex, int StartIndex );
	int RecvNewReward ( class UPacket* recvPacket, int StartIndex );
	int RecvGetNewUsedItem ( class UPacket* recvPacket );
	void PKT_OpenChoicePackageItem_REQ ( class UPacket* recvPacket );
	bool IsAllReceivedPackageItem ( );
	void PKT_OpenPackageItem_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_OpenPackageItem_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetRandomBoxItemList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetRandomBoxItemList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetRandomBoxList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetRandomBoxList_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetUseNewItem_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetNotUsedItemList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetNotUsedItemList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void ParseProperties_MuzzleFlash ( struct FString InProperties, TArray< struct FString >* ParsePropertys );
	void ParseProperties_WeaponTag ( struct FString InProperties, TArray< struct FString >* ParsePropertys );
	void ParseProperties_CodeNameColor ( struct FString InProperties, TArray< struct FString >* ParsePropertys );
	void ParseProperties_Normal ( struct FString InProperties, TArray< struct FString >* ParsePropertys );
	void ParseProperties ( struct FString ItemCode, struct FString InProperties, TArray< struct FString >* ParsePropertys );
	class UClass* GetSFItemBasebyItemID ( int ItemId );
	class UClass* GetSFItemBase ( struct FString ItemCode );
	void PKT_GetUsedItemList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetUsedItemList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void Clear ( );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_ItemList::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_WeaponChange
// 0x0040 (0x024C - 0x020C)
class USFGFxHUD_WeaponChange : public USFGFxHUDMoviePlayer
{
public:
	class UGFxClikWidget*                              WeaponSetMC;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	TArray< int >                                      MainWeapons;                                      		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           WeaponSetName;                                    		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponSetChangedMsg;                              		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponSetChangedMsgForTraining;                   		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowWeaponSetChange : 1;                         		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              fDurationTime;                                    		// 0x0244 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WeaponSetCount;                                   		// 0x0248 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45894 ];

		return pClassPointer;
	};

	void ASClearCurrentWeaponSet ( int Type );
	void ASSetCurrentWeaponSet ( int Type );
	void ASHideWeaponSetChange ( );
	void ASShowWeaponSetChange ( );
	void HideWeaponSetChange ( );
	void ShowWeaponSetChange ( );
	void OpenWeaponSetChange ( int Type );
	struct FString GetWeaponMixString ( struct FString ItemImgName, struct FString ItemName );
	void SetWeaponSet ( struct FString Target, TArray< struct FString > WeaponSet, TArray< struct FString > WeaponCamoSet, TArray< struct FString > WeaponMuzzleSet );
	void ASSetUsableMainWeapon ( );
	void InitWeaponSetData ( );
	int GetSelectWeaponSet ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void Destroyed ( );
	bool Start ( unsigned long StartPaused );
};

UClass* USFGFxHUD_WeaponChange::pClassPointer = NULL;

// Class SFGame.SFKillMessage
// 0x0048 (0x00B4 - 0x006C)
class USFKillMessage : public USFLocalMessage
{
public:
	TArray< struct FSKillMessage >                     KillMsgStringArray;                               		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           KillLocalMsgStringArray;                          		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSKillMessage >                     WeaponKillMsgStringArray;                         		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           WeaponKillLocalMsgStringArray;                    		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USFSoundGroup_Voice*                         KillVoice;                                        		// 0x009C (0x0004) [0x0000000000000000]              
	class USoundNodeWave*                              DefaultKillSound;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	class USoundNodeWave*                              NormalKillSound;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	class USoundNodeWave*                              SpecialKillSound;                                 		// 0x00A8 (0x0004) [0x0000000000000000]              
	class USoundNodeWave*                              RareKillSound;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	class USoundNodeWave*                              ContinuousKillSound;                              		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45895 ];

		return pClassPointer;
	};

	unsigned char GetKillFeedBackType ( int KillType );
	class USoundNodeWave* GetKillFeedBackSound ( struct FString strMessage );
	int GetKillTypeByMessage ( struct FString strMessage );
	struct FString GetKillMessageByType ( int KillType );
	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetKillAnimationType ( struct FString KillMessage );
	struct FString GetWeaponKillLocalizedMessage ( int nIndex );
	struct FString GetKillLocalizedMessage ( int nIndex );
	struct FString GetWeaponKillMessage ( int nIndex );
	struct FString GetKillMessage ( int nIndex );
	struct FString GetString ( int Index, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFKillMessage::pClassPointer = NULL;

// Class SFGame.SFPromotionMessage
// 0x000C (0x0078 - 0x006C)
class USFPromotionMessage : public USFLocalMessage
{
public:
	struct FString                                     YouPromoted;                                      		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45896 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFPromotionMessage::pClassPointer = NULL;

// Class SFGame.SFScoreUpMessage
// 0x000C (0x0078 - 0x006C)
class USFScoreUpMessage : public USFLocalMessage
{
public:
	TArray< struct FString >                           DisableAFColorArray;                              		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45897 ];

		return pClassPointer;
	};

	bool IsEnableAFColor ( struct FString InGameModeClass );
	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Index, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFScoreUpMessage::pClassPointer = NULL;

// Class SFGame.SFAnnounceGame
// 0x0004 (0x0070 - 0x006C)
class USFAnnounceGame : public USFLocalMessage
{
public:
	class USFSoundGroup_Voice*                         GameAnnounce;                                     		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45898 ];

		return pClassPointer;
	};

	void ReplaceMessage ( class ASFPlayerReplicationInfo* PRI, struct FString* Caption );
	bool HandleAnnounce ( class ASFPlayerController* P, struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bDrawCaption, unsigned long bPlayVoice );
	bool ClientReceiveEx ( class ASFPlayerController* P, struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bDrawCaption, unsigned long bPlayVoice );
	bool HasEvent ( struct FName EventName );
};

UClass* USFAnnounceGame::pClassPointer = NULL;

// Class SFGame.SFKilledUserInfoMessage
// 0x000C (0x0078 - 0x006C)
class USFKilledUserInfoMessage : public USFLocalMessage
{
public:
	struct FString                                     KilledUserMessage;                                		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45899 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFKilledUserInfoMessage::pClassPointer = NULL;

// Class SFGame.SFLuckyPointMessage
// 0x0018 (0x0084 - 0x006C)
class USFLuckyPointMessage : public USFLocalMessage
{
public:
	struct FString                                     LuckyPointMessage;                                		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LuckyPointDescription;                            		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45900 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFLuckyPointMessage::pClassPointer = NULL;

// Class SFGame.SFLastManStandingMessage
// 0x0018 (0x0084 - 0x006C)
class USFLastManStandingMessage : public USFLocalMessage
{
public:
	struct FString                                     LastManStandingSelf;                              		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LastManStandingTeam;                              		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45901 ];

		return pClassPointer;
	};

	void TestLastMan1 ( class APlayerController* P, class APlayerReplicationInfo* PRI );
	void TestLastMan0 ( class APlayerController* P, class APlayerReplicationInfo* PRI );
	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFLastManStandingMessage::pClassPointer = NULL;

// Class SFGame.SFMessageByKismet
// 0x0000 (0x006C - 0x006C)
class USFMessageByKismet : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45902 ];

		return pClassPointer;
	};

	void UnRegisterMessage ( class APlayerController* P );
	void RegisterMessage ( class APlayerController* P, struct FString LocalizedString, float MessageLifeTime, class UClass* InMessageClass );
};

UClass* USFMessageByKismet::pClassPointer = NULL;

// Class SFGame.SFKeyMessage
// 0x000C (0x0078 - 0x006C)
class USFKeyMessage : public USFLocalMessage
{
public:
	TArray< struct FKeyMessageData >                   KeyStrings;                                       		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45903 ];

		return pClassPointer;
	};

	void UnRegisterMessage ( class APlayerController* P );
	void RegisterMessage ( class APlayerController* P, struct FString LocalizedString, float MessageLifeTime, int MessageIndex );
	void GetKey ( int MessageIndex, TArray< struct FString >* outKeyArray );
	struct FString GetMessage ( int MessageIndex );
};

UClass* USFKeyMessage::pClassPointer = NULL;

// Class SFGame.SFWarningMessage
// 0x0000 (0x006C - 0x006C)
class USFWarningMessage : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45904 ];

		return pClassPointer;
	};

	void UnRegisterMessage ( class APlayerController* P );
	void RegisterMessage ( class APlayerController* P, struct FString LocalizedString, float MessageLifeTime );
};

UClass* USFWarningMessage::pClassPointer = NULL;

// Class SFGame.SFBeginnerTipMessage
// 0x0000 (0x006C - 0x006C)
class USFBeginnerTipMessage : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45905 ];

		return pClassPointer;
	};

	void UnRegisterMessage ( class APlayerController* P );
	void RegisterMessage ( class APlayerController* P, struct FString LocalizedString, float MessageLifeTime );
};

UClass* USFBeginnerTipMessage::pClassPointer = NULL;

// Class SFGame.SFBonusScoreUpMessage
// 0x000C (0x0084 - 0x0078)
class USFBonusScoreUpMessage : public USFScoreUpMessage
{
public:
	struct FString                                     ScoreText;                                        		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45906 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FString GetString ( int Index, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFBonusScoreUpMessage::pClassPointer = NULL;

// Class SFGame.SFKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFKillDeathMessage : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45908 ];

		return pClassPointer;
	};

	int GetDecimalNumber ( int HexNumber );
	bool PassAssistLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* Killer, class ASFPlayerReplicationInfo* Vidtim, int KillType );
	void ProcessAssistLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI1, class ASFPlayerReplicationInfo* PRI2, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
	bool PassDeathLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* Vidtim );
	void ProcessDeadLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI2, int KillType, class UObject* OptionalObject );
	bool PassKillLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* Killer, class ASFPlayerReplicationInfo* Vidtim );
	void ProcessKillLog ( class ASFPlayerReplicationInfo* SFPRI, class ASFPlayerReplicationInfo* PRI1, class ASFPlayerReplicationInfo* PRI2, int WeaponItemID, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
	void ClientKillDeathReceive ( class APlayerController* PC, int Index1, int Index2, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFWarriorKillDeathMessage
// 0x0024 (0x0090 - 0x006C)
class USFWarriorKillDeathMessage : public USFKillDeathMessage
{
public:
	struct FString                                     MSG_ContinualKilling;                             		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           MSG_ContinualKills;                               		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_OurForce;                                     		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45907 ];

		return pClassPointer;
	};

	struct FString GetCodeName ( class ASFPlayerReplicationInfo* TargetPRI, int FriendTeamNum );
	unsigned char GetKillingWeaponLogType ( int WeaponID );
	void ProcessKillLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, int WeaponItemID, int KillType, int ItemCodeNameIndex, class UObject* DamageCauser );
	struct FString GetContunualKillMessage ( int ContinualKillCount, struct FString KillerCodeName, struct FString VictimCodeName );
	struct FString ExportWeaponClassName ( struct FString Source );
	void ClientKillDeathReceive ( class APlayerController* PC, int Index1, int Index2, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFWarriorKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFWarriorLevelUpMessage
// 0x000C (0x0078 - 0x006C)
class USFWarriorLevelUpMessage : public USFLocalMessage
{
public:
	struct FString                                     ModeLevelUp;                                      		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45909 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFWarriorLevelUpMessage::pClassPointer = NULL;

// Class SFGame.SFHeroMoneyUpMessage
// 0x0000 (0x0084 - 0x0084)
class USFHeroMoneyUpMessage : public USFBonusScoreUpMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45910 ];

		return pClassPointer;
	};

};

UClass* USFHeroMoneyUpMessage::pClassPointer = NULL;

// Class SFGame.SFHeroAlienControllerDestroyedMessage
// 0x0018 (0x0084 - 0x006C)
class USFHeroAlienControllerDestroyedMessage : public USFLocalMessage
{
public:
	struct FString                                     MSG_Enemy_Tower_Destroyed;                        		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Our_Tower_Destroyed;                          		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45911 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFHeroAlienControllerDestroyedMessage::pClassPointer = NULL;

// Class SFGame.SFHeroTurretDestroyedMessage
// 0x0018 (0x0084 - 0x006C)
class USFHeroTurretDestroyedMessage : public USFLocalMessage
{
public:
	struct FString                                     MSG_Enemy_Turret_Destroyed;                       		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Our_Turret_Destroyed;                         		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45912 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFHeroTurretDestroyedMessage::pClassPointer = NULL;

// Class SFGame.SFHeroDeathRewardMessage
// 0x000C (0x0078 - 0x006C)
class USFHeroDeathRewardMessage : public USFLocalMessage
{
public:
	struct FString                                     MSG_DeathRewardApplied;                           		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45913 ];

		return pClassPointer;
	};

	void GetUIBuffBonusInfo ( unsigned char BonusType, float BonusValue, int* UIBonusType, struct FString* UIBonusValue );
	void GetBuffUIMessage ( unsigned char BuffType, struct FString* BuffBonusTypes, struct FString* BuffBonusValues );
	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFHeroDeathRewardMessage::pClassPointer = NULL;

// Class SFGame.SFKillDeathRewardMessage
// 0x000C (0x0078 - 0x006C)
class USFKillDeathRewardMessage : public USFLocalMessage
{
public:
	struct FString                                     MSG_KillDeathRewardApplied;                       		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45914 ];

		return pClassPointer;
	};

	void GetUIBuffValueInfo ( unsigned char BuffType, float BonusValue, int* UIBonusType, struct FString* UIBonusValue );
	void GetBuffUIMessage ( unsigned char BuffType, int Index, TArray< struct FSKillDeathStreakBuffInfo > KillDeathStreakList, struct FString* BuffBonusTypes, struct FString* BuffBonusValues );
	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFKillDeathRewardMessage::pClassPointer = NULL;

// Class SFGame.SFLastStandMessage
// 0x0018 (0x0084 - 0x006C)
class USFLastStandMessage : public USFLocalMessage
{
public:
	struct FString                                     LastStandEffectON;                                		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LastStandEffectOFF;                               		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45915 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFLastStandMessage::pClassPointer = NULL;

// Class SFGame.SFBombSPMessage
// 0x0018 (0x0084 - 0x006C)
class USFBombSPMessage : public USFLocalMessage
{
public:
	struct FString                                     BombSPMessage;                                    		// 0x006C (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BombSPDescription;                                		// 0x0078 (0x000C) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45916 ];

		return pClassPointer;
	};

	void ClientReceive ( class APlayerController* P, int Index, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFBombSPMessage::pClassPointer = NULL;

// Class SFGame.SF16VS16ModeHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASF16VS16ModeHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45917 ];

		return pClassPointer;
	};

};

UClass* ASF16VS16ModeHUD::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoard16vs16
// 0x0000 (0x0314 - 0x0314)
class USFGFxHUD_ScoreBoard16vs16 : public USFGFxHUD_ScoreBoardNormal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45919 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_ScoreBoard16vs16::pClassPointer = NULL;

// Class SFGame.SFAddHealthMutator
// 0x0009 (0x024D - 0x0244)
class ASFAddHealthMutator : public AMutator
{
public:
	int                                                AddedHealth;                                      		// 0x0244 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bAllowBot : 1;                                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      AvailableTeam;                                    		// 0x024C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45977 ];

		return pClassPointer;
	};

	void ModifyPlayer ( class APawn* Other );
};

UClass* ASFAddHealthMutator::pClassPointer = NULL;

// Class SFGame.SFAddBossHealthMutator
// 0x0000 (0x024D - 0x024D)
class ASFAddBossHealthMutator : public ASFAddHealthMutator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45987 ];

		return pClassPointer;
	};

	void ModifyPlayer ( class APawn* Other );
};

UClass* ASFAddBossHealthMutator::pClassPointer = NULL;

// Class SFGame.SFCTCTeaminfo
// 0x000C (0x027C - 0x0270)
class ASFCTCTeaminfo : public ASFTeamInfo
{
public:
	int                                                CaptainIndex;                                     		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                CaptainTransferHealth;                            		// 0x0274 (0x0004) [0x0000000000000000]              
	class AController*                                 CaptainKiller;                                    		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45990 ];

		return pClassPointer;
	};

	void Reset ( );
};

UClass* ASFCTCTeaminfo::pClassPointer = NULL;

// Class SFGame.SFCTCGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFCTCGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 45993 ];

		return pClassPointer;
	};

	void eventLogout ( int nPlayerID );
	void NotifyRoundStarted ( );
	class ASFPawn_CaptainPlayer* SearchCaptain ( class ASFPawn_CaptainPlayer* SFP );
	void CaptainTransfer ( class ASFPawn* SFP );
	bool TeamCaptainChoice ( class AController* Other, int CurrTeamIndex );
};

UClass* ASFCTCGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AIStartFireAt
// 0x0001 (0x00E9 - 0x00E8)
class USFSeqAct_AIStartFireAt : public USequenceAction
{
public:
	unsigned char                                      ForcedFireMode;                                   		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46959 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AIStartFireAt::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AIStopFire
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_AIStopFire : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46966 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AIStopFire::pClassPointer = NULL;

// Class SFGame.SFScenarioHUD
// 0x0010 (0x0E50 - 0x0E40)
class ASFScenarioHUD : public ASFHUD
{
public:
	class ASFScenarioGameReplicationInfo*              SFSGRI;                                           		// 0x0E40 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UTexture2D* >                        DBNOIcon;                                         		// 0x0E44 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 46971 ];

		return pClassPointer;
	};

	void DrawRoute ( class APawn* Target );
	void DrawRespawnCount ( );
	void DrawIconOverHead ( class ASFPawn* TargetPawn, TArray< class UTexture2D* > Textures );
	void CheckGRI ( );
};

UClass* ASFScenarioHUD::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AIFreeze
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_AIFreeze : public USequenceAction
{
public:
	unsigned long                                      bAllowWeaponFiring : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47019 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AIFreeze::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AILookAt
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_AILookAt : public USequenceAction
{
public:
	class AActor*                                      FocusTarget;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47119 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AILookAt::pClassPointer = NULL;

// Class SFGame.SFAIController_Aliens
// 0x0020 (0x0674 - 0x0654)
class ASFAIController_Aliens : public ASFAIController
{
public:
	TArray< struct FsBossSkill >                       BossSkills;                                       		// 0x0654 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      PendedBossSkill;                                  		// 0x0660 (0x0004) [0x0000000000000000]              
	float                                              TotalBossSkillRate;                               		// 0x0664 (0x0004) [0x0000000000000000]              
	float                                              SkillActiveCheckTerm;                             		// 0x0668 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSkillActiveCheckTime;                         		// 0x066C (0x0004) [0x0000000000000000]              
	float                                              LastSkillFinishTime;                              		// 0x0670 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47180 ];

		return pClassPointer;
	};

	bool CanSpecialAttack ( );
	void eventTick ( float DeltaTime );
	void CommandAttack ( );
	void ActiveBossSkill ( unsigned long bSel );
	class UClass* GetSuitableBossSkill ( );
	void PendingBossSkill ( );
	void AddBossSkill ( class USFSeqAct_SetBOSS* inAction );
	bool IsTargetablePawn ( class APawn* P );
	bool IsNeutral ( );
	bool EnableChangeTarget ( class AActor* Other );
	bool IsAttackablePrimaryTarget ( class AActor* Target );
	void GetNearestPrimaryTarget ( class AActor** Best );
	bool SetToNearstPrimaryTargets ( );
	void SetMyFirstTarget ( );
};

UClass* ASFAIController_Aliens::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetBOSS
// 0x0024 (0x010C - 0x00E8)
class USFSeqAct_SetBOSS : public USequenceAction
{
public:
	struct FString                                     ReplaceMaterial;                                  		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FsBossSkill >                       Skills;                                           		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      ClearInventory : 1;                               		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                ReplaceMaterialSet;                               		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DropItemCount;                                    		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47222 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_SetBOSS::pClassPointer = NULL;

// Class SFGame.SFAIInventoryManager
// 0x0000 (0x033C - 0x033C)
class ASFAIInventoryManager : public ASFInventoryManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47234 ];

		return pClassPointer;
	};

	void PrePendingWeapon ( );
	void DeactiveBossSkill ( );
	void ReactiveSkill ( );
	bool ActiveBossSkill ( class UClass* SkillClass );
};

UClass* ASFAIInventoryManager::pClassPointer = NULL;

// Class SFGame.SFWeap_Throw
// 0x002C (0x0C90 - 0x0C64)
class ASFWeap_Throw : public ASFWeap_Projectile
{
public:
	unsigned long                                      bThrowingStart : 1;                               		// 0x0C64 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bThrowIsReady : 1;                                		// 0x0C64 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDroppableProjectile : 1;                         		// 0x0C64 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseHangFire : 1;                                 		// 0x0C64 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseTrajectorySimulation : 1;                     		// 0x0C64 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bProjectileSpawned : 1;                           		// 0x0C64 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bRepeatedWeapon : 1;                              		// 0x0C64 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	int                                                FireModeNow;                                      		// 0x0C68 (0x0004) [0x0000000000000000]              
	float                                              fThrowSafty;                                      		// 0x0C6C (0x0004) [0x0000000000000000]              
	TArray< class ASFProj_Throw* >                     TrajectoryProjectiles;                            		// 0x0C70 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            TrajectoryProjectileClasses;                      		// 0x0C7C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TrajectorySimulationDelayTime;                    		// 0x0C88 (0x0004) [0x0000000000000000]              
	float                                              PreFireStartTime;                                 		// 0x0C8C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47616 ];

		return pClassPointer;
	};

	bool CanZoomModeChange ( );
	void Reload ( );
	void eventShellOut ( );
	void CauseShellOut ( );
	void ClearShellOutTimer ( );
	int GetInventoryGroup ( class ASFPlayerReplicationInfo* SFPRI );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	class AProjectile* ProjectileDrop ( );
	void HolderDied ( );
	class AProjectile* ServerProjectileFire ( struct FVector SpawnLocation, int InAmmoCount, int InAmmoCountInMgz );
	void UpdateWeaponMeshForKillCam ( );
	void ReloadWhenActive ( );
	void ReloadNoAni ( unsigned char FireModeNum );
	bool IsExtensionPutDown ( );
	void ProjectileFireSub ( class ASFProj_Throw* SpawnedProjectile );
	float GetReloadTime ( );
	float GetDefaultLifeTime ( );
	float GetRestLifeTime ( );
	void ForceThrowB ( );
	void ShowThrowingWeapon ( unsigned long bHide, unsigned char CauseState );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	void ClientSetAmmoCount ( int InAmmoCount, int InAmmoCountMax );
	void ApplyAmmoCountOption ( int AddAmmoCount );
	void StopSimulationTrajectory ( );
	void SimulateTrajectory ( );
	class ASFProj_Throw* SetUpSimulationTrajectory ( );
	void GetTrajectoryStartLocAndDir ( struct FVector* StartLoc, struct FVector* StartDir );
	bool CanSimulationTrajectory ( );
	class ASFProj_Throw* GetTrajectoryProjectile ( );
	class UClass* GetTrajectoryProjectileClass ( );
};

UClass* ASFWeap_Throw::pClassPointer = NULL;

// Class SFGame.SFWeap_HandGrenade
// 0x0018 (0x0CA8 - 0x0C90)
class ASFWeap_HandGrenade : public ASFWeap_Throw
{
public:
	float                                              SmokeColor[ 0x6 ];                                		// 0x0C90 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47615 ];

		return pClassPointer;
	};

	void ApplyProjectileProp ( class ASFProjectile* SpawnedProjectile, struct FVector RealStartLoc );
};

UClass* ASFWeap_HandGrenade::pClassPointer = NULL;

// Class SFGame.SFAIController_Charger
// 0x0000 (0x0818 - 0x0818)
class ASFAIController_Charger : public ASFAIController_Solider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47648 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Charger::pClassPointer = NULL;

// Class SFGame.SFAIController_Collssus
// 0x0000 (0x0654 - 0x0654)
class ASFAIController_Collssus : public ASFAIController_TEST
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47652 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Collssus::pClassPointer = NULL;

// Class SFGame.SFAIController_ConvoyTarget
// 0x0004 (0x0658 - 0x0654)
class ASFAIController_ConvoyTarget : public ASFAIController
{
public:
	class ASFConvoyTargetPathNode*                     ConvoyMoveTarget;                                 		// 0x0654 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47655 ];

		return pClassPointer;
	};

	int GetMoveTargetOrderNumber ( );
	void Tick ( float DeltaTime );
	int UserInVolume ( );
	void OnReachedLastConvoyMoveTarget ( );
	bool IsLastConvoyMoveTarget ( );
	void SetNextConvoyMoveTargetFromGameInfo ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
};

UClass* ASFAIController_ConvoyTarget::pClassPointer = NULL;

// Class SFGame.SFAIController_Melee
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Melee : public ASFAIController_Aliens
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47685 ];

		return pClassPointer;
	};

	bool ShouldSprintAttack ( );
};

UClass* ASFAIController_Melee::pClassPointer = NULL;

// Class SFGame.SFAIController_Crawler
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Crawler : public ASFAIController_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47696 ];

		return pClassPointer;
	};

	bool ShouldAltAttack ( );
};

UClass* ASFAIController_Crawler::pClassPointer = NULL;

// Class SFGame.SFAIController_Tyrant
// 0x002C (0x06A0 - 0x0674)
class ASFAIController_Tyrant : public ASFAIController_Melee
{
public:
	struct FVector                                     LineCheckStartLocation;                           		// 0x0674 (0x000C) [0x0000000000000000]              
	float                                              ExtraRollingDistance;                             		// 0x0680 (0x0004) [0x0000000000000000]              
	float                                              RollingDistance;                                  		// 0x0684 (0x0004) [0x0000000000000000]              
	float                                              LastRollingAttackTime;                            		// 0x0688 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinRollingAttackCheckTime;                        		// 0x068C (0x0004) [0x0000000000000000]              
	unsigned long                                      bAngry : 1;                                       		// 0x0690 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPengingRollingAttack : 1;                        		// 0x0690 (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              fLastAltAttackTime;                               		// 0x0694 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NormalAttackCount;                                		// 0x0698 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x069C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47736 ];

		return pClassPointer;
	};

	float GetExtraRollingDistance ( );
	void SetEnemy ( class AActor* NewTarget, float fNewDist );
	void RollingAttackCommandEnd ( unsigned long bResult );
	void RollingAttackStart ( );
	void NotifyEnemyOutOfRange ( );
	bool ShouldAltAttack ( );
	void SetToAngry ( unsigned long bInAngry );
	void CommandAttack ( );
	bool CanSpecialAttack ( );
	int SelectChargeWeapon ( unsigned long bSel );
	void AddReactions ( );
	void Destroyed ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
};

UClass* ASFAIController_Tyrant::pClassPointer = NULL;

// Class SFGame.SFDmgType_CloseCombat
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_CloseCombat : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47783 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_CloseCombat::pClassPointer = NULL;

// Class SFGame.SFDmgType_Charge
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Charge : public USFDmgType_CloseCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47782 ];

		return pClassPointer;
	};

	bool IsStun ( );
};

UClass* USFDmgType_Charge::pClassPointer = NULL;

// Class SFGame.SFAIController_Hanger
// 0x0000 (0x06A0 - 0x06A0)
class ASFAIController_Hanger : public ASFAIController_Tyrant
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47785 ];

		return pClassPointer;
	};

	bool CanAttackByTrace ( class AActor* Other );
	void Celebrate ( class AActor* Target, float MinTime );
};

UClass* ASFAIController_Hanger::pClassPointer = NULL;

// Class SFGame.SFAIController_Range
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Range : public ASFAIController_Aliens
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47798 ];

		return pClassPointer;
	};

	void NotifyTargetAttackable ( );
	void TargetCloseAndVisible ( class AActor* MovedTarget, class UAIReactChannel* OrigChannel );
	void AddCloseAndVisibleReactions ( class ASFAIController* AI, float Distance );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
};

UClass* ASFAIController_Range::pClassPointer = NULL;

// Class SFGame.SFAIController_Libertine
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Libertine : public ASFAIController_Range
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47812 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Libertine::pClassPointer = NULL;

// Class SFGame.SFAIController_Rifleman
// 0x0000 (0x0818 - 0x0818)
class ASFAIController_Rifleman : public ASFAIController_Solider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47815 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Rifleman::pClassPointer = NULL;

// Class SFGame.SFAIController_Ripper
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Ripper : public ASFAIController_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47818 ];

		return pClassPointer;
	};

	int GetNewSelectedWeapon ( );
	int SelectBestWeapon ( );
};

UClass* ASFAIController_Ripper::pClassPointer = NULL;

// Class SFGame.SFAIController_Sentinel
// 0x001C (0x0670 - 0x0654)
class ASFAIController_Sentinel : public ASFAIController_TEST
{
public:
	class ASFPawn*                                     MainTarget;                                       		// 0x0654 (0x0004) [0x0000000000000000]              
	float                                              ObservingRange;                                   		// 0x0658 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ObservingAngleDot;                                		// 0x065C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RealFocalPoint;                                   		// 0x0660 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ASFPawnAI_Sentinel*                          Sentinel;                                         		// 0x066C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47828 ];

		return pClassPointer;
	};

	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	class ASFPawn* FindBestTarget ( );
	bool IsValidTargetForFire ( class ASFPawn* InTarget );
	bool IsValidTarget ( class AActor* InTarget );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
};

UClass* ASFAIController_Sentinel::pClassPointer = NULL;

// Class SFGame.SFShooterPlayerReplicationInfo
// 0x0064 (0x07B4 - 0x0750)
class ASFShooterPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	TArray< struct FInGameLevelInfo >                  Levels;                                           		// 0x0750 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FInGameLevelData >                  ARLevelData;                                      		// 0x075C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FInGameLevelData >                  SRLevelData;                                      		// 0x0768 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FInGameLevelData >                  SMGLevelData;                                     		// 0x0774 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FInGameLevelData >                  MGLevelData;                                      		// 0x0780 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FInGameLevelData >                  SGLevelData;                                      		// 0x078C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                InGameLevel;                                      		// 0x0798 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              CurrentDamagePct;                                 		// 0x079C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentSpeedPct;                                  		// 0x07A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystem*                             LevelUpEffect;                                    		// 0x07A4 (0x0004) [0x0000000000000000]              
	class ASFEmitterNoSync*                            LevelUpEffectEmiiter;                             		// 0x07A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LevelUpEffectPlayTime;                            		// 0x07AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USoundCue*                                   LevelUpSound;                                     		// 0x07B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47854 ];

		return pClassPointer;
	};

	void OnFinishLevelUpEmiiter ( class ASFEmitterNoSync* Emitter );
	void FireLevelUpEffects ( );
	void ApplyLevelData ( unsigned long bDisplayEffects );
	void SetLogInfoWeapPlayTime ( );
	void InitPawn ( class ASFPawn* Pawn );
	void CheckInGameLevelUp ( );
	void IncrementKill ( int Amt );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* ASFShooterPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFAIController_Vehicle
// 0x0000 (0x0654 - 0x0654)
class ASFAIController_Vehicle : public ASFAIController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47867 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Vehicle::pClassPointer = NULL;

// Class SFGame.SFAIController_Turret
// 0x0008 (0x065C - 0x0654)
class ASFAIController_Turret : public ASFAIController_Vehicle
{
public:
	float                                              PeriodSearchEnemy;                                		// 0x0654 (0x0004) [0x0000000000000000]              
	float                                              WarmingUpTime;                                    		// 0x0658 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47870 ];

		return pClassPointer;
	};

	void NotifyTargetAttackable ( );
	void TargetCloseAndVisible ( class AActor* MovedTarget, class UAIReactChannel* OrigChannel );
	void AddCloseAndVisibleReactions ( class ASFAIController* AI, float Distance );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void LostTarget ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* InWeapon, struct FVector projStart );
	bool IsTargetablePawn ( class APawn* P );
	bool CheckInterruptCombatTransitions ( );
	void SetMyFirstTarget ( );
	bool MoveToTarget ( class AActor* TargettoMove );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
};

UClass* ASFAIController_Turret::pClassPointer = NULL;

// Class SFGame.SFTurret_AutoBase
// 0x0044 (0x07B0 - 0x076C)
class ASFTurret_AutoBase : public ASFTurret_MiniGunBase
{
public:
	unsigned long                                      bOverrideReactionTimes : 1;                       		// 0x076C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAimDir : 1;                                   		// 0x076C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseAmmoLimit : 1;                                		// 0x076C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseHealthLimit : 1;                              		// 0x076C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroyWhenUseless : 1;                          		// 0x076C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseRandomIdleDir : 1;                            		// 0x076C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bStopWhenInactive : 1;                            		// 0x076C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPlayingCueRot : 1;                               		// 0x076C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bReserveCueRot : 1;                               		// 0x076C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPlayingCueRotNew : 1;                            		// 0x076C (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	float                                              PeriodSearchEnemy;                                		// 0x0770 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReactionDelay;                                    		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWaitingDelay;                                    		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fUseTimeLimit;                                    		// 0x077C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDetectRange;                                     		// 0x0780 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNearRange;                                       		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAdjustDamage;                                    		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAdjustFiringInterval;                            		// 0x078C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAdjustSpread;                                    		// 0x0790 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      StartupTeam;                                      		// 0x0794 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   cueRotate;                                        		// 0x0798 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   cueStop;                                          		// 0x079C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AudioComponent;                                   		// 0x07A0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UClass*                                      DriverClass;                                      		// 0x07A4 (0x0004) [0x0000000000000000]              
	class APawn*                                       AutoDriver;                                       		// 0x07A8 (0x0004) [0x0000000000000000]              
	class AController*                                 ActivateController;                               		// 0x07AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47875 ];

		return pClassPointer;
	};

	void PlayRotateSound ( unsigned long bActive );
	void UpdateRotateSound ( float fdelta );
	void NotifyPlayRotateSoundChanged ( unsigned long bActive );
	void SetActivatedPawn ( class APawn* TargetPawn );
	void OnSetActivatedPawn ( class USFSeqAct_SetActivatedPawn* Action );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, unsigned long bIgnoreDeathScore );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void NotifyEmptyAmmo ( class AWeapon* emptyWeapon );
	void SupplyGoods ( );
	bool CanAttack ( class AActor* Other );
	bool NeedResetIdleDesiredAimDir ( );
	void NotifyTeamChanged ( );
	void OnSetTeam ( class USFSeqAct_SetTeam* Action );
	void OnModeState ( class USFSeqAct_ModeState* Action );
	void Tick ( float DeltaTime );
	void DriverLeft ( );
	bool CanEnterVehicle ( class APawn* P );
	class APawn* SpawnAutoDriver ( );
	void AttachAutoDriver ( );
	float GetWeaponRange ( );
	void AddDefaultInventory ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFTurret_AutoBase::pClassPointer = NULL;

// Class SFGame.SFAIController_ShooterTurret
// 0x0000 (0x065C - 0x065C)
class ASFAIController_ShooterTurret : public ASFAIController_Turret
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47927 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_ShooterTurret::pClassPointer = NULL;

// Class SFGame.SFAIController_Shotguner
// 0x0000 (0x0818 - 0x0818)
class ASFAIController_Shotguner : public ASFAIController_Solider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47930 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Shotguner::pClassPointer = NULL;

// Class SFGame.SFAIController_Snatcher
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Snatcher : public ASFAIController_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47933 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_Snatcher::pClassPointer = NULL;

// Class SFGame.SFAIController_Sniper
// 0x0000 (0x0818 - 0x0818)
class ASFAIController_Sniper : public ASFAIController_Solider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47936 ];

		return pClassPointer;
	};

	unsigned char GetNeededNavPointType ( );
	unsigned char GetRecklessLevel ( );
};

UClass* ASFAIController_Sniper::pClassPointer = NULL;

// Class SFGame.SFAIController_SPW
// 0x0000 (0x0818 - 0x0818)
class ASFAIController_SPW : public ASFAIController_Solider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47946 ];

		return pClassPointer;
	};

	unsigned char GetRecklessLevel ( );
};

UClass* ASFAIController_SPW::pClassPointer = NULL;

// Class SFGame.SFAIController_Stunner
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Stunner : public ASFAIController_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47952 ];

		return pClassPointer;
	};

	void ForceExplo ( );
	void NotifyFinalApproach ( float fTime, struct FVector vLoc );
	void Celebrate ( class AActor* Target, float MinTime );
	void DoTaunt ( class AActor* NewViewTarget, float MinTime );
};

UClass* ASFAIController_Stunner::pClassPointer = NULL;

// Class SFGame.SFAIController_TyrantByWarriorGame
// 0x0000 (0x06A0 - 0x06A0)
class ASFAIController_TyrantByWarriorGame : public ASFAIController_Tyrant
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47965 ];

		return pClassPointer;
	};

	bool SelectEnemy ( );
	void GetNearstEnemy ( float myRecognizeRadius, unsigned long bIgnoreSquadCharge, class APawn** Best );
};

UClass* ASFAIController_TyrantByWarriorGame::pClassPointer = NULL;

// Class SFGame.SFAIController_Warrior_Libertine
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_Warrior_Libertine : public ASFAIController_Range
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 47981 ];

		return pClassPointer;
	};

	bool SelectEnemy ( );
	bool IsTargetablePawn ( class APawn* P );
	void GetNearestPrimaryTarget ( class AActor** Best );
	void GetNearestEnemy ( float myRecognizeRadius, unsigned long bIgnoreSquadCharge, class APawn** Best );
};

UClass* ASFAIController_Warrior_Libertine::pClassPointer = NULL;

// Class SFGame.SFAIController_WarriorMode
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_WarriorMode : public ASFAIController_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48000 ];

		return pClassPointer;
	};

	void RegUnreachableTarget ( class AActor* myTarget );
	void GetNearestEnemy ( float myRecognizeRadius, unsigned long bIgnoreSquadCharge, class APawn** Best );
	bool SetToNearstEnemyRange ( float Range, unsigned long bIgnoreSquadCharge );
	bool IsAttackablePrimaryTarget ( class AActor* Target );
	void GetNearestPrimaryTarget ( class AActor** Best );
	bool SetToNearstPrimaryTargets ( );
	void SetMyFirstEnemy ( );
	void AddBasePathConstraints ( );
};

UClass* ASFAIController_WarriorMode::pClassPointer = NULL;

// Class SFGame.SFAIController_WarriorCrawler
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_WarriorCrawler : public ASFAIController_WarriorMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48034 ];

		return pClassPointer;
	};

	bool ShouldAltAttack ( );
};

UClass* ASFAIController_WarriorCrawler::pClassPointer = NULL;

// Class SFGame.SFAIController_WarriorRipper
// 0x0000 (0x0674 - 0x0674)
class ASFAIController_WarriorRipper : public ASFAIController_WarriorMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48039 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_WarriorRipper::pClassPointer = NULL;

// Class SFGame.SFAIController_WormHoleBug
// 0x0004 (0x0658 - 0x0654)
class ASFAIController_WormHoleBug : public ASFAIController_TEST
{
public:
	class APawn*                                       EnemyPawn;                                        		// 0x0654 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48042 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_WormHoleBug::pClassPointer = NULL;

// Class SFGame.SFAIController_Zombie
// 0x0024 (0x0698 - 0x0674)
class ASFAIController_Zombie : public ASFAIController_Aliens
{
public:
	float                                              RoaringDistance;                                  		// 0x0674 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RoaringProbability;                               		// 0x0678 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MinWanderingSoundInterval;                        		// 0x067C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxWanderingSoundInterval;                        		// 0x0680 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastWanderingSoundTime;                           		// 0x0684 (0x0004) [0x0000000000000000]              
	float                                              SprintDisableDistance;                            		// 0x0688 (0x0004) [0x0000000000000000]              
	float                                              MinJumpDistance;                                  		// 0x068C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JumpIntervalTime;                                 		// 0x0690 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastJumpTime;                                     		// 0x0694 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48046 ];

		return pClassPointer;
	};

	bool CanAttackByTrace ( class AActor* Other );
	void CheckWanderingPlaySound ( );
	void SetRoaring ( );
	bool CheckRoaring ( );
	void UpdateRoaring ( class AActor* MovedTarget, class UAIReactChannel* OrigChannel );
	void SetJumpMoveTo ( );
	bool CheckJumpMoveTo ( );
	void NotifyEnemyOutOfRange ( );
	void AddReactionsRoaring ( class ASFAIController* AI );
	void AddReactions ( );
	unsigned char GetBattleLevel ( );
	void MoveCommandPopped ( );
	bool CanZombieSprint ( );
	bool ShouldWalk ( struct FVector IntermediatePoint, unsigned long bFinalApproach );
	void Celebrate ( class AActor* Target, float MinTime );
};

UClass* ASFAIController_Zombie::pClassPointer = NULL;

// Class SFGame.SFZombieAggroSystem
// 0x000C (0x00C0 - 0x00B4)
class USFZombieAggroSystem : public USFAggroSystem
{
public:
	TArray< class AActor* >                            ProjectileAggroList;                              		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48098 ];

		return pClassPointer;
	};

	bool eventMakeVisibleProjectileList ( );
};

UClass* USFZombieAggroSystem::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombieMelee
// 0x0000 (0x0698 - 0x0698)
class ASFAIController_ZombieMelee : public ASFAIController_Zombie
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48099 ];

		return pClassPointer;
	};

};

UClass* ASFAIController_ZombieMelee::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombieDoubleWeapon
// 0x0000 (0x0698 - 0x0698)
class ASFAIController_ZombieDoubleWeapon : public ASFAIController_ZombieMelee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48102 ];

		return pClassPointer;
	};

	bool CheckAIWeaponActive ( );
	int SelectBestWeapon ( );
	void CommandAttack ( );
	void SetEnemy ( class AActor* NewTarget, float fNewDist );
};

UClass* ASFAIController_ZombieDoubleWeapon::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombieBoomer
// 0x0000 (0x0698 - 0x0698)
class ASFAIController_ZombieBoomer : public ASFAIController_ZombieDoubleWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48113 ];

		return pClassPointer;
	};

	int GetNewSelectedWeapon ( );
	void ForceExplo ( );
	void SetRoaring ( );
};

UClass* ASFAIController_ZombieBoomer::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombieHideSeek
// 0x0014 (0x06AC - 0x0698)
class ASFAIController_ZombieHideSeek : public ASFAIController_Zombie
{
public:
	float                                              WanderingSprintRatio;                             		// 0x0698 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WanderingSprintDistanceRatio;                     		// 0x069C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ZombieName;                                       		// 0x06A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48123 ];

		return pClassPointer;
	};

	float GetWanderingSprintDistanceRatio ( unsigned long bNewSprint );
	void DeadEatZombie ( );
	void EndEatZombie ( );
	void StartEatZombie ( );
	bool ShouldWanderingSprint ( );
	void PostBeginPlay ( );
};

UClass* ASFAIController_ZombieHideSeek::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombieInvincible
// 0x0000 (0x0698 - 0x0698)
class ASFAIController_ZombieInvincible : public ASFAIController_ZombieMelee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48143 ];

		return pClassPointer;
	};

	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
};

UClass* ASFAIController_ZombieInvincible::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombiePuker
// 0x0000 (0x0698 - 0x0698)
class ASFAIController_ZombiePuker : public ASFAIController_ZombieDoubleWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48150 ];

		return pClassPointer;
	};

	int GetNewSelectedWeapon ( );
};

UClass* ASFAIController_ZombiePuker::pClassPointer = NULL;

// Class SFGame.SFAIController_ZombieTanker
// 0x0000 (0x06A0 - 0x06A0)
class ASFAIController_ZombieTanker : public ASFAIController_Tyrant
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48155 ];

		return pClassPointer;
	};

	bool CanAttackByTrace ( class AActor* Other );
	void Celebrate ( class AActor* Target, float MinTime );
};

UClass* ASFAIController_ZombieTanker::pClassPointer = NULL;

// Class SFGame.SFWeap_Exigency
// 0x0000 (0x0CE4 - 0x0CE4)
class ASFWeap_Exigency : public ASFWeap_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48182 ];

		return pClassPointer;
	};

	class ASFPawn_Player* GetPlayerPawn ( );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	class UAnimSet* GetThirdWeaponAnimSet ( );
	class UAnimSet* GetThirdPawnWeapProfileAnimSet ( unsigned char Gender );
	class UAnimSet* GetThirdPawnAnimSet ( unsigned char Gender );
	bool IsReloadPossible ( );
	bool CanQueueing ( );
	int GetInventoryGroup ( class ASFPlayerReplicationInfo* SFPRI );
	void SetIgnoreEquipUpAni ( unsigned long bSet );
	bool CanUseMissionWeapon ( );
	bool CanWeaponPutDown ( );
	bool CanExigencyAttack ( );
	void StartFire ( unsigned char FireModeNum );
	unsigned char BestMode ( );
};

UClass* ASFWeap_Exigency::pClassPointer = NULL;

// Class SFGame.SFWeap_Projectile_exigency
// 0x0000 (0x0C64 - 0x0C64)
class ASFWeap_Projectile_exigency : public ASFWeap_Projectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48707 ];

		return pClassPointer;
	};

	void ExigencyAttackTopView ( );
	bool IsSetCurrentWhenGiven ( );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	class UAnimSet* GetThirdWeaponAnimSet ( );
	class UAnimSet* GetThirdPawnWeapProfileAnimSet ( unsigned char Gender );
	class UAnimSet* GetThirdPawnAnimSet ( unsigned char Gender );
	void SetIgnoreEquipUpAni ( unsigned long bSet );
	bool CanUseMissionWeapon ( );
	bool CanWeaponPutDown ( );
	bool CanExigencyAttack ( );
	void StartFire ( unsigned char FireModeNum );
	bool IsReloadPossible ( );
	bool CanQueueing ( );
	unsigned char BestMode ( );
	int GetInventoryGroup ( class ASFPlayerReplicationInfo* SFPRI );
};

UClass* ASFWeap_Projectile_exigency::pClassPointer = NULL;

// Class SFGame.SFAIKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFAIKillDeathMessage : public USFKillDeathMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48793 ];

		return pClassPointer;
	};

	void ProcessAssistLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI1, class ASFPlayerReplicationInfo* PRI2, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
	void ProcessDeadLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI2, int KillType, class UObject* OptionalObject );
	void ProcessKillLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, int WeaponItemID, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
};

UClass* USFAIKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFUIHelper
// 0x02C8 (0x0304 - 0x003C)
class USFUIHelper : public UObject
{
public:
	struct FString                                     LocalizedMinute;                                  		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedSecond;                                  		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanHomeAM;                                       		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanHomePM;                                       		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Emblem_Item_Name;                             		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Remaining_DBNO_Time;                          		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Remaining_Respawn_Time;                       		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Exp_ExpRatio;                                 		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_BuffNotice;                                   		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_BuffOn;                                       		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_BuffOff;                                      		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_BuffFailed;                                   		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Buff_Ripper;                                      		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Buff_Stunner;                                     		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Buff_Libertine;                                   		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemCountMessage;                                 		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIPINFO_ADDSP;                                    		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIPINFO_ADDEXP;                                   		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemUseTimeHourString;                            		// 0x0114 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemUseTimeDayString;                             		// 0x0120 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemUseTimeHourHtmlString;                        		// 0x012C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemUseTimeDayHtmlString;                         		// 0x0138 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemRemainTimeMarkHtmlString;                     		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LogoImagePath;                                    		// 0x0150 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            ChatNotColorCodeNameList;                         		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           LocalizedTime24List;                              		// 0x0168 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultClanMark;                                  		// 0x0174 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoClanMark;                                       		// 0x0180 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TestClanMark;                                     		// 0x018C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultLanguageFilePathList;                      		// 0x0198 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultAllInOneFolderPathList;                    		// 0x01A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           TeamMarkTitleFilePathList;                        		// 0x01B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           BeastModeMarkTitleFilePathList;                   		// 0x01BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsViewTeamMarkInfo >                ViewTeamMarkClassNameList;                        		// 0x01C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FRewardImgInfo >                    VipImageList;                                     		// 0x01D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VipAniImage;                                      		// 0x01E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FRewardImgInfo >                    MonthlyRewardImageList;                           		// 0x01EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ImageListHtmlFormat;                              		// 0x01F8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsClanMarkIDInfo >                  ClanMarkIDInfoArray;                              		// 0x0204 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultUIEmblemID;                                		// 0x0210 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSItemImageTable >                  ItemImageTable;                                   		// 0x021C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           SpectatorDecoColorArray;                          		// 0x0228 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RewardSPImage;                                    		// 0x0234 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RewardTPImage;                                    		// 0x0240 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RewardLPImage;                                    		// 0x024C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RewardCASHImage;                                  		// 0x0258 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     HUDTeamColor[ 0xA ];                              		// 0x0264 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     VariationShapeIncrease;                           		// 0x02DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VariationShapeDecrease;                           		// 0x02E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     VariationShapeEqual;                              		// 0x02F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bDeclareButton : 1;                               		// 0x0300 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48952 ];

		return pClassPointer;
	};

	struct FString GetRankVariationShapeText ( int CurrentData, int PrevData );
	void GetTransformVipInfo ( struct FString SP, struct FString Exp, struct FString* strSP, struct FString* strExp );
	struct FString GetUIBuffBonusDesc ( unsigned char BonusType, float BonusValue );
	struct FString GetVipAniImage ( );
	int GetVipRollingTime ( int Grade );
	int GetMonthlyRewardRollingTime ( int Grade );
	struct FString GetMonthlyRewardNameTagImg ( int Grade );
	struct FString GetMonthlyRewardImageName ( int Grade, unsigned long IsHtml );
	struct FString GetVipNameTagImg ( int Grade );
	struct FString GetVipImageName ( int Grade, unsigned long IsHtml );
	struct FString GetModeLevelText ( int ModeLevel );
	bool IsRewardText ( struct FString RewardType );
	struct FString GetMatchResultPrefix ( struct FString game_mode_name );
	struct FString GetItemUIIDByClassName ( struct FString weapon_class );
	struct FString GetBuffName ( unsigned char buff_type );
	struct FString GetNoticeBuffStateMesage ( unsigned char buff_type, unsigned char buff_state );
	struct FString GetAlienAttackType ( unsigned char attack_type );
	struct FString GetAlienCombatType ( unsigned char combat_type );
	struct FString GetAlienUIID ( unsigned char alien_type );
	bool GetAlienUIInfo ( struct FSSpawnableAlienInfo AlienInfo, struct FString* outUIID, struct FString* outUIName, struct FString* outCombatType, TArray< struct FString >* outAttackTypeList );
	struct FString GetDefaultUIEmblemID ( );
	struct FString GetGainExpText ( int Exp, int exp_ratio );
	struct FString GetUIRemainingRespawnTime ( float remaining_time, unsigned long is_in_DBNO );
	struct FString GetTeamColorCode ( int TeamIndex );
	struct FString GetUITeamColor ( int team_index );
	int GetWeaponTypeToEnum ( struct FString item_type );
	struct FString GetWeaponTypeToString ( unsigned char item_type );
	struct FString GetEmblemItemName ( int emblem_id );
	struct FString GetUIEmblemID ( int EmblemID, struct FSEmblemInfo EmblemInfo );
	bool GetEmblemInfo ( int emblem_id, struct FSEmblemInfo* emblem_info );
	struct FString GetTransformClanMarkPath ( struct FString ClanMark, unsigned char Size, unsigned long bJoinClan );
	struct FString GetTransformMarkTitle ( unsigned char Team, unsigned char Size, struct FString Language, struct FString strCurrentModeClassName );
	int GetViewTeamMarkIndex ( struct FString strCurrentModeClassName );
	struct FString GetFormatRegDate ( struct FString Regdate, struct FString Laguage, int DateType );
	struct FString GetLuckyPointRatioNumber ( float fLuckyPoint );
	int GetClampedByMaxValue ( int InValue, int* OutMaxVlaue );
	bool IsColorCodeNameChatMsg ( struct FSChatMsgInfo ChatMsgInfo );
	struct FString GetThunderRunFormatTime ( int Sec );
	struct FString GetStringVipCarePoint ( float Value, int per );
	struct FString GetStringPointNumber ( float Number, int PointCount );
	struct FString GetStringNumber ( int nNumber, int Precision );
	struct FString GetCommaNumber ( struct FString strNumber );
	struct FString GetTimeMinuteFormat ( int Second );
	void ASInvokeNoPram ( class UGFxObject* Movie, struct FString InvokeText );
	void AddAsValue_Bool ( unsigned long Value, TArray< struct FASValue >* args );
	void AddAsValue_String ( struct FString Value, TArray< struct FASValue >* args );
	void AddAsValue_Int ( int Value, TArray< struct FASValue >* args );
	bool IsFront ( float Z );
	float GetDistanceBetweenActor ( class AActor* View, class AActor* Other );
	struct FString GetLogoImagePatch ( );
};

UClass* USFUIHelper::pClassPointer = NULL;

// Class SFGame.SFAimKillCountEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFAimKillCountEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48969 ];

		return pClassPointer;
	};

};

UClass* USFAimKillCountEventData::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_Airdrop
// 0x0038 (0x02BC - 0x0284)
class ASFDroppedPickup_Airdrop : public ASFDroppedPickup
{
public:
	int                                                UseCountMax;                                      		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BeingTime;                                        		// 0x0288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DropHeight;                                       		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DropDelay;                                        		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DropDamage;                                       		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DamageRadius;                                     		// 0x0298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     StartVelocity;                                    		// 0x029C (0x000C) [0x0000000000000000]              
	int                                                UsedCount;                                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLanded : 1;                                      		// 0x02AC (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	class UStaticMeshComponent*                        Mesh;                                             		// 0x02B0 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x02B4 (0x0004) [0x0000000000000000]              
	class ASFTrigger_Use*                              LinkedTrigger;                                    		// 0x02B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 48986 ];

		return pClassPointer;
	};

	void DrawPreview ( unsigned long bShow );
	void LandedDamage ( );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool ApplyTo ( class APawn* User );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFDroppedPickup_Airdrop::pClassPointer = NULL;

// Class SFGame.SFTrigger_Airdrop
// 0x0000 (0x03B8 - 0x03B8)
class ASFTrigger_Airdrop : public ASFTrigger_PvE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49039 ];

		return pClassPointer;
	};

	void UpdateUntouchingPawns ( class APawn* User );
	void UpdateTouchingPawns ( class APawn* User );
};

UClass* ASFTrigger_Airdrop::pClassPointer = NULL;

// Class SFGame.SFAirDrop_AmmoBox
// 0x0000 (0x02BC - 0x02BC)
class ASFAirDrop_AmmoBox : public ASFDroppedPickup_Airdrop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49048 ];

		return pClassPointer;
	};

	bool ApplyTo ( class APawn* AppliedPawn );
};

UClass* ASFAirDrop_AmmoBox::pClassPointer = NULL;

// Class SFGame.SFAirDrop_HealthBox
// 0x0000 (0x02BC - 0x02BC)
class ASFAirDrop_HealthBox : public ASFDroppedPickup_Airdrop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49058 ];

		return pClassPointer;
	};

	bool ApplyTo ( class APawn* AppliedPawn );
};

UClass* ASFAirDrop_HealthBox::pClassPointer = NULL;

// Class SFGame.SFHardcoreOption
// 0x0014 (0x0050 - 0x003C)
class USFHardcoreOption : public UObject
{
public:
	unsigned long                                      bUseEnemyCharacter : 1;                           		// 0x003C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUseArmBand : 1;                                  		// 0x003C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bHideCrosshair : 1;                               		// 0x003C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bHideHitIndicator : 1;                            		// 0x003C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	float                                              DamageModifier;                                   		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FPawnOutlineInfo >                  arrPawnOutlineInfo;                               		// 0x0044 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49112 ];

		return pClassPointer;
	};

	bool GetPawnOutlineInfo ( unsigned char PawnOutlineType, struct FPawnOutlineInfo* NewOutlineInfo );
};

UClass* USFHardcoreOption::pClassPointer = NULL;

// Class SFGame.SFEmitterNoSyncSpawnable
// 0x0000 (0x0260 - 0x0260)
class ASFEmitterNoSyncSpawnable : public ASFEmitterNoSync
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49195 ];

		return pClassPointer;
	};

	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
};

UClass* ASFEmitterNoSyncSpawnable::pClassPointer = NULL;

// Class SFGame.SFTeamDeathGame
// 0x0000 (0x0844 - 0x0844)
class ASFTeamDeathGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49267 ];

		return pClassPointer;
	};

};

UClass* ASFTeamDeathGame::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Mission
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_Mission : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49359 ];

		return pClassPointer;
	};

	int GetTeamChangeEventIndex ( );
	int GetSingleMatchEventIndex ( );
	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_Mission::pClassPointer = NULL;

// Class SFGame.SFTournamentResultWriter
// 0x0018 (0x0170 - 0x0158)
class USFTournamentResultWriter : public USFTournamentResultWriterBase
{
public:
	TArray< struct FString >                           PlayerKillDeathLog;                               		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PlayerStringLog;                                  		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49459 ];

		return pClassPointer;
	};

	void RoundEnd ( int Round );
	void release ( );
	void Init ( );
	void eventAddTournamentLogPlayerStringEvent ( int EventID, struct FString Player, struct FString EventString );
	void eventAddLogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void eventAddTournamentLogPlayerKillDeath ( int EventID, int KillType, struct FString Killer, struct FString WeaponName, struct FString Dead );
	void AddPlayerScore ( class ASFPlayerReplicationInfo* SFPRI );
	void WritePlayerMission ( );
	void WritePlayerKillDeath ( );
	void WritePlayerScore ( );
	void WriteTeamScore ( );
};

UClass* USFTournamentResultWriter::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_InGame
// 0x0060 (0x00EC - 0x008C)
class USFUIDataStore_InGame : public USFUIDataStoreBase
{
public:
	unsigned long                                      bUsingPickupWeapon : 1;                           		// 0x008C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPickupWeaponUsePenalty : 1;                      		// 0x008C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bMapLoaded : 1;                                   		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                PickupWeaponID;                                   		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PickupWeaponItemIDTable[ 0xE ];                   		// 0x0094 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponSetIndexInGame;                             		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                NextWeaponSetIndexInGame;                         		// 0x00D0 (0x0004) [0x0000000000000000]              
	struct FString                                     NewHostPlayerName;                                		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OldHostPlayerName;                                		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49468 ];

		return pClassPointer;
	};

	void OnGameStarted ( );
	void ApplyNextWeaponSet ( );
	void SaveWeaponSetInDataStore ( int CurrentWeapSetIndex, int NextWeapSetIndex );
	int GetNextWeaponSetIndex ( );
	int GetWeaponSetIndex ( );
	void InitWeaponSetIndexFromLobby ( int NewIndex );
	void ResetPickupWeaponProperties ( );
	void SavePickupWeaponProperties ( class ASFWeapon* PickUpWeapon );
	struct FString GetOldHostPlayerName ( );
	void SetHostPlayerName ( struct FString InHostPlayerName );
	void ReturnToLobby ( );
	void RoundOver ( );
	void Reset ( );
};

UClass* USFUIDataStore_InGame::pClassPointer = NULL;

// Class SFGame.SFLogoutInterface
// 0x0000 (0x003C - 0x003C)
class USFLogoutInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49597 ];

		return pClassPointer;
	};

	void Logout ( int PlayerID );
};

UClass* USFLogoutInterface::pClassPointer = NULL;

// Class SFGame.SFGameScore
// 0x0084 (0x00C0 - 0x003C)
class USFGameScore : public UObject
{
public:
	TArray< struct FSLadderPointBasis >                LadderPointBasisList;                             		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FSClanPointBasis                            ClanPointBasis;                                   		// 0x0048 (0x0014) [0x0000000000004000]              ( CPF_Config )
	int                                                DeductionClanPoint;                               		// 0x005C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct USFGameScore_FSpawnBasis                    PawnBasis;                                        		// 0x0060 (0x0014) [0x0000000000004000]              ( CPF_Config )
	int                                                SCORE_TimeOver;                                   		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WinningTeamMemberScore;                           		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DefeatingTeamMemberScore;                         		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NormalKillScore;                                  		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpecialKillScore;                                 		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ContinuousKillScore;                              		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RareKillScore;                                    		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxNormalKillScore;                               		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxSpecialKillScore;                              		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxContinuousKillScore;                           		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxRareKillScore;                                 		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      GlowKillScore;                                    		// 0x00A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      GlowTeamKillScore;                                		// 0x00AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                CompareValue;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              TeamRewardScorerBonusRatio;                       		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49709 ];

		return pClassPointer;
	};

	int GetGlowTeamKillScore ( int KillType );
	int GetGlowKillScore ( int KillType );
	float GetPawnBasisCriticalDistance ( unsigned char PawnType );
	bool IsTeamRewardGameScore ( unsigned char AIType );
	float GetModeBasisGameScore ( int LadderType, unsigned char AIType, int* RewardModeMoney, int* RewardModeExp, unsigned char* RewardBuff );
	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScoreForConvoyanceGame ( struct FName MissionName, int AmountMoney, float PushTime, unsigned char* missionLogType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
	int GetLadderPoint ( int Level, int Kills, int Deaths );
	int GetDeductionClanPoint ( );
	float GetClanPointRate ( int BasisIndex );
	int GetLadderBasisGameScore ( int BasisIndex, int LadderDiff, int* BonusPoint );
	struct FSLadderPointBasis GetActualLadderPointBasis ( );
};

UClass* USFGameScore::pClassPointer = NULL;

// Class SFGame.SFCCTV
// 0x0018 (0x0054 - 0x003C)
class USFCCTV : public UObject
{
public:
	TArray< class USFCCTV_MapInfo* >                   AllCCTVInfos;                                     		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFCCTV_MapInfo*                             CCTVMapInfo;                                      		// 0x0048 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CCTVCameraTag;                                    		// 0x004C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 49823 ];

		return pClassPointer;
	};

	void SetTopViewCamLocation ( );
	bool GetCCTVInfo ( unsigned char ViewMode, int Index, struct FVector* OutLocation, struct FRotator* OutRotation );
	void SetCCTVInfo ( unsigned char ViewMode, int Index, struct FVector InLocation, struct FRotator InRotation );
	void GetViewTargetActorList ( TArray< class AActor* >* ViewTargetActorList );
	void UpdateViewTargetActor ( );
	void RegisterCCTVInfos ( struct FString MapName );
};

UClass* USFCCTV::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_RealTimeEvent
// 0x00C4 (0x0150 - 0x008C)
class USFUIDataStore_RealTimeEvent : public USFUIDataStoreBase
{
public:
	TArray< struct FSRealTimeEvent >                   RealTimeEventArray;                               		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSFeverTimeEvent                            FeverTimeEvent;                                   		// 0x0098 (0x008C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvPromoEventCount;                              		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                RecvMyPromoEventCount;                            		// 0x0128 (0x0004) [0x0000000000000000]              
	TArray< struct FSPromotionEvent >                  PromotionEventArray;                              		// 0x012C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSPromotionEvent >                  MyPromotionEventArray;                            		// 0x0138 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSPromotionEvent >                  PrevMyPromotionEventArray;                        		// 0x0144 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50097 ];

		return pClassPointer;
	};

	bool IsAttendanceNoReward ( struct FString RewardType, struct FString RewardText );
	int GetDefaultSelectedPromotionID ( );
	bool GetPromotionEventReward ( int PromotionID, TArray< struct FSRecvReward >* OutRecvRewardArray );
	bool GetPromotionEventStep ( int PromotionID, TArray< struct FString >* OutStepArray );
	struct FString GetPromotionEventSpecialText ( int PromoID );
	struct FString GetPromotionEventExplain ( int PromoID );
	struct FString GetPromotionEventTitle ( int PromoID );
	void GetChildPromotionEventArray ( int PromoID, TArray< struct FSPromotionEvent >* OutArray );
	bool IsChildPromoEvent ( int PromoID );
	bool GetPromoEventProgress ( int PromoID, TArray< int >* OutArray, int* OutCurPercent );
	unsigned char GetEventProgressType ( int PromoID );
	bool IsAllEventDeactiveDate ( );
	bool IsEventCompleted ( int PromotionID );
	bool IsAllReceivedPromotionEvent ( );
	void PKT_GetPromotionEventInfo_REQ_Transaction ( class UPacket* recvPacket );
	void PKT_GetPromotionEventInfo_REQ_OK ( class UPacket* recvPacket );
	void UpdatePrevMyPromotionEvent ( );
	bool IsUpdatedMyPromotionEvent ( );
	bool IsAllReceivedMyPromotionEvent ( );
	void PKT_GetMyPromotionEvent_REQ_Transaction ( class UPacket* recvPacket );
	void PKT_GetMyPromotionEvent_REQ_OK ( class UPacket* recvPacket );
	void ProcessScoreEvent ( int InModeID, int InMapID, int* OutEXP, int* OutSP );
	bool GetRealTimeEventDataByType ( struct FName InEventType, int EventCondition1, struct FSRealTimeEvent* currData );
	struct FSFeverTimeEvent GetCurrentFeverTimeEventInfo ( );
	void EndFeverTimeEvent ( struct FSFeverTimeEvent FeverTime );
	void StartFeverTimeEvent ( struct FSFeverTimeEvent FeverTime );
	void RemoveRealTimeEvent ( struct FSRealTimeEvent NewRealTimeEvent );
	void AddRealTimeEvent ( struct FSRealTimeEvent NewRealTimeEvent );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_RealTimeEvent::pClassPointer = NULL;

// Class SFGame.SFTDGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFTDGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50106 ];

		return pClassPointer;
	};

};

UClass* ASFTDGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFAITDMGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFAITDMGameReplicationInfo : public ASFTDGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50108 ];

		return pClassPointer;
	};

	bool CouldSendWeaponTime ( );
	bool CouldSendWeaponLog ( );
	bool IsDefaultMeshUseAILevel ( );
	void MatchOverDediLog ( class USFOnlineSubsystemPCDedi* SFOSPCDedi, struct FSFGameLog GameLog, struct FString UniqueKey );
	void MatchOverLog ( class USFOnlineSubsystemPC* SFOSPC, struct FSFGameLog GameLog );
	void GetTeamLog ( int TeamNum, struct FsTeamScore* TeamScore );
	void SetAdditionalGameLog ( TArray< struct FAdditionalModeResult >* LogList );
};

UClass* ASFAITDMGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFAISniperTDMGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFAISniperTDMGameReplicationInfo : public ASFAITDMGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50135 ];

		return pClassPointer;
	};

	bool CouldSendWeaponLog ( );
};

UClass* ASFAISniperTDMGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFInGameKickState
// 0x0044 (0x0268 - 0x0224)
class ASFInGameKickState : public AInfo
{
public:
	int                                                Assentient;                                       		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                Objection;                                        		// 0x0228 (0x0004) [0x0000000000000000]              
	int                                                BlankBallot;                                      		// 0x022C (0x0004) [0x0000000000000000]              
	int                                                TotalBallot;                                      		// 0x0230 (0x0004) [0x0000000000000000]              
	int                                                ValideBallot;                                     		// 0x0234 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           ResultStrig;                                      		// 0x0238 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultResultString;                              		// 0x0244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteWithYouMessage;                               		// 0x0250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsVoter >                           Voters;                                           		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50210 ];

		return pClassPointer;
	};

	int MakeVoterList ( int NewTargetPID, TArray< struct FsVoter >* newVoters );
	void MatchendVoteFail ( );
	struct FString GetVoteWithYouMessage ( struct FString CodeName );
	struct FString GetResultString ( unsigned char res, struct FString ProposerName, struct FString TargetName );
	void OnClientExitGame ( int ExitPlayerID );
	void ResetVote ( );
	void AssembleVote ( );
	void UpdatePoll ( );
	bool VoteToKick ( class ASFPlayerReplicationInfo* ProposerPRI, unsigned char VoteState );
	void ActivatedInGameKick ( );
	unsigned char StartVote ( );
	void InitKickData ( );
	void eventPostBeginPlay ( );
};

UClass* ASFInGameKickState::pClassPointer = NULL;

// Class SFGame.SFGameMessage
// 0x0008 (0x0044 - 0x003C)
class USFGameMessage : public UObject
{
public:
	class UClass*                                      AnnouncerMsgClass;                                		// 0x003C (0x0004) [0x0000000000000000]              
	class UClass*                                      KillDeathMsgClass;                                		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50250 ];

		return pClassPointer;
	};

	void AddHUDAIChatMessageTo ( class ASFPlayerController* Target, unsigned char Type, struct FString msg );
	void AddHUdChatMessage ( unsigned char Type, struct FString msg );
	void UnRegisterMessage ( int MessageIndex, unsigned char TeamIndex, unsigned char MessageType );
	void RegisterMessage ( struct FString LocalizedMessage, float MessageLifeTime, int MessageIndex, unsigned char TeamIndex, unsigned char MessageType );
	void BroadCastKillDeathMessage ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, int WeaponID, int LastKillType, class UObject* DamageType );
	void BroadcastAnnouncer ( struct FName EventName, class ASFPlayerReplicationInfo* PRI, int Index, unsigned long bCheckMatchInProgress, unsigned char TeamIndex, unsigned long bPlayVoice );
	void Init ( struct FString AnnouncerMsg, struct FString KillDeathMsg );
};

UClass* USFGameMessage::pClassPointer = NULL;

// Class SFGame.SFEntryGame
// 0x0030 (0x0874 - 0x0844)
class ASFEntryGame : public ASFGameInfo
{
public:
	TArray< class ASFCustomPreview* >                  Previews;                                         		// 0x0844 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PreviewNames;                                     		// 0x0850 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ShowingPreviewIdx;                                		// 0x085C (0x0004) [0x0000000000000000]              
	class ASFCustomWeaponPreview*                      PreviewCamoWeapon;                                		// 0x0860 (0x0004) [0x0000000000000000]              
	struct FString                                     PreviewCamoWeaponName;                            		// 0x0864 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DbgPreviewCount;                                  		// 0x0870 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50367 ];

		return pClassPointer;
	};

	void SetPlayerFunctionalItemList ( class ASFPlayerController** PC );
	bool ChangeTeam ( class AController* Other, int num, unsigned long bNewTeam );
	bool CheckMaxLives ( class APlayerReplicationInfo* LastDeath );
	void Logout ( class AController* Exiting );
	void StartMatch ( );
	void CheckGRI ( );
	void SetViewTarget ( unsigned char PreviewType );
	void ShowPreview ( unsigned char PreviewType );
	void ClearCustomPreview ( );
	void InitCustomPreview ( unsigned char PreviewType );
	void ShowCamoWeaponPreview ( unsigned long bShow );
	void ClearCamoWeaponPreview ( );
	void InitCamoWeapon ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class ASFCustomPreview* GetCustomPreview ( unsigned char PreviewType );
	class ASFCustomPreview* GetCurrCustomPreview ( );
	int GetCurrCustomPreviewIdx ( );
	class ASFCustomWeaponPreview* GetCamoWeaponPreview ( );
	void eventDestroyed ( );
	void InitDediGameServerConnection ( struct FString Options );
	void ReleaseTournamentResultWriter ( );
	void ReleaseGamePlayEventsWriter ( );
	void InitTournamentResultWriter ( );
	void InitGamePlayEventsWriter ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
};

UClass* ASFEntryGame::pClassPointer = NULL;

// Class SFGame.SFBuffInfo
// 0x0AE0 (0x0B1C - 0x003C)
class USFBuffInfo : public UObject
{
public:
	struct FSBuffInfo                                  BuffList[ 0x12 ];                                 		// 0x003C (0x0AB0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSGameClanBuffInfo >                ClanBuffList;                                     		// 0x0AEC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BuffStateMessage_Activated;                       		// 0x0AF8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuffStateMessage_Deactivated;                     		// 0x0B04 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuffStateMessage_Failed;                          		// 0x0B10 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50495 ];

		return pClassPointer;
	};

	void GetBuffBonusInfo ( unsigned char BuffType, TArray< struct FSBuffBonusInfo >* BuffBonusInfoList );
	void GetBuffIconText ( unsigned char BuffType, float Value, struct FString* BuffIconText );
	void GetBuffIconImage ( unsigned char BuffType, struct FString* BuffIconImage, struct FString* BuffIconImageSetIndex, struct FString* BuffIconText );
	struct FString GetBuffStateMessage ( unsigned char BuffType, unsigned char BuffState );
	bool IsPrintBuffStateMessage ( unsigned char BuffType, unsigned long PawnTearOff );
	bool GetBuffTexts ( unsigned char BuffType, struct FString* Title, struct FString* Description );
	bool IsBuffEffectIgnoreCullDistance ( unsigned char BuffType );
	float GetBuffEffectDuration ( unsigned char BuffType );
	float GetBuffDuration ( unsigned char BuffType );
	bool GetBuffInfo ( unsigned char BuffType, struct FSBuffInfo* BuffInfo );
};

UClass* USFBuffInfo::pClassPointer = NULL;

// Class SFGame.SFUIDataProvider_BeginnerModeInfo
// 0x0000 (0x0158 - 0x0158)
class USFUIDataProvider_BeginnerModeInfo : public USFUIDataProvider_ModeInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50638 ];

		return pClassPointer;
	};

};

UClass* USFUIDataProvider_BeginnerModeInfo::pClassPointer = NULL;

// Class SFGame.SFUIDataProvider_TrainingModeInfo
// 0x0000 (0x0158 - 0x0158)
class USFUIDataProvider_TrainingModeInfo : public USFUIDataProvider_ModeInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50639 ];

		return pClassPointer;
	};

};

UClass* USFUIDataProvider_TrainingModeInfo::pClassPointer = NULL;

// Class SFGame.SFUIDataProvider_TutorialModeInfo
// 0x0000 (0x0158 - 0x0158)
class USFUIDataProvider_TutorialModeInfo : public USFUIDataProvider_ModeInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50640 ];

		return pClassPointer;
	};

};

UClass* USFUIDataProvider_TutorialModeInfo::pClassPointer = NULL;

// Class SFGame.SFChangePlayerTeamInterface
// 0x0000 (0x003C - 0x003C)
class USFChangePlayerTeamInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50962 ];

		return pClassPointer;
	};

	void ChangePlayerTeam ( );
};

UClass* USFChangePlayerTeamInterface::pClassPointer = NULL;

// Class SFGame.SFDedicatedDataLog
// 0x0000 (0x003C - 0x003C)
class USFDedicatedDataLog : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50981 ];

		return pClassPointer;
	};

	void SetDedicatePlayerLogData ( unsigned char logType, int nValue, int WeapSetIndex, struct FSFPlayerLog* DedicatePlayerLog );
};

UClass* USFDedicatedDataLog::pClassPointer = NULL;

// Class SFGame.SFDedicatedDataPlayerLog
// 0x0000 (0x003C - 0x003C)
class USFDedicatedDataPlayerLog : public USFDedicatedDataLog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 50980 ];

		return pClassPointer;
	};

	void SetDedicatePlayerScoreLog ( class ASFPlayerReplicationInfo* SFPRI );
	void SetDedicateInfoLastRoundLog ( class ASFGameReplicationInfo* SFGRI, class ASFPlayerReplicationInfo* SFPRI, int InGamePlayer );
	void SetDedicatePlayingRoundLog ( class AWorldInfo* WI, class ASFGameReplicationInfo* SFGRI );
	void SetDedicateWeaponPlayingLog ( unsigned char logType, class ASFPlayerController* SFPC );
	void SetDedicateHitInfoLog ( unsigned char HitBody, class UClass* dmgType, struct FSFPlayerLog* DedicatePlayerLog );
};

UClass* USFDedicatedDataPlayerLog::pClassPointer = NULL;

// Class SFGame.SFDmgType_Bullet
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Bullet : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51111 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Bullet::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ChangeAIWave
// 0x0004 (0x00F8 - 0x00F4)
class USFSeqAct_ChangeAIWave : public USFSeqAct_SFGameInfo
{
public:
	int                                                ExplicitWaveIndex;                                		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51340 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_ChangeAIWave::pClassPointer = NULL;

// Class SFGame.SFSeqAct_CameraScore
// 0x0008 (0x00FC - 0x00F4)
class USFSeqAct_CameraScore : public USFSeqAct_SFGameInfo
{
public:
	class ACameraActor*                                Cam;                                              		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraScore;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51445 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_CameraScore::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetViewTarget
// 0x0008 (0x00FC - 0x00F4)
class USFSeqAct_SetViewTarget : public USFSeqAct_SFGameInfo
{
public:
	class ACameraActor*                                Cam;                                              		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChangeViewTargetDelay;                            		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51452 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_SetViewTarget::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AllowVictimType
// 0x0008 (0x00FC - 0x00F4)
class USFSeqAct_AllowVictimType : public USFSeqAct_SFGameInfo
{
public:
	float                                              fUseFriendlyFireDamage;                           		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAllowSelfInjury;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51457 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AllowVictimType::pClassPointer = NULL;

// Class SFGame.SFSeqAct_WakeRigidBody
// 0x0000 (0x00F4 - 0x00F4)
class USFSeqAct_WakeRigidBody : public USFSeqAct_SFGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51462 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_WakeRigidBody::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetInfiniteAmmo
// 0x001C (0x0110 - 0x00F4)
class USFSeqAct_SetInfiniteAmmo : public USFSeqAct_SFGameInfo
{
public:
	unsigned long                                      bInfiniteAmmo : 1;                                		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInfiniteMagazine : 1;                            		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< unsigned char >                            InfiniteAmmoWeaponGroup;                          		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            InfiniteMagazineWeaponGroup;                      		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51466 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_SetInfiniteAmmo::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetWeaponAmmo
// 0x000C (0x0100 - 0x00F4)
class USFSeqAct_SetWeaponAmmo : public USFSeqAct_SFGameInfo
{
public:
	TArray< struct FWeaponAmmo >                       AmmoInfo;                                         		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51473 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetWeaponAmmo::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetIntermissionCutScene
// 0x0004 (0x00F8 - 0x00F4)
class USFSeqAct_SetIntermissionCutScene : public USFSeqAct_SFGameInfo
{
public:
	int                                                Index;                                            		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51478 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetIntermissionCutScene::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_Magazine
// 0x0000 (0x0284 - 0x0284)
class ASFDroppedPickup_Magazine : public ASFDroppedPickup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51482 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFDroppedPickup_Magazine::pClassPointer = NULL;

// Class SFGame.SFSeqAct_BroadcastAnnouncer
// 0x000D (0x0101 - 0x00F4)
class USFSeqAct_BroadcastAnnouncer : public USFSeqAct_SFGameInfo
{
public:
	struct FName                                       MissionName;                                      		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckMatchInProgressMessage : 1;                 		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      ActiveTeamIndex;                                  		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51503 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_BroadcastAnnouncer::pClassPointer = NULL;

// Class SFGame.SFSeqAct_EndGame
// 0x0010 (0x0104 - 0x00F4)
class USFSeqAct_EndGame : public USFSeqAct_SFGameInfo
{
public:
	struct FString                                     MissionName;                                      		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCanUseInTrainingGame : 1;                        		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51517 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_EndGame::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ScoreUp
// 0x001C (0x0110 - 0x00F4)
class USFSeqAct_ScoreUp : public USFSeqAct_SFGameInfo
{
public:
	float                                              Score;                                            		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           HitTargets;                                       		// 0x00F8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           HitLocations;                                     		// 0x0104 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51525 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_ScoreUp::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SHAreaIndex
// 0x0008 (0x00FC - 0x00F4)
class USFSeqAct_SHAreaIndex : public USFSeqAct_SFGameInfo
{
public:
	unsigned char                                      AreaIndex;                                        		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51529 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_SHAreaIndex::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AreaIndex
// 0x0008 (0x00FC - 0x00F4)
class USFSeqAct_AreaIndex : public USFSeqAct_SFGameInfo
{
public:
	int                                                AreaIndex;                                        		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51533 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_AreaIndex::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddRemainingTime
// 0x0008 (0x00FC - 0x00F4)
class USFSeqAct_AddRemainingTime : public USFSeqAct_SFGameInfo
{
public:
	float                                              AddTime;                                          		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51537 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_AddRemainingTime::pClassPointer = NULL;

// Class SFGame.SFSeqAct_Reset
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_Reset : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51543 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_Reset::pClassPointer = NULL;

// Class SFGame.SFSeqAct_PvEWaveInfo
// 0x000C (0x0100 - 0x00F4)
class USFSeqAct_PvEWaveInfo : public USFSeqAct_SFGameInfo
{
public:
	float                                              MaxAliveRatio;                                    		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndOfRoundDelay;                                  		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MultiplyValueForAliveRatio;                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51546 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_PvEWaveInfo::pClassPointer = NULL;

// Class SFGame.SFKillZDamageType_Fell
// 0x0004 (0x007C - 0x0078)
class USFKillZDamageType_Fell : public UKillZDamageType
{
public:
	float                                              RespawnDelay;                                     		// 0x0078 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51562 ];

		return pClassPointer;
	};

	float GetRespawnDelay ( );
};

UClass* USFKillZDamageType_Fell::pClassPointer = NULL;

// Class SFGame.SFProjectileBeacon
// 0x0004 (0x048C - 0x0488)
class ASFProjectileBeacon : public ASFProj_HG_Gas
{
public:
	class UClass*                                      BeaconTargetClass;                                		// 0x0488 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51594 ];

		return pClassPointer;
	};

	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProjectileBeacon::pClassPointer = NULL;

// Class SFGame.SFSeqAct_UpdateItemCarrierPathNode
// 0x0000 (0x00F4 - 0x00F4)
class USFSeqAct_UpdateItemCarrierPathNode : public USFSeqAct_SFGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51762 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqAct_UpdateItemCarrierPathNode::pClassPointer = NULL;

// Class SFGame.SFSeqAct_NotiChangePlayerStart
// 0x0004 (0x00F8 - 0x00F4)
class USFSeqAct_NotiChangePlayerStart : public USFSeqAct_SFGameInfo
{
public:
	int                                                GroupNumber;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51779 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_NotiChangePlayerStart::pClassPointer = NULL;

// Class SFGame.SFTeamDeathGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFTeamDeathGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51945 ];

		return pClassPointer;
	};

};

UClass* USFTeamDeathGameScore::pClassPointer = NULL;

// Class SFGame.SFTeamDeathHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFTeamDeathHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51946 ];

		return pClassPointer;
	};

};

UClass* ASFTeamDeathHUD::pClassPointer = NULL;

// Class SFGame.SFTDPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFTDPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 51947 ];

		return pClassPointer;
	};

};

UClass* ASFTDPlayerController::pClassPointer = NULL;

// Class SFGame.SFDefaultBotName
// 0x0300 (0x033C - 0x003C)
class USFDefaultBotName : public UObject
{
public:
	struct FString                                     AIDefaultNames[ 0x3E ];                           		// 0x003C (0x02E8) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           AICodeNames;                                      		// 0x0324 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FModeAINameInfo >                   AIModeDefaultNames;                               		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52065 ];

		return pClassPointer;
	};

	struct FString GetLocalizedAIModeDefaultName ( int ModeID, unsigned char AIType );
	struct FString GetLocalizedAICodeName ( int Index, int ModeID );
	struct FString GetLocalizedAIDefaultName ( unsigned char AIType, int ModeID );
	struct FString GetLocalizedAIName ( struct FString ServerAIName, int ModeID );
	struct FString GetServerAICodeName ( int Index );
	struct FString GetServerAIDefaultName ( unsigned char AIType );
	struct FString GetServerRandomAICodeName ( );
};

UClass* USFDefaultBotName::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Unit
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Unit : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52122 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Unit::pClassPointer = NULL;

// Class SFGame.SFAITDPlayerController
// 0x000C (0x11B4 - 0x11A8)
class ASFAITDPlayerController : public ASFTDPlayerController
{
public:
	int                                                BotChatType;                                      		// 0x11A8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                BotChatSenderID;                                  		// 0x11AC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                BotChatUpdate;                                    		// 0x11B0 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52255 ];

		return pClassPointer;
	};

	void ClientReceiveAIGameInfo ( struct FString InfoText );
	void ServerGetAIGameInfo ( );
	void GetAIGameInfo ( );
	void SetBotChat ( int ChatType, unsigned char SendType, int senderID );
	void BotChatUpdated ( );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	void HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFAITDPlayerController::pClassPointer = NULL;

// Class SFGame.SFAITeamDeathGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFAITeamDeathGameScore : public USFTeamDeathGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52319 ];

		return pClassPointer;
	};

};

UClass* USFAITeamDeathGameScore::pClassPointer = NULL;

// Class SFGame.SFAITeamDeathHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFAITeamDeathHUD : public ASFTeamDeathHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52320 ];

		return pClassPointer;
	};

	void OnChallengeCompleted ( struct FName SupplyCode, int challenge_task_index );
};

UClass* ASFAITeamDeathHUD::pClassPointer = NULL;

// Class SFGame.SFAITDMPlayerReplicationInfo
// 0x0000 (0x0750 - 0x0750)
class ASFAITDMPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52321 ];

		return pClassPointer;
	};

	void UpdateRank ( int nNewExp );
};

UClass* ASFAITDMPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFAISniperTeamDeathGame
// 0x0000 (0x0940 - 0x0940)
class ASFAISniperTeamDeathGame : public ASFAITeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52322 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFAISniperTeamDeathGame::pClassPointer = NULL;

// Class SFGame.SFSniperTDMGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFSniperTDMGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52330 ];

		return pClassPointer;
	};

};

UClass* USFSniperTDMGameScore::pClassPointer = NULL;

// Class SFGame.SFSniperHUDBase
// 0x0000 (0x0E40 - 0x0E40)
class ASFSniperHUDBase : public ASFHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52332 ];

		return pClassPointer;
	};

};

UClass* ASFSniperHUDBase::pClassPointer = NULL;

// Class SFGame.SFSniperTDMHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFSniperTDMHUD : public ASFSniperHUDBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52331 ];

		return pClassPointer;
	};

};

UClass* ASFSniperTDMHUD::pClassPointer = NULL;

// Class SFGame.SFTrainingGame
// 0x0024 (0x0868 - 0x0844)
class ASFTrainingGame : public ASFTeamGameInfo
{
public:
	class ASFTrainingGameReplicationInfo*              SFTrainingGRI;                                    		// 0x0844 (0x0004) [0x0000000000000000]              
	TArray< struct FDummyMemory >                      RespawnDummyArray;                                		// 0x0848 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RespawnDuration;                                  		// 0x0854 (0x0004) [0x0000000000000000]              
	int                                                DummyCountMax;                                    		// 0x0858 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DummyName;                                        		// 0x085C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52402 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	int GetCurrentDummyCount ( );
	void RemoveAllDummy ( );
	void RemoveDummy ( class AController* RemoveDummy );
	void RespawnDummy ( class AController* DeadDummy );
	void SpawnDummy ( class APawn* PlayerPawn );
	void eventPostBeginPlay ( );
	void CheckGRI ( );
};

UClass* ASFTrainingGame::pClassPointer = NULL;

// Class SFGame.SFAIWaveInfo_Category
// 0x0054 (0x0090 - 0x003C)
class USFAIWaveInfo_Category : public USFAIWaveInfo_DataStoreBase
{
public:
	struct FString                                     MapName;                                          		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsWaveInfo >                        WaveInfos_EASY;                                   		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsWaveInfo >                        WaveInfos_NORMAL;                                 		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsWaveInfo >                        WaveInfos_HARD;                                   		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsWaveInfo >                        WaveInfos_VERYHARD;                               		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsWaveInfo >                        WaveInfos_Default;                                		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              EndOfRoundDelay;                                  		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MultipleProportions;                              		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConcurrentMinAICount;                             		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52411 ];

		return pClassPointer;
	};

};

UClass* USFAIWaveInfo_Category::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_AIWaveChanged
// 0x0004 (0x0104 - 0x0100)
class USFSeqEvent_AIWaveChanged : public USFSeqEvent_Base
{
public:
	int                                                WaveIndex;                                        		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52602 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void SetWaveIndex ( int InWaveIndex );
};

UClass* USFSeqEvent_AIWaveChanged::pClassPointer = NULL;

// Class SFGame.SFRankPoint
// 0x0024 (0x0060 - 0x003C)
class USFRankPoint : public UObject
{
public:
	TArray< struct FSRankPoint >                       RankPointArray;                                   		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSSPGage >                          SPGageArray;                                      		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           RankName;                                         		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52812 ];

		return pClassPointer;
	};

	int GetSPAddSPFromRank ( int InRank );
	int GetSPGageFromRank ( int InRank );
	int GetEnableMapExp ( );
	bool IsLastGFxRank ( struct FString strRank );
	bool IsReachedMaxExp ( int InExp );
	int GetMaximumExpFromCurrentRank ( struct FString CurGFxRank );
	int GetMinimumExpFromCurrentRank ( struct FString CurGFxRank );
	int GetRankIndexByGFxRank ( struct FString strGFxRank );
	void GetRankFromGFxRank ( struct FString CurGFxRank, int* OutSalaryStep, int* OutRealRank );
	struct FString GetGFxRankStringByRank ( int Rank );
	struct FString GetNextGFxRankFromCurrent ( struct FString CurGFxRank );
	struct FString GetGFxRankString ( int Exp );
	bool IsRankedUp ( int nCurRank, int nNewExp, int* nNewRank );
	struct FString GetRankNameByRank ( int InRank );
	struct FString GetRankName ( int InExp );
	int GetRealRankByRank ( int InRank );
	int GetRankByExp ( int nExp );
	int GetSalayStepIndexByRank ( int Rank );
	int GetSalaryStepIndex ( int Rank, int RealRank );
};

UClass* USFRankPoint::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_Char
// 0x0000 (0x0174 - 0x0174)
class USFItem_Functional_Char : public USFItem_Functional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 52882 ];

		return pClassPointer;
	};

};

UClass* USFItem_Functional_Char::pClassPointer = NULL;

// Class SFGame.SFPCRoomCare
// 0x001C (0x0058 - 0x003C)
class USFPCRoomCare : public UObject
{
public:
	TArray< struct FSPCRoomCare >                      PCRoomCareArray;                                  		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              PCRoomCareSaleRatio;                              		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     PCRoomCareNotificationURL;                        		// 0x004C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53222 ];

		return pClassPointer;
	};

	struct FString GetPCRoomCareIconImage ( int InPCRoomType );
	struct FString GetPCRoomCareIconImageByType ( struct FString strType );
	void GetPCRoomCareItemType ( int InPCRoomType, TArray< struct FString >* OutArray );
	bool IsValidPCRoomType ( int InPCRoomType );
	float GetPCRoomCareSaleRatio ( );
	float GetPCRoomCareClanPointRatio ( int InPCRoomType );
	int GetPCRoomCareSPGageRatio ( int InPCRoomType );
	int GetPCRoomCareExpRatio ( int InPCRoomType );
};

UClass* USFPCRoomCare::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_UI
// 0x0000 (0x0174 - 0x0174)
class USFItem_Functional_UI : public USFItem_Functional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53228 ];

		return pClassPointer;
	};

};

UClass* USFItem_Functional_UI::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ExpUp
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_ExpUp : public USFItem_Functional_UI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53227 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ExpUp::pClassPointer = NULL;

// Class SFGame.SFChannelType
// 0x0048 (0x0084 - 0x003C)
class USFChannelType : public UObject
{
public:
	TArray< struct FSChannelType >                     ChannelTypes;                                     		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      ChannelGroupAdModeFilter;                         		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSRecommendChannel >                RecommendChannelTypes;                            		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSChannelEXP >                      ChannelEXPArray;                                  		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AddEXPMessage;                                    		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddSPMessage;                                     		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53229 ];

		return pClassPointer;
	};

	bool GetChannelDisablePasswordRoom ( int InType );
	bool GetChannelDisableIngameKick ( int InType );
	bool GetChannelUseEnemyCharacter ( int InType );
	int GetChannelRoomUserCount ( int InType );
	int GetChannelSPGageRatio ( int InType );
	int GetChannelExpRatio ( int InType );
	bool IsHeroTestChannel ( int nType );
	bool IsVIPChannel ( int nType );
	bool IsRookieChannel ( int nType );
	bool IsBeginnerChannel ( int nType );
	bool IsLadyChannel ( int nType );
	bool IsProLeagueChannel ( int nType );
	bool IsFreeLeagueChannel ( int nType );
	bool IsLeagueChannel ( int nType );
	bool IsAllLeagueChannel ( int nType );
	bool IsClanLeagueChannel ( int nType );
	bool IsClanMatchingChannel ( int nType );
	bool IsClanChannel ( int nType );
	int GetChannelGroupCount ( );
};

UClass* USFChannelType::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ProvideItem
// 0x0010 (0x0184 - 0x0174)
class USFItem_Func_ProvideItem : public USFItem_Functional_Char
{
public:
	TArray< struct FProvideItemData >                  ProvideItems;                                     		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      ModeLimitation : 1;                               		// 0x0180 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53233 ];

		return pClassPointer;
	};

	int GetProvideItemID ( int Index );
	int GetProvideItemIDByItemName ( struct FString InItemName );
	void GetUsableProvideItemsInternal ( unsigned char CurrentGameMode, TArray< struct FString >* UsableItems );
	TArray< struct FString > GetUsableProvideItems ( class ASFPawn* AppliedPawn );
	bool IsPossibleToUse ( class ASFPawn* AppliedPawn );
};

UClass* USFItem_Func_ProvideItem::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_GameResult
// 0x0218 (0x02A4 - 0x008C)
class USFUIDataStore_GameResult : public USFUIDataStoreBase
{
public:
	TArray< struct FSUserResult >                      RedUserResultArray;                               		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSUserResult >                      BlueUserResultArray;                              		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      WinningTeamIndex;                                 		// 0x00A4 (0x0001) [0x0000000000000000]              
	unsigned char                                      MyTeamIndex;                                      		// 0x00A5 (0x0001) [0x0000000000000000]              
	unsigned char                                      MatchEndType;                                     		// 0x00A6 (0x0001) [0x0000000000000000]              
	int                                                RedTeamScore;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                BlueTeamScore;                                    		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                GoalScore;                                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                RemainingTime;                                    		// 0x00B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bOnlySpectator : 1;                               		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTeamChanged : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ShowMatchAnimation : 1;                           		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowResultDialog : 1;                            		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bReservedSendUpdateTaskList : 1;                  		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                MyBeforeMaxSPGage;                                		// 0x00BC (0x0004) [0x0000000000000000]              
	class UClass*                                      GameScoreClass;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                GameModeID;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                MapID;                                            		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     MapLocalizedName;                                 		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GameModeLocalizedName;                            		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RedClanName;                                      		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlueClanName;                                     		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RedClanMark;                                      		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlueClanMark;                                     		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RedClanCSN;                                       		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BlueClanCSN;                                      		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AppraisalMessage;                                 		// 0x011C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                KillFeedBackStartIndex;                           		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                KillFeedBackCounter;                              		// 0x012C (0x0004) [0x0000000000000000]              
	TArray< int >                                      KillFeedBackList;                                 		// 0x0130 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           KillFeedBackDefault;                              		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           KillFeedBackNormal;                               		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           KillFeedBackSpecial;                              		// 0x0154 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           KillFeedBackRare;                                 		// 0x0160 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           KillFeedBackContinuous;                           		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FChallengeProgressData >            InvalidateChallengeList;                          		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     FirstScoreMessage;                                		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FirstKillMessage;                                 		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FirstAssistMessage;                               		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FirstLuckyPointMessage;                           		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMyVIPMessage;                                  		// 0x01B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMasterVIPMessage;                              		// 0x01C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMyMonthlyRewardMessage;                        		// 0x01CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strFeverTimeResultMessage;                        		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PCRoomBenefitMessage;                             		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RTEBenefitMessage;                                		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EXPFuncItemBenefitMessage;                        		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SPFuncItemBenefitMessage;                         		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TPFuncItemBenefitMessage;                         		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PMCBenefitMessage;                                		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChannelBenefitMessage;                            		// 0x022C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIPBenefitMessage;                                		// 0x0238 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MonthlyRewardBenefitMessage;                      		// 0x0244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SPImmediatelyFuncItemBenefitMessage;              		// 0x0250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanCooperationBuffBenefitMessage;                		// 0x025C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanConnectBuffBenefitMessage;                    		// 0x0268 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMySPImmediatelyMessage;                        		// 0x0274 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FeverTimeBenefitMessage;                          		// 0x0280 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ClearedSurvivalWave;                              		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              CustomModeExpRatio;                               		// 0x0290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CustomModeSpRatio;                                		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSModeNotice >                      ModeNoticeArray;                                  		// 0x0298 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53262 ];

		return pClassPointer;
	};

	void SetClearedSurvivalWave ( int SetWave );
	int GetClearedSurvivalWave ( );
	void RequestUpdateChallengeList ( );
	void SetReservedSendUpdateTaskList ( unsigned long bFlag );
	void AddInvalidateChallengeList ( TArray< struct FChallengeProgressData >* newData );
	void AddedBuddy ( struct FString InCodeName );
	int GetUserListIndex ( struct FString InCodeName, int* OutTeamIndex );
	void GetFirstRankedUserByLuckyPoint ( TArray< struct FSUserResult >* ReturnArray );
	void GetFirstRankedUserByKill ( TArray< struct FSUserResult >* ReturnArray );
	void GetFirstRankedUserByAssist ( TArray< struct FSUserResult >* ReturnArray );
	void GetFirstRankedUserByScore ( TArray< struct FSUserResult >* ReturnArray );
	void SetTeamChanged ( );
	void OnGameStarted ( );
	void SetMyGameResultTeam ( unsigned char TeamIndex );
	bool GetMyResultInfo ( struct FSUserResult* OutMyResult );
	void SortKillFeedBackList ( );
	void UpdateKillFeedback ( class ASFPlayerReplicationInfo* LocalPRI );
	void InitKillFeedback ( );
	void SetRoundResultInfo ( unsigned char TeamIndex, int nRedScore, int nBlueScore, int nGoalScore );
	int GetTeamIndex ( struct FString strCodeName );
	void SetUserResultInfoExt ( unsigned char TeamIndex, class ASFPlayerReplicationInfo* SFPRI, float ModeExpRatio );
	void SetUserResultInfo ( unsigned char TeamIndex, class ASFPlayerReplicationInfo* SFPRI, float ModeExpRatio, struct FSFeverValues FeverValues );
	bool GetModeNoticeArray ( TArray< struct FString >* OutArray );
	struct FString GetGameResultBenefitMessage ( );
	void AddGameResultChatMessage ( );
	void SetGameResultInfo ( class ASFGameReplicationInfo* SFGRI, int PlayedGameModeID, int PlayedMapID, unsigned char WinTeam, int RedScore, int BlueScore, unsigned long InSpectator, TArray< class ASFPlayerReplicationInfo* > InRedSortPRIArray, TArray< class ASFPlayerReplicationInfo* > InBlueSortPRIArray, unsigned char InMatchEndType );
	void ClearGameResult ( );
};

UClass* USFUIDataStore_GameResult::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_Messenger
// 0x0198 (0x0224 - 0x008C)
class USFUIDataStore_Messenger : public USFUIDataStoreBase
{
public:
	int                                                MaxBuddyFLCount;                                  		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bNotifyBuddyLogout : 1;                           		// 0x0090 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bNeedUpdateNoticeCount : 1;                       		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedUpdateTitle : 1;                             		// 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoubleLogin : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      InitedBuddyList : 1;                              		// 0x0090 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      RecvIsNew : 1;                                    		// 0x0090 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                TotalBuddyCount;                                  		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                TotalBuddyFLCount;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                TotalBuddyGroupCount;                             		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                TotalBuddyStatusCount;                            		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                ActiveGroupSN;                                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< struct FsBuddy >                           buddys;                                           		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      DisplayBuddys;                                    		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsBuddyGroup >                      BuddyGroups;                                      		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsMessengerNotice >                 Notices;                                          		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      NeedUpdateFriendList;                             		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      LocUpdatedList;                                   		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsMessengerNotice                           DisplayingNotice;                                 		// 0x00F0 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSMsgrChattingInfo >                MsgrChattingInfoArray;                            		// 0x0110 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSChatMsgInfo                               SendPendingChatMsg;                               		// 0x011C (0x006C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                statusNow;                                        		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                inGameNow;                                        		// 0x018C (0x0004) [0x0000000000000000]              
	struct FsBuddyFiltterCondition                     FiltterCondition;                                 		// 0x0190 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RecvCodeName;                                     		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSMsgrNotice >                      PendingMsgrNoticeArray;                           		// 0x01B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSMsgrNotice >                      MsgrNoticeInfo;                                   		// 0x01C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBuddyLogin;                                    		// 0x01CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBuddyLogout;                                   		// 0x01D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strAddBuddyFLWaiting;                             		// 0x01E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strAddBuddyFLAccept;                              		// 0x01F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GameInviteStrSource;                              		// 0x01FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           GameFollowStrSource;                              		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RecvInviteRespondMessage;                         		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedBuddyUSN;                                 		// 0x0220 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53356 ];

		return pClassPointer;
	};

	void AddNoticesArray ( struct FsMessengerNotice InDisplayingNotice, unsigned long bUpdate );
	struct FSMsgrNotice GetMsgrNoticeInfo ( int MsgrNoticeType );
	void SetSelectedBuddyUSN ( int USN );
	int GetSelectedBuddyUSN ( );
	bool IsExistPendingMsgrNotice ( unsigned char InType );
	bool IsReachedMaxBuddyFLCount ( );
	void OnGameStarted ( );
	void PKT_MESSENGER_RemoveBuddyBLMessageAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyBLMessageAUTO ( class UPacket* recvPacket );
	bool IsBlocked ( int USN );
	int UpdateOwnerServerLocation ( int inGame );
	void OnChatMsgAddedByIndex ( int InChattingIndex, int ContactUSN, struct FString InCodeName, int InNametagImage, struct FString InChatMsg, struct FSCodeNameColor CodeNameColor, unsigned long bFromMe );
	void OnChatMsgAdded ( int ContactUSN, struct FString InCodeName, int InNametagImage, struct FString InChatMsg, unsigned long bFromMe );
	void SetSendPendingChatMsg ( struct FSChatMsgInfo NewSendPendingChatMsg );
	void OnChattingInfoRemoved ( int InUSN );
	void OnChattingInfoOpended ( int ContactUSN );
	void OnChattingInfoAdded ( int ContactUSN, struct FString InCodeName, int InNametagImage, struct FString InMessage, struct FSCodeNameColor CodeNameColor, unsigned long bFromMe );
	void AddNeedUpdateFriendList ( int USN );
	int GetGroupType ( int USN );
	struct FSChatMsgInfo GetSendPendingChatMsg ( );
	int GetChattingInfo ( int InUSN, struct FSMsgrChattingInfo* MsgrChattingInfo );
	int GetChattingInfoByIndex ( int InDlgIndex, struct FSMsgrChattingInfo* MsgrChattingInfo );
	int GetMsgNotificationCount ( int InUSN );
	void SetStartGameTimeStamp ( int InUSN );
	void GetCodenames ( TArray< int > USNs, TArray< struct FString >* Codenames );
	void GetUserSNs ( TArray< struct FString > Codenames, TArray< int >* USNs );
	void GetBuddyCountinChannel ( int nType, int nServerID, int nChannelNum, int* fnum, int* cnum );
	int GetGroupArrayIdx ( int GroupSN );
	int GetExistBuddyGroupSN ( int USN );
	void DelClanMamberList ( );
	int GetBuddyArrayIdx ( int USN );
	int GetBuddyOnlineCount ( int GroupSN );
	int GetBuddyFLCount ( int GroupSN );
	int GetBuddyArrayIdxbyCN ( struct FString strCodeName );
	int GetDisplayBuddyUSNByCodeName ( struct FString strCodeName );
	int GetBuddyUSNByCodeName ( struct FString strCodeName );
	int GetBuddyStatus ( int InUSN );
	int GetBuddyNametagImageIdx ( int USN );
	struct FString GetBuddyCodename ( int USN, unsigned long bIsColor );
	int IsOnline ( int USN );
	bool IsExistInviteNotice ( int USN );
	bool IsInSameLocNotRoom ( int USN );
	bool IsInSameLocRoom ( int USN );
	bool IsBlockedCodename ( struct FString CodeName );
	bool IsWaitingAllow ( struct FString CodeName );
	bool IsAlreadyBuddyCodename ( struct FString CodeName );
	bool IsBothBuddy ( int Idx );
	bool IsBothBuddyUSN ( int USN );
	bool IsBlockedForReverseUSN ( int USN );
	bool IsBlockedForReverse ( int Idx );
	bool IsForwardingUSN ( int USN );
	bool IsForwarding ( int Idx );
	bool IsCanAddBuddy ( int USN, struct FString CodeName );
	int IsCanInviteGame ( int USN );
	int IsCanFollowGame ( int USN, int channelType );
	bool IsBuddyType ( int Src, int Type );
	void SetBuddyAddInfo ( struct FsPersonalAddInfo NewPersonalAddInfo, struct FsBuddy* NewBuddy );
	void NotyfyChangedCodeName ( int USN, struct FString CodeName );
	void RecountBuddys ( );
	void RemoveClanBuddySubArray ( int USN );
	void UpdateBuddySubArray ( int I );
	void ClearBuddySubArray ( );
	void UpdateBuddyClanJoinInfo ( TArray< struct FString > USNs, int ClanJoined );
	void UpdateOwnerClanJoinInfo ( int ClanJoined );
	void InviteGame ( int USN );
	int InviteGameUSN ( int USN );
	int InviteGameCodename ( struct FString CodeName );
	void DisplayMessageInviteResultStr ( struct FString CodeName, int InviteResult, unsigned long bFollow );
	void DisplayMessageInviteResult ( int USN, int InviteResult, unsigned long bFollow );
	void NotyfyBuddyLogin ( struct FsBuddy Buddy, struct FString* res );
	void AddNoticeInviteGame ( struct FString InviteStr );
	void AddOwnerInfo ( );
	bool NeedSwap ( int BuddyA, int BuddyB, int Key );
	void SortProcess ( int Key, TArray< int >* DisplayBuddysNew );
	void Sort ( TArray< int >* DisplayBuddysNew );
	bool CheckFiltterCondition ( int USN );
	void Filtter ( TArray< int >* DisplayBuddysNew );
	void SetFiltter ( unsigned char Type, struct FString filtterStr, int filtterInt, int filtterFloat );
	void MakeDisplayList ( int newGroupSN, TArray< int >* DisplayBuddysNew );
	void RecvErrorGameInvite ( int err, class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyFLAUTO ( class UPacket* recvPacket, struct FString* AddFLRes );
	void PKT_MESSENGER_ChangeStatusAUTO ( class UPacket* recvPacket, struct FString* BuddyStatRes, int* ChangedCodeNameUSN, struct FString* ChangedCodeName );
	void PKT_MESSENGER_RemoveAL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyAL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyFL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_RemoveFL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_RemoveBL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_DestroyClanAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_RemoveClanMemberAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddClanMemberAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_InviteRepondAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_GameInvite_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_BuddyChat_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_BuddyChatAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_DoubleLoginAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyLocation_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_ChangeStatus_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyBL_REQ_OK ( class UPacket* recvPacket );
	void UpdateOwnerInfos ( int statusNew, int inGameNew );
	void AddNoticeInviteBuddy ( int USN, struct FString CodeName );
	int InitNoticeCount ( );
	void ResolveBuddytypeDiscord ( );
	bool IsChangedOnlineStatus ( struct FsBuddy OldBuddy, struct FsBuddy NewBuddy );
	void CheckForceOfflineBuddys ( );
	void PostBuddyListUpdated ( );
	void PKT_MESSENGER_GetBuddyLocations_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyLocations_TRANS ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyFLList_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyFLList_TRANS ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyList_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyList_TRANS ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetGroupList_OK ( class UPacket* recvPacket );
	void InitBuddyGroups ( );
	void PKT_MESSENGER_GetGroupList_TRANS ( class UPacket* recvPacket );
	void RefleshBuddyArray ( );
	void PKT_MESSENGER_LOGIN_REQ_OK ( class UPacket* Packet );
	bool DelBuddyList ( int USN, int GroupSN );
	struct FSCodeNameColor GetBuddyCodeNameColorbyUsn ( int USN );
	void FlushBuddyType ( int Idx );
	int UpdateBuddyList ( struct FsBuddy NewBuddy );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_Messenger::pClassPointer = NULL;

// Class SFGame.SFItem_Func_SPGageUp
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_SPGageUp : public USFItem_Functional_UI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53382 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_SPGageUp::pClassPointer = NULL;

// Class SFGame.SFItem_Func_TPUp
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_TPUp : public USFItem_Functional_UI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53383 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_TPUp::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_InvenChar
// 0x0030 (0x00BC - 0x008C)
class USFUIDataStore_InvenChar : public USFUIDataStoreBase
{
public:
	TArray< struct FSCharUnit >                        InvenCharUnitArray;                               		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CharacterMCItemArray;                             		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvUnitCount;                                    		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                CurUnitCount;                                     		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              LuckyPointProbability;                            		// 0x00AC (0x0004) [0x0000000000000000]              
	TArray< int >                                      NeedServerUpdateUnitArray;                        		// 0x00B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 53726 ];

		return pClassPointer;
	};

	int UpdateChangedInvenSetting ( );
	bool CheckRecivedAllUnitEquipInfo ( );
	TArray< struct FQWord > GetEquippedItembyNewItem ( int UnitID, struct FQWord ItemSN );
	void SetupCharacterMCItemArrayDefault ( );
	void SetupCharacterMCDataForGame ( int UnitItemID );
	bool RemoveIteminUNIT ( struct FQWord ISN );
	void SetInvenCharItemInfo ( int UnitItemID, unsigned char ItemType, struct FQWord ItemSN, struct FSFItemData ItemData );
	int GetPartItem ( int UnitID, unsigned char Part );
	bool GetItemSNArrayByUnitEquipped ( int UnitItemID, TArray< struct FQWord >* ArrayItemSN );
	int GetUnitArrayIndexByID ( int UnitItemID );
	bool IsEquippedbyUnitID ( int UnitID, struct FQWord ItemSN );
	int GetCharUnitSetTotalItemID ( );
	bool GetCharUnitInvenEffectItemData ( struct FSFItemData* outItemData );
	bool GetCharUnitInvenItemDataArray ( int InUnitItemID, TArray< struct FSFItemData >* OutItemDataArray );
	void InsertInvenUnitInfo ( int UnitItemID, struct FQWord UnitItemSN, TArray< struct FQWord > InItemSNArray );
	void PKT_GetUnitEquipInfo_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetUnitEquipInfo_REQ_TRANSACTION ( class UPacket* recvPacket );
	void SetRecvPacketHandler ( );
	void Clear ( );
};

UClass* USFUIDataStore_InvenChar::pClassPointer = NULL;

// Class SFGame.SFCheatManager
// 0x0064 (0x02A8 - 0x0244)
class ASFCheatManager : public ACheatManager
{
public:
	struct FCylinder                                   SpawningEnemySize;                                		// 0x0244 (0x0008) [0x0000000000000000]              
	class ASFAIController*                             SpawnedAI;                                        		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                SpawnedAIIndex;                                   		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              AIDeadTime;                                       		// 0x0254 (0x0004) [0x0000000000000000]              
	class USFQACheckMessage*                           QAMessage;                                        		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned long                                      bProgressOneFrame : 1;                            		// 0x025C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bReservePause : 1;                                		// 0x025C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableOnScreenDebugMessagesDisplay : 1;          		// 0x025C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      IsForward : 1;                                    		// 0x025C (0x0004) [0x0000000000000000] [0x00000008] 
	TArray< struct FString >                           WeatherType;                                      		// 0x0260 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      DLOTestClass;                                     		// 0x026C (0x0004) [0x0000000000000000]              
	TArray< struct FLensFXData >                       LensFXList;                                       		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFMapInfo*                                  SFMI;                                             		// 0x027C (0x0004) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class ASFGamePlayerStart* >                arrRespawnPoint;                                  		// 0x0280 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ASFPawn*                                     CurrViewTargetPawn;                               		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DevFacebookToken;                                 		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DevFacebookSFLink;                                		// 0x029C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55752 ];

		return pClassPointer;
	};

	void SetWeaponPickUp ( unsigned char bEnable );
	void SetCustomMode ( unsigned char Mode );
	void ServerSetPawnHealth ( int NewHealth );
	void SetHealth ( int NewHealth );
	void ServerSetZombieKillCount ( float NewKillCount );
	void SetZombieKillCount ( int NewKillCount );
	void ServerZombieFevertimeDuration ( float FeverTimeDuration );
	void SetZombieFeverTimeDuration ( float FeverTimeDuration );
	void TestOpenWeb ( struct FString DomainAddress );
	void testScore ( int WeaponType, int Score );
	void ResetScore ( int WeaponType );
	void TestNetmarbleCoupon ( int DiscountRate );
	struct FVector GetTargetPawnHeadLocation ( class ASFPawn* TargetPawn );
	void RotationAimToTargetHead ( class AController* FireController, struct FVector TargetHeadLocation );
	bool IsAvailableHitTargetHead ( class AController* FireController, class ASFPawn* TargetPawn, struct FVector TargetHeadLocation, struct FImpactInfo* ResultImpact );
	void WeaponFireToHead ( class ASFPawn* FirePawn, struct FImpactInfo FireSideImpact );
	void ShotToTargetHead ( unsigned long IsFireControllerIsBot, class AController* FireController, class ASFPawn* TargetPawn, struct FVector TargetHead );
	void ClientShotToTargetHead ( class ASFPawn* TargetPawn );
	void ServerLoveShot ( class ASFPawn* FirstFirePawn, class ASFPawn* LastFirePawn );
	void ServerLoveShotBot ( class ASFPawn* FirstFirePawn, class ASFPawn* LastFirePawn, struct FVector LocalHeadLocation );
	void Love ( struct FString PlayerName );
	class ASFPawn* GetPlayerPawnByName ( struct FString PlayerName );
	class ASFPawn* GetRandomNoneLocalPawn ( );
	void ChangeSocketRotation ( int Pitch, int Yaw, int Roll );
	void SetShooterLevel ( int Type );
	void TestDebugLine ( float X1, float Y1, float z1, float X2, float Y2, float z2 );
	struct FString ServerDebugUpdatePlayInfoDS ( );
	void DebugUpdatePlayInfoDS ( );
	void UpdateSteamAchievement ( struct FString Achievement, int CurrentScore, unsigned long bCompleted );
	void SetSteamAchievement ( struct FString StatName );
	void GetSteamAchievement ( struct FString StatName );
	void SetSteamStat ( struct FString StatName, int Value );
	void GetSteamStat ( struct FString StatName );
	void ActivateSteamGameOverlayStore ( );
	void ActivateSteamGameOverlay ( struct FString OverlayType );
	void ServerAutoAILevel ( int SetActive );
	void AutoAILevel ( int SetActive );
	void ServerResetAILevel ( int newLevel );
	void ResetAILevel ( int newLevel );
	void GetFriendsListFromFacebook ( );
	void UploadImageToFacebook ( struct FString Text, struct FString ImageURL );
	void UploadLinkToFacebook ( struct FString Text );
	void UploadTextToFacebook ( struct FString Text );
	void TestFacebook ( );
	void ShowWebBrowser ( unsigned long bShow );
	void OpenWeb ( struct FString URL, struct FString Title, int PosX, int PosY, int Width, int Height );
	void RemoveMovie ( int Index );
	void LoadMovie ( struct FString TargetClass );
	void SetGFxMovieVisible ( unsigned long bValue, int Index, struct FString MovieClip );
	void StopGFxMovieRenderTexture ( unsigned long bValue, int Index );
	void StopGFxMovieRender ( unsigned long bValue, int Index );
	void StopGFxMovieAdvance ( unsigned long bValue, int Index );
	void ServerInactivateAllTurrets ( );
	void InactivateAllTurrets ( );
	void ServerSetAIMemberCount ( int NewCount );
	void SetAIMemberCount ( int NewCount );
	void ServerSetAITDM ( int NewMode );
	void SetAITDM ( int NewMode );
	void ServerToggleAITDM ( );
	void ToggleAITDM ( );
	void SliceDebugFlag ( unsigned long bDrawEdge, unsigned long bDrawPoly, unsigned long bDrawTriangle );
	void ToggleFreeCamera ( );
	void ServerSetAIWavePawnScale ( float NewScale );
	void SetAIWavePawnScale ( float NewScale );
	void AimKill ( );
	void CheckSecondsPerCycle ( );
	void DisplayWaveInfo ( );
	void AddHealth ( int nValue, int MaxValue );
	void TestNotifyConnectionError ( struct FString Message );
	void SetCooltime ( float new_cooltime );
	void ResetCooltime ( );
	void toggleAIFactory ( );
	void TestGlassSyncState ( int TestIndex );
	void ServerBreakGlassActors ( );
	void BreakGlassActors ( );
	void DevPause ( );
	void ServerAllowSelfInjury ( float newfloat );
	void AllowSelfInjury ( float newfloat );
	void ServerUseFriendlyFireDamage ( float newfloat );
	void UseFriendlyFireDamage ( float newfloat );
	void ServerChangeTargetPawn ( class ASFPawn* TargetPawn );
	void ChangeTargetPawn ( );
	void TestShockWave ( );
	void BillingTokenEUR ( );
	void SendExitGame ( struct FString ErrorMsg );
	void SetLoginServerTime ( int nMonth, int nDay );
	void HACKChallengeScore ( struct FName SupplyCode, int Score, unsigned long bForceUpdate );
	void SendUpdateTaskList ( );
	void ShowAeriaLogin ( );
	void ServerAddWallet ( int nAdd );
	void AddWallet ( int nAdd );
	void TestOpenDialog ( unsigned char ResultDialogType );
	void showmethemoney ( int nAdd );
	void ServerAddTeamScore ( int AddScore );
	void AddTeamScore ( int AddScore );
	void ServerSetMaxLives ( int NewMaxLives );
	void SetMaxLives ( int NewMaxLives );
	void DisplayRandomRespawnList ( );
	void toggleAIEnemyFriendly ( );
	void toggleKM ( );
	void excode ( int N );
	void DisplayKillFeedBackList ( );
	void DisplayAllEventData ( );
	void TestAward ( struct FName AwardName, struct FString Value );
	void TestEvent ( struct FName EventName, int Param1, int Param2, int nLooping );
	void TestKillMessage ( struct FString strKillMessage );
	void ServerSetPlayerName ( struct FString S );
	void SetPlayerName ( struct FString S );
	void ServerSetTestRecoil ( unsigned long bFlag );
	void SetTestRecoil ( unsigned long bFlag );
	void SleepThisThread ( float Seconds );
	void TestStun ( unsigned long bStun );
	void SetHeadPointDist ( float newdist );
	void ServerSetBurstInterval ( float NewValue, unsigned char FireModeNum );
	void SetBurstInterval ( float NewValue, unsigned char FireModeNum );
	void ServerSetRoundBurst ( int NewValue, unsigned char FireModeNum );
	void SetRoundBurst ( int NewValue, unsigned char FireModeNum );
	void SetMagazineDrop ( unsigned long bDrop );
	void LevelRendertextureTest ( unsigned long bDraw );
	void SetTitleMsg ( struct FString TitleMsg );
	void LevelMarkTest ( struct FString LevelString );
	void SetRepViaDOREPOnly ( unsigned long bUse );
	void SetRelevantDelay ( unsigned long bUse );
	void SetUnrelevantDelay ( unsigned long bUse );
	void LogDurability ( );
	void SetDurability ( int nSet, int PrimaryDurability, int SecondaryDurability, int SpecialDurability );
	void ServerResetLevel ( );
	void TestKillCamFinished ( );
	void TestKillCam ( );
	void TerminateKillCamEffect1 ( );
	void TerminateKillCamEffect0 ( );
	void TestKillCamEffect ( int Type );
	void TestSelfKillCam ( );
	void TestExpiredNoInput ( );
	void ResetLevel ( );
	void SetRecoilMovingValue ( float Value );
	void TestCustomBuilderWeapon ( );
	void TestCustomBuilderPawn ( );
	void TestSprint ( );
	void ComeAndGo ( );
	void ClearComeAndGo ( );
	void TestComeAndGo ( float Time );
	void TestBackward ( );
	void TestForward ( );
	void DelayTestForward ( float Delay );
	void ViewPortFadeTest ( float TargetAlpha, float fTime );
	void ClearDebugLine ( );
	void AddPunchAngle ( int Pitch, int Yaw, float Exp, float RecoveryTime );
	void SetDamagShakeGoal ( float ShakeGoalYaw, float ShakeGoalPitch, float ShakeGoalRoll, float GoalTime );
	void UnUseAllController ( );
	void UseAllController ( float Delay );
	void TestHUDServerNotice ( int NoticeType, struct FString strNoticeMsg );
	void DisplayDurability ( );
	void TestLuckyPoint ( );
	void TestLastMan1 ( );
	void TestLastMan0 ( );
	void TestShockEffect ( );
	void HelmetAttach ( );
	void HelmetDrop ( );
	void ToggleMapobjectWrite ( );
	void TestColoration ( float R, float G, float B, float A, float desaturation_amount, float Power, float Duration );
	void TestDesat ( unsigned char Type, float Duration );
	void TestFade ( unsigned long bFadeIn );
	void TestAnnounce ( );
	void TestDropMoney ( );
	void ServerKillAllAI ( );
	void KillAllAI ( );
	void EnableDebugCamera ( );
	void ServerPauseKismet ( );
	void SetScreenRes ( int ResX, int ResY, unsigned long bFull );
	void PauseKismet ( );
	void TESTItem2 ( );
	void TESTItem ( int Idx );
	void GFxCC ( struct FString Cmd );
	void ServerSlomo ( float T );
	void Slomo ( float T );
	void DumpItemList ( );
	void DumpSkeletalMeshNameRecursive ( class ASFPlayerController* SFPC, class USkeletalMeshComponent* InSkelComp, struct FString IndentString );
	void DumpAllPawnComponents ( );
	void DumpPawnComponents ( );
	void DumpWeaponInfo ( );
	void ExAttack ( );
	void TestExAttack ( );
	void DumpWeaponComponents ( );
	void TestHideStun ( );
	void TestShowStun ( );
	void ShowPenetrationLine ( );
	void FWCN ( struct FString WeaponName );
	void FWC ( int WeaponID );
	void FGC ( int GearID );
	void ServerTestWeapon ( struct FString WeaponClassName );
	void TestWeapon ( struct FString WeaponClassName );
	void FOC ( int OptionID, unsigned long bSwitchWeap );
	void toggleViewDamage ( );
	void toggleViewAim ( );
	void RequestToggleTestMode ( unsigned long bFlag );
	void ToggleTestMode ( unsigned long bFlag, unsigned long bAdjustToAll );
	void RequestSetTestMode ( struct FString TestType, unsigned long bFlag );
	void SetGore ( unsigned long bValue );
	void SetTestMode ( struct FString TestType, unsigned long bFlag, unsigned long bAdjustToAll );
	void DumpGoreSuppress ( );
	void DumpTestMode ( );
	void TestBlock ( );
	void CancelPendingMapChange ( );
	void PrepareMapChange ( struct FName LevelName );
	void TestLensFX ( struct FString WhichFX );
	void DecodeTextFiles ( );
	void EncodeTextFiles ( );
	void BehindView ( );
	void ToggleSkelCtrlRot ( );
	void ToggleFootPlacement ( );
	void RequestGodModeChange ( );
	void God ( );
	void RequestSetHitEffect ( unsigned long bFlag );
	void SetHitEffect ( unsigned long bFlag, unsigned long bViaReplication );
	void ToggleCameraEffect ( );
	void ShowCompDebug ( );
	void Spread ( float NewSpread );
	void SpreadSize ( float NewSpreadSize );
	void TestCSM ( int NewCSM );
	void DisplayAllLog ( );
	void PrintPlayerLog ( );
	void SetSpeedBase ( float Value );
	void SetSpeedParm ( struct FString Stat, float Value );
	void ServerShowDSFrame ( );
	void ServerRunHostCommand ( struct FString ServerCommand );
	void RunServerCmd ( struct FString ServerCommand );
	void ShowDSFrame ( );
	void CommandExit ( );
	void DelayExit ( float Delay );
	void DeathCameraEffect ( );
	void DamageCameraEffect ( );
	void ServerSetMyScore ( float NewScore );
	void ServerSetTeamScore ( unsigned char eCurrTeam, float NewScore );
	void MyScore ( float NewScore );
	void BlueScore ( float NewScore );
	void RedScore ( float NewScore );
	void ServerSHNextArea ( );
	void SHNextArea ( );
	void ServerDropSeizureObject ( );
	void DropSeizureObject ( );
	void ServerGetSeizureObject ( int PlayerID );
	void GetSeizureObject ( );
	void ServerEscaped ( int PlayerID );
	void Escaped ( );
	void ServerRemovedBomb ( int PlayerID );
	void RemovedBomb ( );
	void ServerInstalledBomb ( int PlayerID );
	void InstalledBomb ( );
	void SetRemainTimeServer ( float fSeconds );
	void SetRemainTime ( float fSeconds );
	void KillAllPlayerPawns ( );
	void EndRound ( unsigned long bKillAllPawn );
	void EndGame ( int WinningTeam );
	void ServerAllSuicide ( );
	void AllSuicide ( );
	void StopTournamentResult ( );
	void StartTournamentResult ( );
	void ServerStopGameStats ( );
	void StopGameStats ( );
	void ServerStartGameStats ( );
	void StartGameStats ( );
	void eventTick ( float DeltaTime );
	void ServerProcessOneTick ( );
	void DbgProcessOneTick ( );
	void TestWeatherLOD ( int Level );
	void TestWeather ( int Type, unsigned long UseCameraLensEffect );
	void CheckAICondition ( );
	void SpawnBOT ( int Count, unsigned char TeamIndex, struct FString AIName, int SelectIndex );
	void ServerSpawnBot ( int Count, unsigned char TeamIndex, struct FString AIName, int SelectIndex );
	void FollowPath ( );
	void ServerDbgTakeOwnDamage ( float Damage );
	void DbgTakeOwnDamage ( float Damage );
	void ServerStartWave ( int WaveLevel );
	void StartWave ( int WaveLevel );
	void SuicideAllAI ( );
	void PlaySpawnAnim ( );
	void AITestLevel ( int InLevel );
	void ServerAIStop ( unsigned long bFreeze );
	void AIStop ( unsigned long bFreeze );
	void RollingAttack ( );
	void ToggleHandHide ( );
	void ViewAIDebug ( struct FName ControllerName );
	void AISwitchWeapon ( unsigned char Category );
	void ViewBotFirst ( );
	void FreeCamera ( );
	void ToggleRoundOverTone ( );
	void UpdateQAMessage ( );
	void ToggleDisplayQAMessage ( );
	void PostBeginPlay ( );
};

UClass* ASFCheatManager::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SnatchWeaponGroup
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_SnatchWeaponGroup : public USequenceAction
{
public:
	TArray< unsigned char >                            WeaponGroup;                                      		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55877 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SnatchWeaponGroup::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GiveItem
// 0x0020 (0x0108 - 0x00E8)
class USFSeqAct_GiveItem : public USequenceAction
{
public:
	TArray< int >                                      Items;                                            		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           ItemNames;                                        		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      TargetWeaponGroup;                                		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableInRound : 1;                               		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55890 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_GiveItem::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GiveWeaponList
// 0x0000 (0x0100 - 0x0100)
class USFSeqAct_GiveWeaponList : public USFSeqAct_GiveWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55908 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_GiveWeaponList::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddMagazine
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_AddMagazine : public USequenceAction
{
public:
	TArray< struct FAddWeaponMagazine >                AddMagazineList;                                  		// 0x00E8 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 55919 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AddMagazine::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_InGameShop
// 0x0044 (0x028C - 0x0248)
class USFGFxDialog_InGameShop : public USFGFxDialog
{
public:
	int                                                MAX_DISPLAY_ROW_ITEM;                             		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FSInGameShopItemUIData >            DisplayShopItemList;                              		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedItemSoltIndex;                            		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned char                                      ItemDisplayType;                                  		// 0x025C (0x0001) [0x0000000000000000]              
	int                                                CurrentMenuTab;                                   		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                ActiveGroupIndex;                                 		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCursorPosX;                                   		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              LastCursorPosY;                                   		// 0x026C (0x0004) [0x0000000000000000]              
	TArray< struct FSInGameShopWeaponModeRistrict >    ModeRistrictList;                                 		// 0x0270 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxObject*                                  TitleMsg;                                         		// 0x027C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __DisplayShopItemSort__Delegate;                  		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56220 ];

		return pClassPointer;
	};

	unsigned char GetSlotType ( int gamemode, int ItemId );
	bool IsShopOpened ( );
	bool IsPurchasableItem ( int ItemId, unsigned long bDisableInUseItem );
	unsigned char IsApplyableMagazineUpItem ( int ItemId );
	bool IsRistrictedWeaponType ( unsigned char WeaponType );
	bool CheckWeaponSetItem ( int ItemId, int* CurrentWeaponSetIndex, struct FString* ItemUIImageCode, int* OriginalItemID );
	struct FString GetKeyName ( int KeyCode );
	int GetUISlotIndexByKeyName ( struct FString KeyName );
	bool BuyShopItemByKey ( struct FString KeyName );
	void BuyShopItem ( int ItemId );
	void BuyShopItemByIndex ( int SlotIndex );
	void CloseInGameShop ( );
	void ASSetResolution ( int Width, int Height );
	void ASClose ( );
	void ASSetPVEShopSelectedItem ( int Index );
	void ASSetPVEShopItemList ( class UGFxObject* GFxDataList );
	void UpdateLastMousePosition ( float X, float Y, unsigned long bForce );
	void pveShopDialog_OnPosition ( int X, int Y );
	void pveShopDialog_OnListItemClick ( int SlotIndex );
	void pveShopDialog_OnCancelBgClick ( );
	void pveShopDialog_OnCancelBtnClick ( );
	void UpdateCurrentShopItemList ( int MenuTabIndex );
	void UpdateScreenResolution ( );
	void MouseMoveTo ( int PosX, int PosY );
	void SetSelectedItemSlotIndex ( int Index );
	class ASFWeapon* GetUsingWeaponByItemID ( int ItemId );
	bool IsAlreadyHave ( int ItemId );
	void OpenInGameShop ( );
	int DisplayShopItemSort ( struct FSInGameShopItemUIData A, struct FSInGameShopItemUIData B );
	struct FString GetItemName ( int ItemId, unsigned long bAddSlotName );
	void InitializeShopDisplayItemList ( int SubTabIndex );
	int CancelButtonPress ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_InGameShop::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_IntermissionCutScene
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_IntermissionCutScene : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56561 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_IntermissionCutScene::pClassPointer = NULL;

// Class SFGame.SFDefaultBotChat
// 0x0048 (0x0084 - 0x003C)
class USFDefaultBotChat : public UObject
{
public:
	TArray< struct FString >                           MultiKill;                                        		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           UltraKill;                                        		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           Winning;                                          		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           MultiDie;                                         		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           UltraDie;                                         		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           Losing;                                           		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56694 ];

		return pClassPointer;
	};

	struct FString GetJeetingChat ( int Type, struct FString TargetName );
	struct FString GetCheeringChat ( int Type, struct FString TargetName );
};

UClass* USFDefaultBotChat::pClassPointer = NULL;

// Class SFGame.SFAITeamDeathGameVs16
// 0x0000 (0x0940 - 0x0940)
class ASFAITeamDeathGameVs16 : public ASFAITeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56806 ];

		return pClassPointer;
	};

};

UClass* ASFAITeamDeathGameVs16::pClassPointer = NULL;

// Class SFGame.SFAITeamDeathVs16HUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFAITeamDeathVs16HUD : public ASFAITeamDeathHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56808 ];

		return pClassPointer;
	};

};

UClass* ASFAITeamDeathVs16HUD::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardAITDMVs16
// 0x0000 (0x0314 - 0x0314)
class USFGFxHUD_ScoreBoardAITDMVs16 : public USFGFxHUD_ScoreBoardNormal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56815 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_ScoreBoardAITDMVs16::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetBarricade
// 0x000C (0x00F4 - 0x00E8)
class USFSeqAct_SetBarricade : public USequenceAction
{
public:
	float                                              HealthRate;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEffect : 1;                                    		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreWallet : 1;                                		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56902 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetBarricade::pClassPointer = NULL;

// Class SFGame.SFDmgType_Enviroment
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Enviroment : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56925 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Enviroment::pClassPointer = NULL;

// Class SFGame.SFDmgType_CrapGas
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_CrapGas : public USFDmgType_Enviroment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 56924 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_CrapGas::pClassPointer = NULL;

// Class SFGame.SFAnimBlendLinkage
// 0x000C (0x0140 - 0x0134)
class USFAnimBlendLinkage : public USFAnimBlendBase
{
public:
	TArray< int >                                      nLinkageSeq;                                      		// 0x0134 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57330 ];

		return pClassPointer;
	};

	int GetLinkageSeq ( class UAnimNodeSequence* Child );
	void eventOnChildAnimEnd ( class UAnimNodeSequence* Child, float PlayedTime, float ExcessTime );
	void eventOnBecomeRelevant ( );
	void eventOnInit ( );
};

UClass* USFAnimBlendLinkage::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ModeVolume
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ModeVolume : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57688 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ModeVolume::pClassPointer = NULL;

// Class SFGame.SFArriveAtVolume
// 0x0000 (0x0298 - 0x0298)
class ASFArriveAtVolume : public ASFModeVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57689 ];

		return pClassPointer;
	};

	void OnTouchedModeVolume ( class ASFPawn_Player* SFP );
};

UClass* ASFArriveAtVolume::pClassPointer = NULL;

// Class SFGame.SFAssistEventData
// 0x0000 (0x01BC - 0x01BC)
class USFAssistEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57694 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFAssistEventData::pClassPointer = NULL;

// Class SFGame.SFAutoCrouchVolume
// 0x0000 (0x0260 - 0x0260)
class ASFAutoCrouchVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57702 ];

		return pClassPointer;
	};

	void CrouchTimer ( );
	void eventUnTouch ( class AActor* Other );
	void SetCrouch ( class APawn* P, unsigned char bCrouch );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFAutoCrouchVolume::pClassPointer = NULL;

// Class SFGame.SFAward_ChattingMessage
// 0x0000 (0x0044 - 0x0044)
class USFAward_ChattingMessage : public USFBaseAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57727 ];

		return pClassPointer;
	};

	void AWARDEARNED ( struct FASValue AwardValue );
};

UClass* USFAward_ChattingMessage::pClassPointer = NULL;

// Class SFGame.SFAward_GameSystemMessage
// 0x0000 (0x0044 - 0x0044)
class USFAward_GameSystemMessage : public USFBaseAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57731 ];

		return pClassPointer;
	};

	void AWARDEARNED ( struct FASValue AwardValue );
};

UClass* USFAward_GameSystemMessage::pClassPointer = NULL;

// Class SFGame.SFBackAttackByPlayerEventData
// 0x0000 (0x0140 - 0x0140)
class USFBackAttackByPlayerEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57761 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFBackAttackByPlayerEventData::pClassPointer = NULL;

// Class SFGame.SFBackAttackEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFBackAttackEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57768 ];

		return pClassPointer;
	};

};

UClass* USFBackAttackEventData::pClassPointer = NULL;

// Class SFGame.SFBackAttackToPlayerEventData
// 0x0000 (0x0140 - 0x0140)
class USFBackAttackToPlayerEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57770 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFBackAttackToPlayerEventData::pClassPointer = NULL;

// Class SFGame.SFBeast2PlayerController
// 0x0004 (0x11AC - 0x11A8)
class ASFBeast2PlayerController : public ASFPlayerController
{
public:
	unsigned long                                      bBoss : 1;                                        		// 0x11A8 (0x0004) [0x0000000000002020] [0x00000001] ( CPF_Net | CPF_Transient )
	unsigned long                                      bNeedChangeTeam : 1;                              		// 0x11A8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57783 ];

		return pClassPointer;
	};

	void HandleSprinting ( );
	bool AllowChangeWeapon ( );
};

UClass* ASFBeast2PlayerController::pClassPointer = NULL;

// Class SFGame.SFBeastGame
// 0x006D (0x08B1 - 0x0844)
class ASFBeastGame : public ASFTeamGameInfo
{
public:
	struct FSSpawnableAlienInfo                        SpawnableAlienInfoList[ 0x3 ];                    		// 0x0844 (0x0060) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      AlienPawnClass[ 0x3 ];                            		// 0x08A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      BeastTeam;                                        		// 0x08B0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57792 ];

		return pClassPointer;
	};

	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	void BaseScoreAssist ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, class APawn* KilledPawn );
	void BaseScoreDeath ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, class UClass* DamageType );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI );
	void RestartPlayer ( class AController* aPlayer );
	void UpdateEndReason ( unsigned long bRoundOver );
	void IncreateTeamRoundForGameLog ( );
	bool IsMatchPoint ( unsigned char Team );
	float GetTeamScoreFromIndex ( int nTeamIndex, int Index );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void CheckMatchWinningTeam ( );
	void UpdateTeamScoreFromKill ( class ASFTeamInfo* team_info, float Score );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* GetDefaultPlayerClass ( class AController* C );
};

UClass* ASFBeastGame::pClassPointer = NULL;

// Class SFGame.SFDedicatedDataManHuntPlayerLog
// 0x0000 (0x003C - 0x003C)
class USFDedicatedDataManHuntPlayerLog : public USFDedicatedDataPlayerLog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57837 ];

		return pClassPointer;
	};

	void SetDedicateManHuntPlayerLog ( class ASFBeastGameReplicationInfo* SFGRI, class ASFPlayerReplicationInfo* SFPRI, unsigned char HumanlogType, unsigned char BeastlogType );
	void SetDedicatePlayerTimeLog ( class ASFBeastGameReplicationInfo* SFGRI, class ASFPlayerReplicationInfo* SFPRI );
	void SetDedicateManHuntPlayerLogData ( unsigned char logType, int nValue, int ManHuntIndex, struct FSFManHuntPlayerLog* DedicateManHuntPlayerLog );
};

UClass* USFDedicatedDataManHuntPlayerLog::pClassPointer = NULL;

// Class SFGame.SFBeastGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFBeastGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57861 ];

		return pClassPointer;
	};

};

UClass* USFBeastGameScore::pClassPointer = NULL;

// Class SFGame.SFBeastHUD
// 0x000C (0x0E4C - 0x0E40)
class ASFBeastHUD : public ASFHUD
{
public:
	TArray< struct FSSpawnableAlienInfo >              SpawnablePawnInfoList;                            		// 0x0E40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57862 ];

		return pClassPointer;
	};

	bool ShouldSwitchToAlternativeWidget ( unsigned long CheckViewTarget );
	void CrosshairInitialize ( );
	void CheckGRI ( );
};

UClass* ASFBeastHUD::pClassPointer = NULL;

// Class SFGame.SFBeastPlayerController
// 0x004C (0x11F4 - 0x11A8)
class ASFBeastPlayerController : public ASFPlayerController
{
public:
	int                                                OriginalWeaponSetIndex;                           		// 0x11A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCompleteBackupOriginalWeaponSetID : 1;           		// 0x11AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                LastTeamIndex;                                    		// 0x11B0 (0x0004) [0x0000000000000000]              
	struct FSFManHuntPlayerLog                         DedicateManHuntPlayerLog;                         		// 0x11B4 (0x0040) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57863 ];

		return pClassPointer;
	};

	void AutoTriggerRestartPlayer ( );
	void SetLogInfoWeapPlayTime ( );
	void UpdateTeamIndex ( unsigned char NewTeamIndex );
	void RestoreOriginalWeaponSetID ( );
	void BackupWeaponSetInfo ( int set_id );
	void SetWeaponSetIndexInfo ( int CurrentIndex, int NextIndex );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	bool ForceShowWeaponSet ( );
	bool IsValidateMainWeaponFromLocal ( int nSet );
	void SwitchWeapon ( unsigned char T );
	void eventNotifyChangedViewtarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
};

UClass* ASFBeastPlayerController::pClassPointer = NULL;

// Class SFGame.SFBeastGame2
// 0x0024 (0x0868 - 0x0844)
class ASFBeastGame2 : public ASFTeamGameInfo
{
public:
	struct FString                                     AlienPawnBossClassName;                           		// 0x0844 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      AlienPawnBossClass;                               		// 0x0850 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     AlienPawnWorkerClassName;                         		// 0x0854 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      AlienPawnWorkerClass;                             		// 0x0860 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BossCountPerPlayer;                               		// 0x0864 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57864 ];

		return pClassPointer;
	};

	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void ShuffleTeam ( );
	void StartHumans ( );
	unsigned char PickTeam ( unsigned char num, class AController* C );
};

UClass* ASFBeastGame2::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardBeast
// 0x0000 (0x0314 - 0x0314)
class USFGFxHUD_ScoreBoardBeast : public USFGFxHUD_ScoreBoardNormal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57917 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_ScoreBoardBeast::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Beast
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Beast : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57918 ];

		return pClassPointer;
	};

};

UClass* USFGFXHUD_Beast::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ModeExclusive
// 0x0000 (0x020C - 0x020C)
class USFGFxHUD_ModeExclusive : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 57919 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_ModeExclusive::pClassPointer = NULL;

// Class SFGame.SFBeastTeamInfo
// 0x0000 (0x0270 - 0x0270)
class ASFBeastTeamInfo : public ASFTeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58062 ];

		return pClassPointer;
	};

	int GetWinningRound ( );
};

UClass* ASFBeastTeamInfo::pClassPointer = NULL;

// Class SFGame.SFTutorialGame
// 0x0018 (0x085C - 0x0844)
class ASFTutorialGame : public ASFGameInfo
{
public:
	TArray< struct FTutorialSectionInfo >              TutorialSectionInfos;                             		// 0x0844 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BonusRemainTime;                                  		// 0x0850 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PenaltyRemainTime;                                		// 0x0854 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bIsUpdateWhenBestScore : 1;                       		// 0x0858 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58066 ];

		return pClassPointer;
	};

	void UpdateEndReason ( unsigned long bRoundOver );
	void OnBroadcastMessageEx ( class USFSeqAct_BroadcastMessageByType* Action );
	void ResetLevelForRetry ( );
	bool NeedCountDown ( );
	void UpdateAdditionalScore ( );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	class ASFPlayerReplicationInfo* FindWinner ( struct FString Reason );
	void OnScoreInit ( class USFSeqAct_ScoreInit* Action );
	void OnScoreUp ( class USFSeqAct_ScoreUp* Action );
	void TargetPaperHitted ( int SectionID, int AdjustScore, class AController* EventInstigator, struct FVector HitLocation );
	void TargetPaperSpawned ( int SectionID, int BestScore );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void eventPostBeginPlay ( );
};

UClass* ASFTutorialGame::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ScoreInit
// 0x0010 (0x0104 - 0x00F4)
class USFSeqAct_ScoreInit : public USFSeqAct_SFGameInfo
{
public:
	struct FString                                     PacketIndex;                                      		// 0x00F4 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      IsUpdatePacket : 1;                               		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58103 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_ScoreInit::pClassPointer = NULL;

// Class SFGame.SFTutorialGameScore
// 0x0008 (0x00C8 - 0x00C0)
class USFTutorialGameScore : public USFGameScore
{
public:
	float                                              score_timeBasis;                                  		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              score_bonusScorePerSec;                           		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58141 ];

		return pClassPointer;
	};

	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFTutorialGameScore::pClassPointer = NULL;

// Class SFGame.SFTutorialHUD
// 0x0010 (0x0E50 - 0x0E40)
class ASFTutorialHUD : public ASFHUD
{
public:
	int                                                Pending_Score;                                    		// 0x0E40 (0x0004) [0x0000000000000000]              
	struct FVector                                     Pending_TargetPosition;                           		// 0x0E44 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58142 ];

		return pClassPointer;
	};

	void ShowScoreBoard ( unsigned long bShow );
	struct FString GetWaitingForPlayerMessage ( );
	void DrawGameHUD ( );
	void NotifyTargetPaperInit ( );
	void NotifyTargetPaperHitted ( int Score, struct FVector TargetPosition );
	void NotifyMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, unsigned long bTeamChange, float Duration );
	void Reset ( );
};

UClass* ASFTutorialHUD::pClassPointer = NULL;

// Class SFGame.SFTutorialPlayerController
// 0x0010 (0x11B8 - 0x11A8)
class ASFTutorialPlayerController : public ASFPlayerController
{
public:
	TArray< struct FTutRankTable >                     RankTable;                                        		// 0x11A8 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              PerSecondMulValue;                                		// 0x11B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58143 ];

		return pClassPointer;
	};

	void RaiseVoiceChatMenu ( unsigned char RadioMessageType );
	void GameInviteRespond ( int FromUSN );
	void ServerResetLevel ( );
	void CalculateTutorialRank ( );
	void MatchHasEnded ( class UClass* InMessageClass, struct FName EventReason, int nRedWinRound, int nBlueWinRound, class AActor* EndGameFocus, unsigned char WinningTeamIndex, float Duration );
	void SetMiniGameEnd ( );
	void PKT_EndMiniGame_REQ_OK ( class UPacket* recvPacket );
	void SendStartMiniGame ( );
	void UserGameDataToDatabase ( );
	void ValidationCheckPlayerLog ( unsigned long bForce, unsigned long bMatchIsOver );
	void UpdateClanCSN ( );
	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	void RegisterOnlineDelegates ( );
	void ClientReset ( );
	void Reset ( );
	void eventPostBeginPlay ( );
};

UClass* ASFTutorialPlayerController::pClassPointer = NULL;

// Class SFGame.SFTutorialGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFTutorialGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58144 ];

		return pClassPointer;
	};

	bool ConsumeWalletAmounts ( class APlayerReplicationInfo* TargetPRI, unsigned char ForWhat, float NeedScore, unsigned long bForce );
	bool CanAcquireLuckyPoint ( );
	bool eventCouldSendGameScore ( );
	bool CouldSendWeaponLog ( );
	bool CouldSendPlayerLog ( );
	bool CouldSendEndGame ( );
	bool CouldSendGameLog ( );
	bool CouldSendMapLoaded ( );
	void RequestEndGameAndRestart ( );
	void RequestEndGame_GameExit ( );
	void eventTimer ( );
};

UClass* ASFTutorialGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFBeginnerGame
// 0x0000 (0x085C - 0x085C)
class ASFBeginnerGame : public ASFTutorialGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58145 ];

		return pClassPointer;
	};

};

UClass* ASFBeginnerGame::pClassPointer = NULL;

// Class SFGame.SFBeginnerHUD
// 0x0018 (0x0E58 - 0x0E40)
class ASFBeginnerHUD : public ASFHUD
{
public:
	struct FScriptDelegate                             __RegisterBeginnerTipMessage__Delegate;           		// 0x0E40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UnRegisterBeginnerTipMessage__Delegate;         		// 0x0E4C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58147 ];

		return pClassPointer;
	};

	void ShowScoreBoard ( unsigned long bShow );
	void UnRegisterBeginnerTipMessage ( );
	void RegisterBeginnerTipMessage ( struct FString EventName, struct FString EventText, float fLifeTime );
	void NotifyMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, unsigned long bTeamChange, float Duration );
	void Reset ( );
};

UClass* ASFBeginnerHUD::pClassPointer = NULL;

// Class SFGame.SFBeginnerGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFBeginnerGameReplicationInfo : public ASFTutorialGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58177 ];

		return pClassPointer;
	};

	void RequestEndGame_GameExit ( );
};

UClass* ASFBeginnerGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Beginner
// 0x0004 (0x0210 - 0x020C)
class USFGFxHUD_Beginner : public USFGFxHUDMoviePlayer
{
public:
	class UGFxClikWidget*                              BeginnerMsgMC;                                    		// 0x020C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58198 ];

		return pClassPointer;
	};

	void ASHideBeginnerTipMessage ( );
	void ASShowBeginnerTipMessage ( struct FString EventName, struct FString EventMessage, float fLifeTime );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_Beginner::pClassPointer = NULL;

// Class SFGame.SFBlastingGame
// 0x0004 (0x0848 - 0x0844)
class ASFBlastingGame : public ASFTeamGameInfo
{
public:
	class ASFBlastingGameReplicationInfo*              SFBlastingGRI;                                    		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58207 ];

		return pClassPointer;
	};

	void CheckGRI ( );
	void OnBombSuccess ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnBombDefused ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFBlastingGame::pClassPointer = NULL;

// Class SFGame.SFBlastingGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFBlastingGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58209 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFBlastingGameScore
// 0x0014 (0x00D4 - 0x00C0)
class USFBlastingGameScore : public USFGameScore
{
public:
	float                                              SCORE_Planted;                                    		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Defused;                                    		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_ExplodedTeam;                               		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_DefusedTeam;                                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_DefendExplosion;                            		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58220 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFBlastingGameScore::pClassPointer = NULL;

// Class SFGame.SFBlastingHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFBlastingHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58221 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingHUD::pClassPointer = NULL;

// Class SFGame.SFBlastingPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFBlastingPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58222 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingPlayerController::pClassPointer = NULL;

// Class SFGame.SFBlastingGameSecond
// 0x0000 (0x0848 - 0x0848)
class ASFBlastingGameSecond : public ASFBlastingGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58238 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingGameSecond::pClassPointer = NULL;

// Class SFGame.SFBlastingGameSecondScore
// 0x0000 (0x00D4 - 0x00D4)
class USFBlastingGameSecondScore : public USFBlastingGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58240 ];

		return pClassPointer;
	};

};

UClass* USFBlastingGameSecondScore::pClassPointer = NULL;

// Class SFGame.SFBlastingSecondHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFBlastingSecondHUD : public ASFBlastingHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58241 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingSecondHUD::pClassPointer = NULL;

// Class SFGame.SFBlastingSecondPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFBlastingSecondPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58242 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingSecondPlayerController::pClassPointer = NULL;

// Class SFGame.SFBlastingGameSecondReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFBlastingGameSecondReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58243 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingGameSecondReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFBlastingGameVs16
// 0x0000 (0x0848 - 0x0848)
class ASFBlastingGameVs16 : public ASFBlastingGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58246 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingGameVs16::pClassPointer = NULL;

// Class SFGame.SFBlastingGameVs16Score
// 0x0000 (0x00D4 - 0x00D4)
class USFBlastingGameVs16Score : public USFBlastingGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58248 ];

		return pClassPointer;
	};

};

UClass* USFBlastingGameVs16Score::pClassPointer = NULL;

// Class SFGame.SFBlastingVs16HUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFBlastingVs16HUD : public ASF16VS16ModeHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58249 ];

		return pClassPointer;
	};

};

UClass* ASFBlastingVs16HUD::pClassPointer = NULL;

// Class SFGame.SFBloodDecal
// 0x0004 (0x031C - 0x0318)
class USFBloodDecal : public USFDecal
{
public:
	float                                              fFadeTime;                                        		// 0x0318 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58261 ];

		return pClassPointer;
	};

	void ResetMIC ( );
	void eventTick ( float DeltaTime );
};

UClass* USFBloodDecal::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_BombVolume
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_BombVolume : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58291 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_BombVolume::pClassPointer = NULL;

// Class SFGame.SFGlowMutator
// 0x0004 (0x0248 - 0x0244)
class ASFGlowMutator : public AMutator
{
public:
	int                                                GlowBeginColor;                                   		// 0x0244 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58338 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFGlowMutator::pClassPointer = NULL;

// Class SFGame.SFBossGlowMutator
// 0x0000 (0x0248 - 0x0248)
class ASFBossGlowMutator : public ASFGlowMutator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58350 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void ModifyPlayer ( class APawn* Other );
};

UClass* ASFBossGlowMutator::pClassPointer = NULL;

// Class SFGame.SFDmgType_BreakableActor
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_BreakableActor : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58455 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_BreakableActor::pClassPointer = NULL;

// Class SFGame.SFDmgType_BreakableActorByDamage
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_BreakableActorByDamage : public USFDmgType_BreakableActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58454 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_BreakableActorByDamage::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_SFBreakableActor
// 0x000C (0x010C - 0x0100)
class USFSeqEvent_SFBreakableActor : public USFSeqEvent_Base
{
public:
	float                                              DamageThreshold;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentDamage;                                    		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bResetDamageOnToggle : 1;                         		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58485 ];

		return pClassPointer;
	};

	void HandleDamage ( int inAmount );
	void eventToggled ( );
	void Reset ( );
	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_SFBreakableActor::pClassPointer = NULL;

// Class SFGame.SFKActorNoSyncSpawnable
// 0x0000 (0x034C - 0x034C)
class ASFKActorNoSyncSpawnable : public ASFKActorNoSync
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58582 ];

		return pClassPointer;
	};

};

UClass* ASFKActorNoSyncSpawnable::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_SFBreakableActorByDamage
// 0x0000 (0x010C - 0x010C)
class USFSeqEvent_SFBreakableActorByDamage : public USFSeqEvent_SFBreakableActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58598 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_SFBreakableActorByDamage::pClassPointer = NULL;

// Class SFGame.SFBreakableActorWithMessage
// 0x0000 (0x02EC - 0x02EC)
class ASFBreakableActorWithMessage : public ASFBreakableActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58599 ];

		return pClassPointer;
	};

};

UClass* ASFBreakableActorWithMessage::pClassPointer = NULL;

// Class SFGame.SFCalendar
// 0x000C (0x0048 - 0x003C)
class USFCalendar : public UObject
{
public:
	TArray< int >                                      DefaultMonthDaysArray;                            		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58870 ];

		return pClassPointer;
	};

	struct FString GetSpecificDateString ( int nYear, int nMonth, int nDay );
	struct FString GetAfterDateBySpecificDate ( int nAfterDay, int* OutYear, int* OutMonth, int* OutDay );
	struct FString GetThisMonthLastDay ( );
	void GetAfterTheDateWithDay ( int InYear, int InMonth, int InDay, int nAfterDay, int* OutYear, int* OutMonth, int* OutDay );
	int GetLastDayOfMonth ( int nYear, int nMonth );
	struct FString GetDateStringWithDate ( int nYear, int nMonth, int nDay, int nHour, int nMinute );
	struct FString GetCurrentDateString ( int nCipher );
	void GetBeforeDateWithDay ( int nBeforeDay, int* OutYear, int* OutMonth, int* OutDay );
	void GetAfterDateWithDay ( int nAfterDay, int* OutYear, int* OutMonth, int* OutDay );
	int GetDaysAtMonth ( int nYear, int nMonth );
	void GetCurrentDate ( int* OutYear, int* OutMonth, int* OutDay, int* OutHour, int* OutMin );
	bool IsLeapYear ( int nYear );
};

UClass* USFCalendar::pClassPointer = NULL;

// Class SFGame.SFCaptureGame
// 0x0014 (0x0858 - 0x0844)
class ASFCaptureGame : public ASFTeamGameInfo
{
public:
	int                                                CompleteCaptureTime;                              		// 0x0844 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DelayTimeToEnableCaptureVolume;                   		// 0x0848 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class APlayerReplicationInfo*                      LastCapturePRI;                                   		// 0x084C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFCaptureGameReplicationInfo*               SFCaptureGRI;                                     		// 0x0850 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCaptureSendMessage : 1;                          		// 0x0854 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWorkingTurret : 1;                               		// 0x0854 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58974 ];

		return pClassPointer;
	};

	void OnCaptured ( class USFSeqAct_Captured* Action );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	bool ProcessRoundEndByTime ( );
	void RoundEndByTime ( );
	void Reset ( );
	void CheckGRI ( );
};

UClass* ASFCaptureGame::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_CaptureVolume
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_CaptureVolume : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 58997 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_CaptureVolume::pClassPointer = NULL;

// Class SFGame.SFCaptureGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFCaptureGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59008 ];

		return pClassPointer;
	};

};

UClass* USFCaptureGameScore::pClassPointer = NULL;

// Class SFGame.SFCaptureHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFCaptureHUD : public ASFTeamDeathHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59009 ];

		return pClassPointer;
	};

	void NotifyMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, unsigned long bTeamChanged, float Duration );
	void NotifyRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
};

UClass* ASFCaptureHUD::pClassPointer = NULL;

// Class SFGame.SFCapturePlayerController
// 0x001C (0x11C4 - 0x11A8)
class ASFCapturePlayerController : public ASFPlayerController
{
public:
	struct FString                                     MSG_CaptureWarning_OwnTeam;                       		// 0x11A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_CaptureWarning_LostTeam;                      		// 0x11B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              CaptureWarningTime;                               		// 0x11C0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59010 ];

		return pClassPointer;
	};

	void NotifyCaptureRemainTimeChanged ( float passed_time, float total_time );
	void NotifyCaptureTeamChagned ( unsigned char captured_team, struct FString captured_player );
};

UClass* ASFCapturePlayerController::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_CaptureTeamChanged
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_CaptureTeamChanged : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59027 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_CaptureTeamChanged::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Capture
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Capture : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59048 ];

		return pClassPointer;
	};

};

UClass* USFGFXHUD_Capture::pClassPointer = NULL;

// Class SFGame.SFCaptureTheFlagGame
// 0x0000 (0x0844 - 0x0844)
class ASFCaptureTheFlagGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59065 ];

		return pClassPointer;
	};

	bool AttainedGoalScore ( unsigned char* WinTeamIndex );
	unsigned char CheckLosingTeam ( int Index );
	void UpdateTeamScoreFromAssist ( class ASFTeamInfo* team_info, float Score );
	void UpdateTeamScoreFromKill ( class ASFTeamInfo* team_info, float Score );
	int GetSwapTeamIndex ( int TeamIndex );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void InitObeject ( );
	void OnDropObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnCaptureObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFCaptureTheFlagGame::pClassPointer = NULL;

// Class SFGame.SFSeizureGameScore
// 0x0010 (0x00D0 - 0x00C0)
class USFSeizureGameScore : public USFGameScore
{
public:
	float                                              SCORE_Seizured;                                   		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_DefendSeizure;                              		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_SeizuredTeam;                               		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_DefendSeizureTeam;                          		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59100 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFSeizureGameScore::pClassPointer = NULL;

// Class SFGame.SFCaptureTheFlagGameScore
// 0x0008 (0x00D8 - 0x00D0)
class USFCaptureTheFlagGameScore : public USFSeizureGameScore
{
public:
	float                                              SCORE_CaptureTheFlag;                             		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_CaptureTheFlagTeam;                         		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59099 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFCaptureTheFlagGameScore::pClassPointer = NULL;

// Class SFGame.SFCaptureTheFlagHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFCaptureTheFlagHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59101 ];

		return pClassPointer;
	};

};

UClass* ASFCaptureTheFlagHUD::pClassPointer = NULL;

// Class SFGame.SFCaptureTheFlagPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFCaptureTheFlagPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59102 ];

		return pClassPointer;
	};

};

UClass* ASFCaptureTheFlagPlayerController::pClassPointer = NULL;

// Class SFGame.SFCaptureTheFlagGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFCaptureTheFlagGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59103 ];

		return pClassPointer;
	};

	void OnMatchOver ( float Duration, class UClass* SFGameClass );
};

UClass* ASFCaptureTheFlagGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardCaptureTheFlag
// 0x0000 (0x0314 - 0x0314)
class USFGFxHUD_ScoreBoardCaptureTheFlag : public USFGFxHUD_ScoreBoardNormal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59136 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_ScoreBoardCaptureTheFlag::pClassPointer = NULL;

// Class SFGame.SFCaptureTheFlagTeamInfo
// 0x0000 (0x0270 - 0x0270)
class ASFCaptureTheFlagTeamInfo : public ASFTeamInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59139 ];

		return pClassPointer;
	};

	int GetReverseModeScore ( unsigned char ScoreType, int AccumulateScore );
	int eventGetScore ( unsigned char ScoreType );
};

UClass* ASFCaptureTheFlagTeamInfo::pClassPointer = NULL;

// Class SFGame.SFCaptureVolume
// 0x0000 (0x0298 - 0x0298)
class ASFCaptureVolume : public ASFModeVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59150 ];

		return pClassPointer;
	};

};

UClass* ASFCaptureVolume::pClassPointer = NULL;

// Class SFGame.SFCarriedObject
// 0x0000 (0x0224 - 0x0224)
class ASFCarriedObject : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59158 ];

		return pClassPointer;
	};

};

UClass* ASFCarriedObject::pClassPointer = NULL;

// Class SFGame.SFCCTV_MapInfo
// 0x0210 (0x024C - 0x003C)
class USFCCTV_MapInfo : public USFCCTV_DataStoreBase
{
public:
	struct FString                                     MapName;                                          		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FCCTVInfo                                   CCTVInfos[ 0xA ];                                 		// 0x0048 (0x01E0) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     TopViewCamLocation;                               		// 0x0228 (0x000C) [0x0000000000004000]              ( CPF_Config )
	struct FRotator                                    TopviewCamRotation;                               		// 0x0234 (0x000C) [0x0000000000004000]              ( CPF_Config )
	TArray< class AActor* >                            ViewTargetActorList;                              		// 0x0240 (0x000C) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59162 ];

		return pClassPointer;
	};

};

UClass* USFCCTV_MapInfo::pClassPointer = NULL;

// Class SFGame.SFPlayTimeEventData
// 0x0000 (0x01BC - 0x01BC)
class USFPlayTimeEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59335 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	unsigned char GetPrimaryWeaponType ( );
};

UClass* USFPlayTimeEventData::pClassPointer = NULL;

// Class SFGame.SFEscapeVolume
// 0x0000 (0x0298 - 0x0298)
class ASFEscapeVolume : public ASFModeVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59679 ];

		return pClassPointer;
	};

};

UClass* ASFEscapeVolume::pClassPointer = NULL;

// Class SFGame.SFGoldDiggerGame
// 0x0021 (0x0865 - 0x0844)
class ASFGoldDiggerGame : public ASFBaseTeamDeathGame
{
public:
	struct FString                                     DroppedPickupMoneyClassName;                      		// 0x0844 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     MoneySpawnRandomVel;                              		// 0x0850 (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                BaseMoney;                                        		// 0x085C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bOnlySameTeamCanPickUpMoney : 1;                  		// 0x0860 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      OverTimeCheckType;                                		// 0x0864 (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59913 ];

		return pClassPointer;
	};

	void NotifyMoneyChanged ( class ASFGoldDiggerPlayerReplicationInfo* PRI, int Money );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void DropMoney ( class AActor* SpawnActor, int Money );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFGoldDiggerGame::pClassPointer = NULL;

// Class SFGame.SFRadioMsgCommunity
// 0x0000 (0x0080 - 0x0080)
class USFRadioMsgCommunity : public USFRadioMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59916 ];

		return pClassPointer;
	};

};

UClass* USFRadioMsgCommunity::pClassPointer = NULL;

// Class SFGame.SFDmgType_ElectricShock
// 0x0000 (0x00CC - 0x00CC)
class USFDmgType_ElectricShock : public USFDmgType_LongTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 59940 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_ElectricShock::pClassPointer = NULL;

// Class SFGame.SFGFxMoviePlayer_RankMark
// 0x000C (0x01EC - 0x01E0)
class USFGFxMoviePlayer_RankMark : public USFGFxMoviePlayer
{
public:
	struct FString                                     LobbyRankMarkString;                              		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60065 ];

		return pClassPointer;
	};

	bool eventSetRankMarkInfo ( int SlotIndex, struct FString mark );
	void SetLobbyRankMarkInfo ( struct FString RankMark );
	void eventRestoreDevice ( );
};

UClass* USFGFxMoviePlayer_RankMark::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_WebBrowser
// 0x0024 (0x026C - 0x0248)
class USFGFxDialog_WebBrowser : public USFGFxDialog
{
public:
	struct FString                                     TargetURL;                                        		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BrowserTitle;                                     		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BrowserWidth;                                     		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                BrowserHeight;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWebBrowserInitialized : 1;                       		// 0x0268 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60483 ];

		return pClassPointer;
	};

	void loginWeb_OnPagePosition ( int PosX, int PosY, int Width, int Height );
	void ASSetDialogSize ( int Width, int Height, unsigned long IsInit );
	void SetBrowserInfo ( struct FString URL, struct FString Title, int Width, int Height );
	int CancelButtonPress ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnMostTopDialogChanged ( class USFGFxDialog* NewDialog );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_WebBrowser::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_BillingToken
// 0x0000 (0x026C - 0x026C)
class USFGFxDialog_BillingToken : public USFGFxDialog_WebBrowser
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60482 ];

		return pClassPointer;
	};

	void CashCharge_OnPagePosition ( int PosX, int PosY, int Width, int Height );
};

UClass* USFGFxDialog_BillingToken::pClassPointer = NULL;

// Class SFGame.SFDebugCameraController
// 0x0000 (0x06A4 - 0x06A4)
class ASFDebugCameraController : public ADebugCameraController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60512 ];

		return pClassPointer;
	};

	void PAUSE ( );
	void KeyInputF8 ( );
	void OnDeactivate ( class APlayerController* PC );
	void OnActivate ( class APlayerController* PC );
};

UClass* ASFDebugCameraController::pClassPointer = NULL;

// Class SFGame.SFChestHitByWeaponData
// 0x0000 (0x01BC - 0x01BC)
class USFChestHitByWeaponData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60513 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFChestHitByWeaponData::pClassPointer = NULL;

// Class SFGame.SFChestHitCountEventData
// 0x0000 (0x0140 - 0x0140)
class USFChestHitCountEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60521 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFChestHitCountEventData::pClassPointer = NULL;

// Class SFGame.SFClanMark
// 0x0024 (0x0060 - 0x003C)
class USFClanMark : public UObject
{
public:
	struct FString                                     DefaultClanMark;                                  		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultClanRank;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSTestClanMark >                    TestClanMarkArray;                                		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60528 ];

		return pClassPointer;
	};

	struct FString GetTestClanMark ( struct FString InClanName );
};

UClass* USFClanMark::pClassPointer = NULL;

// Class SFGame.SFClanMarkList
// 0x0034 (0x0070 - 0x003C)
class USFClanMarkList : public UObject
{
public:
	TArray< struct FsClanMarkInfo >                    ClanMarkListArray;                                		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanMarkToolTipArray;                             		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NullClanmark;                                     		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TabType_AllName;                                  		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TabType_AllSortNumber;                            		// 0x006C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60543 ];

		return pClassPointer;
	};

	void GetClanMarkListByLayerAndTab ( struct FString ShopItemCode, int Layer, struct FString Tab, TArray< struct FsClanMarkInfo >* outClanMarkInfoArray );
	void GetClanMarkSubTabNamesbyLayer ( struct FString ShopItemCode, int Layer, TArray< struct FsChangeClanMarkTabInfo >* outTabInfoArray );
	void GetClanMarkListbyLayerTab ( int Layer, struct FString Tab, TArray< struct FsClanMarkInfo >* outClanmarkArray );
	void GetClanMarkListbyLayer ( int Layer, TArray< struct FsClanMarkInfo >* outClanmarkArray );
	void ClanMarkToolTipInitialized ( );
};

UClass* USFClanMarkList::pClassPointer = NULL;

// Class SFGame.SFConsoleCommandHandler
// 0x000C (0x0048 - 0x003C)
class USFConsoleCommandHandler : public UObject
{
public:
	TArray< struct FCommandTranslator >                CommandTranslators;                               		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60596 ];

		return pClassPointer;
	};

	bool ExecCommand ( struct FString Command );
};

UClass* USFConsoleCommandHandler::pClassPointer = NULL;

// Class SFGame.SFContinualPlayerKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFContinualPlayerKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60610 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFContinualPlayerKillEventData::pClassPointer = NULL;

// Class SFGame.SFConvoyanceGameScore
// 0x0024 (0x00E4 - 0x00C0)
class USFConvoyanceGameScore : public USFGameScore
{
public:
	TArray< struct FConvoyancePointInfo >              PushScore;                                        		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FConvoyancePointInfo >              SeizureScore;                                     		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FExpScoreBaseInfo >                 ExpScoreInfo;                                     		// 0x00D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60790 ];

		return pClassPointer;
	};

	float GetExpScoreInfo ( int KillCount );
	float GetScoreByArrayInfo ( TArray< struct FConvoyancePointInfo > ArrayInfo );
	float GetPushScore ( float PushTime );
	float GetMissionGameScoreForConvoyanceGame ( struct FName MissionName, int AmountMoney, float PushTime, unsigned char* missionLogType );
};

UClass* USFConvoyanceGameScore::pClassPointer = NULL;

// Class SFGame.SFConvoyancePlayerController
// 0x0018 (0x11C0 - 0x11A8)
class ASFConvoyancePlayerController : public ASFPlayerController
{
public:
	struct FString                                     MoneyReturnMessage;                               		// 0x11A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MoneySeizureMessage;                              		// 0x11B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60791 ];

		return pClassPointer;
	};

	void NotifyChangeMoneyMessage ( class ASFPlayerReplicationInfo* PerformerPRI, int MoneyAmount, unsigned long IsReturnMoney );
	void eventUnUsedTrigger ( );
	void ClientPawnDied ( );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	void CheckJumpOrDuck ( );
};

UClass* ASFConvoyancePlayerController::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Convoyance
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Convoyance : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60880 ];

		return pClassPointer;
	};

};

UClass* USFGFXHUD_Convoyance::pClassPointer = NULL;

// Class SFGame.SFCoupleGame
// 0x0004 (0x0848 - 0x0844)
class ASFCoupleGame : public ASFTeamGameInfo
{
public:
	int                                                MaxTeamMember;                                    		// 0x0844 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60934 ];

		return pClassPointer;
	};

	unsigned char GetLoginTeamIndex ( struct FString LoginOptions );
};

UClass* ASFCoupleGame::pClassPointer = NULL;

// Class SFGame.SFCouplePlayerController
// 0x0018 (0x11C0 - 0x11A8)
class ASFCouplePlayerController : public ASFPlayerController
{
public:
	struct FString                                     HealthPackClassName;                              		// 0x11A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                MaxHealthPackCounter;                             		// 0x11B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UsedHealthPackCounter;                            		// 0x11B8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UClass*                                      HealthPackClass;                                  		// 0x11BC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 60942 ];

		return pClassPointer;
	};

	void ServerThrowHealthPack ( );
	class UClass* GetHealthPackClass ( );
	bool IsAvailableHealthPack ( class APawn* PlayerPawn );
	void NumKeyPressed ( int NumKey );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void Reset ( );
};

UClass* ASFCouplePlayerController::pClassPointer = NULL;

// Class SFGame.SFCTCPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFCTCPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61060 ];

		return pClassPointer;
	};

	void DefaultCaptainCameraEffect ( class ASFPawn_CaptainPlayer* SFP );
};

UClass* ASFCTCPlayerController::pClassPointer = NULL;

// Class SFGame.SFCTCTDMHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFCTCTDMHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61065 ];

		return pClassPointer;
	};

};

UClass* ASFCTCTDMHUD::pClassPointer = NULL;

// Class SFGame.SFRoundTDMGame
// 0x0000 (0x0844 - 0x0844)
class ASFRoundTDMGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61067 ];

		return pClassPointer;
	};

};

UClass* ASFRoundTDMGame::pClassPointer = NULL;

// Class SFGame.SFRoundTDMGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFRoundTDMGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61069 ];

		return pClassPointer;
	};

};

UClass* USFRoundTDMGameScore::pClassPointer = NULL;

// Class SFGame.SFRoundTDMHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFRoundTDMHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61070 ];

		return pClassPointer;
	};

};

UClass* ASFRoundTDMHUD::pClassPointer = NULL;

// Class SFGame.SFRoundTDMReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFRoundTDMReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61071 ];

		return pClassPointer;
	};

};

UClass* ASFRoundTDMReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFCTCTeamDeathGame
// 0x0008 (0x084C - 0x0844)
class ASFCTCTeamDeathGame : public ASFRoundTDMGame
{
public:
	int                                                CaptainKiller;                                    		// 0x0844 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CaptainKillAssist;                                		// 0x0848 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61072 ];

		return pClassPointer;
	};

	int CalculateScore ( class ASFPlayerReplicationInfo* Scorer, unsigned char ScoreType, int LadderDiff, class ASFPlayerReplicationInfo* VictimPRI );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
};

UClass* ASFCTCTeamDeathGame::pClassPointer = NULL;

// Class SFGame.SFCTFGameScore
// 0x0018 (0x00D8 - 0x00C0)
class USFCTFGameScore : public USFGameScore
{
public:
	float                                              SCORE_Seizure;                                    		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Return;                                     		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Capture;                                    		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_SeizureTeam;                                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_ReturnTeam;                                 		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_CaptureTeam;                                		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61107 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFCTFGameScore::pClassPointer = NULL;

// Class SFGame.SFCTFPlayerReplicationInfo
// 0x0004 (0x0754 - 0x0750)
class ASFCTFPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	class ASFFlagActor*                                Flag;                                             		// 0x0750 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61123 ];

		return pClassPointer;
	};

	void SetFlag ( class ASFFlagActor* InFlag );
};

UClass* ASFCTFPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFFlagActor
// 0x0040 (0x02A4 - 0x0264)
class ASFFlagActor : public ASkeletalMeshActor
{
public:
	struct FVector                                     OriginPosition;                                   		// 0x0264 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FRotator                                    OriginRotation;                                   		// 0x0270 (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	struct FVector                                     DroppedLocation;                                  		// 0x027C (0x000C) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class ASFPawn*                                     Catcher;                                          		// 0x0288 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      FlagTeam;                                         		// 0x028C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LastAction;                                       		// 0x028D (0x0001) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0290 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             EatFlagPS;                                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      DuplicatedFlagMesh;                               		// 0x0298 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             TracerPS;                                         		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    TracerPSC;                                        		// 0x02A0 (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61125 ];

		return pClassPointer;
	};

	void UpdateObjectIcon ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void SetCatcher ( class ASFPawn* InCatcher );
	void CatcherDied ( );
	void SpawnEatEffect ( );
	void SetLastAction ( unsigned char InLastAction, class APlayerController* InPC );
	void PostBeginPlay ( );
	void ReplicatedEvent ( struct FName VarName );
};

UClass* ASFFlagActor::pClassPointer = NULL;

// Class SFGame.SFCustomAsset
// 0x0000 (0x003C - 0x003C)
class USFCustomAsset : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61129 ];

		return pClassPointer;
	};

};

UClass* USFCustomAsset::pClassPointer = NULL;

// Class SFGame.SFCustomAsset_Char
// 0x0000 (0x003C - 0x003C)
class USFCustomAsset_Char : public USFCustomAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61131 ];

		return pClassPointer;
	};

};

UClass* USFCustomAsset_Char::pClassPointer = NULL;

// Class SFGame.SFCustomAsset_Weap
// 0x0000 (0x003C - 0x003C)
class USFCustomAsset_Weap : public USFCustomAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61133 ];

		return pClassPointer;
	};

};

UClass* USFCustomAsset_Weap::pClassPointer = NULL;

// Class SFGame.SFCustomBuilder_Char
// 0x0000 (0x003C - 0x003C)
class USFCustomBuilder_Char : public USFCustomBuilder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61136 ];

		return pClassPointer;
	};

};

UClass* USFCustomBuilder_Char::pClassPointer = NULL;

// Class SFGame.SFCustomBuilder_Hand
// 0x0000 (0x003C - 0x003C)
class USFCustomBuilder_Hand : public USFCustomBuilder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61138 ];

		return pClassPointer;
	};

};

UClass* USFCustomBuilder_Hand::pClassPointer = NULL;

// Class SFGame.SFCustomBuilder_Helmet
// 0x0000 (0x003C - 0x003C)
class USFCustomBuilder_Helmet : public USFCustomBuilder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61140 ];

		return pClassPointer;
	};

};

UClass* USFCustomBuilder_Helmet::pClassPointer = NULL;

// Class SFGame.SFCustomBuilder_Weap
// 0x0000 (0x003C - 0x003C)
class USFCustomBuilder_Weap : public USFCustomBuilder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61142 ];

		return pClassPointer;
	};

};

UClass* USFCustomBuilder_Weap::pClassPointer = NULL;

// Class SFGame.SFCustomCache
// 0x0000 (0x003C - 0x003C)
class USFCustomCache : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61145 ];

		return pClassPointer;
	};

};

UClass* USFCustomCache::pClassPointer = NULL;

// Class SFGame.SFCustomCacheData
// 0x0000 (0x003C - 0x003C)
class USFCustomCacheData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61147 ];

		return pClassPointer;
	};

};

UClass* USFCustomCacheData::pClassPointer = NULL;

// Class SFGame.SFPawnFX_Human
// 0x0000 (0x0120 - 0x0120)
class USFPawnFX_Human : public USFPawnFX
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61875 ];

		return pClassPointer;
	};

};

UClass* USFPawnFX_Human::pClassPointer = NULL;

// Class SFGame.SFPawnFX_Human_EquipmentEffect
// 0x0034 (0x0154 - 0x0120)
class USFPawnFX_Human_EquipmentEffect : public USFPawnFX_Human
{
public:
	struct FName                                       EquipmentEffectBoneName;                          		// 0x0120 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             EquipmentEffectPS;                                		// 0x0128 (0x0004) [0x0000000000000000]              
	class UParticleSystemComponent*                    EquipmentEffectPSC;                               		// 0x012C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     EquipmentEffectColor;                             		// 0x0130 (0x000C) [0x0000000000000000]              
	struct FVector                                     EquipmentEffectScalar;                            		// 0x013C (0x000C) [0x0000000000000000]              
	struct FRotator                                    EquipmentEffectRotator;                           		// 0x0148 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61874 ];

		return pClassPointer;
	};

	void AttachEquipmentEffect ( );
};

UClass* USFPawnFX_Human_EquipmentEffect::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Effect
// 0x000C (0x01AC - 0x01A0)
class USFItem_Char_Effect : public USFItem_Char
{
public:
	struct FString                                     SFPawnFXClassName;                                		// 0x01A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 61879 ];

		return pClassPointer;
	};

	void ApplyItemToPawn ( class ASFPawn* AppliedPawn );
};

UClass* USFItem_Char_Effect::pClassPointer = NULL;

// Class SFGame.SFCustomCharacterPreview
// 0x0000 (0xB538 - 0xB538)
class ASFCustomCharacterPreview : public ASFCustomPreview
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62092 ];

		return pClassPointer;
	};

};

UClass* ASFCustomCharacterPreview::pClassPointer = NULL;

// Class SFGame.SFCustomCreateStatus
// 0x0000 (0x003C - 0x003C)
class USFCustomCreateStatus : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62103 ];

		return pClassPointer;
	};

};

UClass* USFCustomCreateStatus::pClassPointer = NULL;

// Class SFGame.SFCustomPart
// 0x0000 (0x003C - 0x003C)
class USFCustomPart : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62105 ];

		return pClassPointer;
	};

};

UClass* USFCustomPart::pClassPointer = NULL;

// Class SFGame.SFCustomPart_Char
// 0x0000 (0x003C - 0x003C)
class USFCustomPart_Char : public USFCustomPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62107 ];

		return pClassPointer;
	};

};

UClass* USFCustomPart_Char::pClassPointer = NULL;

// Class SFGame.SFCustomPart_Weap
// 0x0000 (0x003C - 0x003C)
class USFCustomPart_Weap : public USFCustomPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62109 ];

		return pClassPointer;
	};

};

UClass* USFCustomPart_Weap::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_WeaponTag
// 0x0004 (0x0094 - 0x0090)
class USFWeaponRIS_WeaponTag : public USFWeaponRIS_SkelComponentBase
{
public:
	class USFGFxMoviePlayer_WeaponNameTag*             WeaponTagMoviePlayer;                             		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62159 ];

		return pClassPointer;
	};

	bool OwnerForceDetach ( );
	bool OwnerAttached ( );
	void Init ( class ASFWeapon* InWeaponOwner );
	bool SetWeaponTagProperties ( int MainItemID, int WeaponTagID, class USkeletalMesh** OutWeaponTagMesh, class UMaterialInstanceConstant** OutWeaponTagMaterial );
};

UClass* USFWeaponRIS_WeaponTag::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Sight
// 0x002B (0x018C - 0x0161)
class USFItem_WeapOption_Sight : public USFItem_WeapOption
{
public:
	struct FName                                       SightCrosshair;                                   		// 0x0164 (0x0008) [0x0000000000000000]              
	struct FString                                     SightRISClassName;                                		// 0x016C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DOFBlurStartDistance;                             		// 0x0178 (0x0004) [0x0000000000000000]              
	float                                              DOFBlurEndDistance;                               		// 0x017C (0x0004) [0x0000000000000000]              
	TArray< struct FWeaponAlignment >                  AlignmentInfo;                                    		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62208 ];

		return pClassPointer;
	};

	void PostApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
	int SetUsingScope ( class ASFWeap_Bullet* SFWB );
};

UClass* USFItem_WeapOption_Sight::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_Accessory
// 0x0018 (0x00A8 - 0x0090)
class USFWeaponRIS_Accessory : public USFWeaponRIS_SkelComponentBase
{
public:
	struct FName                                       AccSocketName;                                    		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AccAnimNodeName;                                  		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFAnimNodeSlotAccessory*                    AccessoryAnimNode;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USFSkeletalMeshComponent*                    AccessoryComponent;                               		// 0x00A4 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62220 ];

		return pClassPointer;
	};

	bool OwnerSprintChange ( unsigned long bSprintStart );
	bool OwnerReload ( );
	bool OwnerZoomStateChanging ( int InZoomStateNext, unsigned long bForce );
	bool OwnerWeaponExigencyAttack ( );
	bool OwnerKill ( );
	void InitAccessoryComponent ( class USFSkeletalMeshComponent* InAccessoryComponent, class ASFWeapon* InWeaponOwner );
	void Init ( class ASFWeapon* InWeaponOwner );
};

UClass* USFWeaponRIS_Accessory::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_MuzzleFlash
// 0x001F (0x0180 - 0x0161)
class USFItem_WeapOption_MuzzleFlash : public USFItem_WeapOption
{
public:
	struct FString                                     MuzzleFlashStyle;                                 		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MuzzleFlashColor;                                 		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSpecialMuzzle : 1;                               		// 0x017C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62294 ];

		return pClassPointer;
	};

	void SetWeaponDefaultMuzzleFlash ( class AActor* AppliedActor );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_WeapOption_MuzzleFlash::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Silencer
// 0x0007 (0x0168 - 0x0161)
class USFItem_WeapOption_Silencer : public USFItem_WeapOption
{
public:
	class UClass*                                      SilencerRISClass;                                 		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62298 ];

		return pClassPointer;
	};

	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_WeapOption_Silencer::pClassPointer = NULL;

// Class SFGame.SFDailyEvent
// 0x0060 (0x009C - 0x003C)
class USFDailyEvent : public UObject
{
public:
	struct FString                                     DailyEventURL;                                    		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSDailyEventMessage >               DailyEventWinCountArray;                          		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSDailyEventMessage >               DailyEventKDCountArray;                           		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultKDCountMessage;                            		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultEventMessage;                              		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strWinOKMessage;                                  		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strKDOKMessage;                                   		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCancelMessage;                                 		// 0x0090 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62327 ];

		return pClassPointer;
	};

	struct FString GetMessageByKDCount ( int InCount, int* PrevCount, int* nIsPopUp );
	struct FString GetMessageByWinCount ( int InCount, int* PrevCount, int* nIsPopUp );
};

UClass* USFDailyEvent::pClassPointer = NULL;

// Class SFGame.SFDamageByPlayerEventData
// 0x0000 (0x0140 - 0x0140)
class USFDamageByPlayerEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62357 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFDamageByPlayerEventData::pClassPointer = NULL;

// Class SFGame.SFDamageEventData
// 0x0000 (0x01BC - 0x01BC)
class USFDamageEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62364 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFDamageEventData::pClassPointer = NULL;

// Class SFGame.SFDamageToHeroAlienControllerEventData
// 0x0000 (0x0140 - 0x0140)
class USFDamageToHeroAlienControllerEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62372 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFDamageToHeroAlienControllerEventData::pClassPointer = NULL;

// Class SFGame.SFDamageToPlayerEventData
// 0x0000 (0x0140 - 0x0140)
class USFDamageToPlayerEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62379 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFDamageToPlayerEventData::pClassPointer = NULL;

// Class SFGame.SFDeadCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFDeadCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62441 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFDeadCountEventData::pClassPointer = NULL;

// Class SFGame.SFDeathGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFDeathGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62528 ];

		return pClassPointer;
	};

};

UClass* USFDeathGameScore::pClassPointer = NULL;

// Class SFGame.SFFFAPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFFFAPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62529 ];

		return pClassPointer;
	};

};

UClass* ASFFFAPlayerController::pClassPointer = NULL;

// Class SFGame.SFDeathGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFDeathGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62530 ];

		return pClassPointer;
	};

};

UClass* ASFDeathGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFDeathTestOneGame
// 0x0000 (0x0844 - 0x0844)
class ASFDeathTestOneGame : public ASFDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62536 ];

		return pClassPointer;
	};

};

UClass* ASFDeathTestOneGame::pClassPointer = NULL;

// Class SFGame.SFDeathTestTwoGame
// 0x0000 (0x0844 - 0x0844)
class ASFDeathTestTwoGame : public ASFDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62538 ];

		return pClassPointer;
	};

};

UClass* ASFDeathTestTwoGame::pClassPointer = NULL;

// Class SFGame.SFDecalActorSpawnable
// 0x0000 (0x0228 - 0x0228)
class ASFDecalActorSpawnable : public ADecalActorMovable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62549 ];

		return pClassPointer;
	};

};

UClass* ASFDecalActorSpawnable::pClassPointer = NULL;

// Class SFGame.SFDedicatedDataPVEPlayerLog
// 0x0000 (0x003C - 0x003C)
class USFDedicatedDataPVEPlayerLog : public USFDedicatedDataPlayerLog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62611 ];

		return pClassPointer;
	};

	void SetDedicateSurvivalKillLogData ( class ASFPlayerReplicationInfo* KilledPRI, int KillType, struct FSFPEVPlayerLog* DedicatePlayerLog );
	void SetDedicateSurvivalPlayerLogData ( unsigned char logType, int nValue, int WeapSetIndex, struct FSFPEVPlayerLog* DedicatePlayerLog );
};

UClass* USFDedicatedDataPVEPlayerLog::pClassPointer = NULL;

// Class SFGame.SFDedicatedDataZombiePlayerLog
// 0x0000 (0x003C - 0x003C)
class USFDedicatedDataZombiePlayerLog : public USFDedicatedDataPVEPlayerLog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62625 ];

		return pClassPointer;
	};

	void SetDedicateZombieKillLogData ( class ASFZombiePlayerController* SFPC, class ASFPlayerReplicationInfo* KilledPRI, int nValue );
};

UClass* USFDedicatedDataZombiePlayerLog::pClassPointer = NULL;

// Class SFGame.SFPvEPlayerController
// 0x0054 (0x11FC - 0x11A8)
class ASFPvEPlayerController : public ASFPlayerController
{
public:
	int                                                OldCurrentWave;                                   		// 0x11A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FSFPEVPlayerLog                             DedicatePEVPlayerLog;                             		// 0x11AC (0x0050) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62634 ];

		return pClassPointer;
	};

	void NotifyWaveStarted ( int current_wave );
	void DumpAIList ( );
	void ProcessMatchEndEvent ( unsigned long bWinner );
	void MatchHasEnded ( class UClass* InMessageClass, struct FName EventReason, int nRedWinRound, int nBlueWinRound, class AActor* EndGameFocus, unsigned char WinningTeamIndex, float Duration );
	void SetLogInfoWeapPlayTime ( );
	void SetSendPVEPlayerLog ( unsigned char bIsAbnormalMatchEnd, int AddedTotalExp, int LuckyPointScore );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	void UpdateClearWaveForLog ( int current_wave );
};

UClass* ASFPvEPlayerController::pClassPointer = NULL;

// Class SFGame.SFSurvivalPlayerController
// 0x0034 (0x1230 - 0x11FC)
class ASFSurvivalPlayerController : public ASFPvEPlayerController
{
public:
	float                                              RespawningDeltaTime;                              		// 0x11FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RevivalTargetPawnID;                              		// 0x1200 (0x0004) [0x0000000000000000]              
	float                                              RevivalTargetDist;                                		// 0x1204 (0x0004) [0x0000000000000000]              
	float                                              EnableInteractionDist;                            		// 0x1208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class ASFObstaclesActor*                           InstallableTargetObstacle;                        		// 0x120C (0x0004) [0x0000000000000000]              
	class ASFObstaclesActor*                           TargetObstacleActor;                              		// 0x1210 (0x0004) [0x0000000000000000]              
	struct FString                                     MSG_Possible_To_Build_Obstacles;                  		// 0x1214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Impossible_To_Build_Obstacles;                		// 0x1220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              InstallObstacleStartTime;                         		// 0x122C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62633 ];

		return pClassPointer;
	};

	float GetEnableInteractionDist ( );
	bool IntersectTriangle ( struct FVector orig, struct FVector Dir, unsigned long bCW, struct FVector v0, struct FVector v1, struct FVector v2, float* T, float* U, float* V );
	bool CheckIntersectTriangle ( struct FVector StartLoc, struct FVector vViewDir, TArray< int > PointIdx, TArray< struct FVector > RectPoint, unsigned long bBoxin, float* fDist );
	bool CheckPointInHexahedron ( struct FVector vOrigin, struct FVector vExtent, struct FVector vPos );
	bool CheckLineCrossActorBounds ( class AActor* TargetActor, float* fDist );
	void DisableSetupObstacles ( class ASFObstaclesActor* AimTarget );
	void EnableSetupObstacles ( class ASFObstaclesActor* AimTarget, float newdist );
	bool CanReviveTargetPawn ( );
	void CheckSetupObstacleAim ( class ASFObstaclesActor* AimTarget );
	void DisableRevival ( class ASFPawn* AimPawn );
	void SetForcedDisableRevival ( class ASFPawn* AimPawn );
	void EnableRevival ( class ASFPawn* AimPawn, float newdist );
	bool CheckRevivalAimPointAt ( class AActor* TargetActor, float* fDist );
	void CheckRevivalAIM ( class ASFPawn* AimTarget );
	void DisplayInteractionlMsg ( unsigned char MsgType, unsigned long bDisplay, struct FString Message );
	void ObstacleLevelChanged ( class ASFObstaclesActor* ObstaclesActor );
	void DisplayRemainingRespawnTime ( float remain_time );
	void UpdateRemainingRespawnTime ( float DeltaTime, unsigned long bForce );
	void SetRemainingRespawnTime ( float remaining_time );
	void NotifyDBNO ( class AController* InstigatedBy, class AController* Victim, unsigned char DBNOLevelNew );
	void NotifyEnemyCountChanged ( );
	void ServerEndRound ( unsigned long bKillAllPawn );
	void ServerRevival ( int myRevivalTargetPawnID );
	void GetInventory ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	int GetDurabilityWeaponinWeaponSet ( int SetNo, int Slot, unsigned long bConvert );
	void ClearUseTimer ( );
	void ServerCancelObstacle ( );
	void CancelObstacle ( );
	void ServerInstallObstacle ( class ASFObstaclesActor* TargetObstacle );
	void SetInstallObstacle ( class ASFObstaclesActor* TargetObstacle );
	void Use ( );
	void SwitchWeapon ( unsigned char T );
};

UClass* ASFSurvivalPlayerController::pClassPointer = NULL;

// Class SFGame.SFZombiePlayerController
// 0x0030 (0x1260 - 0x1230)
class ASFZombiePlayerController : public ASFSurvivalPlayerController
{
public:
	int                                                PurchasedPistolID;                                		// 0x1230 (0x0004) [0x0000000000000000]              
	float                                              HealthPackPurchasedTime;                          		// 0x1234 (0x0004) [0x0000000000000000]              
	float                                              HealthPackDelayTime;                              		// 0x1238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     HealthPackFailedMessage;                          		// 0x123C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ZombieKillArrayLog[ 0x6 ];                        		// 0x1248 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62632 ];

		return pClassPointer;
	};

	void ProcessMatchEndEvent ( unsigned long bWinner );
	void ProcessPVEPlayTimeEvent ( int GameModeID, int PlayTime );
	void SetSendPVEPlayerLog ( unsigned char bIsAbnormalMatchEnd, int AddedTotalExp, int LuckyPointScore );
	bool CheckRevivalAimPointAt ( class AActor* TargetActor, float* fDist );
	void SpawnCameraLensEffectDamaged ( class ASFPawn* LocalPawn );
	void GetInventory ( int nSet, unsigned long bNotUsingInventoryInfo, TArray< class UClass* >* MyInventory );
	bool IsEnableInstantBuyItem ( );
	void SetHealthPackPurchasedTime ( int ItemId );
	void ClientSucceedPerformPurchase ( int ItemId, int Price, int LogData );
	void SucceedPerformPurchase ( int ItemId, int Price, int LogData );
};

UClass* ASFZombiePlayerController::pClassPointer = NULL;

// Class SFGame.SFZombieTypeJoin
// 0x000C (0x0048 - 0x003C)
class USFZombieTypeJoin : public UObject
{
public:
	TArray< struct FZombieTypeJoin >                   ZombieTypeJoinArray;                              		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62635 ];

		return pClassPointer;
	};

	int GetZombieAIType ( int Param1 );
};

UClass* USFZombieTypeJoin::pClassPointer = NULL;

// Class SFGame.SFDefaultRoomName
// 0x000C (0x0048 - 0x003C)
class USFDefaultRoomName : public UObject
{
public:
	TArray< struct FString >                           RoomNameArray;                                    		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62692 ];

		return pClassPointer;
	};

	struct FString GetRoomName ( );
};

UClass* USFDefaultRoomName::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddMoneyToAllPlayer
// 0x0004 (0x00F8 - 0x00F4)
class USFSeqAct_AddMoneyToAllPlayer : public USFSeqAct_SFGameInfo
{
public:
	int                                                Money;                                            		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62878 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AddMoneyToAllPlayer::pClassPointer = NULL;

// Class SFGame.SFSurvivalGameScore
// 0x001C (0x00DC - 0x00C0)
class USFSurvivalGameScore : public USFGameScore
{
public:
	TArray< struct FAIPawnScore >                      PawnClassBasis;                                   		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              SCORE_WaveEnd;                                    		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_BossClear;                                  		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_WaveEndTeam;                                		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_BossClearTeam;                              		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62901 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
	float GetModeBasisGameScore ( int LadderType, unsigned char AIType, int* RewardModeMoney, int* RewardModeExp, unsigned char* RewardBuff );
};

UClass* USFSurvivalGameScore::pClassPointer = NULL;

// Class SFGame.SFDefenceGame
// 0x0000 (0x086C - 0x086C)
class ASFDefenceGame : public ASFSurvivalGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62902 ];

		return pClassPointer;
	};

};

UClass* ASFDefenceGame::pClassPointer = NULL;

// Class SFGame.SFDefenceGameScore
// 0x001C (0x00DC - 0x00C0)
class USFDefenceGameScore : public USFGameScore
{
public:
	TArray< struct FAIPawnScore >                      PawnClassBasis;                                   		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              SCORE_WaveEnd;                                    		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_BossClear;                                  		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_WaveEndTeam;                                		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_BossClearTeam;                              		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62904 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
	float GetModeBasisGameScore ( int LadderType, unsigned char AIType, int* RewardModeMoney, int* RewardModeExp, unsigned char* RewardBuff );
};

UClass* USFDefenceGameScore::pClassPointer = NULL;

// Class SFGame.SFDefenceHUD
// 0x0000 (0x0E48 - 0x0E48)
class ASFDefenceHUD : public ASFSurvivalHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62905 ];

		return pClassPointer;
	};

};

UClass* ASFDefenceHUD::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_PvEBase
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_PvEBase : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62953 ];

		return pClassPointer;
	};

	bool OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void OnWaveStarted ( int current_wave );
	void OnChangedRemainingEnemyCount ( );
	void OnGFxKeyPress ( int KeyCode );
};

UClass* USFGFXHUD_PvEBase::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Survival
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Survival : public USFGFXHUD_PvEBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62952 ];

		return pClassPointer;
	};

};

UClass* USFGFXHUD_Survival::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Defence
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Defence : public USFGFXHUD_PvEBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62955 ];

		return pClassPointer;
	};

};

UClass* USFGFXHUD_Defence::pClassPointer = NULL;

// Class SFGame.SFDesertionRatio
// 0x0034 (0x0070 - 0x003C)
class USFDesertionRatio : public UObject
{
public:
	TArray< struct FSDesertionInfo >                   DesertionArray;                                   		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DesertionValue;                                   		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BeginerExp;                                       		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BeginerMsgIndex;                                  		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ViewDesertionPerLevel;                            		// 0x0054 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           DesertionMsgs;                                    		// 0x0058 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DesertionTooltip;                                 		// 0x0064 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 62963 ];

		return pClassPointer;
	};

	struct FString GetDesertionNotiMessage ( int InLevel );
	struct FString GetDesertionRatioMessage ( int UserExp, int InLevel, float nDesertionPer, unsigned long bFromMyInfo );
	int GetDesertionLevel ( int UserExp, float DesertionPer );
	float GetDesertionRatio ( int nDesertionCount, int AllPlayTime );
	struct FString GetDesertionRatioString ( float DesertionPer );
};

UClass* USFDesertionRatio::pClassPointer = NULL;

// Class SFGame.SFDmgType_Explosive
// 0x0004 (0x00B0 - 0x00AC)
class USFDmgType_Explosive : public USFDamageType
{
public:
	unsigned long                                      bGasDamage : 1;                                   		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamagetoArmor : 1;                               		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFragDamage : 1;                                  		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63003 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Explosive::pClassPointer = NULL;

// Class SFGame.SFDmgType_AI_Explosion
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_AI_Explosion : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63008 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_AI_Explosion::pClassPointer = NULL;

// Class SFGame.SFDmgType_HandGrenade
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_HandGrenade : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63010 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_HandGrenade::pClassPointer = NULL;

// Class SFGame.SFDmgType_HG_Frag
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_HG_Frag : public USFDmgType_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63012 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_HG_Frag::pClassPointer = NULL;

// Class SFGame.SFDmgType_AlienAnnihilator
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_AlienAnnihilator : public USFDmgType_HG_Frag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63014 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_AlienAnnihilator::pClassPointer = NULL;

// Class SFGame.SFDmgType_Arrow
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_Arrow : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63016 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Arrow::pClassPointer = NULL;

// Class SFGame.SFDmgType_Knife
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Knife : public USFDmgType_CloseCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63021 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Knife::pClassPointer = NULL;

// Class SFGame.SFDmgType_Atropen
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Atropen : public USFDmgType_Knife
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63023 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Atropen::pClassPointer = NULL;

// Class SFGame.SFDmgType_Barricade
// 0x000C (0x00B8 - 0x00AC)
class USFDmgType_Barricade : public USFDmgType_Enviroment
{
public:
	class UParticleSystem*                             DeathEffectParticleSystem;                        		// 0x00AC (0x0004) [0x0000000000000000]              
	struct FName                                       BoneNameForDeathEffect;                           		// 0x00B0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63026 ];

		return pClassPointer;
	};

	void SpawnDeathEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
};

UClass* USFDmgType_Barricade::pClassPointer = NULL;

// Class SFGame.SFDmgType_Burn
// 0x0000 (0x00CC - 0x00CC)
class USFDmgType_Burn : public USFDmgType_LongTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63083 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Burn::pClassPointer = NULL;

// Class SFGame.SFDmgType_C4
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_C4 : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63085 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_C4::pClassPointer = NULL;

// Class SFGame.SFDmgType_Car
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_Car : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63087 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Car::pClassPointer = NULL;

// Class SFGame.SFDmgType_Claw
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Claw : public USFDmgType_CloseCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63092 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Claw::pClassPointer = NULL;

// Class SFGame.SFDmgType_CrashStep
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_CrashStep : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63095 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_CrashStep::pClassPointer = NULL;

// Class SFGame.SFDmgType_CrushBoost
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_CrushBoost : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63097 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_CrushBoost::pClassPointer = NULL;

// Class SFGame.SFDmgType_Drown
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Drown : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63099 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Drown::pClassPointer = NULL;

// Class SFGame.SFDmgType_Drum
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_Drum : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63101 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Drum::pClassPointer = NULL;

// Class SFGame.SFDmgType_ElectricBarricade
// 0x0000 (0x00CC - 0x00CC)
class USFDmgType_ElectricBarricade : public USFDmgType_ElectricShock
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63106 ];

		return pClassPointer;
	};

	void SpawnDeathEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
};

UClass* USFDmgType_ElectricBarricade::pClassPointer = NULL;

// Class SFGame.SFDmgType_Elevator
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Elevator : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63114 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Elevator::pClassPointer = NULL;

// Class SFGame.SFDmgType_EnvCrash
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_EnvCrash : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63116 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_EnvCrash::pClassPointer = NULL;

// Class SFGame.SFDmgType_Fell
// 0x0000 (0x0078 - 0x0078)
class USFDmgType_Fell : public UDmgType_Fell
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63118 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Fell::pClassPointer = NULL;

// Class SFGame.SFDmgType_GrenadeLauncher
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_GrenadeLauncher : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63120 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_GrenadeLauncher::pClassPointer = NULL;

// Class SFGame.SFDmgType_HG_FBang
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_HG_FBang : public USFDmgType_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63122 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_HG_FBang::pClassPointer = NULL;

// Class SFGame.SFDmgType_HG_Gas
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_HG_Gas : public USFDmgType_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63124 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_HG_Gas::pClassPointer = NULL;

// Class SFGame.SFDmgType_HG_Smoke
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_HG_Smoke : public USFDmgType_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63126 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_HG_Smoke::pClassPointer = NULL;

// Class SFGame.SFDmgType_IncendiaryGrenade
// 0x0000 (0x00CC - 0x00CC)
class USFDmgType_IncendiaryGrenade : public USFDmgType_LongTime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63128 ];

		return pClassPointer;
	};

	void SpawnDeathEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
};

UClass* USFDmgType_IncendiaryGrenade::pClassPointer = NULL;

// Class SFGame.SFDmgType_KillVolume
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_KillVolume : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63136 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_KillVolume::pClassPointer = NULL;

// Class SFGame.SFDmgType_MG
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_MG : public USFDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63138 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_MG::pClassPointer = NULL;

// Class SFGame.SFDmgType_MG_AutoTurret
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_MG_AutoTurret : public USFDmgType_MG
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63140 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_MG_AutoTurret::pClassPointer = NULL;

// Class SFGame.SFDmgType_OxygenCylinder
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_OxygenCylinder : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63142 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_OxygenCylinder::pClassPointer = NULL;

// Class SFGame.SFDmgType_Pistol
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Pistol : public USFDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63144 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Pistol::pClassPointer = NULL;

// Class SFGame.SFDmgType_StunnerExplo
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_StunnerExplo : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63146 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_StunnerExplo::pClassPointer = NULL;

// Class SFGame.SFDmgType_PlayerStunnerExplo
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_PlayerStunnerExplo : public USFDmgType_StunnerExplo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63148 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_PlayerStunnerExplo::pClassPointer = NULL;

// Class SFGame.SFDmgType_Rifle
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Rifle : public USFDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63150 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Rifle::pClassPointer = NULL;

// Class SFGame.SFDmgType_RPG
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_RPG : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63152 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_RPG::pClassPointer = NULL;

// Class SFGame.SFDmgType_Shotgun
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Shotgun : public USFDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63154 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Shotgun::pClassPointer = NULL;

// Class SFGame.SFDmgType_ThrowingKnife
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_ThrowingKnife : public USFDmgType_Explosive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63156 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_ThrowingKnife::pClassPointer = NULL;

// Class SFGame.SFDmgType_Shuriken
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_Shuriken : public USFDmgType_ThrowingKnife
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63158 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Shuriken::pClassPointer = NULL;

// Class SFGame.SFDmgType_SMG
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_SMG : public USFDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63160 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_SMG::pClassPointer = NULL;

// Class SFGame.SFDmgType_Sniper
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Sniper : public USFDmgType_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63162 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Sniper::pClassPointer = NULL;

// Class SFGame.SFDmgType_Strike
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Strike : public USFDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63164 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Strike::pClassPointer = NULL;

// Class SFGame.SFDmgType_StunGrenade
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_StunGrenade : public USFDmgType_Charge
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63166 ];

		return pClassPointer;
	};

	bool IsStunSameTeam ( );
	bool IsStun ( );
};

UClass* USFDmgType_StunGrenade::pClassPointer = NULL;

// Class SFGame.SFDmgType_TeslaCanon
// 0x0000 (0x00CC - 0x00CC)
class USFDmgType_TeslaCanon : public USFDmgType_ElectricShock
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63172 ];

		return pClassPointer;
	};

	void SpawnDeathEffect ( class ASFPawn* P, float Damage, struct FVector Momentum, struct FName BoneName, struct FVector HitLocation );
};

UClass* USFDmgType_TeslaCanon::pClassPointer = NULL;

// Class SFGame.SFDmgType_ThrowingTomahawk
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_ThrowingTomahawk : public USFDmgType_ThrowingKnife
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63180 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_ThrowingTomahawk::pClassPointer = NULL;

// Class SFGame.SFDmgType_ThrowingToyHammer
// 0x0000 (0x00B0 - 0x00B0)
class USFDmgType_ThrowingToyHammer : public USFDmgType_ThrowingKnife
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63182 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_ThrowingToyHammer::pClassPointer = NULL;

// Class SFGame.SFDmgType_Tomahawk
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_Tomahawk : public USFDmgType_Knife
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63184 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_Tomahawk::pClassPointer = NULL;

// Class SFGame.SFDmgType_ToyHammer
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_ToyHammer : public USFDmgType_CloseCombat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63186 ];

		return pClassPointer;
	};

};

UClass* USFDmgType_ToyHammer::pClassPointer = NULL;

// Class SFGame.SFDmgType_ToyHammer_StunRecover
// 0x0000 (0x00AC - 0x00AC)
class USFDmgType_ToyHammer_StunRecover : public USFDmgType_ToyHammer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63188 ];

		return pClassPointer;
	};

	bool IsStunRecover ( );
};

UClass* USFDmgType_ToyHammer_StunRecover::pClassPointer = NULL;

// Class SFGame.SFDoubleKillEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFDoubleKillEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63192 ];

		return pClassPointer;
	};

};

UClass* USFDoubleKillEventData::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_ShooterItem
// 0x0039 (0x029C - 0x0263)
class ASFDroppedPickup_ShooterItem : public ASFDroppedPickupEx
{
public:
	float                                              ItemLifeTime;                                     		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StatUpTime;                                       		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BlinkTime;                                        		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BlinkTerm;                                        		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystem*                             PickupEffect;                                     		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SlotIdx;                                          		// 0x0278 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           InnerChildClasses;                                		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlinkEffectString;                                		// 0x0288 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              BlinkEffectScale;                                 		// 0x0294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystem*                             BlinkEffectPS;                                    		// 0x0298 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63335 ];

		return pClassPointer;
	};

	void ApplyStatPowerup ( class ASFShooterDefencePlayerReplicationInfo* TargetPRI );
	void AddExtraValue ( float ExtraVal );
	void eventDestroyed ( );
	void BlinkEffect ( );
	void BlinkStart ( );
	void PostBeginPlay ( );
};

UClass* ASFDroppedPickup_ShooterItem::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_ShooterHealth
// 0x0000 (0x029C - 0x029C)
class ASFDroppedPickup_ShooterHealth : public ASFDroppedPickup_ShooterItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63366 ];

		return pClassPointer;
	};

};

UClass* ASFDroppedPickup_ShooterHealth::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_ShooterMoney
// 0x0000 (0x029C - 0x029C)
class ASFDroppedPickup_ShooterMoney : public ASFDroppedPickup_ShooterItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63370 ];

		return pClassPointer;
	};

};

UClass* ASFDroppedPickup_ShooterMoney::pClassPointer = NULL;

// Class SFGame.SFDroppedPickup_ShooterPowerUp
// 0x0000 (0x029C - 0x029C)
class ASFDroppedPickup_ShooterPowerUp : public ASFDroppedPickup_ShooterItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63374 ];

		return pClassPointer;
	};

};

UClass* ASFDroppedPickup_ShooterPowerUp::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_DroppedWeapon
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_DroppedWeapon : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63392 ];

		return pClassPointer;
	};

	void UpdateVariables ( class AController* EventInstigator, class UObject* OptionalObject );
};

UClass* USFSeqEvent_DroppedWeapon::pClassPointer = NULL;

// Class SFGame.SFDuelGame
// 0x0014 (0x0858 - 0x0844)
class ASFDuelGame : public ASFTeamGameInfo
{
public:
	struct FName                                       PlayerSortType;                                   		// 0x0844 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                SetOverDelay;                                     		// 0x084C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bReserveLastHP : 1;                               		// 0x0850 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	class ASFDuelGameReplicationInfo*                  SFDuelGRI;                                        		// 0x0854 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63457 ];

		return pClassPointer;
	};

	void RestartPlayer ( class AController* aPlayer );
	bool CheckMaxLives ( class APlayerReplicationInfo* LastDeath );
	void IncreaseRound ( );
	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
	void InitDuelGame ( );
	bool DoesReachedGoalSet ( );
	void CheckGRI ( );
};

UClass* ASFDuelGame::pClassPointer = NULL;

// Class SFGame.SFDuelGameReplicationInfo
// 0x0004 (0x04AC - 0x04A8)
class ASFDuelGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	int                                                DuelMatchCounter;                                 		// 0x04A8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63459 ];

		return pClassPointer;
	};

	void OnSetOver ( float Duration, class UClass* SFGameClass );
	void ChangedGameInfoState ( );
	bool DoesReachedGoalSet ( );
	void IncreaseDuelMatchCounter ( );
	void SetDuelMatchCounter ( int NewSet );
	int GetDuelMatchCounter ( );
};

UClass* ASFDuelGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFDuelTeamInfo
// 0x0018 (0x0288 - 0x0270)
class ASFDuelTeamInfo : public ASFTeamInfo
{
public:
	TArray< class ASFDuelPlayerReplicationInfo* >      SortedTeamPRI;                                    		// 0x0270 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                WinningSet;                                       		// 0x027C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                MatchingPlayerIndex;                              		// 0x0280 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	int                                                TotalPlayer;                                      		// 0x0284 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63471 ];

		return pClassPointer;
	};

	bool IsMatchingPlayer ( class ASFDuelPlayerReplicationInfo* SFPRI );
	void IncreaseMatchingPlayerIndex ( );
	int GetMatchingPlayerIndex ( );
	bool IsPlayerAlive ( );
	void IncreaseWinningSet ( );
	void SortTeamPRI ( struct FName SortType );
	void InitSet ( struct FName SortType );
	void RemoveTeamPRI ( class ASFDuelPlayerReplicationInfo* PRI );
	void AddTeamPRI ( class ASFDuelPlayerReplicationInfo* PRI );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	int GetWinningSet ( );
	bool DoesReachedGoalSet ( );
};

UClass* ASFDuelTeamInfo::pClassPointer = NULL;

// Class SFGame.SFDuelPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFDuelPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63510 ];

		return pClassPointer;
	};

	void ClientReset ( );
	void ServerRestartPlayer ( );
	void UpdateStateForReset ( );
	bool CanRestartPlayer ( );
};

UClass* ASFDuelPlayerController::pClassPointer = NULL;

// Class SFGame.SFDuelPlayerReplicationInfo
// 0x0004 (0x0754 - 0x0750)
class ASFDuelPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	int                                                PlayOrder;                                        		// 0x0750 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63511 ];

		return pClassPointer;
	};

};

UClass* ASFDuelPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFDynamicInterpActor
// 0x0000 (0x02B4 - 0x02B4)
class ASFDynamicInterpActor : public AInterpActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63572 ];

		return pClassPointer;
	};

};

UClass* ASFDynamicInterpActor::pClassPointer = NULL;

// Class SFGame.SFDynamicWaterVolume
// 0x0000 (0x0304 - 0x0304)
class ASFDynamicWaterVolume : public ASFWaterVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63643 ];

		return pClassPointer;
	};

};

UClass* ASFDynamicWaterVolume::pClassPointer = NULL;

// Class SFGame.SFEarnScoreEventData
// 0x0000 (0x01BC - 0x01BC)
class USFEarnScoreEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63646 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEarnScoreEventData::pClassPointer = NULL;

// Class SFGame.SFWaveCompleteByMap
// 0x0000 (0x0140 - 0x0140)
class USFWaveCompleteByMap : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63655 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	int GetChallengeDataInvalidValue ( struct FChallengeData* ChallengeData );
};

UClass* USFWaveCompleteByMap::pClassPointer = NULL;

// Class SFGame.SFEasyWaveCompleteByMap
// 0x0000 (0x0140 - 0x0140)
class USFEasyWaveCompleteByMap : public USFWaveCompleteByMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63665 ];

		return pClassPointer;
	};

};

UClass* USFEasyWaveCompleteByMap::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ElevatorActor
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ElevatorActor : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63710 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void NotifyEncroachingOn ( class AActor* Hit );
};

UClass* USFSeqEvent_ElevatorActor::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ElevatorActorOperationComplete
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ElevatorActorOperationComplete : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63715 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ElevatorActorOperationComplete::pClassPointer = NULL;

// Class SFGame.SFEmblemManager
// 0x0028 (0x0064 - 0x003C)
class USFEmblemManager : public UObject
{
public:
	struct FString                                     MSG_Emblem_NotEnough_PCRoom_Level;                		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Emblem_Spray_Expired;                         		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Emblem_NotEnough_VIPGrade;                    		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USFGFxLobby*                                 Lobby_Manager;                                    		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63716 ];

		return pClassPointer;
	};

	bool IsCompletedChallengeEmblem ( int EmblemID );
	bool IsSprayEmblem ( unsigned char EmblemType );
	bool CheckProfileEmblemValidation ( );
	void UpdateProfileEmblem ( unsigned long ShoulCheckTimeout );
	void Initialize ( class USFGFxLobby* lobby );
};

UClass* USFEmblemManager::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_MyInfo
// 0x0010 (0x0364 - 0x0354)
class USFGFxLobby_MyInfo : public USFGFxLobbyScreen
{
public:
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x0354 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DefaultMainTabIndex;                              		// 0x0360 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63726 ];

		return pClassPointer;
	};

	void ASCreateMainTab ( class UGFxObject* MainTabs );
	void ASSetPlayerRealRanking ( struct FString RankingChgType, struct FString Ranking );
	void ASSetPlayerRanking ( unsigned long bShow, struct FString strAllExpRank, struct FString strAllExp, struct FString strWinRoundRank, struct FString strKillRank, struct FString strAssistRank, struct FString strHeadShotRank, struct FString strBlastingRank, struct FString strSeizureRank, struct FString strEscapeRank, struct FString AllWinRoundRank, struct FString AllKillRank, struct FString AllAssistRank, struct FString AllHeadShotRank, struct FString AllBlastingRank, struct FString AllSeizureRank, struct FString AllEscapeRank, struct FString strUnderRankerMsg );
	void ASSetNotUseWeaponLog ( );
	void ASClearWeaponLogGraph ( );
	void ASSetSelectedWeaponIndex ( int SelIndex );
	void ASSetSelectedWeaponLog ( struct FString WeaponName, struct FString KADRatio, struct FString HeadShot, struct FString Kill, struct FString Assist, struct FString Death, struct FString PlayTime, struct FString KillRatioText, struct FString AssistRatioText, struct FString EtcRatioText, struct FString HeadShotRatioText, struct FString ValidAccuracy, struct FString HeadAccuracy, struct FString ChestAccuracy, struct FString EtcAccuracy, struct FString WeaponCI, struct FString WeaponImgName, struct FString KillRatio, struct FString AssistRatio, struct FString EtcRatio, struct FString HeadShotRatio );
	void ASSetPlayerInfo ( struct FString CodeName, struct FString KDRate, struct FString HKRate, struct FString WinRate, struct FString KDCount, struct FString Kills, struct FString HKills, struct FString WinCnt, struct FString HKGraph, struct FString NametagImage, struct FString UsingWeapon, struct FString GfxRank, struct FString CamoID, struct FString DesertionLevel, struct FString DesertionString, struct FString ClanMark );
	void ASSetSPGage ( int SPPercent );
	void ASSetExpGage ( struct FString NextGFxRank, int ExpPercent );
	void ASSetPersonalImage ( struct FString N );
	void ASClosePersonalImageBox ( );
	void ASSetSelectedImage ( struct FString Idx );
	void OnVIPCouponUseStarted ( int ItemId );
	void OnCheckOutDateVipItem ( );
	void OnUpdateProfileEmblem ( );
	void OnColorCodeNameChanged ( );
	void InitializeMainTab ( );
	int ChangeMainTab ( int InTabIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_MyInfo::pClassPointer = NULL;

// Class SFGame.SFEmit_HitEffect
// 0x0000 (0x0250 - 0x0250)
class ASFEmit_HitEffect : public ASFEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63779 ];

		return pClassPointer;
	};

	void PawnBaseDied ( );
	void AttachTo ( class APawn* P, struct FName NewBoneName );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
};

UClass* ASFEmit_HitEffect::pClassPointer = NULL;

// Class SFGame.SFEnableSurvivalMapAward
// 0x0001 (0x0045 - 0x0044)
class USFEnableSurvivalMapAward : public USFBaseAward
{
public:
	unsigned char                                      EnableDifficulty;                                 		// 0x0044 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63925 ];

		return pClassPointer;
	};

	void AWARDEARNED ( struct FASValue AwardValue );
};

UClass* USFEnableSurvivalMapAward::pClassPointer = NULL;

// Class SFGame.SFEnableSurvivalHardMapAward
// 0x0000 (0x0045 - 0x0045)
class USFEnableSurvivalHardMapAward : public USFEnableSurvivalMapAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63930 ];

		return pClassPointer;
	};

};

UClass* USFEnableSurvivalHardMapAward::pClassPointer = NULL;

// Class SFGame.SFEnableSurvivalNormalMapAward
// 0x0000 (0x0045 - 0x0045)
class USFEnableSurvivalNormalMapAward : public USFEnableSurvivalMapAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63932 ];

		return pClassPointer;
	};

};

UClass* USFEnableSurvivalNormalMapAward::pClassPointer = NULL;

// Class SFGame.SFEnableSurvivalVeryHardMapAward
// 0x0000 (0x0045 - 0x0045)
class USFEnableSurvivalVeryHardMapAward : public USFEnableSurvivalMapAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 63934 ];

		return pClassPointer;
	};

};

UClass* USFEnableSurvivalVeryHardMapAward::pClassPointer = NULL;

// Class SFGame.SFEntryPlayerReplicationInfo
// 0x0000 (0x0750 - 0x0750)
class ASFEntryPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64010 ];

		return pClassPointer;
	};

	void RequestPIEInventoryInfos ( );
};

UClass* ASFEntryPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFEscapeGame
// 0x0004 (0x0848 - 0x0844)
class ASFEscapeGame : public ASFTeamGameInfo
{
public:
	class ASFEscapeGameReplicationInfo*                SFEscapeGRI;                                      		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64177 ];

		return pClassPointer;
	};

	void CheckGRI ( );
	void OnEscaped ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFEscapeGame::pClassPointer = NULL;

// Class SFGame.SFEscapeGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFEscapeGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64179 ];

		return pClassPointer;
	};

};

UClass* ASFEscapeGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFEscapeGameScore
// 0x000C (0x00CC - 0x00C0)
class USFEscapeGameScore : public USFGameScore
{
public:
	float                                              SCORE_Escaped;                                    		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_EscapedTeam;                                		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_DefendEscapeTeam;                           		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64186 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFEscapeGameScore::pClassPointer = NULL;

// Class SFGame.SFEscapeHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFEscapeHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64187 ];

		return pClassPointer;
	};

};

UClass* ASFEscapeHUD::pClassPointer = NULL;

// Class SFGame.SFEscapeGameVs16
// 0x0000 (0x0848 - 0x0848)
class ASFEscapeGameVs16 : public ASFEscapeGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64201 ];

		return pClassPointer;
	};

};

UClass* ASFEscapeGameVs16::pClassPointer = NULL;

// Class SFGame.SFEscapeGameVs16Score
// 0x0000 (0x00CC - 0x00CC)
class USFEscapeGameVs16Score : public USFEscapeGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64203 ];

		return pClassPointer;
	};

};

UClass* USFEscapeGameVs16Score::pClassPointer = NULL;

// Class SFGame.SFEscapeVs16HUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFEscapeVs16HUD : public ASF16VS16ModeHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64204 ];

		return pClassPointer;
	};

};

UClass* ASFEscapeVs16HUD::pClassPointer = NULL;

// Class SFGame.SFEventChallengeAward
// 0x0000 (0x0044 - 0x0044)
class USFEventChallengeAward : public USFBaseAward
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64210 ];

		return pClassPointer;
	};

	void AWARDEARNED ( struct FASValue AwardValue );
};

UClass* USFEventChallengeAward::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieAssist
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieAssist : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64269 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieAssist::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieDead
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieDead : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64276 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieDead::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieHeadShot
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieHeadShot : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64283 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieHeadShot::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieHeadShotByType
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieHeadShotByType : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64290 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieHeadShotByType::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKill
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieKill : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64297 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieKill::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKillByAIType
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieKillByAIType : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64304 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieKillByAIType::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKillByCrossBow
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieKillByCrossBow : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64311 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieKillByCrossBow::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKillByCrowBar
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieKillByCrowBar : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64318 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieKillByCrowBar::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKillByFlamer
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieKillByFlamer : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64325 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieKillByFlamer::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKillByRPG
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieKillByRPG : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64332 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieKillByRPG::pClassPointer = NULL;

// Class SFGame.SFKillEventData
// 0x0000 (0x01BC - 0x01BC)
class USFKillEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64339 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFKillEventData::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieKillByWPType
// 0x0000 (0x01BC - 0x01BC)
class USFEventDataZombieKillByWPType : public USFKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64347 ];

		return pClassPointer;
	};

};

UClass* USFEventDataZombieKillByWPType::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieLimitedWeapon
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieLimitedWeapon : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64349 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieLimitedWeapon::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieMultiKill
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieMultiKill : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64356 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieMultiKill::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieMultiKill1
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieMultiKill1 : public USFEventDataZombieMultiKill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64363 ];

		return pClassPointer;
	};

};

UClass* USFEventDataZombieMultiKill1::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieMultiKill2
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieMultiKill2 : public USFEventDataZombieMultiKill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64365 ];

		return pClassPointer;
	};

};

UClass* USFEventDataZombieMultiKill2::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieMultiKill3
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieMultiKill3 : public USFEventDataZombieMultiKill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64367 ];

		return pClassPointer;
	};

};

UClass* USFEventDataZombieMultiKill3::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieNoDie
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieNoDie : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64369 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieNoDie::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieNoUseShop
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieNoUseShop : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64376 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieNoUseShop::pClassPointer = NULL;

// Class SFGame.SFEventDataZombiePlayTime
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombiePlayTime : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64383 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombiePlayTime::pClassPointer = NULL;

// Class SFGame.SFEventDataZombieRevival
// 0x0000 (0x0140 - 0x0140)
class USFEventDataZombieRevival : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64390 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFEventDataZombieRevival::pClassPointer = NULL;

// Class SFGame.SFExtraBodyPartsManager
// 0x0018 (0x0054 - 0x003C)
class USFExtraBodyPartsManager : public UObject
{
public:
	unsigned long                                      binited : 1;                                      		// 0x003C (0x0004) [0x0000000000000000] [0x00000001] 
	class ASFPawn*                                     Owner;                                            		// 0x0040 (0x0004) [0x0000000000000000]              
	TArray< struct FsExtraPart >                       ExtraParts;                                       		// 0x0044 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      TargetMesh;                                       		// 0x0050 (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64409 ];

		return pClassPointer;
	};

	void Destroy ( );
	int GetPartID ( int partIdx );
	void SyncDroppedExtraParts ( int ElementIndex );
	void SetCollisionHide ( unsigned long bHide );
	bool CheckExtraPartHitforDEDI ( struct FVector HitLocation, struct FName* HitBone );
	void ClearMeshComponent ( );
	void Clear ( );
	bool CoveredSocketbyExtraParts ( struct FName TestSocketName, int partIdx );
	void UpdateCoveredPartsbyExtraParts ( unsigned long bHideParts, int partIdx );
	void DropExtraPart ( int partIdx, unsigned long noMesh, unsigned long bRep );
	void CheckHitExtraParts ( struct FName HitBoneName, int* Damage );
	void UpdateExtraParts ( class USkeletalMeshComponent* newTargetMesh, class UDynamicLightEnvironmentComponent* NewLightEnvironment );
	void Init ( class ASFPawn* NewOwner );
};

UClass* USFExtraBodyPartsManager::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ExtraArmor
// 0x0060 (0x01D4 - 0x0174)
class USFItem_Func_ExtraArmor : public USFItem_Functional_Char
{
public:
	struct FString                                     DropClassName;                                    		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DefencePoint;                                     		// 0x0180 (0x0004) [0x0000000000000000]              
	unsigned long                                      Dropable : 1;                                     		// 0x0184 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FName                                       SocketName;                                       		// 0x0188 (0x0008) [0x0000000000000000]              
	struct FVector                                     Translation;                                      		// 0x0190 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x019C (0x000C) [0x0000000000000000]              
	float                                              DefenceDir;                                       		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              DefenceRange;                                     		// 0x01AC (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             BoneNames;                                        		// 0x01B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      PartID;                                           		// 0x01BC (0x0001) [0x0000000000000000]              
	class USkeletalMesh*                               Mesh;                                             		// 0x01C0 (0x0004) [0x0000000000000000]              
	class UPhysicsAsset*                               PhysAsset;                                        		// 0x01C4 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             CoverdSockets;                                    		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64425 ];

		return pClassPointer;
	};

	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ExtraArmor::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_FacebookFriendList
// 0x0018 (0x0284 - 0x026C)
class USFGFxDialog_FacebookFriendList : public USFGFxDialog_WebBrowser
{
public:
	struct FString                                     FriendListDataBindingName;                        		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFacebookUserInfo >                FacebookFriendsList;                              		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64590 ];

		return pClassPointer;
	};

	class UGFxObject* datastore_FillData_FriendListAt ( int Index );
	void datastore_FillData_FriendList ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	void facebook_friend_add_list_click ( int Index );
	void facebook_friend_add_btn_click ( int Index );
	void OnMessengerFriendListChanged ( class UPacket* recvPacket );
	void PKT_GetUserInfoByFacebook_OK ( class UPacket* recvPacket );
	void PKT_GetUserInfoByFacebook_TRANS ( class UPacket* recvPacket );
	void DelegateSetup ( );
	void UpdateCachedFriendList ( );
	void UpdateFriendList ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_FacebookFriendList::pClassPointer = NULL;

// Class SFGame.SFFastZoomEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFFastZoomEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64631 ];

		return pClassPointer;
	};

};

UClass* USFFastZoomEventData::pClassPointer = NULL;

// Class SFGame.SFFilterChatting
// 0x003C (0x009C - 0x0060)
class USFFilterChatting : public USFTextFilter
{
public:
	TArray< struct FString >                           ChatFilterStringSet;                              		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsEmoticonData >                    replacementEmoticonStringSet;                     		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsEmoticonData >                    HTMLFilterStringSet;                              		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           replacementCensoredStringSet;                     		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ItemPropTextArray;                                		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64704 ];

		return pClassPointer;
	};

	struct FString GetOriginalTextWithFiltered ( struct FString strOriginal, TArray< struct FSFindPos >* FindPosArray );
	void GetFindPositionArray ( struct FString strConvert, struct FString strFind, struct FString strReplace, TArray< struct FSFindPos >* OutFindPosArray );
	struct FString GetCensoredHTMLFilter ( struct FString strText, int* nOutIsFiltered );
	struct FString GetCensored ( struct FString strText, unsigned long bNotUseEmoticon, unsigned long bCheckItemPropText );
};

UClass* USFFilterChatting::pClassPointer = NULL;

// Class SFGame.SFFilterCodeName
// 0x0038 (0x0098 - 0x0060)
class USFFilterCodeName : public USFTextFilter
{
public:
	TArray< struct FSCharRange >                       EnableLocalCharSet;                               		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                JapanLongCharacter;                               		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                JapanDotCharacter;                                		// 0x0070 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           NameFilterStringSet;                              		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           NameforDebug;                                     		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSpecialCharRange >                 EnableSpecialCharSet;                             		// 0x008C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64757 ];

		return pClassPointer;
	};

	bool IsSpecialCharacterSet ( int nAscCode, int CharSetIndex );
	bool IsUseableChar ( int nAscCode, struct FName Option, int CharSetIndex );
	bool IsCommonCharacterSetWord ( struct FString strText, struct FName Option, int CharSetIndex );
	bool IsInUnuseableWord ( struct FString strText, struct FName Option, int CharSetIndex );
	bool IsInSwearWord ( struct FString strText, struct FString* SwearWord );
};

UClass* USFFilterCodeName::pClassPointer = NULL;

// Class SFGame.SFFirstKillEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFFirstKillEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64810 ];

		return pClassPointer;
	};

};

UClass* USFFirstKillEventData::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_SeizureTrigger
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_SeizureTrigger : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64852 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_SeizureTrigger::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_CTFFlag
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_CTFFlag : public USFSeqEvent_SeizureTrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64851 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_CTFFlag::pClassPointer = NULL;

// Class SFGame.SFFractureManager
// 0x0000 (0x025C - 0x025C)
class ASFFractureManager : public AFractureManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64879 ];

		return pClassPointer;
	};

};

UClass* ASFFractureManager::pClassPointer = NULL;

// Class SFGame.SFFrictionVolume
// 0x000C (0x02B4 - 0x02A8)
class ASFFrictionVolume : public APhysicsVolume
{
public:
	unsigned char                                      TargetTeamToFriction;                             		// 0x02A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                SFGroundFriction;                                 		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                OldGroundFriction;                                		// 0x02B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64881 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool CheckTargetTeam ( class AActor* Other, unsigned char Team );
	void eventPostBeginPlay ( );
};

UClass* ASFFrictionVolume::pClassPointer = NULL;

// Class SFGame.SFFrontLineGame
// 0x000C (0x0850 - 0x0844)
class ASFFrontLineGame : public ASFTeamGameInfo
{
public:
	TArray< class ASFFrontLineVolume* >                arrFrontLineVolumes;                              		// 0x0844 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64900 ];

		return pClassPointer;
	};

	void IncreaseFrontLineScore ( );
	void BaseScoreAssist ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI, class APawn* KilledPawn );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void OnOccupied ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFFrontLineGame::pClassPointer = NULL;

// Class SFGame.SFFrontLineGameScore
// 0x0014 (0x00D4 - 0x00C0)
class USFFrontLineGameScore : public USFGameScore
{
public:
	float                                              TEAMSCORE_Occupying1VolumePerSec;                 		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TEAMSCORE_Occupying2VolumePerSec;                 		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TEAMSCORE_Occupying3VolumePerSec;                 		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KillAssistAndOccupyRateForTeamScore;              		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Occupy;                                     		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64931 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFFrontLineGameScore::pClassPointer = NULL;

// Class SFGame.SFFrontLineHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFFrontLineHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64932 ];

		return pClassPointer;
	};

};

UClass* ASFFrontLineHUD::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_FrontLine
// 0x001C (0x0228 - 0x020C)
class USFGFxHUD_FrontLine : public USFGFxHUDMoviePlayer
{
public:
	class UGFxObject*                                  FrontLineMC;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	TArray< class ASFFrontLineVolume* >                FrontLIneVolumArray;                              		// 0x0210 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           FrontLIneStatusArray;                             		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 64949 ];

		return pClassPointer;
	};

	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void ASSetFrontLineValue ( struct FString strStatusA, struct FString strStatusB, struct FString strStatusC );
	void ASShowFrontLineStatus ( unsigned long bShow );
	void OnUpdatePerSecond ( );
	void InitFrontLineStatus ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundStarted ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_FrontLine::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_FrontLineVolume
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_FrontLineVolume : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65040 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_FrontLineVolume::pClassPointer = NULL;

// Class SFGame.SFGameCrowdAgentSkeletal
// 0x0000 (0x04B0 - 0x04B0)
class ASFGameCrowdAgentSkeletal : public AGameCrowdAgentSkeletal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65058 ];

		return pClassPointer;
	};

};

UClass* ASFGameCrowdAgentSkeletal::pClassPointer = NULL;

// Class SFGame.SFMaterialImpactEffect
// 0x0014 (0x00C0 - 0x00AC)
class USFMaterialImpactEffect : public USFPhysicalMaterialProperty
{
public:
	TArray< struct FMaterialImpactEffect >             ImpactEffectStore;                                		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PhysicalMaterialType;                             		// 0x00B8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65407 ];

		return pClassPointer;
	};

	struct FMaterialImpactEffect GetMaterialImpactEffect ( class ASFGameReplicationInfo* SFGRI, class UPhysicalMaterial* HitPhysicalMaterial, struct FName EffectType );
};

UClass* USFMaterialImpactEffect::pClassPointer = NULL;

// Class SFGame.SFImpactLight_Metal
// 0x0000 (0x0248 - 0x0248)
class USFImpactLight_Metal : public USFExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65480 ];

		return pClassPointer;
	};

};

UClass* USFImpactLight_Metal::pClassPointer = NULL;

// Class SFGame.SFGameExplosionActor_Color
// 0x0000 (0x02F0 - 0x02F0)
class ASFGameExplosionActor_Color : public ASFGameExplosionActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65644 ];

		return pClassPointer;
	};

	void SpawnExplosionParticleSystem ( class UParticleSystem* Template );
};

UClass* ASFGameExplosionActor_Color::pClassPointer = NULL;

// Class SFGame.SFGameExplosionArtifire
// 0x0010 (0x014C - 0x013C)
class USFGameExplosionArtifire : public USFGameExplosion
{
public:
	class UParticleSystem*                             ArtilleryPS;                                      		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ArtilleryCounter;                                 		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArtilleryDelay;                                   		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArtilleryRandomDistance;                          		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65662 ];

		return pClassPointer;
	};

};

UClass* USFGameExplosionArtifire::pClassPointer = NULL;

// Class SFGame.SFGameExplosionArtifireActor
// 0x001C (0x0310 - 0x02F4)
class ASFGameExplosionArtifireActor : public ASFGameExplosionActor_Spawnable
{
public:
	TArray< class UParticleSystemComponent* >          ArtilleryPSC;                                     		// 0x02F4 (0x000C) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     ArtilleryRandomLocation;                          		// 0x0300 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFGameExplosionArtifire*                    ExplosionArtifireTemplate;                        		// 0x030C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65668 ];

		return pClassPointer;
	};

	void SpawnArtilleryEffect ( );
	void DelayedExplosion ( );
	void eventExplode ( class UGameExplosion* NewExplosionTemplate, struct FVector Direction );
};

UClass* ASFGameExplosionArtifireActor::pClassPointer = NULL;

// Class SFGame.SFGameExplosionIncendiary
// 0x0018 (0x0154 - 0x013C)
class USFGameExplosionIncendiary : public USFGameExplosion
{
public:
	float                                              InnerDamage;                                      		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              OuterDamage;                                      		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              InnerDamageRadius;                                		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              OuterDamageRadius;                                		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              ParticleDensity;                                  		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              HurtDuration;                                     		// 0x0150 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65683 ];

		return pClassPointer;
	};

};

UClass* USFGameExplosionIncendiary::pClassPointer = NULL;

// Class SFGame.SFGameExplosionIncendiaryActor
// 0x0010 (0x0304 - 0x02F4)
class ASFGameExplosionIncendiaryActor : public ASFGameExplosionActor_Spawnable
{
public:
	class USFGameExplosionIncendiary*                  IncendExplosionTemplate;                          		// 0x02F4 (0x0004) [0x0000000000000000]              
	struct FVector                                     AdjustExploLocation;                              		// 0x02F8 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65691 ];

		return pClassPointer;
	};

	void ClientReset ( );
	void Reset ( );
	void DestroyExplosionParticleSystem ( );
	void SpawnExplosionParticleSystem ( class UParticleSystem* Template );
	void ProcessExplosionHeat ( );
	void SetupExplosionHeat ( );
	float AdjustBaseDamage ( float Damage, class AActor* Victim );
	void DoExplosionDamage ( );
};

UClass* ASFGameExplosionIncendiaryActor::pClassPointer = NULL;

// Class SFGame.SFGameExplosionOutline
// 0x0020 (0x015C - 0x013C)
class USFGameExplosionOutline : public USFGameExplosion
{
public:
	class UClass*                                      PawnClass;                                        		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetTeam;                                       		// 0x0140 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutLineColorIndex;                                		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineIntense;                                   		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineCullDistance;                              		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineOverlapDistance;                           		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutlineWidth;                                     		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutlineDuration;                                  		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65716 ];

		return pClassPointer;
	};

};

UClass* USFGameExplosionOutline::pClassPointer = NULL;

// Class SFGame.SFGameExplosionOutlineActor
// 0x0004 (0x02F8 - 0x02F4)
class ASFGameExplosionOutlineActor : public ASFGameExplosionActor_Spawnable
{
public:
	class USFGameExplosionOutline*                     OutlineTemplate;                                  		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65726 ];

		return pClassPointer;
	};

	void SetDrawOutlineForPawn ( class ASFPawn* TargetPawn, int OutLineIndex );
	void UpdateOutLine ( unsigned long bTurnOff );
	void ShutDown ( );
	void eventExplode ( class UGameExplosion* NewExplosionTemplate, struct FVector Direction );
	void PostBeginPlay ( );
};

UClass* ASFGameExplosionOutlineActor::pClassPointer = NULL;

// Class SFGame.SFGameExplosionShockWave
// 0x0000 (0x013C - 0x013C)
class USFGameExplosionShockWave : public USFGameExplosion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65742 ];

		return pClassPointer;
	};

};

UClass* USFGameExplosionShockWave::pClassPointer = NULL;

// Class SFGame.SFGameExplosionShockWaveActor
// 0x0014 (0x0308 - 0x02F4)
class ASFGameExplosionShockWaveActor : public ASFGameExplosionActor_Spawnable
{
public:
	float                                              EffectiveVelocity;                                		// 0x02F4 (0x0004) [0x0000000000000000]              
	TArray< struct ASFGameExplosionShockWaveActor_FCandidateEnemyInfo > CandidateEnemyList;                               		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ElapsedTime;                                      		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65746 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void DoExplosionDamage ( );
	void Explode ( class UGameExplosion* NewExplosionTemplate, struct FVector Direction );
};

UClass* ASFGameExplosionShockWaveActor::pClassPointer = NULL;

// Class SFGame.SFGameExplosionShockWaveActorByKim
// 0x0018 (0x030C - 0x02F4)
class ASFGameExplosionShockWaveActorByKim : public ASFGameExplosionActor_Spawnable
{
public:
	float                                              EffectiveVelocity;                                		// 0x02F4 (0x0004) [0x0000000000000000]              
	TArray< struct ASFGameExplosionShockWaveActorByKim_FCandidateEnemyInfo > CandidateEnemyList;                               		// 0x02F8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ElapsedTime;                                      		// 0x0304 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Team;                                             		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65769 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void DoExplosionDamage ( );
	void Explode ( class UGameExplosion* NewExplosionTemplate, struct FVector Direction );
};

UClass* ASFGameExplosionShockWaveActorByKim::pClassPointer = NULL;

// Class SFGame.SFGameObjective
// 0x0000 (0x02FC - 0x02FC)
class ASFGameObjective : public AObjective
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65841 ];

		return pClassPointer;
	};

};

UClass* ASFGameObjective::pClassPointer = NULL;

// Class SFGame.SFGameParticleEventManager
// 0x0000 (0x0224 - 0x0224)
class ASFGameParticleEventManager : public AGameParticleEventManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65844 ];

		return pClassPointer;
	};

};

UClass* ASFGameParticleEventManager::pClassPointer = NULL;

// Class SFGame.SFGameRuleBase
// 0x000C (0x0048 - 0x003C)
class USFGameRuleBase : public UObject
{
public:
	float                                              RuleTime;                                         		// 0x003C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsRespawnable : 1;                               		// 0x0040 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MinRespawnDelayForPlayer;                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65883 ];

		return pClassPointer;
	};

	void Activate ( );
	class USFGameRuleBase* InitGameRule ( class ASFStrongHoldGame* StrongHoldGame );
};

UClass* USFGameRuleBase::pClassPointer = NULL;

// Class SFGame.SFGameRuleBlasting
// 0x0000 (0x0048 - 0x0048)
class USFGameRuleBlasting : public USFGameRuleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65895 ];

		return pClassPointer;
	};

};

UClass* USFGameRuleBlasting::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ClanRank
// 0x0090 (0x011C - 0x008C)
class USFUIDataStore_ClanRank : public USFUIDataStoreBase
{
public:
	int                                                WeeklyClanRankPeriod;                             		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSWeeklyClanRankInfo >              ThisWeekClanRankClanInfo;                         		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSWeeklyClanRankInfo >              LastWeekClanRankClanInfo;                         		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     LocalYear;                                        		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalMonth;                                       		// 0x00B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                WeeklyClanRankInfoCount;                          		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                WeeklyRankStatType;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FString                                     ThisWeekStartDate;                                		// 0x00C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ThisWeekEndDate;                                  		// 0x00D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastWeekStartDate;                                		// 0x00E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastWeekEndDate;                                  		// 0x00EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RankUpdateTimeLimit;                              		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                RankCount;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                MyClanRank;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                MyClanPoint;                                      		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                RankType;                                         		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                UpdateTimeDelay;                                  		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ThisWeekRankCurrentTime;                          		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                LastWeekCurrentTime;                              		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRequestWeeklyClanRank : 1;                       		// 0x0118 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65938 ];

		return pClassPointer;
	};

	bool RequestWeeklyClanRank ( int GetRankType );
	void SetWeeklyStatRankType ( int Type );
	int GetWeeklyStatRankType ( );
	int GetWeeklyRankType ( );
	bool GetThisWeekDataSetting ( );
	bool GetLastWeekDataSetting ( );
	struct FString GetLocalizedDateString ( struct FString Regdate );
	void SetDate ( int StartYear, int StartMonth, int StartDay );
	void PKT_GetWeeklyRealtimeRank_REQ_OK ( class UPacket* Packet );
	void PKT_GetWeeklyRealtimeRank_REQ_TRANSACTION ( class UPacket* Packet );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_ClanRank::pClassPointer = NULL;

// Class SFGame.SFImportFontCharSet
// 0x0080 (0x00BC - 0x003C)
class USFImportFontCharSet : public UObject
{
public:
	struct FVector2D                                   BaseScreenRes;                                    		// 0x003C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   LoadingRatePos;                                   		// 0x0044 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   LoadingTipPos;                                    		// 0x004C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   LocalizedMapNamePos;                              		// 0x0054 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   InternationalMapNamePos;                          		// 0x005C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   ClanRankingPos;                                   		// 0x0064 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   ClanRankingTitlePos;                              		// 0x006C (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LoadingTip;                                       		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipCommon;                                 		// 0x0080 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipBase;                                   		// 0x008C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipSpecial;                                		// 0x0098 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipFun;                                    		// 0x00A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSModeLoadingTip >                  ModeLoadingTipArray;                              		// 0x00B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65982 ];

		return pClassPointer;
	};

	void GetClanRankingTitlePos ( class UCanvas* Canvas, struct FIntPoint* pos );
	void GetClanRankingPos ( class UCanvas* Canvas, struct FIntPoint* pos );
	void GetLoadingRatePos ( class UCanvas* Canvas, struct FIntPoint* pos );
	void GetInterMapNamePos ( class UCanvas* Canvas, struct FIntPoint* pos );
	void GetMapLocalMapNamePos ( class UCanvas* Canvas, struct FIntPoint* pos );
	void GetLoadingTipPos ( class UCanvas* Canvas, struct FIntPoint* pos );
	void ConvRatiotoBaseScreen ( struct FVector2D AbsPos, class UCanvas* Canvas, struct FIntPoint* RatioPos );
	void GetLoaingTipMessageByCount ( int nCount, TArray< struct FString > InLoadingTipMessage, TArray< struct FString >* OutLoadingTipMessage );
	void GetModeLoadingTip ( int GameModeID, TArray< struct FString >* OutArray );
	struct FString GetLoadingTipMessage ( int InRank, int GameModeID );
};

UClass* USFImportFontCharSet::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanRenewal
// 0x0074 (0x027C - 0x0208)
class USFGFxLobbyPart_ClanRenewal : public USFGFxLobbyPart
{
public:
	int                                                DefaultMakeClanRank;                              		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ClanMakeCost;                                     		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ClanMakeCostType;                                 		// 0x0210 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     strJoinCSN;                                       		// 0x021C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strJoinClanName;                                  		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      SubTabList;                                       		// 0x0234 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      HomeSubTabList;                                   		// 0x0240 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     YearLocalized;                                    		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MonthLocalized;                                   		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DayLocalized;                                     		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           JoinDlgQuestion;                                  		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66000 ];

		return pClassPointer;
	};

	void RemoveClanRecommend ( int Index );
	void OnClickedClanListBtn ( struct FString CSN );
	void OnClickedClanListGoHomeBtn ( struct FString CSN );
	void OnClickedClanListHeaderBar ( int HeaderBarIndex );
	void UpdateSearchedClanList ( );
	void OnClickedMemberListSortBtn ( struct FString Index );
	void OnClanMarkChanged ( );
	void OnClanNameChanged ( );
	void OnCodenameChanged ( );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void UpdateClanHomeMainTab ( );
	void SetClanHomeInfo ( unsigned long bNullData );
	struct FString GetClanHomeFormtRegDate ( struct FString Regdate );
	void OpenJoinDlg ( struct FString CSN, struct FString ClanName, struct FString ClanRecommendNick );
	struct FString GetClanJoinFormtRegDate ( struct FString Regdate );
	struct FString GetClanBaseFormtRegDate ( struct FString Regdate, int DateType );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ASSetSearchTabText ( struct FString SearchText );
	void ASSetClanListTabVisible ( unsigned long bIsTabVisible );
	void ASSetShowWindowType ( int MainTabIndex, int SubTabIndex );
	void SetBottomBtnVisible ( unsigned long LeftVisible, unsigned long RightVisible );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void ASSetCurrentSubTab ( int Index );
	int GetHomeCurrentSubTabCode ( );
	int GetCurrentSubTabCode ( );
	int GetCurrentMainTabCode ( );
	void ASSetDisabledSubTab ( int Index );
	void ASCreateSubTab ( int MainTabCode, class UGFxObject* SubTabs );
	void InitializeSubTab ( int MainTabCode, class UGFxObject* Widget );
	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_ClanRenewal::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanHome
// 0x0400 (0x067C - 0x027C)
class USFGFxLobbyPart_ClanHome : public USFGFxLobbyPart_ClanRenewal
{
public:
	class UGFxClikWidget*                              ClanListBtn;                                      		// 0x027C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              JoinBtn;                                          		// 0x0280 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChatOpenBtn;                                      		// 0x0284 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChatCloseBtn;                                     		// 0x0288 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              InputTextComment;                                 		// 0x028C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RemoveClanBtn;                                    		// 0x0290 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RemoveJoinBtn;                                    		// 0x0294 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ManagerBtn;                                       		// 0x0298 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              UserTabBtn;                                       		// 0x029C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              InputClanNotice;                                  		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnClanNotice;                                    		// 0x02A4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnModify;                                        		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LevelSettingApplyBtn;                             		// 0x02AC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LevelSettingComboBox;                             		// 0x02B0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanBottomLeftBtn;                                		// 0x02B4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanBottomRightBtn;                               		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              DestroyDialogOkBtn;                               		// 0x02BC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              DestroyDialogCancelBtn;                           		// 0x02C0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanCreateBtn;                                    		// 0x02C4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  _global;                                          		// 0x02C8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  CommentList;                                      		// 0x02CC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  RecordList;                                       		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  InputClanNoticeText;                              		// 0x02D4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ClanMemberList;                                   		// 0x02D8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ClanWaitMemberList;                               		// 0x02DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowSignPopup : 1;                               		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowRemoveClanPopup : 1;                         		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bShowRClickPopupMenu : 1;                         		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsVisibleRecord : 1;                             		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FString                                     LastInputText;                                    		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      ClanHomeViewType;                                 		// 0x02F0 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentSortType;                                  		// 0x02F1 (0x0001) [0x0000000000000000]              
	unsigned char                                      OutType_Clan;                                     		// 0x02F2 (0x0001) [0x0000000000000000]              
	int                                                LevelSettingType;                                 		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                BtnShowType;                                      		// 0x02F8 (0x0004) [0x0000000000000000]              
	int                                                RClickSlotIndex;                                  		// 0x02FC (0x0004) [0x0000000000000000]              
	int                                                SelectPopupMemberUSN;                             		// 0x0300 (0x0004) [0x0000000000000000]              
	TArray< struct FSInputTextFilter >                 ClanHomeInputTextLimits;                          		// 0x0304 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsRankColorInfo >                   RankColorArray;                                   		// 0x0310 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     EndFont;                                          		// 0x031C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClanHomeFormatCommentNameBegin;                   		// 0x0328 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClanHomeFormatCommentMsgBegin;                    		// 0x0334 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           ViewCommentLanguageArray;                         		// 0x0340 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClanHomeFormatDefault;                            		// 0x034C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClanHomeFormatEqualRank;                          		// 0x0358 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ErrorChangeClanMemberLevelMsg;                    		// 0x0364 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CommentMsg;                                       		// 0x0370 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoClanCommentMsg;                                 		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableCommentMsg;                                		// 0x0388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotifyJoinNoMsg;                                  		// 0x0394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RemoveClanMsg;                                    		// 0x03A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CancelJoinClanMsg;                                		// 0x03AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanHomeFormatWebURL;                             		// 0x03B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanHomeFormatWaitPeopleCount;                    		// 0x03C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OpenWebURL;                                       		// 0x03D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeGiveMasterMsg;                              		// 0x03DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedClanRankText;                            		// 0x03E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedNotRank;                                 		// 0x03F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanHomeManagerTabCountInfo;                      		// 0x0400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanHomeMemberCountInfo;                          		// 0x040C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           DestroyClanMsg;                                   		// 0x0418 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSWidgetBoxInfoData >               ClanDestroyInfoArray;                             		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanDestroyMsg;                                   		// 0x0430 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSMemberListPopupInfo >             MemberListPopupData;                              		// 0x043C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           NotifyWarningMsgs;                                		// 0x0448 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanHomeFormatLevel;                              		// 0x0454 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSWidgetBoxInfoData >               ComboBoxArray;                                    		// 0x0460 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanTagStart;                                     		// 0x046C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanTagEnd;                                       		// 0x0478 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanBotBtnJoinTitle;                              		// 0x0484 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanBotBtnDestroyTitle;                           		// 0x0490 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanBotBtnModifyTitle;                            		// 0x049C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanBotBtnSecessionTitle;                         		// 0x04A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanBotBtnJoinCancelTitle;                        		// 0x04B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MemberOutErrorMsg;                                		// 0x04C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiveMasterUnderLevelError;                        		// 0x04CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiveMasterSelfError;                              		// 0x04D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     USN_Clan;                                         		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CSN_Clan;                                         		// 0x04F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CodeName_Clan;                                    		// 0x04FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PInfo_Clan;                                       		// 0x0508 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OldUSN_Clan;                                      		// 0x0514 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NewUSN_Clan;                                      		// 0x0520 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Level_Clan;                                       		// 0x052C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NewNotice_Clan;                                   		// 0x0538 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickCommentDeleteBtnDelegate__Delegate;      		// 0x0544 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickClanHomeTabBtnDelegate__Delegate;        		// 0x0550 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseSingupPopupDelegate__Delegate;           		// 0x055C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWebURLDelegate__Delegate;                		// 0x0568 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickRecordListClanDelegate__Delegate;        		// 0x0574 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickManagerTabMemberListCheckBoxDelegate__Delegate;		// 0x0580 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWaitPeoplePaperFormDelegate__Delegate;   		// 0x058C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWaitPeopleRecommendPaperFormDelegate__Delegate;		// 0x0598 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWaitMemberJoinOkDelegate__Delegate;      		// 0x05A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWaitMemberJoinNoDelegate__Delegate;      		// 0x05B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickMemberListPopupDelegate__Delegate;       		// 0x05BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRollOverMemberListDelegate__Delegate;         		// 0x05C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedMemberListSortBtnDelegate__Delegate;   		// 0x05D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickManagerTabWaitPeopleListSortBtnDelegate__Delegate;		// 0x05E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickDestroyClanCheckDelegate__Delegate;      		// 0x05EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRClickMemberListDelegate__Delegate;           		// 0x05F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserTabBtnsDelegate__Delegate;           		// 0x0604 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOverUserTabMemberListDelegate__Delegate;      		// 0x0610 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserTabMemberListDelegate__Delegate;     		// 0x061C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRClickUserTabMemberSlotDelegate__Delegate;    		// 0x0628 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRClickUserTabWaitPeopleSlotDelegate__Delegate;		// 0x0634 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickClanHomeMemberPopupMenuDelegate__Delegate;		// 0x0640 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickClanHomeWaitPeoplePopupMenuDelegate__Delegate;		// 0x064C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserTabWaitPeoplePaperDelegate__Delegate;		// 0x0658 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserTabMemberListSortBtnDelegate__Delegate;		// 0x0664 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUserTabWaitPeopleListSortBtnDelegate__Delegate;		// 0x0670 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 65999 ];

		return pClassPointer;
	};

	void ASSetDestroyTab ( );
	void SetClanHomeViewType ( unsigned char Type, unsigned long bIsCloseTabs );
	bool IsViewActive ( );
	void OnDlgClickClanMasterGiveOKBtn ( );
	void OpenDlgGiveMaster ( int Index );
	struct FString GetClanHomeNotifyWarningFormatMsg ( int Type, int USN );
	void OnDlgClickClanMemberOutOkBtn ( );
	void OpenDlgMemberOut ( int Index );
	void OnClickedCreateClanBtn ( struct FEventData ev );
	void InitClanDestroyInfoArray ( );
	void OnClickedDestroyDlgCancelBtn ( struct FEventData ev );
	void OnClickedDestroyDlgOkBtn ( struct FEventData ev );
	void OnClickedDestroy ( );
	void ASSetClanModeMapData ( struct FString MapImg, struct FString ModeImg );
	void SetClanModeMapData ( );
	void ASSetClanTagBoxValue ( TArray< struct FString > Values );
	void SetClanTagBoxValue ( );
	void ASSetClanTagBox ( TArray< struct FString > TagText );
	void SetClanTagBox ( );
	class UGFxObject* GetLevelComboBoxInfo ( int I );
	void SetLevelSettingComboBox ( );
	void SetLevelSettingPopup ( );
	void GetMemberLevelDefineList ( int ListType, TArray< int >* outLevels );
	class UGFxObject* GetManagerTabMemberInfo ( int Index, struct FSClanMemberInfo MemberInfo );
	void SetClanMemberList ( );
	class UGFxObject* GetWaitMemberInfo ( int Index, struct FSClanMemberInfo MemberInfo );
	void SetClanWaitMemberList ( );
	struct FString GetClanCompareLastMonthRank ( int ThisMonthRank, int LastMonthRank );
	struct FString GetClanMonthlyRankText ( );
	class UGFxObject* GetClanMonthlyData ( );
	void ASSetMonthGraghLineData ( class UGFxObject* RankInfo );
	void SetClanMonthlyData ( );
	void RequestClanRankLast6Months ( struct FString strCSN );
	bool IsHaveChatingLogWindow ( );
	struct FString GetClanHomeFormatLevel ( int Level );
	void SetOnClickUserTabWaitPeopleListSortBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserTabWaitPeopleListSortBtnDelegate ( struct FString Index );
	void SetOnClickUserTabMemberListSortBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserTabMemberListSortBtnDelegate ( struct FString Index );
	void SetOnClickUserTabWaitPeoplePaperDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserTabWaitPeoplePaperDelegate ( struct FString Index );
	void SetOnClickClanHomeWaitPeoplePopupMenuDelegate ( struct FScriptDelegate InDelegate );
	void OnClickClanHomeWaitPeoplePopupMenuDelegate ( struct FString SlotIndex, struct FString MenuText );
	void SetOnClickClanHomeMemberPopupMenuDelegate ( struct FScriptDelegate InDelegate );
	void OnClickClanHomeMemberPopupMenuDelegate ( struct FString SlotIndex, struct FString MenuText );
	void SetOnRClickUserTabWaitPeopleSlotDelegate ( struct FScriptDelegate InDelegate );
	void OnRClickUserTabWaitPeopleSlotDelegate ( struct FString Index );
	void SetOnRClickUserTabMemberSlotDelegate ( struct FScriptDelegate InDelegate );
	void OnRClickUserTabMemberSlotDelegate ( struct FString Index, unsigned long IsMaster );
	void SetOnClickUserTabMemberListDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserTabMemberListDelegate ( struct FString Index );
	void SetOnOverUserTabMemberListDelegate ( struct FScriptDelegate InDelegate );
	void OnOverUserTabMemberListDelegate ( struct FString Index );
	void SetOnClickUserTabBtnsDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUserTabBtnsDelegate ( int SelectIndex );
	void SetOnRClickMemberListDelegate ( struct FScriptDelegate InDelegate );
	void OnRClickMemberListDelegate ( struct FString Index );
	void SetOnClickDestroyClanCheckDelegate ( struct FScriptDelegate InDelegate );
	void OnClickDestroyClanCheckDelegate ( int Index, unsigned long IsCheck );
	void SetOnClickManagerTabWaitPeopleListSortBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickManagerTabWaitPeopleListSortBtnDelegate ( struct FString Index );
	void SetOnClickedMemberListSortBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedMemberListSortBtnDelegate ( struct FString Index );
	void SetOnRollOverMemberListDelegate ( struct FScriptDelegate InDelegate );
	void OnRollOverMemberListDelegate ( struct FString Index );
	void SetOnClickMemberListPopupDelegate ( struct FScriptDelegate InDelegate );
	void OnClickMemberListPopupDelegate ( int SelectType );
	void SetOnClickWaitMemberJoinNoDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWaitMemberJoinNoDelegate ( struct FString Index );
	void SetOnClickWaitMemberJoinOkDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWaitMemberJoinOkDelegate ( struct FString Index );
	void SetOnClickWaitPeopleRecommendPaperFormDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWaitPeopleRecommendPaperFormDelegate ( struct FString Index );
	void SetOnClickWaitPeoplePaperFormDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWaitPeoplePaperFormDelegate ( struct FString Index );
	void SetOnClickManagerTabMemberListCheckBoxDelegate ( struct FScriptDelegate InDelegate );
	void OnClickManagerTabMemberListCheckBoxDelegate ( struct FString Index );
	void SetOnClickRecordListClanDelegate ( struct FScriptDelegate InDelegate );
	void OnClickRecordListClanDelegate ( struct FString Index );
	void SetOnClickWebURLDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWebURLDelegate ( );
	void SetOnCloseSingupPopupDelegate ( struct FScriptDelegate InDelegate );
	void OnCloseSingupPopupDelegate ( );
	void SetOnClickClanHomeTabBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickClanHomeTabBtnDelegate ( int Index );
	void SetOnClickCommnetDeleteBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickCommentDeleteBtnDelegate ( struct FString Index );
	void AsSetManagerTabMemberListPopupVisible ( );
	void ASSetWaitMemberCount ( int WaitMemberCount );
	void ASSetUserTabPopupMenuData ( TArray< class UGFxObject* > MessageArray );
	void ASSetUserTabPopupMenuVisible ( unsigned long bVisible );
	void ASSetUserTabPopupVisible ( unsigned long bIsVisiblePopup );
	void ASSetManagerTabPopupVisible ( unsigned long bIsVisiblePopup );
	void ASSetUserTabBtnFocus ( int Type );
	void ASSetManagerTabBtnFocus ( int Type );
	void ASInitClanHomeListScroll ( );
	void ASChatClose ( );
	void ASChatOpen ( );
	void ASSetVisibleRecordList ( unsigned long bVisible );
	void ASCloseMemberPopup ( );
	void ASSetClanPopupClose ( struct FString Type );
	void ASSetClanPopupOpen ( struct FString Type );
	void ASSetEnableMemberPopup ( unsigned long bEnable );
	void ASSetCBListItemAdd ( TArray< struct FString > Datas );
	void ASSetSettingInfoAreaText ( struct FString Area );
	void ASSetClanInitListView ( );
	void ASSetClanMemberListView ( );
	void ASSetSignupPopClose ( );
	void ASSetSignUpPopView ( int ViewType, int Index );
	void ASSetClanMemberInfoView ( );
	void ASSetSettingInfoChangView ( );
	void ASClearDestroyCheckBox ( );
	void ASSetVisibleDestroyDialog ( unsigned long bVisible );
	void ASSetDestroyDialogText ( );
	void ASSetIdCardCloseClass ( );
	void ASSetSettingMemberInfoTextView ( );
	void ASClearClanMemberCount ( int ClanLevel, struct FString MemberMsg, struct FString WaitMemberMsg );
	void ASSetClanMemberCount ( unsigned long bClear );
	void ASSetManagerTabWaitPeopleCount ( );
	void ASSetTxtApplyText ( );
	void ASSetInputFontColor ( unsigned long bIsFocusColor );
	void SetBottomBtnTitle ( struct FString LeftTitle, struct FString RightTitle );
	void SetBottomBtnVisible ( unsigned long LeftVisible, unsigned long RightVisible );
	void SetUseClanNotice ( unsigned long bUse );
	void ASSetVisbleLevelSettingItem ( unsigned long bVisible );
	void UpdateClanHomeButton ( );
	void ASSetClanHomeInfoText ( unsigned long bIsNullData );
	void SetClanHomeInfo ( unsigned long bNullData );
	void ASSetUserInitInfo ( );
	void OnClanMarkChanged ( );
	void OnClanNameChanged ( );
	void OnCodenameChanged ( );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void OnClickClanDestroyMsgDlgOk ( );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinNo ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoin ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void PKT_CloseClan_OK ( class UPacket* recvPacket );
	void RequestDestroyClan ( struct FString strUSN );
	void RequestChangeClanMark ( struct FString ChangeClanMark );
	void ChangeClanMark ( struct FString ClanMark );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	void PKT_GiveMaster_OK ( class UPacket* recvPacket );
	void RequestGiveClanMaster ( struct FString strOldUSN, struct FString strNewUSN, struct FString strNewMasterRank );
	void PKT_removeMember_OK ( class UPacket* recvPacket );
	void RequestRemoveClanMember ( struct FString strUSN, unsigned char OutType );
	void PKT_AcceptClanMember_OK ( class UPacket* recvPacket );
	void RequestAcceptClanMember ( struct FString strUSN );
	void PKT_UpdateLevel_OK ( class UPacket* recvPacket );
	void RequestSetClanMemberLevel ( struct FString strUSN, struct FString strLevel );
	void RequestClanRecordList ( struct FString strCSN );
	void RequestClanMemberList ( struct FString strCSN );
	bool RequestClanInfo ( struct FString strCSN );
	void RequestGetMessageBoardList ( struct FString strCSN );
	void PKT_RemoveClanNote_OK ( class UPacket* recvPacket );
	void RequestRemoveMessgeBoard ( struct FString strIndex );
	void PKT_InsertClanNote_OK ( class UPacket* recvPacket );
	void RequestInsertMessageBoard ( struct FString strMsg );
	void RequestGetClanMemeberInfo ( struct FString strUSN );
	void UpdateMemberList ( unsigned long bIsSort );
	void OnClickedMemberListSortBtn ( struct FString Index );
	bool GetDestroyClanBtnState ( );
	void OnClickDestroyClanCheck ( int Index, unsigned long IsCheck );
	void OnClickMemberListPopup ( int SelectIndex );
	void OnRollOverMemberList ( struct FString Index );
	void OnRClickMemberList ( struct FString Index );
	void OnClickWaitMemberJoinNo ( struct FString Index );
	void OnClickWaitMemberJoinOk ( struct FString Index );
	void OnClickWaitPeopleRecommendPaperForm ( struct FString Index );
	void OnClickWaitPeoplePaperForm ( struct FString Index );
	void OnChangeManagerTabMemberListLevelComboBox ( struct FEventData ev );
	void OnClickManagerTabMemberListCheckBox ( struct FString strIndex );
	void OnTextChangedComment ( struct FEventData ev );
	void OnClickWebURL_OK ( );
	void OnClickRecordListClan ( struct FString Index );
	void OnClickWebURL ( );
	void OnCloseSingupPopup ( );
	void OnClickCommentDeleteBtn ( struct FString Index );
	int OnEnterPressRequestComment ( );
	void WaitMemberJoinNo ( struct FString Index );
	void WaitMemberJoinOk ( int Index );
	void OnFocusOutClanHomeCommentInput ( struct FEventData ev );
	void OnFocusInClanHomeCommentInput ( struct FEventData ev );
	void OnClickRemoveClanMsgDlg_OK ( );
	void OnClickedClanJoinCancel ( );
	void OnClickedClanHomeRemoveClanBtn ( );
	void OnClickManagerTabMemberListLevelSettingApplyBtn ( struct FEventData ev );
	void OnClickedClanBottomRightBtn ( struct FEventData ev );
	void OnClickedClanBottomLeftBtn ( struct FEventData ev );
	void OnClickedModify ( );
	void OnClickedClanJoin ( );
	void OnClickClanHomeClanListBtn ( struct FEventData ev );
	struct FString GetClanHomeCommentFormatRegDate ( int Index );
	struct FString GetClanHomeCommentFormatComment ( int Index );
	struct FString GetClanHomeManagerTabFormatCountInfo ( int Type );
	struct FString GetClanHomeUserTabMemberInfo ( int Type );
	struct FString GetClanHomeForMatRankColor ( );
	struct FString GetClanHomeFormatUpClanRanking ( unsigned long bIsMyClan );
	struct FString GetClanHomeFormatClanRanking ( unsigned long bIsMyClan );
	struct FString GetClanHomeFormatWebURL ( struct FString WebURL );
	void SetClanHomeInputTextCommentMsg ( unsigned long bIsNoneText );
	void SetClanHomeBtns ( );
	struct FString GetRedColorText ( struct FString Text );
	struct FString GetClanLeagueRecordColorClanName ( struct FString ClanName, unsigned long IsClanLeagueChannel );
	class UGFxObject* GetRecordInfo ( int Index, struct FSClanRecordInfo RecordInfo );
	class UGFxObject* GetCommentInfo ( int I );
	void SetClanWarRecordList ( );
	void PKT_UpdateClan_OK ( class UPacket* recvPacket );
	void OnClickClanNoticeBtn ( struct FEventData ev );
	void OnClickUserViewBtn ( struct FEventData ev );
	void OnClickManagerViewBtn ( struct FEventData ev );
	void UpdateClanHomeCommentList ( unsigned long bIsNullData );
	bool GetClanCommentView ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void SetClanHomePopupClose ( );
	void UpdateClanHomeInfo ( );
	void UpdateClanHomeMainTab ( );
	void UpdateClanHomeSubTab ( int SubTabIndex );
	void ActivatedRequest ( );
	int OnEnterPress ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ClearRecordList ( );
	void ClearMemberList ( );
	void ClearClanHomeData ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void CheckEnterRoute ( );
	void InitClanHomeData ( );
	class UGFxObject* GetGrobal ( );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void InitializeSubTab ( int MainTabCode, class UGFxObject* Widget );
	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_ClanHome::pClassPointer = NULL;

// Class SFGame.SFWarriorGame
// 0x0040 (0x0884 - 0x0844)
class ASFWarriorGame : public ASFTeamGameInfo
{
public:
	class USFGameExplosion*                            ExplosionInfo;                                    		// 0x0844 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FString                                     ExplosionParticleSystemName;                      		// 0x0848 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GameSettingClass;                                 		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                KilledPawnCount;                                  		// 0x0858 (0x0004) [0x0000000000000000]              
	int                                                KilledPawnCountMax;                               		// 0x085C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AllAIDeathCount;                                  		// 0x0860 (0x0004) [0x0000000000000000]              
	float                                              DefaultAIPawnScaleRate;                           		// 0x0864 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSAIRespawnGroupInfo >              AIRespawnGroupList;                               		// 0x0868 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              LastMissionActorPingtime;                         		// 0x0874 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MissionActorPingDelay;                            		// 0x0878 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RandomStrengthenRate;                             		// 0x087C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AssistTimeOut;                                    		// 0x0880 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66115 ];

		return pClassPointer;
	};

	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	unsigned char GetHeroVersion ( );
	bool IsSuppressedHackType ( unsigned char InHackType );
	void OnMovingInterpActor ( class USFSeqAct_MovingInterpActor* inAction );
	void RestartAutoTurretControllers ( );
	void SetAIScaleRate ( float ScaleRate );
	void GetNearstAIStart ( class APawn* ownerPawn, class ASFGameAIStart** Best );
	void StreakLocalizeMessage ( class ASFPlayerController* SFPC, class UClass* Message, int Switch, int Counter, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void AnnounceMessage ( struct FName AnnounceMesage );
	void ClearAllRespawnTimers ( );
	void GivePay ( );
	void ActivateAlienController ( );
	void ActivateShockWave ( );
	void InitShockWave ( );
	void StrengthenAI ( class ASFPawn_AI* TargetPawn, float StrengthenRate, unsigned long bIgnoreBase, unsigned long bReScaleByStrengthRate, float ScaleRate );
	void OnSpawnPointClosed ( int SpawnGroup );
	void RespawnAIWaveGroup ( int SpawnGroup );
	class ASFPawn_AI* SpawnAI ( unsigned char AIType, int TeamIndex, struct FVector TargetLocation, struct FRotator TargetRotation, struct FName SquadName );
	void AutoSpawnAI ( unsigned char AIType, int TeamIndex, struct FVector TargetLocation, struct FRotator TargetRotation );
	void GiveRewardToPlayer ( class ASFWarriorPlayerReplicationInfo* SFPRI, int ModeExp, int ModeMoney, unsigned char RewardBuff );
	void GiveReward ( class ASFWarriorPlayerReplicationInfo* SFWPRI, int Ladder, unsigned char AIType, float CustomRatio );
	float GetTeamScoreFromIndex ( int nTeamIndex, int Index );
	void OnTurretDamaged ( class AController* Assaulter, class AActor* DamagedActor, int DamageAmount );
	void OnMissionActorDamaged ( class AController* Assaulter, class AActor* DamagedActor, int DamageAmount );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason, unsigned long bForce );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	bool AttainedGoalScore ( unsigned char* WinTeamIndex );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool CheckMultiKill ( class ASFPlayerReplicationInfo* KillerSFPRI, class ASFPlayerReplicationInfo* KilledSFPRI );
	bool IsHighLevelKill ( class ASFWarriorPlayerReplicationInfo* AssaulterPRI, class ASFWarriorPlayerReplicationInfo* VictimPRI );
	void BaseScoreDeath ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, class UClass* DamageType );
	void ScoreAssist ( class ASFPlayerReplicationInfo* AssistPRI, class ASFPlayerReplicationInfo* OtherPRI, int LadderDiff );
	void BaseScoreAssist ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI, class APawn* KilledPawn );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	float GetRewardRatio ( class ASFWarriorPlayerReplicationInfo* InstigatorPRI, class ASFWarriorPlayerReplicationInfo* VictimPRI );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void PostLogin ( class APlayerController* NewPlayer );
	void eventPostBeginPlay ( );
	float GetDamageRatioByGameMode ( struct FName InDamageTypeName );
	int GetModeLevel ( int Exp );
	float GetMoney ( struct FName EventName );
	float GetPeriod ( struct FName EventName );
	void NotifySetTeam ( class AController* Other, class ASFTeamInfo* NewTeam );
};

UClass* ASFWarriorGame::pClassPointer = NULL;

// Class SFGame.SFGFxClickWidget_NumericOnly
// 0x0028 (0x00AC - 0x0084)
class USFGFxClickWidget_NumericOnly : public UGFxClikWidget
{
public:
	struct FString                                     LastInputedText;                                  		// 0x0084 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strNumeric;                                       		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strAlphabet;                                      		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bEnableAlphabet : 1;                              		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66129 ];

		return pClassPointer;
	};

	void OnTextChanged ( struct FEventData ev );
	void SetEnableAlphabet ( );
	void SetNumericCheckListener ( );
};

UClass* USFGFxClickWidget_NumericOnly::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_BaseRoom
// 0x02B8 (0x060C - 0x0354)
class USFGFxLobby_BaseRoom : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              StartBtn;                                         		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ReadyBtn;                                         		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ReadyCompleteBtn;                                 		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MemberList;                                       		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MemberListNoTeam;                                 		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomModeApplyBtn;                               		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomModeCancelBtn;                              		// 0x036C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              modeTileList;                                     		// 0x0370 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              mapTileList;                                      		// 0x0374 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              roundTileList;                                    		// 0x0378 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              pointTileList;                                    		// 0x037C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              playerTileList;                                   		// 0x0380 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              playerTileListDeathGame;                          		// 0x0384 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomTileList;                                   		// 0x0388 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ModeListCB;                                       		// 0x038C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MapListCB;                                        		// 0x0390 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              WinRoundCB;                                       		// 0x0394 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PlayerCountCB;                                    		// 0x0398 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              optionSelectCB;                                   		// 0x039C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RoomCB;                                           		// 0x03A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomCB;                                         		// 0x03A4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TeamBalanceTxt;                                   		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TeamSwitchBtn;                                    		// 0x03AC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TitleChangedCheckBtn;                             		// 0x03B0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TopTitle;                                         		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              inputRoomTitle;                                   		// 0x03B8 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               inputPassword;                                    		// 0x03BC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  _globalEX;                                        		// 0x03C0 (0x0004) [0x0000000000000000]              
	int                                                UserSelectedPopupIndex;                           		// 0x03C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bComboBoxItemSelect : 1;                          		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      StartGameButtonOld : 1;                           		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bInCountDown : 1;                                 		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      StartButtonEnableStat : 1;                        		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStartButtonBlurLast : 1;                         		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bBtnStartPressed : 1;                             		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bClientSideTeamBalance : 1;                       		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000040] 
	int                                                PreWeaponTypeMode;                                		// 0x03CC (0x0004) [0x0000000000000000]              
	int                                                WeaponTypeMode;                                   		// 0x03D0 (0x0004) [0x0000000000000000]              
	int                                                PickUpWeapon;                                     		// 0x03D4 (0x0004) [0x0000000000000000]              
	int                                                PrePickUpWeapon;                                  		// 0x03D8 (0x0004) [0x0000000000000000]              
	struct FString                                     CustomModeName;                                   		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CountDownMax;                                     		// 0x03E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     RoundString;                                      		// 0x03EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PointString;                                      		// 0x03F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TimeString;                                       		// 0x0404 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MatchConditionString;                             		// 0x0410 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MatchRoundString;                                 		// 0x041C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MatchPointString;                                 		// 0x0428 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MatchTimeLimitString;                             		// 0x0434 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strIntrusionGoal;                                 		// 0x0440 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Versus;                                           		// 0x044C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VersusDeathGame;                                  		// 0x0458 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ModeChangeFailWithNumPlayers;                     		// 0x0464 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           RoomUserStatusMessage;                            		// 0x0470 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamBalanceOnMessage;                             		// 0x047C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TeamSwitchString;                                 		// 0x0488 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoChangeRoomSettingInProgress;                    		// 0x0494 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoHandoverHostbyNoInputMessage;                 		// 0x04A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoHandoverHostbyNoInputChat;                    		// 0x04AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MapListVipNone;                                   		// 0x04B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CountDown;                                        		// 0x04C4 (0x0004) [0x0000000000000000]              
	int                                                SelectedUserSN;                                   		// 0x04C8 (0x0004) [0x0000000000000000]              
	int                                                SelectedClanSN;                                   		// 0x04CC (0x0004) [0x0000000000000000]              
	int                                                PrevSelectedGameModeID;                           		// 0x04D0 (0x0004) [0x0000000000000000]              
	unsigned char                                      RoomType;                                         		// 0x04D4 (0x0001) [0x0000000000000000]              
	unsigned char                                      ResultDialogType;                                 		// 0x04D5 (0x0001) [0x0000000000000000]              
	TArray< struct FsBuddyPopup >                      UserPopups;                                       		// 0x04D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< int >                                      UserPopupExec;                                    		// 0x04E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ApplicationMessage;                               		// 0x04F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CountDownAborted;                                 		// 0x04FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CountDownEndGameStart;                            		// 0x0508 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IntrusionCheckByScoreMessage;                     		// 0x0514 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CannotStartgameMsg;                               		// 0x0520 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CannotStartgameMsgtoGuest;                        		// 0x052C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeAllReadyHandOverMsg;                        		// 0x0538 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeAllReadyNoHandOverMsg;                      		// 0x0544 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TakeoverHostMessage;                              		// 0x0550 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoHandoverHostbyTimeoutMessage;                 		// 0x055C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoHandoverHostbyTimeoutChat;                    		// 0x0568 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                WantViewIDCardIdx;                                		// 0x0574 (0x0004) [0x0000000000000000]              
	int                                                RolloverSlotIdx;                                  		// 0x0578 (0x0004) [0x0000000000000000]              
	float                                              ViewIDCardTimer;                                  		// 0x057C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              TimeHandOverbyAllReady;                           		// 0x0580 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           PlayClickSoundEvents;                             		// 0x0584 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StartButtonLabel;                                 		// 0x0590 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                WeaponIDSnowBall;                                 		// 0x059C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< int >                                      DisplayGameModeList;                              		// 0x05A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSCustomModeButton >                CustomModeListBT;                                 		// 0x05AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SelectedModeUI__Delegate;                       		// 0x05B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CustomModeDialogClose__Delegate;                		// 0x05C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CustomModeBtn__Delegate;                        		// 0x05D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DoubleClickSelectedModeUI__Delegate;            		// 0x05DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayClickSoundDelegate__Delegate;             		// 0x05E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ModeOptionData__Delegate;                       		// 0x05F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PickUpWeaponOptionData__Delegate;               		// 0x0600 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66317 ];

		return pClassPointer;
	};

	void ASSetStartBtnLabel ( struct FString Label );
	int GetCustomCbIndex ( int ModeType );
	struct FString GetAmmoStringFormat ( int Mag, int Ammo, int WeaponID );
	bool CannotStartGameAITeamDeath ( int* ErrorNo );
	void SetRoolListType ( );
	void SetRoomBackGroundImage ( int MapIndex );
	void UpdatePickUpWeaponOption ( int PickUpWeaponData );
	void SetPickUpWeaponOption ( struct FScriptDelegate InDelegate );
	void PickUpWeaponOptionData ( int PickUpWeaponData );
	void SetModeOptionData ( struct FScriptDelegate InDelegate );
	void ModeOptionData ( int ModeIDData );
	void UpdateLockPickUpUI ( int ModeBtnID );
	void UpdateModeOption ( int ModeIDData );
	void waitRoom_OnRoomCbOpen ( );
	void waitRoom_OnOptionCbOpen ( );
	bool IsAvailableGameMode ( int gamemode );
	void ClearChatInputText ( );
	class USFGFxDialog* GetCurrentGameResultDialog ( );
	void ASAddChatMessage ( int ChatType, struct FString strChatMsg, int Len );
	void AsSetHideInGameInfo ( );
	void AsSetShowInGameInfo ( struct FString MatchCondition, struct FString MatchLimitCondition, struct FString Red, struct FString Blue, struct FString strDeathGame, struct FString strGoal );
	void OnCloseChangeRoomName ( struct FString RoomTitle, struct FString Password );
	void OnClickOpenChangeRoomName ( );
	void SendChatMessage ( struct FString InChatMsg, int InChatSendType, unsigned long bCheckMassive );
	int IsCanFollowGame ( int USN, int channelType );
	void SetWhisperTarget ( struct FString CodeName );
	void HandOvertoLastChatter ( struct FString HandoverStr, struct FString HandoverChatStr );
	void ErrorNoExistValidateWeaponSet ( int err );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void notifyClanMsg ( int USN, int CSN, unsigned long bIsRemoveClan );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void SetOnPlayClickSoundDelegate ( struct FScriptDelegate InDelegate );
	void OnPlayClickSoundDelegate ( );
	void ClearViewIDCardTimer ( );
	void ViewIDCard ( );
	void StartViewIDCardTimer ( int Idx );
	void OnPlayerRowRollOut ( int Idx );
	void OnPlayerRowRollOver ( int Idx );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	void OnTeamSwitchBtnPress ( struct FEventData ev );
	void OnChatCBItemSelect ( struct FEventData ev );
	int ProcessShortcutKeys ( struct FString KeyName );
	void UpdateSelectedPlayerUI ( );
	void UpdateSelectedMatchCondition ( );
	void UpdateSelectedMapUI ( );
	int GetCurGameModeListIndex ( );
	void UpdateSelectedModeUI ( );
	void UpdateSelectedRoomPros ( );
	void ASSetVisibleCustomWindow ( unsigned long Visible );
	void UpdateAllTeamMark ( );
	void ASSetDisableCustomModeRadioButton ( unsigned long Enable );
	void ASSetDisableRoundCBBtn ( unsigned long Disabled );
	void ASSetDisableCustomModeBtn ( unsigned long Disabled );
	void AsSetRoomBlueMarkTitle ( struct FString ClanMark );
	void AsSetRoomRedMarkTitle ( struct FString ClanMark );
	void AsSetCloseTeamSwitch ( );
	void AsSetOpenTeamSwitch ( );
	void SetTeamSwitchVisible ( unsigned long bVisible );
	void ASSetRoomTitlePopUp ( struct FString RoomTitle, struct FString Password );
	void ASCloseUserInfoCard ( );
	void ASOpenUserInfoCard ( struct FString SlotIdx, struct FString CreateDate, struct FString CodeName, struct FString KADRatio, struct FString HKillRatio, struct FString WinRatio, struct FString PersonalImg, struct FString FavoriteWeapon, struct FString GfxRank, struct FString ClanMark, struct FString CamoID, struct FString DesertionString, struct FString DesertionPer, int DesertionLevel, struct FString VipImg, struct FString ClanMarkEffect );
	void ASCloseChildOptionLists ( );
	void ASSetPickupWeaponOptionLock ( int LockPickupWeapon );
	void ASSetPlayerExtraOptionLock ( int LockIntrusion, int LockThirdPerson, int LockSwitchSide, int LockKillCam, int LockTeamBalance, int LockLastManStanding, int LockPickupWeapon );
	void ASSetPlayerExtraOption ( int EnableIntrusion, int EnableThirdPerson, int EnableSwitchSide, int EnableKillCam, int EnableTeamBalance, int EnableLastManStanding, int EnablePickUpWeapon );
	void ASSetAvaliablePlayerMax ( int Numstr );
	void ASSetAvaliablePlayerMin ( int Numstr );
	void ASSetMatchConditionList ( TArray< class UGFxObject* > ObjList );
	void ASSetPersonalPlayerVS ( TArray< class UGFxObject* > ObjList );
	void ASSetPlayerVS ( TArray< class UGFxObject* > ObjList );
	void ASSetPlayerLimit ( struct FString Title );
	void ASSetMatchCondition ( struct FString Title );
	void ASSetMapName ( struct FString ResourceName, struct FString LocalizedName, struct FString SupportMapLength );
	void ASSetMode ( struct FString ModeName );
	void setCustomModeListOpen ( );
	void ASSetSelectModeItem ( struct FString ModeItem );
	void SetunselectModeItem ( );
	void ASSetMapModeText ( struct FString ModeName );
	void ASSetMapWeaponGetIcon ( int EnablePickUpWeapon );
	void ASSetModeListIcon ( TArray< class UGFxObject* > ObjList );
	void ASSetCustomModeListBT ( TArray< class UGFxObject* > ObjList );
	void PKT_ChangeRoomUserInfoMessage_Auto ( class UPacket* Packet );
	void PKT_GameEndMessage_Auto ( class UPacket* recvPacket );
	void PKT_GameStartMessage_Auto ( class UPacket* recvPacket );
	void UpdateModeDifficulty ( );
	void PKT_ChangeMasterMessage_Auto ( class UPacket* Packet );
	void PreStartGame ( );
	void PKT_RoomUserStatusMessage_Auto ( class UPacket* Packet );
	void PKT_RoomUserStatus_REQ_OK ( class UPacket* Packet );
	void CheckUserSelectedPopup ( int NowSlotIndex, int NewSlotIndex );
	void PKT_SlotChangeMessage_Auto ( class UPacket* Packet );
	void PKT_SlotChange_REQ_OK ( class UPacket* Packet );
	void CheckUserCardViewSlot ( int SlotOld, int SlotNew );
	void CheckRoomMasterChanged ( unsigned char InRoomType );
	void PKT_LeftGameRoomMessage_Auto ( class UPacket* Packet );
	void PKT_LeftGameRoom_REQ_OK ( class UPacket* Packet );
	void PKT_ChangeRoomSettingMessage_Auto ( class UPacket* Packet );
	void PKT_ChangeRoomSetting_REQ_OK ( class UPacket* Packet );
	void PKT_GetGameRoomUserList_REQ_OK ( class UPacket* Packet );
	void PKT_JoinGameRoomMessage_Auto ( class UPacket* Packet );
	void ClearCountDownStopbyHOSTOUTTimer ( );
	void ClearGameStartCountDownTimer ( );
	bool GameStartCountDownStart ( );
	void PKT_GetInGameScore_REQ_OK ( class UPacket* Packet );
	void StartGame ( int HostUSN, int HostPort, struct FString HostIP, struct FString UniqueKey, unsigned long bInterlude );
	void HandOverbyAllReady ( );
	void SetTimerHandOverbyAllReady ( );
	void ClearTimerHandOverbyAllReady ( );
	bool NeedAutoHandover ( );
	void CheckAllUserReadyed ( unsigned long bDisplayResult );
	void ASSetDeathGameUserList ( int RoomListType );
	void GetVIPInfo ( int VipGrade, int MonthlyRewardGrade, struct FString* VipImg, int* VipRollingTime );
	void GetMeCheck ( int InUSN, struct FString* MeChk );
	void GetIsLock ( int Index, int InUSN, struct FString* IsLock );
	void GetUserStatus ( int StatusIndex, struct FString* UserStatus );
	void GetGFxRank ( struct FString OrigCodename, struct FSRoomUser RoomUser, struct FString* GfxRank );
	class UGFxObject* ASSetARoomUser ( int Index, int InUSN );
	void OnChangedShowUSNFlag ( );
	int GetUserListSlotSize ( );
	void UpdateAllRoomUserList ( );
	void ASSetStartButtonActive ( struct FString Stat );
	void ASSetStartButtonBlur ( struct FString Stat );
	void RequsetAllRoomUserList ( );
	void ASSetRoundMode ( int Round );
	void ASSetRoomMasterMode ( int nIsRoomMaster );
	void AutoSelectDifficulty ( unsigned long no_need_request );
	void DoubleClickSetSelectedMode ( struct FScriptDelegate InDelegate );
	void DoubleClickSelectedModeUI ( struct FString ModeName );
	void DoubleClickModeUI ( struct FString ModeName );
	void OnChangedRoomMaster ( int nIsRoomMaster, unsigned char InRoomType );
	void RequestChangeUserStatus ( unsigned char NewState );
	void RequestRoomSettingChange ( );
	bool IsAlreadyReady ( );
	bool GetCurrentMatchConditionInfo ( unsigned char* match_type, float* selected_match_condition, struct FString* selected_match_condition_type_text );
	unsigned char GetMatchTypeByGameModeID ( int game_mode );
	int GetRoundModeUINum ( );
	bool IsRoundGame ( );
	int IsGamingRoomRoomMaster ( );
	int IsRoomMaster ( unsigned long bExceptGameMaster );
	void ClearAllTimer ( );
	void GetOutProcess ( int LastScreen );
	void SetForcedLeaveRoom ( unsigned long bRequestLeft );
	void PKT_ForcedLeaveMessage_Auto ( class UPacket* Packet );
	bool CanGameStart ( int* ErrorNo );
	void CountDownStopbyHOSTOUT ( );
	void SetCountdownvalidate ( );
	void GameLaunchSound ( );
	void SetTimerGameLaunchSound ( );
	void ClearTimerGameLaunchSound ( );
	void OnShowChatMessageEvent ( int ChatType, struct FString strMessage, unsigned long bFromMe );
	void GameLaunch ( );
	void GameStartCountDown ( );
	bool CountDownStop ( unsigned long Force );
	void DisplayCountDownStop ( struct FString ErrorMsg );
	bool IsSendCountDown ( );
	void SetRoomPropButtonForGhost ( unsigned long bGameEnded );
	void SetRoomPropButton ( unsigned long bEnable );
	void StartGamePreProcess ( );
	bool CheckClientSideTeamBalance ( );
	void ChangePlayerStatusByPress ( );
	void StartBtnPress ( );
	void OnStartBtnPress ( struct FEventData ev );
	void ClearCustomMode ( );
	void InitCustomMode ( );
	void OnCustomModeCancelBtnPress ( struct FEventData ev );
	void UpdateCustomModeApplyMessage ( struct FString ModeText );
	int GetModeListTextIndex ( );
	void UpdateApplyBtnPress ( );
	void OnCustomModeApplyBtnPress ( struct FEventData ev );
	void ReadyBtnPress ( );
	void OnReadyBtnPress ( struct FEventData ev );
	void SetCustomCB ( int ModeIDData );
	void OnChangeCustomMode ( struct FEventData ev );
	void SetPlayerCountList ( int Index );
	void OnChangePlayerDeathGameCount ( struct FEventData ev );
	void OnChangePlayerCount ( struct FEventData ev );
	void OnChangeWinPointCondition ( struct FEventData ev );
	void OnChangeWinRoundCondition ( struct FEventData ev );
	void SetChangeMapID ( int CurrentMapID );
	void ChangeMap ( int Index );
	void OnChangeMap ( struct FEventData ev );
	void ChangePreviewCharacter ( );
	void OpenPreviewCharacter ( );
	void ChangeGameMode ( int mode_id, int map_id, unsigned long IsNoCheck );
	void OnChangeMode ( struct FEventData ev );
	void DoubleClickModeOption ( int Id );
	void UpdateSetSelectedModeUI ( struct FString ModeName );
	void DoubleClickCustomModeBtn ( struct FScriptDelegate InDelegate );
	void CustomModeBtn ( int Id );
	void CustomCbClose ( struct FScriptDelegate InDelegate );
	void CustomModeDialogClose ( );
	void SetSelectedMode ( struct FScriptDelegate InDelegate );
	void SelectedModeUI ( struct FString ModeName );
	void OnClickUserPopUpMenu ( int Index );
	void ASSetPopUpMessage ( int SlotIndex, TArray< class UGFxObject* > MessageArray );
	class UGFxObject* SetAPopupMenu ( int Idx, struct FString Text, unsigned long IsDisabled );
	void OnClickUserSlot ( int SlotIndex, int mouseIndex );
	int GetAvailableSlotIndexInTeam ( int TeamIndex );
	int GetAvailableSlotIndexToOtherTeam ( int SlotIndex );
	void ASCloseAltPopUp ( );
	void UpdateVipMapUnlock ( );
	void UpdateVipRoomMark ( );
	void OnCheckOutDateVipItem ( );
	void ASSetLockIcon ( unsigned long LockIcon );
	void ASSetRoomTitle ( struct FString RoomTitleStr );
	void SetStartButton ( struct FString Label, unsigned long bActive );
	void SetReadyButton ( struct FString Label, unsigned long bActive );
	void UpdateStartButton ( );
	void UpdateCustomModeButton ( );
	void UpdateRoomTitle ( );
	void UpdatePlayerExtraOption ( );
	void UpdatePlayerLimitList ( );
	void UpdateSelectedMatchConditionText ( );
	void UpdateMatchConditionCBList ( );
	void ClearMapCBList ( );
	void SetListCB ( class UGFxClikWidget* WidgetCB, struct FString StringValue );
	void UpdateMapCBList ( );
	void ClearModeCBList ( );
	void ASSetNoDurabilityMode ( );
	void UpdateModeCBList ( );
	void UpdateGameModeList ( );
	void UpdateTeamSwitchBtn ( );
	int GetCustomModeListIndex ( );
	void UpdateCustomModeBtnApply ( );
	bool IsGamingRoomSameUser ( );
	void UpdateClanBuffEffect ( );
	void UpdateRoomUserInterface ( );
	void OnStartBtnRollOut ( struct FEventData ev );
	void OnReadyBtnRollOut ( struct FEventData ev );
	bool CheckChangedText ( struct FString NewText, struct FString OldText );
	void SetEmptyRoomName ( struct FString* RoomName );
	void OnTitleChangedCheckBtnPress ( struct FEventData ev );
	void SetVisibleTitleChangedBtn ( unsigned long Visible );
	void OnPasswordInputFocusIn ( struct FEventData ev );
	void OnRoomTitleInputFocusIn ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void ActivatePreviewAreaExtraUI ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetupWithOpen ( );
	void SetGameModeIDArray ( );
	void OnPendingOpen ( );
	void waitRoom_OnCustomCbOpen ( );
	void SetCustomCbClose ( );
	void DelegateSetupFlashEvent ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_BaseRoom::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_FuncUseDefault
// 0x0070 (0x02B8 - 0x0248)
class USFGFxDialog_FuncUseDefault : public USFGFxDialog
{
public:
	int                                                UseItemId;                                        		// 0x0248 (0x0004) [0x0000000000000000]              
	struct FQWord                                      GiftNSN;                                          		// 0x024C (0x0008) [0x0000000000000000]              
	class UClass*                                      ItemClass;                                        		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FString                                     strUseFailDefault;                                		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           strUseFail;                                       		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseGiftItemMessage;                            		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseGiftSPMessage;                              		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseGiftTPMessage;                              		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strConfirmMessage;                                		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseItemReConfirmMessage;                       		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WebCouponURL;                                     		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66808 ];

		return pClassPointer;
	};

	void SetItemChangeDialog ( unsigned long IsChangeDialog );
	void OnUseItemReconfirmOkBtn ( );
	class USFGFxDialog* OpenUseFailDialog ( int ErrNum );
	void ASSetUseDialogInfo ( );
	void GetDisplayItemInfo ( struct FString* ImgSet, struct FString* ImgName, struct FString* ItemName, struct FString* strItemInfo, struct FString* strExtraInfo );
	void RequsetSetUseGift ( );
	void RequsetSetOpenItem ( );
	void RequsetSetUseItem ( );
	void ProcessUseItem ( );
	int OKButtonPress ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_FuncUseDefault::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_RankLimitError
// 0x0024 (0x026C - 0x0248)
class USFGFxDialog_RankLimitError : public USFGFxDialog
{
public:
	struct FString                                     RankLimitBuyErrorText;                            		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankLimitBuyErrorTextNoImg;                       		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankLimitUseErrorText;                            		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66810 ];

		return pClassPointer;
	};

	void ASSetRankLimitErrorText ( struct FString Rank, struct FString context );
	void SetRankLimitErrorText ( struct FString Rank, unsigned long bUseItem, int nUseLimitRank );
};

UClass* USFGFxDialog_RankLimitError::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_EmblemDeck
// 0x0140 (0x0388 - 0x0248)
class USFGFxDialog_EmblemDeck : public USFGFxDialog
{
public:
	int                                                Display_Row_Size;                                 		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Default_Display_Rows;                             		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UGFxObject*                                  _global;                                          		// 0x0250 (0x0004) [0x0000000000000000]              
	TArray< struct FSEmblemInfo >                      EmblemInfoList;                                   		// 0x0254 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSEmblemTabData >                   EmblemTypeTabList;                                		// 0x0260 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     Msg_Need_PCRoom_Care_Service;                     		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Msg_Not_Completed_Challenge;                      		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Msg_Need_VIP_Grade;                               		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Msg_Invalid_Emblem;                               		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Msg_Invalid_Item;                                 		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSEmblemTooltipData >               EmblemTooltipList;                                		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Default_Msg_Unavailable_Spray_Emblem;             		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USFConditionManager*                         ConditionMgr;                                     		// 0x02C0 (0x0004) [0x0000000000000000]              
	class USFChallengeListCondition*                   ChallengeListCondition;                           		// 0x02C4 (0x0004) [0x0000000000000000]              
	struct FString                                     DataBindingName_Normal;                           		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DataBindingName_PCRoom;                           		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DataBindingName_Challenge;                        		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DataBindingName_Spray;                            		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DataBindingName_VIP;                              		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSEmblemInfo >                      EmblemList_Normal;                                		// 0x0304 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSEmblemInfo >                      EmblemList_PCRoom;                                		// 0x0310 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSEmblemInfo >                      EmblemList_Challenge;                             		// 0x031C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSEmblemInfo >                      EmblemList_Spray;                                 		// 0x0328 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSEmblemInfo >                      EmblemList_VIP;                                   		// 0x0334 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Selected_Emblem_ID;                               		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      Selected_Tab_ID;                                  		// 0x034C (0x0001) [0x0000000000000000]              
	unsigned char                                      InitalizeSelected_Tab_ID;                         		// 0x034D (0x0001) [0x0000000000000000]              
	int                                                LastBoughtItemID;                                 		// 0x0350 (0x0004) [0x0000000000000000]              
	int                                                SelectedItemID;                                   		// 0x0354 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnChangedEmblemTabDelegate__Delegate;           		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnListItemDelegate__Delegate;                   		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EmblemSort__Delegate;                           		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EmblemSortWithCondition__Delegate;              		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66818 ];

		return pClassPointer;
	};

	int GetTabIndexByEmblemType ( unsigned char EmblemType );
	unsigned char GetEmblemTypeByCode ( struct FString Code );
	struct FString GetSprayKeyText ( );
	struct FString GetSprayEmblemTooltip ( int ItemId, unsigned long IsAvailable, unsigned long IsSealed );
	struct FString GetEmblemTooltip ( struct FSEmblemInfo EmblemInfo, unsigned long IsAvailable, unsigned long IsSealed );
	int GetSprayEmblemConditionByEmblemID ( int emblem_id );
	int GetChallengeEmblemConditionByEmblemID ( int emblem_id );
	struct FString GetEmblemUIType ( unsigned char emblem_type );
	int GetEmblemIDFromUIList ( int Row, int Col );
	struct FString GetBindingNameByEmblemType ( unsigned char emblem_type );
	bool IsAvailableEmblem ( struct FString EmblemID, unsigned long ShouldOpenDialog );
	void datastore_FillData_EmblemItem ( struct FString BindingName, int Index, class UGFxObject** Item );
	void datastore_FillData_EmblemList ( struct FString BindingName, int start_index, int end_index, class UGFxObject** total_row );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	void ASSetTabData ( class UGFxObject* Item, int Index );
	int EmblemSortWithCondition ( struct FSEmblemInfo A, struct FSEmblemInfo B );
	int EmblemSort ( struct FSEmblemInfo A, struct FSEmblemInfo B );
	void PKT_ChangeVipInfoMessage_Auto ( class UPacket* Packet );
	void PKT_UpdateTaskList_REQ_OK ( class UPacket* recvPacket );
	void PKT_PCRoomBenefitMessage_NTF ( class UPacket* recvPacket );
	void PKT_UpdateNameTag_REQ_OK ( class UPacket* recvPacket );
	int CancelButtonPress ( );
	int OKButtonPress ( );
	void OnAutoEquip ( unsigned long should_auto_equip );
	void OnBuyItemSuccess ( int item_id, struct FQWord item_sn, int item_price );
	void OnClickBtnBuy ( int row_index, int column_index );
	void OnUseItemSuccess ( );
	void OnClickBtnUse ( int row_index, int column_index );
	void OnClickEmblemItem ( int row_index, int column_index );
	void OnChangedEmblemTab ( struct FString Code );
	void UpdateOKButton ( );
	void ResetProfileEmblem ( );
	void ApplyProfileEmblem ( struct FString emblem_id );
	void InitializeEmblemList ( );
	void SetInitializeTabID ( unsigned char Type );
	void InitializeTab ( );
	void ResetEmblemList ( );
	void SetOnClickBtnBuyDelegate ( struct FScriptDelegate InDelegate );
	void SetOnClickBtnUseDelegate ( struct FScriptDelegate InDelegate );
	void SetOnClickEmblemItemDelegateDelegate ( struct FScriptDelegate InDelegate );
	void SetOnChangedEmblemTabDelegate ( struct FScriptDelegate InDelegate );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	void OnListItemDelegate ( int row_index, int column_index );
	void OnChangedEmblemTabDelegate ( struct FString tab_code );
};

UClass* USFGFxDialog_EmblemDeck::pClassPointer = NULL;

// Class SFGame.SFItem_Func_WeaponRepairCoupon
// 0x000C (0x0180 - 0x0174)
class USFItem_Func_WeaponRepairCoupon : public USFItem_Functional_UI
{
public:
	struct FString                                     strNoticeToUseRepairCoupon;                       		// 0x0174 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66820 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_WeaponRepairCoupon::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_ETC
// 0x0004 (0x0178 - 0x0174)
class USFItem_Functional_ETC : public USFItem_Functional
{
public:
	int                                                ModeItemTargetSlot;                               		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66824 ];

		return pClassPointer;
	};

};

UClass* USFItem_Functional_ETC::pClassPointer = NULL;

// Class SFGame.SFItem_Func_RandomBox
// 0x0004 (0x017C - 0x0178)
class USFItem_Func_RandomBox : public USFItem_Functional_ETC
{
public:
	int                                                RandomBoxType;                                    		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66823 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_RandomBox::pClassPointer = NULL;

// Class SFGame.SFItem_Func_RandomBox_Key
// 0x000C (0x0188 - 0x017C)
class USFItem_Func_RandomBox_Key : public USFItem_Func_RandomBox
{
public:
	struct FString                                     strNoticeToUseRandomBoxKey;                       		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66822 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_RandomBox_Key::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Inventory
// 0x0118 (0x046C - 0x0354)
class USFGFxLobby_Inventory : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              btnResell;                                        		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnItemSearch;                                    		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ItemSearchInputWidget;                            		// 0x035C (0x0004) [0x0000000000000000]              
	int                                                SPperDuration;                                    		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      IsResellBtnDisable : 1;                           		// 0x0364 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsItemResellMode : 1;                            		// 0x0364 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUITabInitialized : 1;                            		// 0x0364 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FString                                     ClanMasterItemUseFailedMessage;                   		// 0x0368 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanManagerItemUseFailedMessage;                  		// 0x0374 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMemberItemUseFailedMessage;                   		// 0x0380 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x038C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FQWord                                      GiftNSN;                                          		// 0x0398 (0x0008) [0x0000000000000000]              
	struct FScriptDelegate                             __MainCategoryButtonDelegate__Delegate;           		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemRollOverDelegate__Delegate;               		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemRollOutDelegate__Delegate;                		// 0x03B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInvenListClickedDelegate__Delegate;           		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInvenWeaponListDblClickedDelegate__Delegate;  		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInvenEquipListDblClickedDelegate__Delegate;   		// 0x03DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInvenFuncListDblClickedDelegate__Delegate;    		// 0x03E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UnitListButtonDelegate__Delegate;               		// 0x03F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __WeaponSetTypeDelegate__Delegate;                		// 0x0400 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __WeaponSetButtonDelegate__Delegate;              		// 0x040C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedEquipedThrowweaponDelegate__Delegate;  		// 0x0418 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedResellButtonDelegate__Delegate;        		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedDeleteButtonDelegate__Delegate;        		// 0x0430 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __WeaponListRepairButtonDelegate__Delegate;       		// 0x043C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __WeaponSetRepairButtonDelegate__Delegate;        		// 0x0448 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWeaponSetAllRepairDelegate__Delegate;    		// 0x0454 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInvenClickedItemUseDelegate__Delegate;        		// 0x0460 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 66830 ];

		return pClassPointer;
	};

	bool EnablePreviewInfo ( );
	bool HasPMCTab ( );
	void OnUsedSendedGiftItem ( );
	void ForceSetListScrollPosition ( int Index );
	void OnClickWeaponSetAllRepair ( int nSet, int X, int Y );
	void OnClickWeaponListRepair ( int Row, int colum, int DialogPosX, int DialogPosY );
	void OnClickWeaponSetRepair ( struct FString CaseStr, struct FString SetStr, int DialogPosX, int DialogPosY );
	void OnClickedEquipedThrowweapon ( int ClickedIdx );
	void OnClickUnitList ( int Index, unsigned long bForce );
	void OnClickWeaponSetType ( struct FString Index );
	void OnClickWeaponSetTypeClick ( int ClickedType );
	void OnPmcItemUseBtnClick ( int Row, int colum );
	void OnClickItemUse ( int Row, int colum );
	void OnClickPMCInvenList ( int Row, int colum );
	void OnClickRecycleInvenList ( int Row, int colum );
	void OnClickModeInvenList ( int Row, int colum );
	void OnClickFuncInvenList ( int Row, int colum );
	void OnClickEquipInvenList ( int Row, int colum );
	void OnClickWeaponInvenList ( int Row, int colum );
	void SetOnInvenClickedModeItemUseDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenPMCClickedItemUseDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenClickedFuncItemUseDelegate ( struct FScriptDelegate InDelegate );
	void OnInvenClickedItemUseDelegate ( int Row, int colum );
	void SetOnClickWeaponSetAllRepairDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWeaponSetAllRepairDelegate ( int nSet, int X, int Y );
	void SetWeaponSetRepairButtonDelegate ( struct FScriptDelegate InDelegate );
	void WeaponSetRepairButtonDelegate ( struct FString CaseStr, struct FString SetStr, int DialogPosX, int DialogPosY );
	void SetWeaponListRepairButtonDelegate ( struct FScriptDelegate InDelegate );
	void WeaponListRepairButtonDelegate ( int IndexX, int IndexY, int DialogPosX, int DialogPosY );
	void SetOnClickedDeleteButtonDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedDeleteButtonDelegate ( int rowIdx, int columIdx, int MouseX, int MouseY, int DialogType );
	void SetOnClickedResellButtonDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedResellButtonDelegate ( int rowIdx, int columIdx, int MouseX, int MouseY, int DialogType );
	void SetOnClickedEquipedThrowweaponDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedEquipedThrowweaponDelegate ( int ClickedIdx );
	void SetWeaponSetButtonDelegate ( struct FScriptDelegate InDelegate );
	void WeaponSetButtonDelegate ( int ClickedType );
	void SetWeaponSetTypeDelegate ( struct FScriptDelegate InDelegate );
	void WeaponSetTypeDelegate ( struct FString Index );
	void SetUnitListButtonDelegate ( struct FScriptDelegate InDelegate );
	void UnitListButtonDelegate ( int Index, unsigned long bForce );
	void SetOnInvenFuncListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnInvenFuncListDblClickedDelegate ( int Row, int colum );
	void SetOnInvenEquipListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnInvenEquipListDblClickedDelegate ( int Row, int colum );
	void SetOnInvenWeaponListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnInvenWeaponListDblClickedDelegate ( int Row, int colum );
	void SetOnInvenPMCListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenRecycleListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenModeListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenFuncListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenEquipListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnInvenWeaponListClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnInvenListClickedDelegate ( int Row, int column );
	bool GetItemResellMode ( );
	void SetItemResellMode ( unsigned long bSet );
	void UpdateUnitChanged ( int UnitID );
	void UpdateSelectedWeaponSet ( );
	void OnClickedDeleteButton ( int rowIdx, int columIdx, int MouseX, int MouseY, int DialogType );
	void OnClickedResellButton ( int rowIdx, int columIdx, int MouseX, int MouseY, int DialogType );
	void ASUnitSelected ( int num );
	void TurnOffRepairBar ( int Idx );
	void OnItemRollOut ( int ItemIndex, struct FString Tmp );
	void SetOnItemRollOutDelegate ( struct FScriptDelegate InDelegate );
	void OnItemRollOutDelegate ( int ItemIndex, struct FString Tmp );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void SetOnItemRollOverDelegate ( struct FScriptDelegate InDelegate );
	void OnItemRollOverDelegate ( int Row, int column, struct FString Tmp );
	void PreGameClosed ( );
	void OnCheckOutDateItem ( );
	void OnItemResellSuccess ( int ItemId, struct FQWord ItemSN );
	void PKT_ReSellItem_REQ_OK ( class UPacket* Packet );
	void OnCouponItemReceived ( );
	void OnItemBuySuccess ( int ItemId, struct FQWord ItemSN, int ItemPrice, unsigned long bIsInUse );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	void ResetPageIndex ( );
	void InitInvenLobbyPart ( unsigned long UpdatePreviewWeapon );
	void InitializeSearchText ( );
	void ChangeSubTab ( int TabIndexNew, unsigned long bForceSelect );
	int ChangeMainTab ( int InTabIndex );
	void OnClickedPageRightBtn ( );
	void OnClickedPageLeftBtn ( unsigned long IsClickedPageLeftBtn );
	void GetPageIndexByAS ( int Index );
	void OnCheckOutDateVipItem ( );
	void OnItemSearchBtnClick ( struct FEventData ev );
	void OnResellBtnClick ( struct FEventData ev );
	void SetMainCategoryButtonDelegate ( struct FScriptDelegate InDelegate );
	void MainCategoryButtonDelegate ( int ClickedType );
	void OnOpenChoicePackageSuccess ( );
	void OnOpenPackageSuccess ( );
	void OnRewardItemAddedToInven ( );
	void OnUsedSprayItem ( );
	void OnVIPCouponUseStarted ( int ItemId );
	void SetCorrectionCodeNameColorV2 ( );
	void OnNewItemUsedSuccess ( );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void ActivatePreviewAreaExtraUI ( );
	void ASCreateMainTab ( class UGFxObject* MainTabs );
	void InitializeSubTab ( unsigned char eIdx, class UGFxObject* Widget );
	void ASSetEnableResellButton ( unsigned long bEnable );
	void InitializeMainTab ( );
	void InitializedUITab ( );
	void FocusSearchText ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
	void OnViewActivatedDelayed ( );
	void ASSetEnablePaging ( unsigned long isEnable );
};

UClass* USFGFxLobby_Inventory::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Repair
// 0x0088 (0x02D0 - 0x0248)
class USFGFxDialog_Repair : public USFGFxDialog
{
public:
	struct FERapairDialogBtnInfo                       ERapairDialogBtnData[ 0x4 ];                      		// 0x0248 (0x0070) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBtn__Delegate;                                		// 0x02B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CouponOKButtonPress__Delegate;                  		// 0x02C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67053 ];

		return pClassPointer;
	};

	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void AddDelegate ( unsigned char Type, struct FScriptDelegate DelegateHandler );
	void OnViewClosed ( int NextIndex );
	void OnCouponOKButtonPress ( struct FEventData ev );
	void CouponOKButtonPress ( );
	void DelegateSetup ( );
	void OnBtn ( struct FEventData ev );
};

UClass* USFGFxDialog_Repair::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_AllItemRepair
// 0x0048 (0x0318 - 0x02D0)
class USFGFxDialog_AllItemRepair : public USFGFxDialog_Repair
{
public:
	class UGFxClikWidget*                              ItemObjList;                                      		// 0x02D0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCoupon;                                        		// 0x02D4 (0x0004) [0x0000000000000000]              
	TArray< struct FsRepairItemList >                  RepairItemLists;                                  		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ReservedCouponCount;                              		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                ReservedCouponID;                                 		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                NeedCoupon;                                       		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                UsedCoupon;                                       		// 0x02F0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      SelectedIndex;                                    		// 0x02F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RepairMsg;                                        		// 0x0300 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickItemSelectDelegate__Delegate;            		// 0x030C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67082 ];

		return pClassPointer;
	};

	class UGFxObject* ClearAItem ( int Idx );
	class UGFxObject* SetAItem ( int Idx, struct FsRepairItemList* RepairItemList );
	void SetAcceptDisable ( unsigned long Disabled );
	void UpdateItemList ( );
	void OnClickItemSelect ( int Idx, unsigned long Selected );
	void SetOnClickItemSelectDelegate ( struct FScriptDelegate InDelegate );
	void OnClickItemSelectDelegate ( int Idx, unsigned long Selected );
	void SetAllItemRepairDialog ( int X, int Y, struct FString context, TArray< struct FString > WeaponNames, TArray< struct FString > WeaponImgs, TArray< int > RepairGauges, TArray< int > NeedSps, TArray< struct FQWord > ItemSNs, int CouponID, struct FString CouponCount );
	void ASSetRepairDialogSPNeed ( struct FString SP );
	void ASSetRepairDialogSPOrg ( struct FString SP );
	void ASSetRepairDialogBase ( int X, int Y, struct FString context, struct FString CouponCount );
	void OnUseItemSuccess ( );
	void CouponOKButtonPress ( );
	int OKButtonPress ( );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_AllItemRepair::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_BaseAreaSelect
// 0x0030 (0x0278 - 0x0248)
class USFGFxDialog_BaseAreaSelect : public USFGFxDialog
{
public:
	struct FString                                     TitleText;                                        		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              GFx_ListArea;                                     		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GFx_BtnAreaClose;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	unsigned char                                      ClanAreaDlgType;                                  		// 0x025C (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickCloseAreaSelectDlgDelegate__Delegate;    		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSubmitAreaSelectDelegate__Delegate;           		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67188 ];

		return pClassPointer;
	};

	void ASSetDefaultAreaIndex ( int Index );
	void ASSetAreaPopupMessage ( struct FString Text );
	void OnSubmitAreaSelect ( struct FString MainAreaCode, struct FString SubAreaCode );
	void OnClickBtnCloseArea ( struct FEventData ev );
	void SetClanAreaDlgType ( unsigned char NewClanAreaDlgType );
	void InitializeAreaList ( );
	void SetOnSubmitAreaSelectDelegate ( struct FScriptDelegate InDelegate );
	void SetOnClickCloseAreaSelectDlgDelegate ( struct FScriptDelegate InDelegate );
	int OKButtonPress ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnSubmitAreaSelectDelegate ( struct FString MainAreaCode, struct FString SubAreaCode );
	void OnClickCloseAreaSelectDlgDelegate ( );
};

UClass* USFGFxDialog_BaseAreaSelect::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_BeginnerComplete
// 0x0004 (0x024C - 0x0248)
class USFGFxDialog_BeginnerComplete : public USFGFxDialog
{
public:
	class ASFHUD*                                      myHUD;                                            		// 0x0248 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67227 ];

		return pClassPointer;
	};

	int CancelButtonPress ( );
	int OKButtonPress ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_BeginnerComplete::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Buy
// 0x00D0 (0x0318 - 0x0248)
class USFGFxDialog_Buy : public USFGFxDialog
{
public:
	struct FString                                     PermanentSellInfo;                                		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PermanentUseSellInfo;                             		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CouponSellInfo;                                   		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PayMoneyMessage;                                  		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HaveMoneyMessage;                                 		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AfterPayMoneyMessage;                             		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyNoticeWithCASH;                                		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyNoticeWithSP;                                  		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyNoticeWithNoReturn;                            		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeTpExchange;                                 		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyNoticeWithFeverLPItem;                         		// 0x02C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyableCountFailedMessage;                        		// 0x02CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              btnRegulation;                                    		// 0x02D8 (0x0004) [0x0000000000000000]              
	struct FString                                     strRegulationURL;                                 		// 0x02DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           DisableGiftUsedCashArray;                         		// 0x02E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           VipBonusType;                                     		// 0x02F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSRegulationURL >                   ChannelingRegulationArray;                        		// 0x0300 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __BuyProcessDelegate__Delegate;                   		// 0x030C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67280 ];

		return pClassPointer;
	};

	struct FString GetNoticeTpExchange ( );
	struct FString GetBuyNoticeMessage ( int ItemId );
	int GetDefaultPriceIndex ( struct FSItemLIst ABuyItem );
	void ASSetBuyNoticeText ( struct FString strNotice );
	int OKButtonPress ( );
	void OnRegulationBtnPress ( struct FEventData ev );
	struct FString GetRegulationURL ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void SetBuyProcessDelegate ( struct FScriptDelegate InDelegate );
	bool BuyProcessDelegate ( );
};

UClass* USFGFxDialog_Buy::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_BuyAll
// 0x0050 (0x0368 - 0x0318)
class USFGFxDialog_BuyAll : public USFGFxDialog_Buy
{
public:
	class UGFxClikWidget*                              ItemObjList;                                      		// 0x0318 (0x0004) [0x0000000000000000]              
	struct FString                                     NotyRestDaysSrc;                                  		// 0x031C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Noty1RestDaysSrc;                                 		// 0x0328 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                NeedSp;                                           		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                NeedCASH;                                         		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                NeedTP;                                           		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                NeedLP;                                           		// 0x0340 (0x0004) [0x0000000000000000]              
	TArray< struct FSItemLIst >                        BuyItemList;                                      		// 0x0344 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemPriceSelectedDelegate__Delegate;          		// 0x0350 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemCheckDelegate__Delegate;                  		// 0x035C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67364 ];

		return pClassPointer;
	};

	void OnCashReceived ( );
	int GetVipBonusByBuyItem ( struct FSItemLIst ABuyItem, int Index, int Price );
	struct FString GetSelectedBuyItemPayment ( struct FSItemLIst ABuyItem, int nSelIndex );
	int GetBuyItemPriceBySelectedIndex ( struct FSItemLIst ABuyItem, int nSelIndex );
	class UGFxObject* datastore_FillData_BuyAllItemListAt ( int Index );
	void datastore_FillData_BuyAllItemList ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool BuyAllProcess ( );
	bool CheckBuyableByPrice ( struct FString* OutPaymentType );
	bool CheckAllBuyableByRank ( int* RankLimit );
	void OnItemPriceSelected ( int Index, int InSelIndex );
	void OnItemCheckChange ( int Index, unsigned long Checked );
	void SetOnItemCheckDelegate ( struct FScriptDelegate InDelegate );
	void OnItemCheckDelegate ( int Index, unsigned long Checked );
	void SetOnItemPriceSelectedDelegate ( struct FScriptDelegate InDelegate );
	void OnItemPriceSelectedDelegate ( int Index, int InSelIndex );
	void ASSetAddSPInfo ( struct FString strAddSP );
	void ASSetLpItemPriceText ( struct FString strLPPrice, struct FString strLPHave, struct FString strLPRemain );
	void ASSetItemPriceText ( struct FString strSPPrice, struct FString strSPHave, struct FString strSPRemain, struct FString strCASHPrice, struct FString strCASHHave, struct FString strCASHRemain, struct FString strTPPrice, struct FString strTPHave, struct FString strTPRemain, struct FString strOrigPriceSP, struct FString strDiscountRatioSP, struct FString strOrigPriceCASH, struct FString strDiscountRatioCASH );
	void SetItemPriceInfo ( unsigned long bFeverTimePage );
	void ASClearBuyNoticeText ( );
	void SetBuyNotice ( );
	void ASSetItemListCount ( int nCount );
	struct FString GetLogType ( );
	void SetBuyAllItemList ( TArray< struct FSFItemData > ItemList, unsigned char BuyAllType, unsigned long bFeverTimePage );
	void OnClosedByCancel ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_BuyAll::pClassPointer = NULL;

// Class SFGame.SFRecommendItem
// 0x0018 (0x0054 - 0x003C)
class USFRecommendItem : public UObject
{
public:
	TArray< struct FSRecommendItemType >               RecommendItemTypeArray;                           		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSRecommendItem >                   RecommendItemArray;                               		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67405 ];

		return pClassPointer;
	};

	int GetRandomItemFrom ( TArray< int > InItemArray );
	void FilterNotValidItem ( int UnitItemID, int RemoveItemID, unsigned long bKeyItem, TArray< int >* OutArray );
	void GetBaseItem ( int UnitItemID, int KeyItemID, TArray< struct FString > InTypeArray, TArray< int >* OutItemArray );
	int GetKeyItem ( int UnitItemID, TArray< struct FString > InTypeArray );
	void GetItemArrayByItemType ( TArray< struct FString > InTypeArray, TArray< int >* OutItemArray );
	void GetRecommendItemArray ( int UnitItemID, int InRank, int InSP, TArray< int >* OutArray );
	int GetRecommendTypeImageIndex ( int nType );
	struct FString GetRecommendTypeStr ( int nType );
};

UClass* USFRecommendItem::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_BuyOk
// 0x0078 (0x02C0 - 0x0248)
class USFGFxDialog_BuyOk : public USFGFxDialog
{
public:
	struct FString                                     strNoticeThankYou;                                		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strNoticeToConfirm;                               		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strNoticeToConfirmModeItem;                       		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strNoticeToUse;                                   		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strNoticeToEquip;                                 		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strOKUse;                                         		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strOKEquip;                                       		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCancelUse;                                     		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strCancelEquip;                                   		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuyAfterDelegate__Delegate;                   		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67571 ];

		return pClassPointer;
	};

	void SetDialogTextByEquipOrUse ( unsigned long bEquip, unsigned long bModeItem );
	void SetOnBuyAfterDelegate ( struct FScriptDelegate InDelegate );
	void OnBuyAfterDelegate ( unsigned long AutoEquip );
	int CancelButtonPress ( );
	void OkProcessesDefault ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_BuyOk::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_BuyOne
// 0x02E0 (0x05F8 - 0x0318)
class USFGFxDialog_BuyOne : public USFGFxDialog_Buy
{
public:
	class UGFxClikWidget*                              ComboBoxMC;                                       		// 0x0318 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CouponListBoxMC;                                  		// 0x031C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FriendListMC;                                     		// 0x0320 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TabBarMC;                                         		// 0x0324 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CodeNameEditBoxMC;                                		// 0x0328 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CodeNameSearchButtonMC;                           		// 0x032C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GiftMessageTextBoxMC;                             		// 0x0330 (0x0004) [0x0000000000000000]              
	int                                                CurrentMoney;                                     		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                RestMoney;                                        		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                SelectedItemID;                                   		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                SelectedItemPrice;                                		// 0x0340 (0x0004) [0x0000000000000000]              
	struct FSFItemData                                 SelectedItemData;                                 		// 0x0344 (0x0118) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedPaymentType;                              		// 0x045C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           PaymentTypeArray;                                 		// 0x0460 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bBuyCanceled : 1;                                 		// 0x046C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsGiftDialog : 1;                                 		// 0x046C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsFocusCodeNameEdit : 1;                          		// 0x046C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FSItemLIst                                  BuyItem;                                          		// 0x0470 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CouponSalePrecentText;                            		// 0x04D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CouponRemainDateText;                             		// 0x04E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NotUseCouponText;                                 		// 0x04EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiftMessageBoxDefaultText;                        		// 0x04F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiftItemMessage[ 0x3 ];                           		// 0x0504 (0x0024) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InvalidInputCodeName;                             		// 0x0528 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoSearchCodeName;                                 		// 0x0534 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BtnGiftText;                                      		// 0x0540 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnText;                                       		// 0x054C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiftConfirmMessage[ 0x4 ];                        		// 0x0558 (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiftItemAllUnit;                                  		// 0x0588 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ApplyCouponIndex;                                 		// 0x0594 (0x0004) [0x0000000000000000]              
	struct FString                                     InputedCodename;                                  		// 0x0598 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     GiftReceiverCodeName;                             		// 0x05A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GiftReceiverUSN;                                  		// 0x05B0 (0x0004) [0x0000000000000000]              
	int                                                SelectTabNumber;                                  		// 0x05B4 (0x0004) [0x0000000000000000]              
	TArray< struct FsBuddy >                           DisplayBuddys;                                    		// 0x05B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                GfitMessageLimitByte;                             		// 0x05C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           strGiftTab;                                       		// 0x05C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPaymentTypeSelectedDelegate__Delegate;        		// 0x05D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemDurationSelectedDelegate__Delegate;       		// 0x05E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCouponTypeSelectedDelegate__Delegate;         		// 0x05EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67597 ];

		return pClassPointer;
	};

	void GetSelectedItemPaymentInfo ( int* ItemId, struct FString* PaymentString, int* ItemPrice );
	void SetBuyButtonLabel ( struct FString LabelText );
	void SetButtonDisable ( unsigned long IsDisable );
	void PKT_IsExistNick_REQ_OK ( class UPacket* recvPakcet );
	void ASPlayGiftCloseAnimation ( );
	void ASPlayGiftOpenAnimation ( );
	void ASSetGiftInfoText ( struct FString UnitImg, struct FString context );
	void ASSetGiftMsgBoxInit ( struct FString DefaultText, int TextLimitCount );
	void ASSetGiftReceiverInfo ( struct FString CodeName );
	void InValidGiftReceiverSelect ( );
	void ValidGiftReceiverSelect ( );
	void OnClickFriendList ( struct FEventData ev );
	void OnClickChangeTab ( struct FEventData ev );
	void ProcessSearchCodeName ( );
	void OnClickSearchCodeName ( struct FEventData ev );
	void OnFocusOutCodeNameEditBox ( struct FEventData ev );
	void OnFocusInCodeNameEditBox ( struct FEventData ev );
	void OnCodeNameEditBoxChanged ( struct FEventData ev );
	void SetFriendList ( int ListGroup );
	class UGFxObject* SetBuddyToList ( struct FsBuddy Buddy );
	void SetGiftSubTab ( );
	void ASSetGifDialog ( );
	void SetGiftDialog ( unsigned long IsGiftDialogOpen );
	int GetCouponApplyPrice ( int ItemId, int DiscountPercent, struct FString PaymentType );
	void SetOnCouponTypeSelectedDelegate ( struct FScriptDelegate InDelegate );
	void OnCouponTypeSelectedDelegate ( int Index );
	void OnCouponTypeSelected ( int Index );
	struct FString GetCouponRemainDate ( struct FString CouponExpireDate );
	struct FString GetCouponSalePercentText ( int DiscountPercent );
	void SetCouponData ( );
	void ASDisableCouponListBox ( );
	void OnCashReceived ( );
	void ASSetDiscountPrice ( struct FString strOrigPrice, struct FString strSaleRatio, struct FString IsPCRoom );
	void ASSetItemPriceText ( struct FString strPriceMsg, struct FString strPrice, struct FString strHaveMsg, struct FString strHave, struct FString strRemainMsg, struct FString strRemain );
	void ASSetPaymentPriceList ( int AllCount, class UGFxObject* objArray, int SelectedIndex );
	void ASSetPaymentTypeList ( class UGFxObject* objArray );
	void ASSetAvaliableRank ( struct FString Attr );
	void ASSetItemTitle ( struct FString ItemType, struct FString ImgName, struct FString ItemName );
	void ASSetShowAddVipBonus ( struct FString strAddVipBonus );
	void ASSetShowAddSP ( struct FString strAddSP );
	void ASSetSelectedTPExchangeValue ( struct FString strCur, struct FString strAdd, struct FString strTotal );
	void ASSetItemDurationInfo ( struct FString strCur, struct FString strAdd, struct FString strTotal );
	int GetBuyItemPriceByPaymentType ( struct FSItemLIst ABuyItem, int Index );
	void ASSetTPEventValue ( struct FString StrValue );
	void SetSelectedTPExchangeValue ( int ItemId, int Index );
	void SetSelectedItemDuration ( int ItemId, int Index );
	int GetCurrentMoneyByPaymentType ( struct FString strPaymentType );
	void SetItemPriceText ( int InItemPrice, int InCurrentMoney, int InRestMoney );
	int GetVipBonusByPaymentTypeArray ( int ItemId, int Price );
	void SetSelectedItemInfo ( struct FSItemLIst InBuyItem );
	bool IsPeriodItemBuy ( int ItemId );
	void SetPaymentTypeList ( );
	void SetItemPriceInfo ( int ItemId );
	bool RealBuyOneProcess ( );
	void OnOkGiftConfirm ( );
	bool BuyOneProcess ( );
	bool IsNetmarbleCouponUsable ( int ItemId );
	void OnItemDurationSelected ( int NewIndex );
	void OnPaymentTypeSelected ( int Index );
	void SetOnItemDurationSelectedDelegate ( struct FScriptDelegate InDelegate );
	void OnItemDurationSelectedDelegate ( int Index );
	void SetOnPaymentTypeSelectedDelegate ( struct FScriptDelegate InDelegate );
	void OnPaymentTypeSelectedDelegate ( int Index );
	void SetBuyNotice ( );
	void ASShowGachaGauge ( unsigned long bShow );
	void SetGachaBonusGaugeInfo ( int ItemId );
	void ASSetDialogType ( int ItemId );
	void SetSelectedItemID ( int ItemId, struct FString SelectedPaymnetType );
	void OnViewClosed ( int NextIndex );
	int CancelButtonPress ( );
	void OnViewActivated ( int PrevIndex );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_BuyOne::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_GashaList
// 0x0160 (0x01EC - 0x008C)
class USFUIDataStore_GashaList : public USFUIDataStoreBase
{
public:
	int                                                SelectGashaIndex;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                SelectGashaID;                                    		// 0x0090 (0x0004) [0x0000000000000000]              
	int                                                MaxGashaCount;                                    		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                RemaintGashaCount;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                RewardCapsuleListCount;                           		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                RewardLogListCount;                               		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                GashaRewardListCount;                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                AllInoneGashaGroupCount;                          		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                RewardPercentMAX;                                 		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                RecvedPVECapsuleCount;                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	struct FString                                     PVETYPE;                                          		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRewardInfo >                       RecvRewardListArray;                              		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FToolTipRewardInfo >                ToolTipRewardArray;                               		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRewardLogInfo >                    RewardLogArray;                                   		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRewardLogInfo >                    OldRewardLogArray;                                		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FGashaListInfo >                    ViewGashaListArray;                               		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRewardCapsuleInfo >                RewardCapsuleArray;                               		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRewardCapsuleInfo >                AllInOneGashaGroupArray;                          		// 0x0108 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRewardCapsuleCountInfo >           RewardCapsuleCountArray;                          		// 0x0114 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fGahsaInfoSendTime;                               		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DefaultProbability;                               		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bShowProbability : 1;                             		// 0x0128 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsSortTagType : 1;                               		// 0x0128 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShowGachaTag : 1;                                		// 0x0128 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bSPGashaNeedRank : 1;                             		// 0x0128 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      IsGashaIshowOption : 1;                           		// 0x0128 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      IsGashaInvenActivated : 1;                        		// 0x0128 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bChangeGachaRollList : 1;                         		// 0x0128 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bGachaListSendPacket : 1;                         		// 0x0128 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSetGachaRollList : 1;                            		// 0x0128 (0x0004) [0x0000000000000000] [0x00000100] 
	int                                                AllInOneListRollingTime;                          		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                SPGashaUsedRank;                                  		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AllInOneItemNameCount;                            		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FsGashaModeGraphInfo >              GashaModeGraphArray;                              		// 0x0138 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsGashaModeGraphMessage >           GashaModeGraphMsgArray;                           		// 0x0144 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                AllInoneToolTipLineViewItemNameCount;             		// 0x0150 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     strTodayGashaInfoMessage;                         		// 0x0154 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strSPGashaNeedRankMsg;                            		// 0x0160 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeleteAllInOneItemNameText;                       		// 0x016C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CouponNameError;                                  		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsAllInOneTooltipInfo >             AllInOneItemGashaToolTipList;                     		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSPBoomGahsaInfo >                  SPBoomGashaList;                                  		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsGachaRollUser >                   GachaRollUserList;                                		// 0x019C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      GashaRareWeaponItems;                             		// 0x01A8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                GachaItemCount;                                   		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                GashaRewardUserCount;                             		// 0x01B8 (0x0004) [0x0000000000000000]              
	struct FString                                     LastBuyGachaSupplyCode;                           		// 0x01BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __GahsaListSortByDisplayRankDelegate__Delegate;   		// 0x01C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ViewGashaListSortByTagTypeDelegate__Delegate;   		// 0x01D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ViewGashaListSortByDisplayRankDelegate__Delegate;		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67682 ];

		return pClassPointer;
	};

	bool IsFeverOrgelItem ( );
	void CheckLastBuyGachaBonusGauge ( );
	struct FString GetLastBuyGachaSupplyCode ( );
	void SetLastBuyGachaSupplyCode ( struct FString SupplyCode );
	void UpdateGachaBonusGauge ( class UPacket* recvPacket );
	void PKT_GetGachaBonusGaugeList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGachaBonusGaugeList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGachaBonusGauge_REQ_OK ( class UPacket* recvPacket );
	void AddGachaItemCount ( );
	void PKT_GetGashaVIPList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGashaVIPList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void ChangeGachaRollList ( int GetItemID, struct FString CodeName );
	struct FString GetSPGashaNeedRankMsg ( );
	bool IsAllInOneItem ( );
	void GetToolTipItemList ( struct FString SupplyCode, TArray< struct FRewardInfo >* outRewardArray );
	void GetGashaRareList ( TArray< struct FRewardInfo >* outRareArray );
	void GetRewardItemInfobyRewardType ( struct FString RewardType, int reward, struct FString* strImageType, struct FString* strItemImgName, struct FString* strItemName );
	bool IsValidMaxBonusGauge ( int MaxBonusGauge );
	bool GetGashaBonusGauge ( int Index, int* OutMax, int* OutCur );
	bool IsGashaBonusGaugebyIndex ( int Index );
	int GetCurGachaBonusGauge ( struct FString SupplyCode );
	struct FString GetItemSellTypeBySupplyCode ( struct FString SupplyCode );
	int GetMaxGachaBonusGauge ( struct FString SupplyCode );
	struct FString GetAllInOneGashaGroupIndexBySupplyCode ( struct FString SupplyCode );
	struct FString GetRewardGashaCurProbability ( int Index );
	int GetRewardGashaMaxProbability ( int Index );
	bool CheckAllInOneItem ( int Index );
	struct FSPBoomGahsaInfo GetSpBoomGashaInfo ( int reward, struct FString ItemType );
	struct FString GetViewGashaListMoneyIcon ( int Index );
	bool GetGashaModeGraphMsg ( int ViewGashaLIstIndex, struct FString* outTitle, struct FString* outContent );
	struct FString GetViewGashaOrgelSceneType ( int Index );
	struct FString GetViewGashaSelectIconType ( int Index );
	struct FString GetViewGashaSelectSceneType ( int Index );
	int GashaModeGraphType ( int Index );
	unsigned char GetGashaModeGraphType ( int Index );
	bool IsFirstBuySaleGashaItem ( int Index );
	struct FString GetViewGashaListItemDiscountRatio ( int Index );
	struct FString GetViewGashaListItemImg ( int Index );
	struct FString GetViewGashaListItemName ( int Index );
	struct FString GetViewGashaListEvent ( int Index );
	bool IsSPBoomGasha ( struct FString RewardType );
	int GetViewGashaListImageType ( int Index );
	int GetViewGashaListItemID ( int Index );
	struct FSFItemData GetViewGashaListItemData ( int Index );
	int GetSelectItemID ( );
	struct FString GetSelectItemName ( );
	struct FString GetSelectItemImg ( );
	struct FString GetSelectSupplyCode ( );
	struct FString GetRewardCapsuleSupplyCodebyCapsuleID ( int CapsuleID );
	int GetCapsuleId ( );
	struct FString GetAllInOneItemName ( int Index );
	void GetAllInOneGashaGroup ( int Index, TArray< struct FString >* SupplyCodeList );
	int GetCapsuleCount ( int Index );
	int GetViewGashaListArrayRewardbySupplyCode ( struct FString SupplyCode );
	int GetGachaBonusGaugeRewardItem ( struct FString SupplyCode );
	int GetAllCapsulCount ( );
	void SetRewardLogIndex ( );
	int ViewGashaListSortByDisplayRankDelegate ( struct FGashaListInfo A, struct FGashaListInfo B );
	int ViewGashaListSortByTagTypeDelegate ( struct FGashaListInfo A, struct FGashaListInfo B );
	int GahsaListSortByDisplayRankDelegate ( struct FRewardInfo A, struct FRewardInfo B );
	void SetSortGahsaList ( TArray< struct FRewardInfo >* OutItemArray );
	TArray< struct FString > GetAllInOneGashaToolTipList ( int ViewGashaLIstIndex );
	struct FString GetAllinOneGashaToolTipBySupplyCode ( struct FString SupplyCode );
	int GetViewGashalistArrayIndexBySupplyCode ( struct FString SupplyCode );
	void SetGashaRareWeaponItems ( TArray< struct FRewardInfo > RewardListArray );
	void SetViewGashaListPveType ( );
	void InitToolTipRewardItemList ( );
	void UpdateViewGashalistDiscountRatio ( );
	void ViewGashalistAddRewardCapsule ( );
	void InitGashaList ( );
	int GetGashaCapsuleCountbySupplyCode ( struct FString SupplyCode );
	int GetRewardCapsuleCountbySupplyCode ( struct FString SupplyCode );
	void UpdateRewardCapsuleCount ( );
	int GetRewardLogArrayIndex ( struct FString SupplyCode, int* TagType );
	bool CheckRecivedRewardLogList ( );
	void ServerToSendGiveCapsuleItem ( );
	void PKT_GetAllInOneGashaGroup_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGashaItemList_REQ_TRANSACTION ( class UPacket* recvPacket );
	int GetGashaItemListPercentByItemID ( struct FString SupplyCode, int ItemId );
	void PKT_GetAllInOneGashaGroup_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGashaItemList_REQ_OK ( class UPacket* recvPacket );
	bool CheckRecivedAllInOneGashaGroupList ( );
	bool CheckRecivedGashaRewardList ( );
	void PKT_UseGashacouponNotifyMessage_Auto ( class UPacket* recvPacket );
	void PKT_GiveCapsuleItem_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGashaLogList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void CheckGashaLogListLast ( );
	void PKT_GetGashaLogList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetSupplyBox_REQ_OK ( class UPacket* recvPacket );
	bool CheckRecivedRewardCapsuleList ( );
	void RemoveRewardCapsuleArray ( int CapsuleID );
	void PKT_GetUserCapsuleInfoList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetUserCapsuleInfoList_REQ_OK ( class UPacket* recvPacket );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_GashaList::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_GashaBase
// 0x0020 (0x0374 - 0x0354)
class USFGFxLobby_GashaBase : public USFGFxLobbyScreen
{
public:
	unsigned long                                      bUseGachaBonusGauge : 1;                          		// 0x0354 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	struct FString                                     GachaBonusGaugeBtnText;                           		// 0x0358 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GachaBonusGaugeCountText;                         		// 0x0364 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              btnBonusReward;                                   		// 0x0370 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67686 ];

		return pClassPointer;
	};

	void PlayGashaSound ( struct FName EventName, unsigned long bIsOverlapSound );
	void ASShowGachaBonusGaugeButton ( unsigned long bShow );
	void SetGachaBonusGaugeReward ( );
	bool ASShowGashaBonusGauge ( );
	void OnClickBonusRewardBtn ( struct FEventData ev );
	void OnUpdateGashaBonusGauge ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_GashaBase::pClassPointer = NULL;

// Class SFGame.SFItem_Func_Enchant
// 0x0008 (0x017C - 0x0174)
class USFItem_Func_Enchant : public USFItem_Functional_UI
{
public:
	int                                                PartsType;                                        		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                PartsIndex;                                       		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67750 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_Enchant::pClassPointer = NULL;

// Class SFGame.SFItem_Func_GashaCoupon
// 0x0008 (0x017C - 0x0174)
class USFItem_Func_GashaCoupon : public USFItem_Functional_UI
{
public:
	int                                                nCouponCount;                                     		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                nBonusCouponCount;                                		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67751 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_GashaCoupon::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_CashCharge
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_CashCharge : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67954 ];

		return pClassPointer;
	};

};

UClass* USFGFxDialog_CashCharge::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_RewardItem
// 0x0031 (0x0279 - 0x0248)
class USFGFxDialog_RewardItem : public USFGFxDialog
{
public:
	TArray< struct FString >                           RewardItemListMessage;                            		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSRecvReward >                      RewardItemArray;                                  		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSRecvReward >                      DisplayRewardItemArray;                           		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PromotionIDArray;                                 		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      RewardMessageType;                                		// 0x0278 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 67956 ];

		return pClassPointer;
	};

	void PKT_GetPromotionEventInfo_REQ_OK ( class UPacket* recvPacket );
	void ASSetNoticeMessage ( struct FString strMessage );
	void SetNoticeMessage ( );
	class UGFxObject* datastore_FillData_RewardItemListAt ( int Index );
	void datastore_FillData_RewardItemList ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	void SetDisplayRewardItemArray ( );
	void SetRewardMessageType ( unsigned char RewardMessage );
	void SetPromoEventItemList ( );
	void SetSerialUseItemList ( );
	void SetGiftUseItemList ( );
	void SetPackageItemList ( int InPackageID );
	void SetModeRewardItemList ( );
	void SetGashaBonusItemList ( );
	void SetCouponItemList ( );
	void ClearItemList ( );
	void OnViewClosed ( int NextIndex );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_RewardItem::pClassPointer = NULL;

// Class SFGame.SFItem_Func_StoredMaterial
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_StoredMaterial : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68215 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_StoredMaterial::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ChallengeComplete
// 0x0027 (0x02A0 - 0x0279)
class USFGFxDialog_ChallengeComplete : public USFGFxDialog_RewardItem
{
public:
	struct FName                                       CurChallengeSupplyCode;                           		// 0x027C (0x0008) [0x0000000000000000]              
	int                                                CurChallengeTask;                                 		// 0x0284 (0x0004) [0x0000000000000000]              
	struct FString                                     RewardReceivedMessage;                            		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RewardUnlockMessage;                              		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68637 ];

		return pClassPointer;
	};

	void DebugTestData ( TArray< struct FSRecvReward >* reward_list );
	void ASSetChallengeRewardInfo ( class UGFxObject* List );
	void ASSetCompletedChallengeInfo ( class UGFxObject* Item );
	void challengeDialog_OnOkBtnClick ( );
	void SetChallengeRewardInfo ( );
	void ASSetRewardMessage ( struct FString strMessage );
	void SetChallengeInfo ( TArray< struct FSRecvReward >* reward_list );
	void SetNoticeMessage ( );
	void InitializeChallengeReward ( );
	void SetChallengeItemList ( );
	void OnViewCloseFinished ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_ChallengeComplete::pClassPointer = NULL;

// Class SFGame.SFRewardItemList
// 0x0054 (0x0090 - 0x003C)
class USFRewardItemList : public UObject
{
public:
	TArray< struct FExtraRewardInfo >                  ExtraRewardListArray;                             		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GashaSupplyCode;                                  		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PveGachaSupplyCode;                               		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ExtraCareSupplyCode;                              		// 0x0060 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     HeroSupplyCode;                                   		// 0x006C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SerialSupplyCode;                                 		// 0x0078 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MiniGachaSupplyCode;                              		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68691 ];

		return pClassPointer;
	};

	void GetExtraCareRewardList ( struct FString SupplyCode, TArray< struct FExtraRewardInfo >* outRewardArray );
};

UClass* USFRewardItemList::pClassPointer = NULL;

// Class SFGame.SFItem_Func_WebCoupon
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_WebCoupon : public USFItem_Functional_UI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68707 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_WebCoupon::pClassPointer = NULL;

// Class SFGame.SFItem_Func_Package
// 0x0018 (0x0190 - 0x0178)
class USFItem_Func_Package : public USFItem_Functional_ETC
{
public:
	TArray< int >                                      ProvideWeaponIDs;                                 		// 0x0178 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PackagePreviewMessage;                            		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68715 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_Package::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ChangeClassMark
// 0x0014 (0x02CC - 0x02B8)
class USFGFxDialog_ChangeClassMark : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              DisguiseRankList;                                 		// 0x02B8 (0x0004) [0x0000000000000000]              
	struct FString                                     SelectDisguiseRankIndex;                          		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      IsChangeDisguiseRank : 1;                         		// 0x02C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68762 ];

		return pClassPointer;
	};

	void SetItemChangeDialog ( unsigned long IsChangeDialog );
	void RequsetSetUseItem ( );
	void OnClickDisguiseRankListPress ( struct FEventData ev );
	void SetUserIdentity ( int RankIndex );
	void SetMyRank ( );
	void SetCashItemUSE ( );
	void SetSelectedDisguiseRank ( );
	void ASSetUseDialogInfo ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_ChangeClassMark::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ChangeTP
// 0x0048 (0x0290 - 0x0248)
class USFGFxDialog_ChangeTP : public USFGFxDialog
{
public:
	TArray< int >                                      ChangeTPItemArray;                                		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nSelectedIndex;                                   		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FString                                     strChangeTPNoticeMessage;                         		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ExchangeConfirmMessage;                           		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FExchangeInfo >                     ExchangeList;                                     		// 0x0270 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUseExchangeList : 1;                             		// 0x027C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                SelectedItemID;                                   		// 0x0280 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnChangeTPSelectedDelegate__Delegate;           		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68820 ];

		return pClassPointer;
	};

	void PKT_SteamBillingInitializeTxn_REQ_OK ( class UPacket* receivedPacket );
	void ExchangeAP ( );
	int OKButtonPress ( );
	class UGFxObject* datastore_FillData_ChangeTPItemListAt ( int Index );
	class UGFxObject* datastore_FillData_ExchangeItemListAt ( int Index );
	void datastore_FillData_ChangeTPItemList ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	void OnChangeTPSelected ( int nIndex );
	void SetOnChangeTPSelectedDelegate ( struct FScriptDelegate InDelegate );
	void OnChangeTPSelectedDelegate ( int Index );
	void ASSetTPChangeNotice ( struct FString strNotice );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_ChangeTP::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ChoicePackage
// 0x0028 (0x02E0 - 0x02B8)
class USFGFxDialog_ChoicePackage : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              ChoiceItemList[ 0x2 ];                            		// 0x02B8 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultTopText;                                   		// 0x02C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                DisplayCount;                                     		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                ChoiceItemID;                                     		// 0x02D0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      SubItemArray;                                     		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68881 ];

		return pClassPointer;
	};

	class UGFxObject* GetChoiceItemInfo ( int ItemId );
	void SetChoiceItemlist ( );
	void ASDrawChoiceAnimation ( );
	void ASSetTopText ( struct FString TopText );
	void OnClickItemList1 ( struct FEventData ev );
	void OnClickItemList0 ( struct FEventData ev );
	void RequsetOpenChoicePackageItem ( );
	int OKButtonPress ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void InitValue ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_ChoicePackage::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChoicePackage
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_ChoicePackage : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68900 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChoicePackage::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Clan
// 0x0070 (0x02B8 - 0x0248)
class USFGFxDialog_Clan : public USFGFxDialog
{
public:
	class UGFxClikWidget*                              ModeList;                                         		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MapList;                                          		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AreaBtn;                                          		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanMainAreaBtn;                                  		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanSubAreaBtn;                                   		// 0x0258 (0x0004) [0x0000000000000000]              
	TArray< struct FSClanModeMap >                     ModeData;                                         		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSClanModeMap >                     MapData;                                          		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedModeIndex;                                		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                SelectedMapIndex;                                 		// 0x0278 (0x0004) [0x0000000000000000]              
	TArray< struct USFGFxDialog_Clan_FSDropDownMenu >  ClanDropDownMenuWidget;                           		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ClanTagStart;                                     		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanTagEnd;                                       		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           OptionDataValue;                                  		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           OptionDataTag;                                    		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68923 ];

		return pClassPointer;
	};

	struct FString GetSelectedAreaCode ( );
	int GetClanMapSelectedIndexByID ( struct FString Id );
	int GetClanModeSelectedIndexByID ( struct FString Id );
	struct FString GetClanMapIDBySelectedIndex ( int SelectedIndex );
	struct FString GetClanModeIDBySelectedIndex ( int SelectedIndex );
	void OnClickAreaSelect ( struct FString MainAreaCode, struct FString SubAreaCode );
	void OnLClickAreaCloseBtn ( );
	void InitializeSubAreaCode ( struct FString MainAreaCode );
	void OnChangeSubArea ( struct FEventData ev );
	void OnChangeMainArea ( struct FEventData ev );
	void OnChangeArea ( struct FEventData ev );
	void SetClanAreaSelectDialogSearch ( class USFGFxDialog_BaseAreaSelect* ClanAreaDlg );
	void OnLClickAreaBtn ( struct FEventData ev );
	void ASSetClanTagBox ( TArray< struct FString > TagText );
	void SetClanTagBox ( );
	void InitDialogInfo ( );
	void ResetModeMapSelectedIndex ( );
	void ResetSelectedIndex ( );
	void SetDropDownMenu ( );
	void SetDropDownMenuData ( TArray< struct FSDetailOption > ClanSearch_DetailOption );
	void OnClickMapListPress ( struct FEventData ev );
	void ASSelectedMapData ( struct FString MapName, struct FString MapImg );
	void SetSelectedMapData ( int SelectedIndex );
	void ASSetAllMapData ( );
	void ASSelectedModeData ( struct FString ModeName, struct FString ModeImg );
	void SetSelectedModeData ( int ModeIndex );
	void OnClickModeListPress ( struct FEventData ev );
	void ASSetAllModeData ( );
	void SetAllModeData ( );
	void SetDropDownMenuDefaultIndex ( );
	void SetDropDownWidget ( class UGFxClikWidget* BaseWidget, struct FString DefaultName );
	void SetClanWidgetData ( TArray< struct USFGFxDialog_Clan_FSDropDownMenu > DropDownMenuArray );
	void ResetAreaName ( );
	void InitializeAreaList ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_Clan::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ClanBase
// 0x0004 (0x0090 - 0x008C)
class USFUIDataStore_ClanBase : public USFUIDataStoreBase
{
public:
	unsigned long                                      DisabledWebPageOpenDialog : 1;                    		// 0x008C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68957 ];

		return pClassPointer;
	};

	void SetClanItem ( struct FSClanInventoryList ClanItemInfo, struct FSClanInfo* ClanInfo );
	void RecvClanInventoryInfoList ( TArray< struct FString >* Results, struct FSClanInfo* ClanInfo );
	bool RequestClanInventoryInfo ( struct FSClanInfo* ClanInfo );
	void NotyfyChangedClanMemberCodeName ( int USN, struct FString CodeName );
};

UClass* USFUIDataStore_ClanBase::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ClanList
// 0x0104 (0x0194 - 0x0090)
class USFUIDataStore_ClanList : public USFUIDataStore_ClanBase
{
public:
	struct FString                                     DefaultAreaDbCode;                                		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FClanAreaInfo >                     MainAreaInfoList;                                 		// 0x009C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FClanAreaInfo >                     SubAreaInfoList;                                  		// 0x00A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CurrentMainAreaListIndex;                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                CurrentSubAreaListIndex;                          		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FString                                     SelectClanListCSN;                                		// 0x00BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                InvitedClanCSN;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     SelectDBCode;                                     		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SearchAreaDBCode;                                 		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ListPage;                                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                nClanListMorePage;                                		// 0x00E8 (0x0004) [0x0000000000000000]              
	unsigned char                                      SelectSortType;                                   		// 0x00EC (0x0001) [0x0000000000000000]              
	int                                                SearchCount;                                      		// 0x00F0 (0x0004) [0x0000000000000000]              
	struct FSClanListInfo                              ClanLists;                                        		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxPageCount;                                     		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                nPrevRequestPage;                                 		// 0x0108 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           ResultClanList;                                   		// 0x010C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSDetailOption >                    ClanAreaOption;                                   		// 0x0118 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSDetailOption >                    ClanDetailOption;                                 		// 0x0124 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSDetailOption >                    ClanSearchDetailOption;                           		// 0x0130 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSClanModeMap >                     ClanModeArray;                                    		// 0x013C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSClanModeMap >                     ClanMapArray;                                     		// 0x0148 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ClanDatabaseDataNumber;                           		// 0x0154 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     SearchAreaCode;                                   		// 0x0158 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanListSelectAreaCode;                           		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSClanRecommend >                   ClanRecommendList;                                		// 0x0170 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectClanRecommendIndex;                         		// 0x017C (0x0004) [0x0000000000000000]              
	unsigned long                                      bClanRecommend : 1;                               		// 0x0180 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsListBtnPush : 1;                               		// 0x0180 (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                FiringRangeMaxCount;                              		// 0x0184 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FFiringLIstTabInfo >                FiringRangeTabList;                               		// 0x0188 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 68956 ];

		return pClassPointer;
	};

	bool GetIsListBtnPush ( );
	void SetIsListBtnPush ( unsigned long bPushed );
	void UpdateFiringRangeListData ( int WeaponType );
	void ReRankFiringRangeList ( int TabIndex, int RankIndex, int Score, unsigned long IsInsert );
	int GetFiringRangeTabListScoreRankIndexbyScore ( int WeaponType, int Score, int* outNewRank );
	int GetFiringRangeTabIndexByWeaponType ( int WeaponType );
	void UpdateFiringRangeScoreListInital ( int WeaponType, struct FString Initial );
	bool IsRankingMyScoreByWeaponType ( int WeaponType );
	void RecvFiringRangeScoreList ( int WeaponType, unsigned char SortType );
	int GetFiringRangeScoreListIndex ( int WeaponType, unsigned char SortType );
	bool GetFiringRangeScoreListArray ( int WeaponType, unsigned char SortType, TArray< struct FSFiringRangeListInfo >* OutArray );
	void RecvClanRecommendList ( unsigned long bIsMoreList );
	struct FString GetMapNameByClanMapID ( struct FString Id );
	struct FString GetModeNameByClanModeID ( struct FString Id );
	int GetMapIDByClanMapID ( struct FString Id );
	int GetModeIDByClanModeID ( struct FString Id );
	TArray< struct FString > DeCodeClanOptionData ( TArray< struct FString > InputValues );
	struct FString EnCodeClanOptionData ( int TargetData );
	TArray< struct FString > GetClanTagName ( TArray< struct FString > StartTagName, TArray< struct FString > EndTagName );
	int GetClanSearchDetailOptionLength ( );
	int GetDetailOptionCount ( );
	TArray< struct FSDetailOption > GetClanDropDownMenu ( );
	TArray< struct FSClanModeMap > GetClanMapData ( int SelectedIndex );
	TArray< struct FSClanModeMap > GetClanModeData ( );
	void RemoveClanList ( int nCSN );
	void AddClanListData ( struct FSClanInfo ClanInfo, unsigned long IsInsertItem );
	struct FSClanInfo GetClanListInfoByCSN ( struct FString CSN );
	struct FString GetClanNameByCSN ( struct FString CSN );
	void SetReponseResults ( TArray< struct FString > Results );
	void RecvTop60MontlyClanList ( int PageCount, unsigned long bIsMoreList );
	void RecvClanList ( int PageCount, unsigned long bIsMoreList );
	struct FString GetAreaTextByDBCode ( struct FString DB_Code );
	struct FString GetSelectDBCode ( );
	void SetSelectDBCode ( struct FString DBCode );
	void SetSearchAreaDBCode ( struct FString DBCode );
	void SetSelectClanListCSN ( struct FString CSN );
	void SetDefaultClanList ( );
	struct FString GetAreaNameByAreaCode ( struct FString AreaCode );
	struct FString GetCurrentAreaName ( );
	struct FString GetCurrentSubAreaName ( );
	struct FString GetCurrentMainAreaName ( );
	struct FString GetCurSelectedAreaDBCode ( );
	struct FString GetCurrentSubAreaCode ( );
	struct FString GetCurrentMainAreaCode ( );
	int GetCurrentSubAreaListIndexForGFx ( unsigned long bSearchOnly );
	int GetCurrentMainAreaListIndexForGFx ( );
	int GetCurrentSubAreaListIndex ( );
	int GetCurrentMainAreaListIndex ( );
	struct FString GetDefaultAreaCode ( );
	struct FString GetSearchOnlyDBAreaCode ( );
	int GetSelectSubAreaIndexByClanAreaDlgType ( unsigned char ClanAreaDlgType );
	int GetSelectMainAreaIndexByClanAreaDlgType ( unsigned char ClanAreaDlgType );
	struct FString GetAreaCodeByClanAreaDlgType ( unsigned char ClanAreaDlgType );
	void SetAreaCodeByClanAreaDlgType ( unsigned char ClanAreaDlgType, struct FString MainAreaCode, struct FString SubAreaCode );
	void SetCurSelectedArea ( struct FString MainAreaCode, struct FString SubAreaCode );
	void SetCurrentSubArea ( struct FString SubAreaCode );
	void SetCurrentMainArea ( struct FString MainAreaCode );
	int GetSubAreaIndexByCode ( struct FString AreaCode );
	int GetMainAreaIndexByCode ( struct FString AreaCode );
};

UClass* USFUIDataStore_ClanList::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanAreaSelect
// 0x0000 (0x0278 - 0x0278)
class USFGFxDialog_ClanAreaSelect : public USFGFxDialog_BaseAreaSelect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69099 ];

		return pClassPointer;
	};

	void InitializeAreaList ( );
};

UClass* USFGFxDialog_ClanAreaSelect::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanJoin
// 0x0070 (0x02B8 - 0x0248)
class USFGFxDialog_ClanJoin : public USFGFxDialog
{
public:
	class UGFxClikWidget*                              InputBoxs[ 0x4 ];                                 		// 0x0248 (0x0010) [0x0000000000000000]              
	class UGFxObject*                                  InputFields[ 0x4 ];                               		// 0x0258 (0x0010) [0x0000000000000000]              
	unsigned char                                      FocusInputText;                                   		// 0x0268 (0x0001) [0x0000000000000000]              
	unsigned long                                      bIsClanJoinOK : 1;                                		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     CSN;                                              		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastInputText;                                    		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanJoinDlg_Text;                                 		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanJoinQuestion;                                 		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSInputTextFilter >                 ClanJoinInputTextLimits;                          		// 0x02A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SelectClanRecommendNick;                          		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69109 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	void OnTextChanged ( struct FEventData ev );
	void SetFocusInputText ( unsigned char Type );
	void OnFocusInInputText3 ( struct FEventData ev );
	void OnFocusInInputText2 ( struct FEventData ev );
	void OnFocusInInputText1 ( struct FEventData ev );
	void OnFocusInInputText0 ( struct FEventData ev );
	void RequestJoinClan ( struct FString strCSN, struct FString strUSN, struct FString strCodeName );
	void ASSetClanInitInfoText ( struct FString ClanName, struct FString Question0, struct FString Question1, struct FString Question2, struct FString Question3, struct FString Info, struct FString ClanRecommendNick );
	int OKButtonPress ( );
	int CancelButtonPress ( );
	void ClearInputBoxs ( );
	void SetTextInput ( unsigned char Type, class UGFxObject* Widget );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void SetupClanInfo ( struct FString strCSN, struct FString ClanName, struct FString ClanRecommendNick, struct FString Question0, struct FString Question1, struct FString Question2, struct FString Question3 );
	void OnViewActivated ( int PrevIndex );
	void OnViewClosed ( int NextIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxDialog_ClanJoin::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ClanHome
// 0x0330 (0x03C0 - 0x0090)
class USFUIDataStore_ClanHome : public USFUIDataStore_ClanBase
{
public:
	struct FClanHomeData                               ViewHomeData;                                     		// 0x0090 (0x016C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FClanHomeData                               MyHomeData;                                       		// 0x01FC (0x016C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAscending_Check : 1;                             		// 0x0368 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAscending_Level : 1;                             		// 0x0368 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAscending_CodeName : 1;                          		// 0x0368 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAscending_RegDate : 1;                           		// 0x0368 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAscending_GameCount : 1;                         		// 0x0368 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bAscending_UserImage : 1;                         		// 0x0368 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bAscending_Rank : 1;                              		// 0x0368 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      UseClanRecordInfoChannelType : 1;                 		// 0x0368 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	struct FString                                     LocalizedWinAverageText;                          		// 0x036C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedNotAverageText;                          		// 0x0378 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedAllGameText;                             		// 0x0384 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedWinGameText;                             		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedLoseGameText;                            		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedClanRecordRoundText;                     		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Recommender;                                      		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69139 ];

		return pClassPointer;
	};

	void GetClanHomeOptionDetailValue ( TArray< struct FString >* OptionDataValue );
	void GetClanHomeOptionData ( TArray< struct FString >* OptionDataTag, TArray< struct FString >* OptionDataValue );
	void RecvClanRankLast6Months ( TArray< struct FString > ResponseResults );
	struct FString GetClanMsgForSendClanMessageData ( struct FString strUSNs, struct FString strCodeNames, struct FString strClanNames );
	int RequestClanRecordList ( struct FString strCSN );
	int RequestMyClanMemberList ( );
	int RequestClanMemberList ( struct FString strCSN );
	bool RequestClanInfo ( struct FString strCSN, unsigned long bSetClanInfo, struct FSClanInfo* ClanInfo );
	struct FString GetClanRecordRoundString ( int Round_Win, int Rounds );
	struct FString GetClanScoreString ( );
	struct FString GetClanWinAverage ( );
	bool IsPossibilityMessageDelete ( int Index, int USN );
	struct FSMessageInfo GetMessageInfo ( int Index );
	void SetClanHomeOptionData ( TArray< struct FString > NewOptionDataValue );
	void ChangeClanInfo ( struct FString WebURL, struct FString Description, struct FString Notice, struct FString ModeNo, struct FString MapNo, TArray< struct FString > NewOptionDataValue );
	void RecvClanRecordInfoList ( TArray< struct FString >* Results );
	struct FSClanInfo RecvClanInfo ( TArray< struct FString >* Results );
	bool InOrder ( unsigned char SortType, struct FSClanMemberInfo Mebmer1, struct FSClanMemberInfo Member2 );
	void InitMemberArrayCheck ( );
	void ToggleClanMemberCheck ( int nIndex );
	void SetClanMemeberListSort ( unsigned char SortType );
	int GetClanManagerCount ( );
	int GetClanMemberCount ( );
	int GetClanWaitPeopleCount ( );
	int GetClanMemberLevelCount ( int nLevel );
	void RemoveClanMemberInfo ( int USN );
	bool RemoveMemberInfo ( int USN, struct FClanHomeData* HomeData );
	bool ChangeMemberCodeName ( int USN, struct FString strCodeName, struct FClanHomeData* HomeData );
	void ChangeClanMemberInfo ( int USN, struct FsPersonalAddInfo NewPersonalAddInfo );
	void ChangeClanMemberCodeName ( int USN, struct FString strCodeName );
	void ChangeCodeName ( int USN, struct FString strCodeName );
	void ChangeClanMemberLevel ( int USN, int Level );
	bool ChangeMemberLevel ( int USN, int Level, struct FClanHomeData* HomeData );
	void ChangeMessageBoardCodeName ( int USN, struct FString strCodeName );
	void ChangeClanInfoClanMark ( struct FString strClanMark, struct FClanHomeData* HomeData );
	void ChangeClanMark ( struct FString strClanMark );
	void ChangeClanInfoClanName ( struct FString strClanName, struct FClanHomeData* HomeData );
	void ChangeClanName ( struct FString strClanName );
	struct FSClanMemberInfo GetClanMemberInfo ( int USN );
	struct FString GetClanMemberName ( int USN );
	int GetClanMasterUSN ( );
	int GetClanMasterIndex ( );
	bool IsMyMemberClanCheck ( int USN );
	int GetMyMemberIndex ( int USN );
	int GetClanMemberIndex ( int USN );
	void AddRecvClanMemberInfo ( TArray< struct FString >* Results, int* I, struct FClanHomeData* HomeData );
	void RecvClanMemberInfoList ( TArray< struct FString >* Results, struct FClanHomeData* HomeData );
	void RecvMessageBoardList ( TArray< struct FString >* Results );
	void RemoveClanMemberArray ( );
	void ResetSortRule ( );
};

UClass* USFUIDataStore_ClanHome::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Clan
// 0x0014 (0x0368 - 0x0354)
class USFGFxLobby_Clan : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              SubTabBtnMC;                                      		// 0x0354 (0x0004) [0x0000000000000000]              
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x0358 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUITabInitialized : 1;                            		// 0x0364 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69171 ];

		return pClassPointer;
	};

	void OnChangeSubTab ( unsigned long bForceSelect );
	void OnChangeMainTab ( );
	void UpdateClanHomeMainTab ( );
	void SetClanHomeInfo ( unsigned long bNullData );
	void OnClanMarkChanged ( );
	void OnClanNameChanged ( );
	void OnCodenameChanged ( );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void UpdateSearchedClanList ( );
	void ASSetClanHomeInfo ( TArray< struct FASValue > args );
	void ASSetSearchTabText ( struct FString SerchText );
	void ASSetClanListTabVisible ( unsigned long bIsTabVisible );
	void ASSetShowWindowType ( int MainTabIndex, int SubTabIndex );
	void ASSetDisabledMainTab ( int Index );
	void ASSetDisabledSubTab ( int Index );
	void ASSetCurrentMainTab ( int SelectedIndex );
	void ASSetCurrentSubTab ( int SelectedIndex );
	void ChangeSubTab ( int TabIndexNew, unsigned long bForceSelect );
	void ASCreateSubTab ( class UGFxObject* SubTabs );
	int ProcessShortcutKeys ( struct FString KeyName );
	void InitializeSubTab ( unsigned char eIdx, class UGFxObject* Widget );
	void InitializedUITab ( );
	void InitializeMainTab ( );
	int ChangeMainTab ( int InTabIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivatedDelayed ( );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_Clan::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanMake
// 0x00D8 (0x0390 - 0x02B8)
class USFGFxDialog_ClanMake : public USFGFxDialog_Clan
{
public:
	struct FSClanMakeInput                             ClanMakeInput[ 0x3 ];                             		// 0x02B8 (0x0078) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectTextInputType;                              		// 0x0330 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanMakeWndWidget;                                		// 0x0334 (0x0004) [0x0000000000000000]              
	TArray< struct FSInputTextFilter >                 InputTextLimits;                                  		// 0x0338 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSClanTextInputStateMsg >           InputTextStateMsgs;                               		// 0x0344 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMakeChkNotice;                                		// 0x0350 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           DefaultInputFieldText;                            		// 0x035C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanInputAttachment;                              		// 0x0368 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMakeNoticeMsg;                                		// 0x0374 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMakeAlert;                                    		// 0x0380 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bUpdateClanDialog : 1;                            		// 0x038C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69207 ];

		return pClassPointer;
	};

	void ClanMakeFail ( int ErrorCode );
	struct FString GetSelectedAreaCode ( );
	void PKT_UpdateClan_OK ( class UPacket* recvPacket );
	void RequestUpdateClanInfo ( struct FString strWebURL, struct FString strDescription, struct FString strNotice, struct FString ModeNo, struct FString MapNo );
	int RequestCreateClan ( struct FString strClanName, struct FString strWebURL, struct FString strUSN, struct FString strCodeName, struct FString strIntroMsg, struct FString strNotice, struct FString strUserInfo, struct FString strRank, struct FString ModeNo, struct FString MapNo, struct FString* MakeClanCSN );
	int OKButtonPress ( );
	int RequestCheckClanDuplication ( int Index );
	struct FSClanTextInputStateMsg GetInputTextStateMsgs ( int Index );
	void SetInputTextAniType ( int Index );
	void SetSelectTextInputType ( int Index, unsigned long bIsVIewText );
	void UpdateTextInputByteVisible ( int Index );
	void UpdateClanMakeOkBtn ( );
	void ASSetMessageChoiceView ( int InputType, int AniType, struct FString msg, unsigned long IsVisible );
	void InputWaitTimerRanout ( );
	void IMETextInputUpdated ( );
	struct FSInputTextFilter GetTextLimit ( int Index );
	void UpdateLastestFiltered ( );
	void CheckClanName ( );
	void clanmake_dropdown_values ( struct FString TargetName, int SelectIndex );
	int GetClanMakeInputIndex ( struct FString WidgetName );
	void clanmake_textinput_chg ( struct FString TargetName, struct FString ChangeTextValue );
	void clanmake_textinput_focusout ( struct FString TargetName );
	void clanmake_textinput_focusin ( struct FString TargetName );
	void ResetModeMapSelectedIndex ( );
	void ResetSelectedIndex ( );
	void SetDefaultText ( int SelectIndex );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ASSetClanMakeAlert ( struct FString AlertMsg, struct FString CashIconType );
	void ASSetTxtChkContents ( struct FString Contents );
	struct FString GetClanMakeAlertMessage ( );
	void InitDialogInfo ( );
	void SetDropDownMenuDefaultIndex ( );
	void SetAreaDropDownMenuDefaultIndex ( );
	void InitializeAreaList ( );
	void SetDropDownMenu ( );
	void SetInputInfos ( int Index, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void SetUpdateClanDialog ( unsigned long bSet );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_ClanMake::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanMakeLimit
// 0x0018 (0x0260 - 0x0248)
class USFGFxDialog_ClanMakeLimit : public USFGFxDialog
{
public:
	struct FString                                     PopupTitle;                                       		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RankLimitMsg;                                     		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69410 ];

		return pClassPointer;
	};

	void ASSetDialogInfo ( struct FString RankImg, struct FString RankTxt, struct FString MoneyIcon, struct FString MoneyTxt );
	void SetDialogInfo ( );
	void ASSetTitleText ( struct FString Title );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_ClanMakeLimit::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanMarkAnimation
// 0x0028 (0x02E0 - 0x02B8)
class USFGFxDialog_ClanMarkAnimation : public USFGFxDialog_FuncUseDefault
{
public:
	TArray< struct FString >                           ClanAniImg;                                       		// 0x02B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxClikWidget*                              EffectList;                                       		// 0x02C4 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanAniCode;                                      		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultAniCode;                                   		// 0x02D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69431 ];

		return pClassPointer;
	};

	void SetSelectedIndex ( int SelectIndex );
	void ASSetMotion ( struct FString AniCode );
	void SetMotionReset ( struct FString ReturnDefaultAniCode );
	void SetMotionNo ( struct FString SelectMotionNo );
	void RequsetSetUseItem ( );
	void AsSetClanEffectListTable ( );
	void ASSetClanMark ( struct FString ClanMarkImgPath );
	void ASSetClanMarkEffectText ( struct FString ImageSet, struct FString ItemName, struct FString Content );
	void SetClanMarkEffectText ( );
	void LoadClanMark ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_ClanMarkAnimation::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanSearch
// 0x0034 (0x02EC - 0x02B8)
class USFGFxDialog_ClanSearch : public USFGFxDialog_Clan
{
public:
	class UGFxClikWidget*                              ClanSearchWndWidget;                              		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ResetBtn;                                         		// 0x02BC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanSearchPopupTitleWidget;                       		// 0x02C0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanSearchInputWidget;                            		// 0x02C4 (0x0004) [0x0000000000000000]              
	struct FString                                     ClanSearchPopupTitle;                             		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchBtnText;                                    		// 0x02D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NeedSearchOptionMessage;                          		// 0x02E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69475 ];

		return pClassPointer;
	};

	struct FString GetSelectedAreaCode ( );
	void OnClickAreaSelect ( struct FString MainAreaCode, struct FString SubAreaCode );
	void SetClanAreaSelectDialogSearch ( class USFGFxDialog_BaseAreaSelect* ClanAreaDlg );
	void clansearch_dropdown_values ( struct FString TargetName, int SelectIndex );
	bool CheckEnableSearchOption ( struct FString ClanSearchWord, struct FString ModeNo, struct FString MapNo, TArray< struct FString > InOptionDataValue );
	int OKButtonPress ( );
	void SetDropDownMenuDefaultIndex ( );
	void SetAreaDropDownMenuDefaultIndex ( int AreaLength );
	void SetOKButtonLabel ( );
	void InitDialogInfo ( );
	void ResetSelectedIndex ( );
	void OnClikResetBtn ( struct FEventData ev );
	void SetDropDownMenu ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_ClanSearch::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanList
// 0x0130 (0x03AC - 0x027C)
class USFGFxLobbyPart_ClanList : public USFGFxLobbyPart_ClanRenewal
{
public:
	class UGFxClikWidget*                              SearchBtn;                                        		// 0x027C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AreaDropBox;                                      		// 0x0280 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MainAreaDropBox;                                  		// 0x0284 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SubAreaDropBox;                                   		// 0x0288 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanMakeBtn;                                      		// 0x028C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanHomeBtn;                                      		// 0x0290 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ListMoreBtn;                                      		// 0x0294 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SearchTabCloseBtn;                                		// 0x0298 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RecommendListBtn;                                 		// 0x029C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ClanList;                                         		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ClanInviteList;                                   		// 0x02A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      SortBtnType;                                      		// 0x02A8 (0x0001) [0x0000000000000000]              
	struct FString                                     SortBtnInfo[ 0x6 ];                               		// 0x02AC (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nClanListMorePage;                                		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                nRequestPage;                                     		// 0x02F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsClanRecommendMsgrNotice : 1;                    		// 0x02FC (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     LastSearchText;                                   		// 0x0300 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                bClanListPageVisibleCount;                        		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ClanListFormatMasterName;                         		// 0x0310 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListFormatRegularCount;                       		// 0x031C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListFormatWaitPeopleCount;                    		// 0x0328 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListFindClanNameFailedMsg;                    		// 0x0334 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListMakeClanUnderRank;                        		// 0x0340 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListSearchText;                               		// 0x034C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListFormatClanPoint;                          		// 0x0358 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListNoClanMsg;                                		// 0x0364 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanListDataNoneText;                             		// 0x0370 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ClanListTabButtonText;                            		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClanListHeaderBarClickedDelegate__Delegate;   		// 0x0388 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedClanListGoHomeDelegate__Delegate;      		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedClanListDelegate__Delegate;            		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69514 ];

		return pClassPointer;
	};

	void SetOnClickedClanListDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedClanListDelegate ( struct FString CSN );
	void SetOnClickedClanListGoHomeDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedClanListGoHomeDelegate ( struct FString CSN );
	void SetOnClanListHeaderBarClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnClanListHeaderBarClickedDelegate ( int ClickedHeaderIndex );
	void ASSetDisableHeaderBar ( unsigned long HeaderIndex3, unsigned long HeaderIndex4, unsigned long HeaderIndex5 );
	void SetDisableHeaderBar ( unsigned long bDisable );
	void SetClanRecommendMsgrNotice ( unsigned long bIsClanRecommendMsgrNotice );
	void PKT_MESSENGER_GetRecommendClanAUTO ( class UPacket* Packet );
	void PKT_removeClanRecommend_OK ( class UPacket* recvPacket );
	void RemoveClanRecommend ( int Index );
	void clanInvite_refuseClick ( int Index );
	void clanInvite_JoinClicked ( int Index );
	void ASSetScrollPosition ( int Position );
	void ASSetMainButtonBarData ( TArray< struct FString > ClanListTabButtonTxt );
	void ASSetClanListTabBtnFocus ( int Index );
	int ProcessShortcutKeys ( struct FString KeyName );
	struct FString GetClanListFormatClanPoint ( struct FString ClanPoint );
	struct FString GetClanListFormatUserCount ( struct FString strRegularCount, int nWaitPeople );
	struct FString GetClanListFormatMasterName ( struct FString MasterName );
	void SetSelectSortType ( unsigned char Type );
	struct FString GetSearchText ( int Count );
	void ASResetTabBtns ( int Index );
	void ASSetDataProviderNo ( int Index, class UGFxObject* TempObj );
	class UGFxObject* SetAClanInfo ( int Index, unsigned long bIsSerarchClan );
	void SetPageClanList ( unsigned long bIsSerarchClan );
	void UpdateSearchedClanList ( );
	struct FString ClanRecommendDateFormat ( struct FString RecommendDate );
	class UGFxObject* SetAClanRecommendInfo ( int Index );
	void SetClanRecommendList ( );
	void RequestClanPagedList ( unsigned long bIsMoreList );
	void SetClanList ( );
	void OnClickSearchTabs ( int Index );
	void OnClickClanList ( struct FString CSN );
	void OnClickedClanListBtn ( struct FString CSN );
	void OnClickedClanListGoHomeBtn ( struct FString CSN );
	void OnClickedClanListHeaderBar ( int HeaderBarIndex );
	void OnClickAreaSelect ( struct FString MainAreaCode, struct FString SubAreaCode );
	void ASClanList_SetAreaText ( struct FString AreaText );
	void OnLClickRecommendListBtn ( struct FEventData ev );
	void OnLClickSearchTabCloseBtn ( struct FEventData ev );
	void OnLClickClanHomeBtn ( struct FEventData ev );
	void OnLClickAreaCloseBtn ( );
	void OnLClickAreaBtn ( struct FEventData ev );
	void InitializeSubAreaCode ( struct FString MainAreaCode );
	void OnChangeSubArea ( struct FEventData ev );
	void OnChangeMainArea ( struct FEventData ev );
	void OnChangeArea ( struct FEventData ev );
	void ASSetDefaultAreaIndex ( int AreaIndex );
	void InitializeAreaList ( );
	void OnLClickSearchBtn ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void SetVisibleAreaDropBox ( unsigned long bVisible );
	void InitClanList ( );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
	void OnViewLoaded ( );
};

UClass* USFGFxLobbyPart_ClanList::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ClanWideAreaSelect
// 0x0004 (0x027C - 0x0278)
class USFGFxDialog_ClanWideAreaSelect : public USFGFxDialog_BaseAreaSelect
{
public:
	class UGFxClikWidget*                              GFx_ListSubArea;                                  		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69539 ];

		return pClassPointer;
	};

	void OnChangedSubAreaCode ( struct FEventData ev );
	void OnChangedMainAreaCode ( struct FEventData ev );
	void InitializeSubAreaCode ( struct FString MainAreaCode );
	void InitializeMainAreaCode ( );
	void InitializeAreaList ( );
	int OKButtonPress ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxDialog_ClanWideAreaSelect::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_CommunityNews
// 0x0024 (0x026C - 0x0248)
class USFGFxDialog_CommunityNews : public USFGFxDialog
{
public:
	struct FString                                     NewsTitle;                                        		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultCommunityMessage;                          		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSCommunityEventMessage >           CommunityEventMessageArray;                       		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69574 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	int OKButtonPress ( );
	void UpdateLastestFiltered ( );
	bool GetCommunityEventMessage ( int nType, struct FSCommunityEventMessage* OutMessage );
	void ASSetCommunityNewsMessage ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_CommunityNews::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_Community
// 0x0048 (0x00D4 - 0x008C)
class USFUIDataStore_Community : public USFUIDataStoreBase
{
public:
	struct FSCommunityEvent                            CommunityEvent;                                   		// 0x008C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSCommunityMessage >                CommunityMessageArray;                            		// 0x00A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSCommunityBuddy >                  CommunityBuddyArray;                              		// 0x00AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fPrevNotReadReqTime;                              		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                MessageBuddyReqDelayTime;                         		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NotReadReqDelayTime;                              		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NotYetReadCount;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                FeedbackReqIndex;                                 		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              fPrevReqMessageTime;                              		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              fPrevReqBuddyTime;                                		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69585 ];

		return pClassPointer;
	};

	bool RequestNotYetReadCount ( );
	bool IsFeedbackFromMe ( int ListIndex, int* OutFeedbackType );
	bool IsFeedbackListReceived ( int ListIndex );
	void RequestCommunityBuddyList ( );
	void RequestCommunityMessageList ( );
	void RecvFeedbackList ( TArray< struct FString >* Results );
	void RecvCommunityBuddyList ( TArray< struct FString >* Results );
	void RecvCommunityMessageList ( TArray< struct FString >* Results );
};

UClass* USFUIDataStore_Community::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_CreatedCharacter
// 0x0044 (0x028C - 0x0248)
class USFGFxDialog_CreatedCharacter : public USFGFxDialog
{
public:
	struct FString                                     TitleMessage;                                     		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MainMessage1;                                     		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MainMessage2;                                     		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              ItemListMcs[ 0x2 ];                               		// 0x026C (0x0008) [0x0000000000000000]              
	int                                                nNowPage;                                         		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                DisplayWidgetIndex;                               		// 0x0278 (0x0004) [0x0000000000000000]              
	int                                                DisplayCount;                                     		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSWelcomeItem >                     WelcomeItemArray;                                 		// 0x0280 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69609 ];

		return pClassPointer;
	};

	void ASSetItemList ( int Page );
	void UpdateItemList ( );
	int GetWelcomeItemPage ( );
	void CreatePop_OnBtnPageClick ( int NowNumber, int strDisplayWidgetIndex );
	void ASSetWelcomeMessage ( struct FString strTitle, struct FString strLogoImagePath, struct FString strMain1, struct FString strMain2, struct FString strPageNumber );
	void SetDialogMsgText ( struct FString strMsg );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_CreatedCharacter::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameModeBase
// 0x002C (0x0274 - 0x0248)
class USFGFxDialog_GameModeBase : public USFGFxDialog
{
public:
	class UGFxClikWidget*                              ModeListMC;                                       		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                SelectedModeIndex;                                		// 0x024C (0x0004) [0x0000000000000000]              
	TArray< int >                                      GameModeIDArray;                                  		// 0x0250 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  _global;                                          		// 0x025C (0x0004) [0x0000000000000000]              
	int                                                WeaponTypeMode;                                   		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                PickUpWeapon;                                     		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FString                                     CustomModeName;                                   		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69667 ];

		return pClassPointer;
	};

	void SetFilteredValidGameModeID ( TArray< int >* ModeIDArray );
	void ASClearModeList ( class UGFxClikWidget* ListMC );
	void ClearGameModeList ( );
	bool IsSelectableMode ( int GameModeID );
	void SetModeList ( );
	int GetGameModeSelIndex ( );
	int GetSelectedGameModeID ( );
	void SetGameModeIDArray ( );
	void OnModeDblClicked ( struct FEventData ev );
	bool SetListSelected ( int nIndex );
	void OnModeListClicked ( struct FEventData ev );
	void OnViewClosed ( int NextIndex );
	void DelegateSetupFlashEvent ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_GameModeBase::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_CreateRoom
// 0x0038 (0x02AC - 0x0274)
class USFGFxDialog_CreateRoom : public USFGFxDialog_GameModeBase
{
public:
	class UGFxClikWidget*                              inputRoomTitle;                                   		// 0x0274 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               inputPassword;                                    		// 0x0278 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputRoomText;                                    		// 0x027C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputPasswordText;                                		// 0x0280 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              NewModeListMC;                                    		// 0x0284 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VIPModeListMC;                                    		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                SelectedNewModeIndex;                             		// 0x028C (0x0004) [0x0000000000000000]              
	int                                                SelectedVIPModeIndex;                             		// 0x0290 (0x0004) [0x0000000000000000]              
	TArray< int >                                      NewGameModeIDArray;                               		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      RotationGameModeIDArray;                          		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69715 ];

		return pClassPointer;
	};

	bool CheckVipMapRotationMode ( );
	void OnVipModeDblClicked ( struct FEventData ev );
	bool IsVIPListModeSelected ( );
	int GetVIPGameModeSelIndex ( );
	bool IsNewListModeSelected ( );
	int GetNewGameModeSelIndex ( );
	int GetSelectedGameModeID ( );
	void ClearGameModeList ( );
	void ASSetModeList ( TArray< int > ModeIDArray, class UGFxClikWidget* ListMC, int nSelIndex );
	void SetModeList ( );
	int OKButtonPress ( );
	bool SetListSelected ( int nIndex );
	bool SetVIPListSelected ( int Index );
	void OnNewVIPListClicked ( struct FEventData ev );
	bool SetNewListSelected ( int nIndex );
	void OnNewModeListClicked ( struct FEventData ev );
	struct FString GetRoomName ( );
	struct FString GetPassword ( );
	void SetGameModeIDArray ( );
	void OnTextInputFocusIn ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_CreateRoom::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_CreateRoomEX
// 0x009C (0x0310 - 0x0274)
class USFGFxDialog_CreateRoomEX : public USFGFxDialog_GameModeBase
{
public:
	class UGFxClikWidget*                              inputRoomTitle;                                   		// 0x0274 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               inputPassword;                                    		// 0x0278 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputRoomText;                                    		// 0x027C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputPasswordText;                                		// 0x0280 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              NewModeListMC;                                    		// 0x0284 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VIPModeListMC;                                    		// 0x0288 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomModeApplyBtn;                               		// 0x028C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomModeCancelBtn;                              		// 0x0290 (0x0004) [0x0000000000000000]              
	int                                                SelectedNewModeIndex;                             		// 0x0294 (0x0004) [0x0000000000000000]              
	int                                                SelectedVIPModeIndex;                             		// 0x0298 (0x0004) [0x0000000000000000]              
	int                                                PreWeaponTypeMode;                                		// 0x029C (0x0004) [0x0000000000000000]              
	int                                                PrePickUpWeapon;                                  		// 0x02A0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      NewGameModeIDArray;                               		// 0x02A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      RotationGameModeIDArray;                          		// 0x02B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           DisableCustomModeApplyBtnModeName;                		// 0x02BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SelectedModeUI__Delegate;                       		// 0x02C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DoubleClickSelectedModeUI__Delegate;            		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CustomModeBtn__Delegate;                        		// 0x02E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCustomCbOpen__Delegate;                       		// 0x02EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ModeOptionData__Delegate;                       		// 0x02F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PickUpWeaponOptionData__Delegate;               		// 0x0304 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 69826 ];

		return pClassPointer;
	};

	int GetDefaultCustomMode ( );
	bool CheckVipMapRotationMode ( );
	void OnVipModeDblClicked ( struct FEventData ev );
	bool IsVIPListModeSelected ( );
	int GetVIPGameModeSelIndex ( );
	bool IsNewListModeSelected ( );
	int GetNewGameModeSelIndex ( );
	int GetSelectedGameModeID ( );
	void ClearGameModeList ( );
	void ASSetSelectModeItem ( struct FString ModeItem );
	void ASSetDisableCustomModeRadioButton ( unsigned long Enable );
	void ASSetDisableCustomModeBtn ( unsigned long Enable );
	void ASSetModeListIcon ( TArray< class UGFxObject* > ObjList );
	void ASSetModeList ( TArray< int > ModeIDArray, class UGFxClikWidget* ListMC, int nSelIndex );
	void ASSetModeNewList ( TArray< int > ModeIDArray, class UGFxClikWidget* ListMC, int nSelIndex );
	void UpdatePickUpWeaponOption ( int PickUpWeaponData );
	void SetPickUpWeaponOption ( struct FScriptDelegate InDelegate );
	void PickUpWeaponOptionData ( int PickUpWeaponData );
	void SetModeOptionData ( struct FScriptDelegate InDelegate );
	void ModeOptionData ( int ModeIDData );
	void ASSetMapModeText ( struct FString ModeName );
	void ASSetVisibleCustomWindow ( unsigned long Visible );
	void ASSetMapWeaponGetIcon ( int EnablePickUpWeapon );
	void UpdateLockPickUpUI ( int ModeBtnID );
	void UpdateModeOption ( int ModeIDData );
	void ASSetCustomModeListBT ( TArray< class UGFxObject* > ObjList );
	void ASSetUnSelectModeItem ( );
	void SetOnCustomCbOpen ( struct FScriptDelegate InDelegate );
	void OnCustomCbOpen ( );
	void DoubleClickModeOption ( int Id );
	void DoubleClickModeUI ( struct FString ModeName );
	void CheckEnablePassWordRoom ( struct FString ModeName );
	void UpdateSetSelectedModeUI ( struct FString ModeName );
	void DoubleClickCustomModeBtn ( struct FScriptDelegate InDelegate );
	void CustomModeBtn ( int Id );
	void DoubleClickSetSelectedMode ( struct FScriptDelegate InDelegate );
	void DoubleClickSelectedModeUI ( struct FString ModeName );
	void SetSelectedMode ( struct FScriptDelegate InDelegate );
	void SelectedModeUI ( struct FString ModeName );
	void OnCustomModeCancelBtnPress ( struct FEventData ev );
	void UpdateApplyBtnPress ( );
	void OnCustomModeApplyBtnPress ( struct FEventData ev );
	void OnClickOpenCustomModeCBList ( );
	void SetModeList ( );
	int OKButtonPress ( );
	bool SetListSelected ( int nIndex );
	bool SetVIPListSelected ( int Index );
	void OnNewVIPListClicked ( struct FEventData ev );
	bool SetNewListSelected ( int nIndex );
	void UpdateApplyCustomMode ( );
	void OnNewModeListClicked ( struct FEventData ev );
	struct FString GetRoomName ( );
	struct FString GetPassword ( );
	void SetGameModeIDArray ( );
	void OnTextInputFocusIn ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetupFlashEvent ( );
	void UpdateModeCondition ( );
	void ClearCustomMode ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_CreateRoomEX::pClassPointer = NULL;

// Class SFGame.SFOnetoOneGame
// 0x0010 (0x0854 - 0x0844)
class ASFOnetoOneGame : public ASFRoundTDMGame
{
public:
	unsigned char                                      DefaultObserverCount;                             		// 0x0844 (0x0001) [0x0000000000004000]              ( CPF_Config )
	TArray< unsigned char >                            DefaultPlayerCount;                               		// 0x0848 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 70645 ];

		return pClassPointer;
	};

};

UClass* ASFOnetoOneGame::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_RoomList
// 0x007C (0x0108 - 0x008C)
class USFUIDataStore_RoomList : public USFUIDataStoreBase
{
public:
	TArray< struct FSRoomListInfo >                    RoomListInfoArray;                                		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvRoomListCount;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                CurRoomListCount;                                 		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                RecvMatchingRoomCount;                            		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                CurMatchingRoomCount;                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< struct FSMatchingRoom >                    MatchingRoomArray;                                		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class USFUIDataProvider_MapInfo* >         SupportMapList;                                   		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      CustomMapOrderList;                               		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bAscending_Number : 1;                            		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAscending_Name : 1;                              		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAscending_State : 1;                             		// 0x00CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAscending_Players : 1;                           		// 0x00CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      RecvRoomRemove : 1;                               		// 0x00CC (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                PlayedRoomNumber;                                 		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                RecvRoomIndex;                                    		// 0x00D4 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __RoomListSortByModeIDDelegate__Delegate;         		// 0x00D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortByModeIDDelegate__Delegate;                 		// 0x00E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __RoomListSortByMapIDDelegate__Delegate;          		// 0x00F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SortByMapIDDelegate__Delegate;                  		// 0x00FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71068 ];

		return pClassPointer;
	};

	int IsValidRoom ( int roomNo );
	void FillRoomListForTestChange ( int roomNo, class UPacket** Packet );
	void FillRoomListForTestAdd ( class UPacket** Packet );
	void FillRoomListForTestDel ( class UPacket** Packet );
	int GetMaxRoomNumber ( );
	bool InOrder ( unsigned char SortType, struct FSRoomListInfo Room1, struct FSRoomListInfo Room2 );
	void SetPlayedRoomNumber ( int InRoomNumber );
	void SetVIPRoomToFirstRoom ( );
	void SetPlayedRoomToLastRoom ( );
	void SetRoomListSortforFastRun ( );
	int SortByMapIDDelegate ( int A, int B );
	int RoomListSortByMapIDDelegate ( struct FSRoomListInfo A, struct FSRoomListInfo B );
	int SortByModeIDDelegate ( int A, int B );
	int RoomListSortByModeIDDelegate ( struct FSRoomListInfo A, struct FSRoomListInfo B );
	void SetRoomListSortBySelected ( unsigned char SortType, TArray< int > SelectedKeyArray );
	void SetRoomListSort ( unsigned char SortType );
	struct FString GetRoomListMapName ( int nRoomIndex );
	struct FString GetGameModeName ( int nRoomIndex );
	bool IsLockedGame ( int Index );
	bool IsDisableIntrusion ( struct FSRoomListInfo RoomListInfo );
	bool IsDisableGame ( struct FSRoomListInfo RoomListInfo );
	int GetRoomIndexByRoomNumber ( int RoomNumber );
	bool CheckQuickPlayableRoom ( struct FSRoomListInfo RoomListInfo );
	void PKT_ChangeRoomVipGradeNotifyMessage_Auto ( class UPacket* recvPacket );
	void PKT_ChangeRoomListMessage_Auto ( class UPacket* recvPacket );
	int GetMatchingRoomCount ( int GameModeID, unsigned long bIsPlaying );
	bool IsMatchingRoomNoReceived ( );
	bool IsAllMatchingRoomReceived ( );
	void PKT_GetMatchingRoomList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetMatchingRoomList_REQ_OK ( class UPacket* recvPacket );
	bool IsNoReceive ( );
	bool IsAllReceived ( );
	void PKT_GetGameRoomList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGameRoomList_REQ_OK ( class UPacket* recvPacket );
	void ClearRoomList ( );
	int GetIndexFromAllMaps ( struct FString MapName );
	int GetIndexFromSupportMapList ( struct FString MapName );
	void OnChangedGameModeDataProvider ( int nChannelType );
	void ResetSortRule ( );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_RoomList::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_CrossHair
// 0x003C (0x02F4 - 0x02B8)
class USFGFxDialog_CrossHair : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              CrossHairList;                                    		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CrossHairColorList;                               		// 0x02BC (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           CrossHairImage;                                   		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CrossHairColor;                                   		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bChangeCrossHair : 1;                             		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     SelectCrossHairIndex;                             		// 0x02DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SelectCrossHairColorIndex;                        		// 0x02E8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71089 ];

		return pClassPointer;
	};

	void SetItemChangeDialog ( unsigned long IsChangeDialog );
	void ASSetCrossHairImage ( struct FString CrossHairImageName );
	void ASSetCrossHairColor ( struct FString SelectCrossHairColor );
	void SetSelectedCrossHair ( );
	void OnClickCrossHairColorPress ( struct FEventData ev );
	void OnClickCrossHairPress ( struct FEventData ev );
	void AsSetTableInfo ( struct FString ObjectName, TArray< struct FString > DataArray, class UGFxObject* DataWidget );
	bool IsSelectedValidValue ( );
	void OnViewActivated ( int PrevIndex );
	void RequsetSetUseItem ( );
	void ASSetUseDialogInfo ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_CrossHair::pClassPointer = NULL;

// Class SFGame.SFItem_Func_EnhancedCrosshair
// 0x0018 (0x018C - 0x0174)
class USFItem_Func_EnhancedCrosshair : public USFItem_Functional_UI
{
public:
	TArray< struct FsCrossHairType >                   CrossHairType;                                    		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsCrossHairColor >                  CrossHairColor;                                   		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71115 ];

		return pClassPointer;
	};

	void GetCrossHairColorRGB ( int Index, struct FColor* CrossHairRGBColor );
	void GetCrossHairTypeClass ( int Index, class UClass** CrossHairClass );
	void GetCrossHairColorArray ( TArray< struct FString >* ReturnArray );
	void GetCrossHairTypeArray ( TArray< struct FString >* ReturnArray );
	void ApplyItemProperty ( class AActor* AppliedActor, struct FString ReceiveItemProperty );
};

UClass* USFItem_Func_EnhancedCrosshair::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Declare
// 0x0020 (0x0268 - 0x0248)
class USFGFxDialog_Declare : public USFGFxDialog
{
public:
	struct FString                                     SuccessDeclareMsg;                                		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                DeclareType;                                      		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MemberList;                                       		// 0x0258 (0x0004) [0x0000000000000000]              
	TArray< int >                                      DeclareUserList;                                  		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71141 ];

		return pClassPointer;
	};

	void PKT_ReportUser_REQ_OK ( class UPacket* Packet );
	int OKButtonPress ( );
	void OnMemberListClick ( struct FEventData ev );
	int GetSelectedUser ( );
	void Declare_OnTapIndex ( int SelectIndex );
	void SetUserList ( );
	void InitDeclareType ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_Declare::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_Spray
// 0x0058 (0x01D0 - 0x0178)
class USFItem_Functional_Spray : public USFItem_Functional_ETC
{
public:
	TArray< int >                                      SprayImageIndex;                                  		// 0x0178 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Emblem_Tooltip_Not_Used;                          		// 0x0184 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Emblem_Tooltip_Used;                              		// 0x0190 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Emblem_Tooltip_Unavailable;                       		// 0x019C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Emblem_Tooltip_Not_Used_UseTypeR;                 		// 0x01A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Emblem_Tooltip_Used_UseTypeR;                     		// 0x01B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bClanRelatedItem : 1;                             		// 0x01C0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     DefaultTextureName;                               		// 0x01C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71415 ];

		return pClassPointer;
	};

	bool IsClanRelatedItem ( );
	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Functional_Spray::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Error
// 0x0004 (0x024C - 0x0248)
class USFGFxDialog_Error : public USFGFxDialog
{
public:
	class UGFxObject*                                  MsgTxt;                                           		// 0x0248 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71438 ];

		return pClassPointer;
	};

	void SetDialogMsgText ( struct FString strMsg );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_Error::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_EventList
// 0x0028 (0x0270 - 0x0248)
class USFGFxDialog_EventList : public USFGFxDialog
{
public:
	TArray< struct USFGFxDialog_EventList_FSCategoryLocalized > CategoryString;                                   		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxDialog_EventList_FSCategorySet > PreCategorySet;                                   		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           TabCategoryValue;                                 		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              btnMainTab;                                       		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71448 ];

		return pClassPointer;
	};

	void OnClickedMainTap ( int InTabIndex );
	void OnTabButtonChanged ( struct FEventData ev );
	void SetMainTab ( );
	void SetDefaultLobbyPart ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_EventList::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Notice
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_Notice : public USFGFxLobbyPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71479 ];

		return pClassPointer;
	};

	void SetEventDialogMode ( int Index );
	void OnTabButtonChanged ( );
	void OnTabButtonChange ( );
	void ResetSetting ( );
};

UClass* USFGFxLobbyPart_Notice::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Notice_Event
// 0x001C (0x0224 - 0x0208)
class USFGFxLobbyPart_Notice_Event : public USFGFxLobbyPart_Notice
{
public:
	int                                                SelectPromoID;                                    		// 0x0208 (0x0004) [0x0000000000000000]              
	struct FString                                     strEventProgress;                                 		// 0x020C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSPromoIDInfo >                     PromoIDInfoArray;                                 		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71485 ];

		return pClassPointer;
	};

	int GetEventState ( int PercentValue, struct FString StartDate, struct FString EndDate );
	void ASSetEventData ( class UGFxObject* Obj );
	void SetEventData ( int PromotionID );
	void ASSetSelectedIndex ( int Index );
	void ASSetDataProvider ( class UGFxObject* DataProvider );
	void ASSetEventListData ( int PromoID, class UGFxObject** TempObj );
	int GetDefaulSelectIndex ( int PromoID );
	void ASSetEventList ( );
	struct FString GetTransfromEventFormat ( struct FString strDate );
	void eventDialog_OnListSubBtnClick ( int MainIndex, int SubIndex );
	void eventDialog_OnListMainBtnClick ( int MainIndex );
	void OnTabButtonChanged ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_Notice_Event::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Notice_Gift
// 0x006C (0x0274 - 0x0208)
class USFGFxLobbyPart_Notice_Gift : public USFGFxLobbyPart_Notice
{
public:
	class UGFxClikWidget*                              DisplayItemList[ 0x2 ];                           		// 0x0208 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              SubTab;                                           		// 0x0210 (0x0004) [0x0000000000000000]              
	TArray< struct FSGiftItem >                        DisplayGiftItems;                                 		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strFromGMMessage;                                 		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strDlgMessage[ 0x2 ];                             		// 0x022C (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strGiftSubTab[ 0x2 ];                             		// 0x0244 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strSuccessSendedGiftListMessage;                  		// 0x025C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CurrentSubTab;                                    		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                SelectGiftListNumber;                             		// 0x026C (0x0004) [0x0000000000000000]              
	unsigned long                                      bDisableFirstGiftPopUp : 1;                       		// 0x0270 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71486 ];

		return pClassPointer;
	};

	void ASSetResellBtnView ( unsigned long bVisibleBtn );
	void ASSetGiftTabCount ( struct FString GiftCount );
	void PKT_SetUseGift_REQ_OK ( class UPacket* recvPacket );
	void PKT_DeleteSendedMail_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGiftSendedList_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGiftReceivedList_REQ_OK ( class UPacket* recvPacket );
	void inven_gift_recivetap_header_click ( struct FString HeaderIndex );
	void inven_gift_sendtap_header_click ( struct FString HeaderIndex );
	void OnDlgClickDeleteOkBtn ( );
	void gift_sendlist_delbtn_click ( int Index );
	void OnDlgClickUseOkBtn ( );
	void gift_recivelist_usebtn_click ( int Index );
	struct FString GetDlgMessage ( struct FSGiftItem GiftData );
	class UGFxObject* ASSetGiftItemInfo ( struct FSGiftItem GiftData );
	void SetDiaplayGiftItem ( );
	void MakeInvenItemList ( int SubTabIndex );
	void InitGiftPart ( );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
	void OnTabButtonChanged ( );
	void SetupSubTab ( );
	void OnSubTabChanged ( struct FEventData ev );
	bool WidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_Notice_Gift::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ExitConfirm
// 0x001C (0x0264 - 0x0248)
class USFGFxDialog_ExitConfirm : public USFGFxDialog
{
public:
	struct FString                                     DialogTitle;                                      		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DialogCenterTitle;                                		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class ASFHUD*                                      myHUD;                                            		// 0x0260 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71487 ];

		return pClassPointer;
	};

	void ASSetDialogBase ( );
	int OKButtonPress ( );
	void OnPendingOpen ( );
};

UClass* USFGFxDialog_ExitConfirm::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ExtraReward
// 0x0084 (0x02CC - 0x0248)
class USFGFxDialog_ExtraReward : public USFGFxDialog
{
public:
	int                                                MAX_REWARD_CARD;                                  		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ShareRewardResult;                                		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              ExtraRewardChoiceDelay;                           		// 0x0258 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     RequestedSupplyCode;                              		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FExtraRewardInfo >                  RewardItemList;                                   		// 0x0268 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bCanClosedialog : 1;                              		// 0x0274 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAllowWidgetSound : 1;                            		// 0x0274 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bViewActivated : 1;                               		// 0x0274 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoticeRewardWhenChoosed : 1;                     		// 0x0274 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bMiniGachaEnableFlag : 1;                         		// 0x0274 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     CurrentRewardDataType;                            		// 0x0278 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastCountDown;                                    		// 0x0284 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   Cue_ExtraRewardGain_SP;                           		// 0x0288 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   Cue_ExtraRewardGain_Item;                         		// 0x028C (0x0004) [0x0000000000000000]              
	struct FString                                     CachedRealRewardName;                             		// 0x0290 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedCardIndex;                                		// 0x029C (0x0004) [0x0000000000000000]              
	struct FString                                     MiniGachaTitle;                                   		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MiniGachaButtonText;                              		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MiniGachaCountText;                               		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              MiniGachaCancelBtn;                               		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                MinusSP;                                          		// 0x02C8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71554 ];

		return pClassPointer;
	};

	int OKButtonPress ( );
	void PKT_GetRewardItem_REQ_OK ( class UPacket* recvPacket );
	void OnClickMiniGacha ( int CardIndex );
	void ASSetMiniGachaCoinCount ( struct FString CountText );
	void SetMiniGachaCoinCount ( );
	void OnClikCacelButton ( struct FEventData ev );
	void ASSetMiniGahcaDialog ( struct FString Title, struct FString btnText );
	void SetTitle ( );
	void SetMiniGachaFlag ( );
	void ASSetCountDown ( int Count );
	void ASChoiceTimeOver ( int CardIndex );
	void ASInitRewards ( class UGFxObject* Rows );
	void OnFinishChoiceExtraRewardAnimation ( );
	void OnClickExtraRewardCard ( );
	void OnChoiceTimeOver ( );
	class UGFxObject* GetASRewardItem ( struct FSRecvReward RewardData );
	void ClearChoiceTimer ( );
	void StartChoiceTimer ( );
	void InitializeMiniGachaRewards ( );
	void InitializeRewards ( struct FSRecvReward RewardData );
	void StartChoice ( );
	void SetRequestedSupplyCode ( struct FString SupplyCode );
	void OnPlayClikWidgetSound ( struct FEventData ev );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_ExtraReward::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Following
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_Following : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71703 ];

		return pClassPointer;
	};

	void ASSetFollowingLocation ( struct FString strTitle, struct FString context, struct FString LocMessage, int Step );
	void ASSetFollowingMessage ( struct FString strMessage );
};

UClass* USFGFxDialog_Following::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_FullScrHelp
// 0x0004 (0x024C - 0x0248)
class USFGFxDialog_FullScrHelp : public USFGFxDialog
{
public:
	float                                              fAutoCloseTime;                                   		// 0x0248 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71712 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	void OnDblClickScreen ( );
	void SetFullScreenHelp ( unsigned long bAutoClose );
};

UClass* USFGFxDialog_FullScrHelp::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_FuncChangeName
// 0x0010 (0x02C8 - 0x02B8)
class USFGFxDialog_FuncChangeName : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              TextNameLength;                                   		// 0x02B8 (0x0004) [0x0000000000000000]              
	struct FString                                     strChangeNameConfirmMessage;                      		// 0x02BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71722 ];

		return pClassPointer;
	};

	bool IsInUnuseableWord ( struct FString new_word, struct FName Option, int CharSetIndex );
	int OKButtonPress ( );
	void RequsetSetUseItem ( );
	void InputWaitTimerRanout ( );
	void IMETextInputUpdated ( );
	void ASSetNameEnableMessage ( struct FString strType, struct FString strMessage, unsigned long bVisible );
	void UpdateLastestFiltered ( );
	void ASSetUseDialogInfo ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewClosed ( int NextIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_FuncChangeName::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeName
// 0x000C (0x0184 - 0x0178)
class USFItem_Func_ChangeName : public USFItem_Functional_ETC
{
public:
	struct FString                                     strSwearWordWarningMsg;                           		// 0x0178 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71741 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChangeName::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeClanName
// 0x0000 (0x0184 - 0x0184)
class USFItem_Func_ChangeClanName : public USFItem_Func_ChangeName
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71740 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChangeClanName::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeCodeName
// 0x0000 (0x0184 - 0x0184)
class USFItem_Func_ChangeCodeName : public USFItem_Func_ChangeName
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71742 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChangeCodeName::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_FuncChangeSpecialName
// 0x0018 (0x02E0 - 0x02C8)
class USFGFxDialog_FuncChangeSpecialName : public USFGFxDialog_FuncChangeName
{
public:
	class UGFxClikWidget*                              SpecialCharListWidget;                            		// 0x02C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNewCodeNameChanged : 1;                          		// 0x02CC (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxObject*                                  _gfxSelection;                                    		// 0x02D0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SpecialCharSetList;                               		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71769 ];

		return pClassPointer;
	};

	void SetNewSelection ( int Begin, int End );
	void SetFocusToTextInput ( class UGFxObject* Target );
	void OnListSpecialCharChanged ( struct FEventData ev );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	bool IsInUnuseableWord ( struct FString new_word, struct FName Option, int CharSetIndex );
	void AddSpecialCharToResTextField ( struct FString ch );
	void InitializeSpecialCharList ( );
	void UpdateButtonState ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_FuncChangeSpecialName::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeSpecialCodeName
// 0x0004 (0x0188 - 0x0184)
class USFItem_Func_ChangeSpecialCodeName : public USFItem_Func_ChangeCodeName
{
public:
	int                                                SpecialCharSetIndex;                              		// 0x0184 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71788 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChangeSpecialCodeName::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_FuncUseReset
// 0x0000 (0x02B8 - 0x02B8)
class USFGFxDialog_FuncUseReset : public USFGFxDialog_FuncUseDefault
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71810 ];

		return pClassPointer;
	};

	void ASSetUseDialogInfo ( );
};

UClass* USFGFxDialog_FuncUseReset::pClassPointer = NULL;

// Class SFGame.SFItem_Func_InitKillDeath
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_InitKillDeath : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71824 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_InitKillDeath::pClassPointer = NULL;

// Class SFGame.SFItem_Func_InitWinLose
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_InitWinLose : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71825 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_InitWinLose::pClassPointer = NULL;

// Class SFGame.SFItem_Func_InitDesertion
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_InitDesertion : public USFItem_Functional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71826 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_InitDesertion::pClassPointer = NULL;

// Class SFGame.SFItem_Func_InitClanWinLoseRecord
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_InitClanWinLoseRecord : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71827 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_InitClanWinLoseRecord::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameClose
// 0x0018 (0x0260 - 0x0248)
class USFGFxDialog_GameClose : public USFGFxDialog
{
public:
	struct FString                                     GameEndContext;                                   		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MainContext;                                      		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71829 ];

		return pClassPointer;
	};

	int OKButtonPress ( );
	void ASSetDialogInfo ( struct FString strTitle, struct FString strLogoImagePath, struct FString strMain1, struct FString strMain2 );
	void SetDialogMsgText ( struct FString strMsg );
	void SetDialogTitle ( struct FString strMsg );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_GameClose::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameCloseOfSelectGift
// 0x0020 (0x0268 - 0x0248)
class USFGFxDialog_GameCloseOfSelectGift : public USFGFxDialog
{
public:
	TArray< struct FsWelcomeTextType >                 WelcomeText;                                      		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsItemGroup >                       BaseItemGroup;                                    		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectGiftNumber;                                 		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                RecvItemCount;                                    		// 0x0264 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71847 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	void ExtractItemGroup ( );
	void ServerToSendUserGroupGiveItem ( );
	void PKT_UserGroupGiveItem_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_UserGroupGiveItem_REQ_OK ( class UPacket* recvPacket );
	void SetButtonDisable ( unsigned long bDisable );
	void SetButtonAlignment ( );
	void SetWelcomeText ( int SelectGroup );
	void OnEventEndGameItemIndex ( int Index );
	void ASSetNPCType ( struct FString NPCType );
	void ASSetNPCToolTip ( struct FString Icon, struct FString IconName, struct FString ToolTipText );
	void ASSetSelectItemList ( class UGFxObject* item_list );
	class UGFxObject* GetRewardItemInfo ( TArray< struct FsGiftItemList >* ItemList );
	void SetSelectItemList ( );
	int CancelButtonPress ( );
	int OKButtonPress ( );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_GameCloseOfSelectGift::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameResultBase
// 0x015C (0x03A4 - 0x0248)
class USFGFxDialog_GameResultBase : public USFGFxDialog
{
public:
	int                                                ViewPrevEXP;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                ViewRemainExp;                                    		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                ViewRemainKillBonus;                              		// 0x0250 (0x0004) [0x0000000000000000]              
	struct FString                                     PrevGFxRank;                                      		// 0x0254 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ExpNoKillFeedBack;                                		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                ViewRemainSPGage;                                 		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                ViewCurSPGage;                                    		// 0x0268 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowMatchAnimation : 1;                          		// 0x026C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableClose : 1;                                		// 0x026C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseMiniGacha : 1;                                		// 0x026C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      IsDisableMyResultFlag : 1;                        		// 0x026C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	int                                                LevelUpCount;                                     		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                SPUpCount;                                        		// 0x0274 (0x0004) [0x0000000000000000]              
	struct FSUserResult                                MyResult;                                         		// 0x0278 (0x0124) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SPImmediatelyLimit;                               		// 0x039C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SPImmediatelyRatio;                               		// 0x03A0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 71944 ];

		return pClassPointer;
	};

	void OpenMiniGacha ( );
	void AsSetRoomBlueMarkTitle ( struct FString ClanMark );
	void AsSetRoomRedMarkTitle ( struct FString ClanMark );
	void ASSetCombatGrade ( struct FString strMessage, struct FString strKill, struct FString strAssist, struct FString strDeath, struct FString KillBouns, struct FString strRareScore, struct FString strContinuousScore, struct FString strSpecialScore, TArray< struct FString > KillFeedBackArray );
	void ASSetClanRanking ( struct FString strRankingType, struct FString strRankingGap );
	void ASSetPersonalRanking ( struct FString strRankingType, struct FString strRankingGap, struct FString strRankingMessage );
	void ASSetGameResultBenefitMessage ( struct FString strMessage );
	void ASSetDeathGameRankBanner ( struct FString Rank, struct FString RankStr, struct FString UnitName );
	void HideRoomVipInfo ( );
	void ShowRoomVipInfo ( struct FString Vipmark, struct FString AddSP, struct FString AddEXP );
	void UpdateVipRoomMark ( );
	void ASSetTeamModeListNumber ( TArray< struct FASValue > args );
	void ASSetDeathGameResultView ( TArray< struct FASValue > args );
	void ASUpdateSPGage ( int OrigSPGage, int EarnSPGage, int MaxSPGage, int TeamIndex, int ListIndex, struct FString strPercent, int SPAmount, int CurTotalPercent );
	void ASUpdateExp ( struct FString LeftClass, struct FString RightClass, int PrevExp, int EarnExp, int KillBonusExp, struct FString strPercent, struct FString strEXPValue, struct FString strKillBonusValue );
	void ASSetWinningMsg ( struct FString WinningMsg, struct FString strTeamName );
	void ASSetResultItemLP ( struct FString strLPValue );
	void ASSetResultItemSP ( struct FString PCRoom, struct FString PMC, struct FString EXP_UP, struct FString SP_UP, struct FString VIP, struct FString Event_EXP, struct FString Fever );
	void ASSetResultItemEXP ( struct FString PCRoom, struct FString PMC, struct FString EXP_UP, struct FString SP_UP, struct FString VIP, struct FString Event_EXP, struct FString Fever );
	void ASSetMyResultData ( struct FString game_mode_name, struct FString map_name, struct FString red_score, struct FString blue_score );
	void ASSetAddFrinedPersonal ( int InIndex );
	void ASSetAddFrinedMessageInBlue ( int InIndex );
	void ASSetAddFrinedMessageInRed ( int InIndex );
	void OnAddedBuddy ( struct FString strCodeName );
	void OnClickAddtoBuddy ( struct FString strCodeName );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void ShowMatchAnimation ( );
	void SetDisableClose ( unsigned long bDisable );
	void UpdateSPGageUpAnimation ( );
	void UpdateSPGauge ( );
	void UpdateExpUpAnimation ( );
	void UpdateExp ( );
	void UpdateClanRanking ( );
	void SetDeathGameRankBanner ( TArray< struct FSUserResult > ResultArray );
	void UpdateWinLoseInfo ( );
	void UpdateMatchExtraInfo ( );
	void UpdateMatchInfo ( );
	bool UpdateResultInfo ( );
	void UpdateAllTeamMark ( );
	void SendChatMessage ( struct FString InChatMsg, int InChatSendType, unsigned long bCheckMassive );
	int OKButtonPress ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_GameResultBase::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_MessengerBuddyList
// 0x021C (0x0570 - 0x0354)
class USFGFxLobby_MessengerBuddyList : public USFGFxLobbyScreenEx
{
public:
	class UGFxClikWidget*                              btnPopSearch;                                     		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              listUsers;                                        		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMini;                                          		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMsnFriend;                                     		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMsnAlert;                                      		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMsnClan;                                       		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnBoxBuddyname;                                  		// 0x036C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnBoxUsername;                                   		// 0x0370 (0x0004) [0x0000000000000000]              
	TArray< struct FsBuddyPopup >                      BuddyPopups;                                      		// 0x0374 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           MessengerNotice;                                  		// 0x0380 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoticeInviteGameTitle;                            		// 0x038C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CounterOnlineBuddySrc;                            		// 0x0398 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CounterOnlineClanSrc;                             		// 0x03A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessengerBuddyCount;                              		// 0x03B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessengerBuddyFacebookNameForm;                   		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndWeeklyClanRankMessageTitle;                    		// 0x03C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EndWeeklyClanRankMessage;                         		// 0x03D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanRecommendMessage;                             		// 0x03E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanRecommendReceiveMessage;                      		// 0x03EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                ErrorDlgDisplayTime;                              		// 0x03F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bBuddyListActive : 1;                             		// 0x03FC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBuddyListAnim : 1;                               		// 0x03FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBuddyAltPopShow : 1;                             		// 0x03FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceUpdatedBuddyLocation : 1;                   		// 0x03FC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bForceUpdatedBuddyList : 1;                       		// 0x03FC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      IsWithBlock : 1;                                  		// 0x03FC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowMsgrNotice : 1;                              		// 0x03FC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned char                                      nOpenedBuddyInputBox;                             		// 0x0400 (0x0001) [0x0000000000000000]              
	int                                                DisplayingGroupSN;                                		// 0x0404 (0x0004) [0x0000000000000000]              
	int                                                SelectedBuddyUSN;                                 		// 0x0408 (0x0004) [0x0000000000000000]              
	TArray< int >                                      BuddyPopupExecs;                                  		// 0x040C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsDebugCNList >                     DebugCNLists;                                     		// 0x0418 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     InputedCodename;                                  		// 0x0424 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fUpdateTimeBuddyLocationList;                     		// 0x0430 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UseBuddyWithGameFunc;                             		// 0x0434 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FScriptDelegate                             __OnClickViewFriendsListDelegate__Delegate;       		// 0x0438 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickViewClanMamberListDelegate__Delegate;    		// 0x0444 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddFriendDelegate__Delegate;                  		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickFindUserDelegate__Delegate;              		// 0x045C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnViewProfileDelegate__Delegate;                		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOnCommonOkDelegate__Delegate;                 		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickNoticeDelegate__Delegate;                		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessengerPopupAcceptDelegate__Delegate;       		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessengerPopupRefuseDelegate__Delegate;       		// 0x0498 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMessengerPopupMinDelegate__Delegate;          		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickFriendDelegate__Delegate;                		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDoubleClickFriendDelegate__Delegate;          		// 0x04BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickPopupDelegate__Delegate;                 		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickMinPopupDelegate__Delegate;              		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRollOverFriendsListDelegate__Delegate;        		// 0x04E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuddylistOpenAnimEndDelegate__Delegate;       		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuddylistCloseAnimEndDelegate__Delegate;      		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReciveInputCodenameDelegate__Delegate;        		// 0x0504 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendBlockCheckDelegate__Delegate;           		// 0x0510 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedDeleteDelegate__Delegate;              		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedBlockDelegate__Delegate;               		// 0x0528 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedTalkDelegate__Delegate;                		// 0x0534 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedInviteGameDelegate__Delegate;          		// 0x0540 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddedBuddyDelegate__Delegate;                 		// 0x054C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickFollowDelegate__Delegate;                		// 0x0558 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClosedBuddyAltPopupDelegate__Delegate;        		// 0x0564 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72081 ];

		return pClassPointer;
	};

	void SetInitMsgrBtn ( );
	void ASSetVisibleMsgrBtn ( unsigned long bVisible );
	void PKT_JoinGameRoom_REQ_OK ( class UPacket* recvPacket );
	void PKT_LeftGameRoom_REQ_OK ( class UPacket* recvPacket );
	void PKT_CreateGameRoom_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetRecommendClan_REQ_OK ( class UPacket* recvPacket );
	void PKT_ResetClanRankMsg_Auto ( class UPacket* Packet );
	void OnFriendBlockCheck ( unsigned long IsChecked );
	void OnDeleteFriendRefuseWithBlock ( );
	void OnDeleteFriendAcceptWithBlock ( );
	void DeleteBuddystep1WithBlock ( );
	void RemoveBlockToBuddy ( );
	void BlockToBuddy ( );
	void OnSetLobbySeason ( );
	void OnKillDeathResetted ( );
	void OnClanMarkChanged ( );
	void OnColorCodeNameChanged ( );
	void OnCodenameChanged ( );
	void OpenMessengerPopup ( struct FString Msgstr );
	int OpenNoticeError ( struct FString errorstr );
	void OnClosedBuddyAltPopup ( );
	void SetOnClosedBuddyAltPopupDelegate ( struct FScriptDelegate InDelegate );
	void OnClosedBuddyAltPopupDelegate ( );
	void NoticeInviteGame ( struct FString CodeName, struct FString InviteStr );
	void OpenDialogInviteResultStr ( struct FString CodeName, int InviteResult, unsigned long bFollow );
	void DisplayInviteResultStr ( struct FString CodeName, int inviteres, unsigned long bFollowing );
	void DisplayInviteResult ( int USN, int inviteres, unsigned long bFollowing );
	void InviteBuddy ( int USN );
	int FollowBuddy ( struct FString CodeName );
	void OnClickFollow ( int Idx );
	void SetOnClickFollowDelegate ( struct FScriptDelegate InDelegate );
	void OnClickFollowDelegate ( int Idx );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void RemoveMsgrNoticeByType ( int InType );
	void RemoveCurrentNotice ( );
	void OnMinimizeMessengerPopup ( );
	void OnCloseMessengerPopup ( );
	void OnPendingMsgrNoticeAccept ( );
	void ShowPendingMsgrNotice ( unsigned long bForceOpen );
	void AddMsgrNoticeArray ( struct FSMsgrNotice MsgrNotice, unsigned long bInstantShow, unsigned long bInsertFirst );
	void AddMsgrNoticePlayTime ( struct FString strMessage );
	void AddMsgrNoticeGift ( );
	struct FSMsgrNotice GetMsgrNoticeByType ( int Type );
	void AddMsgrNotice ( int nType, struct FString strTitle, struct FString strMessage, struct FString strOK, struct FString strCancel );
	void OnTBoxUsernameChanged ( struct FEventData ev );
	void OnTBoxBuddynameChanged ( struct FEventData ev );
	void OnAddedBuddyDelegate ( struct FString CodeName );
	void AutoCloseErrorDlg ( );
	void ClearAutoCloseErrorDlg ( );
	void SetAutoCloseErrorDlg ( );
	void ProcessBuddyListOffline ( );
	void DisconnectedMessengerserver ( );
	void TryReconnectMessengerServer ( );
	void OnMessageNotification ( int InUSN, int nCount );
	void OnRollOverFriendsList ( struct FString Idx );
	void DeleteBuddystep1 ( );
	void OnClickedTalk ( struct FString Index );
	void OnClickedInviteGame ( int ListIndex );
	void OnClickedBlock ( struct FString Index );
	void OnClickedDelete ( struct FString Index );
	void OnClickPopup ( int Idx );
	void OpenBuddyPopup ( );
	void OpenChattingDialogByClick ( int USN );
	void OnDoubleClickFriend ( struct FString stridx );
	void OnClickFriend ( int Idx, int mousebtn );
	void NoticeInviteBuddy ( struct FString CodeName );
	void OnClickNotice ( );
	void UpdateNoticeCount ( unsigned long bForce );
	void OnOnCommonOk ( );
	void OnViewProfile ( struct FString CodeName );
	void OnClickFindUser ( unsigned long bOpen );
	void OpenAddBuddyErrorPopup ( int err, struct FString CodeName );
	void RemoveBuddyBLtoAddFL ( struct FString CodeName );
	int IsCanAddtoBuddy ( struct FString CodeName );
	void OnAddFriendFromOutside ( struct FString CodeName );
	void OnAddFriend ( struct FString CodeName );
	void OnBuddylistCloseAnimEnd ( );
	void OnBuddylistOpenAnimEnd ( );
	void ViewFriendsList ( unsigned long bOpen );
	void OnClickViewClanMamberList ( unsigned long bOpen );
	void OnClickViewFriendsList ( unsigned long bOpen );
	void ChangeActiveGroup ( unsigned char NewGroupType, unsigned long bOpen );
	void UpdateServerLocation ( int USN );
	void UpdateOwnerServerLocation ( int inGame );
	struct FString GetCurrentTitle ( );
	void UpdateTitle ( unsigned long bForce );
	void UpdateFriendList ( unsigned long bForce, int Group );
	void OpenNoticeNewBuddy ( unsigned long bNew, struct FString CodeName );
	int GetAddBuddyErrorString ( int Error );
	void PKT_MESSENGER_GetBuddyLocation_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_DestroyClanAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_RemoveClanMemberAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyBLMessageAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyBL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyLocations_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetBuddyFLList_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_RemoveClanMember_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyFLAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_ChangeStatusAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_RemoveFL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_AddBuddyFL_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_GetUserByNick_REQ_OK ( class UPacket* recvPacket );
	void PKT_MESSENGER_LOGIN_REQ_OK ( class UPacket* recvPacket );
	void debugClrBuddy ( );
	void debugTglBuddy ( struct FString CodeName );
	void debugDelBuddy ( int Idx );
	struct FString debugGetUniqueCN ( );
	int debugGetUniqueSN ( );
	void DebugAddBuddy ( );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	void SetOnClickedInviteGameDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedInviteGameDelegate ( int Index );
	void SetOnClickedTalkDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedTalkDelegate ( struct FString Index );
	void SetOnClickedBlockDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedBlockDelegate ( struct FString Index );
	void SetOnClickedDeleteDelegate ( struct FScriptDelegate InDelegate );
	void OnClickedDeleteDelegate ( struct FString Index );
	void SetOnFriendBlockCheckDelegate ( struct FScriptDelegate InDelegate );
	void OnFriendBlockCheckDelegate ( unsigned long IsChecked );
	void SetOnReciveInputCodenameDelegate ( struct FScriptDelegate InDelegate );
	void OnReciveInputCodenameDelegate ( struct FString CodeName );
	void SetOnBuddylistCloseAnimEndDelegate ( struct FScriptDelegate InDelegate );
	void OnBuddylistCloseAnimEndDelegate ( );
	void SetOnBuddylistOpenAnimEndDelegate ( struct FScriptDelegate InDelegate );
	void OnBuddylistOpenAnimEndDelegate ( );
	void SetOnRollOverFriendsListDelegate ( struct FScriptDelegate InDelegate );
	void OnRollOverFriendsListDelegate ( struct FString Idx );
	void SetOnClickMinPopupDelegate ( struct FScriptDelegate InDelegate );
	void OnClickMinPopupDelegate ( );
	void SetOnClickPopupDelegate ( struct FScriptDelegate InDelegate );
	void OnClickPopupDelegate ( int Idx );
	void SetOnDoubleClickFriendDelegate ( struct FScriptDelegate InDelegate );
	void OnDoubleClickFriendDelegate ( struct FString Idx );
	void SetOnClickFriendDelegate ( struct FScriptDelegate InDelegate );
	void OnClickFriendDelegate ( int USN, int mousebtn );
	void SetOnMessengerPopupMinDelegate ( struct FScriptDelegate InDelegate );
	void OnMessengerPopupMinDelegate ( );
	void SetOnMessengerPopupRefuseDelegate ( struct FScriptDelegate InDelegate );
	void OnMessengerPopupRefuseDelegate ( );
	void SetOnMessengerPopupAcceptDelegate ( struct FScriptDelegate InDelegate );
	void OnMessengerPopupAcceptDelegate ( );
	void SetOnClickNoticeDelegate ( struct FScriptDelegate InDelegate );
	void OnClickNoticeDelegate ( );
	void SetOnOnCommonOkDelegate ( struct FScriptDelegate InDelegate );
	void OnOnCommonOkDelegate ( );
	void SetOnViewProfileDelegate ( struct FScriptDelegate InDelegate );
	void OnViewProfileDelegate ( struct FString FriendName );
	void SetOnClickFindUserDelegate ( struct FScriptDelegate InDelegate );
	void OnClickFindUserDelegate ( unsigned long bOpen );
	void SetOnAddFriendDelegate ( struct FScriptDelegate InDelegate );
	void OnAddFriendDelegate ( struct FString FriendName );
	void SetOnClickViewClanMamberListDelegate ( struct FScriptDelegate InDelegate );
	void OnClickViewClanMamberListDelegate ( unsigned long bOpen );
	void SetOnClickViewFriendsListDelegate ( struct FScriptDelegate InDelegate );
	void OnClickViewFriendsListDelegate ( unsigned long bOpen );
	void ASCloseDelFriendWithBlock ( );
	void ASOpenDelFriendWithBlock ( struct FString Title, struct FString invitemsg, struct FString ok, struct FString Cancel, struct FString chkmsg );
	void AsSnow_MidViewHide ( );
	void AsSnow_MidViewShow ( );
	void AsSnowMovieHide ( );
	void AsSnowMovieShow ( );
	void AsSetSnowDecoVisible ( unsigned long bVisible );
	void ASResetScrollPos ( );
	void ASRequestInputedBuddyName ( );
	bool IsClanConnectBenefitBuff ( );
	void UpdateMessengerListNumber ( );
	void ASSetOnlineFriends ( struct FString friendTit, struct FString clanTit, int fnum, int cnum );
	void ASOpenPopupFindUserforBuddyAdd ( unsigned long bOpen );
	void ASOpenPopupViewProfile ( unsigned long bOpen );
	void ASSetNotice ( struct FString num );
	void ASCloseNotice ( );
	void ASOpenNotice ( struct FString Title, struct FString invitemsg, struct FString ok, struct FString Cancel );
	void ASCloseBuddyPopupMenu ( );
	void ASOpenBuddyPopupMenu ( int USN, TArray< struct FString > menu );
	void ASCloseNoticeCommon ( );
	void ASOpenNoticeCommon ( int caseNo, struct FString Str, struct FString ok );
	void ASViewFriendsList ( unsigned long bOpen, unsigned long bBuddy );
	void ASClearLastBuddy ( );
	void ASDeleteList ( int Idx );
	void ASInsertList ( int Idx, class UGFxObject* TempObj );
	void ASSetList ( int Idx, class UGFxObject* TempObj );
	void ASSetListTitle ( struct FString Title );
	struct FString GetBuddyToolTip ( int channelType, int channelNum, int roomnum );
	class UGFxObject* SetBuddyToList ( struct FsBuddy Buddy );
	void OnPressedF6 ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void CheckNeedUpdateList ( );
	void ClearUpdateListTimer ( );
	void SetUpdateListTimer ( );
	void CheckNeedUpdateLocationList ( );
	void OnClickMinBuddyList ( struct FEventData ev );
	void ClearUpdateLocationTimer ( );
	void SetUpdateLocationTimer ( );
	void DeactiveFunctions ( );
	void ActiveFunctions ( );
	void OnPendingClose ( );
	bool IsBuddyListActive ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_MessengerBuddyList::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_GameResult
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_GameResult : public USFGFxLobbyPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72090 ];

		return pClassPointer;
	};

	void OnAddedBuddy ( struct FString CodeName );
	void OnClickAddtoBuddy ( struct FString CodeName );
};

UClass* USFGFxLobbyPart_GameResult::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameResult
// 0x0024 (0x03C8 - 0x03A4)
class USFGFxDialog_GameResult : public USFGFxDialog_GameResultBase
{
public:
	int                                                AutoPageChangeTime;                               		// 0x03A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      StartPage;                                        		// 0x03A8 (0x0001) [0x0000000000004000]              ( CPF_Config )
	int                                                nRankingRiseCount;                                		// 0x03AC (0x0004) [0x0000000000000000]              
	TArray< int >                                      ScreenShotPartArray;                              		// 0x03B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           VisibleMyResultGameModeArray;                     		// 0x03BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72199 ];

		return pClassPointer;
	};

	void ASSetDisableCommunityBtn ( unsigned long bDisable );
	void result_OnBtnCommunityClick ( );
	bool IsDisableMyResult ( );
	void OnViewActivated ( int PrevIndex );
	void SetAutoScreenShot ( );
	int ChangeMainTab ( int InTabIndex );
	void SetPageChangeToAllList ( );
	void AutoPageChange ( );
	bool UpdateResultInfo ( );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_GameResult::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_GameResult_All
// 0x000C (0x0214 - 0x0208)
class USFGFxLobbyPart_GameResult_All : public USFGFxLobbyPart_GameResult
{
public:
	class UGFxClikWidget*                              topList;                                          		// 0x0208 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              bottomList;                                       		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PersonalList;                                     		// 0x0210 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72231 ];

		return pClassPointer;
	};

	void SetTeamModeListNumber ( );
	void SetDeathGameResultView ( );
	void OnAddedBuddy ( struct FString CodeName );
	void OnClickAddtoBuddy ( struct FString CodeName );
	void UpdateResultListDataProvider ( struct FString GameModeName, class UGFxClikWidget* ScoreList, TArray< struct FSUserResult > ResultArray, int TeamIndex );
	void UpdateAllPlayersResultList ( );
	void OnChangeMainTab ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_GameResult_All::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameResult_16vs16
// 0x0000 (0x03C8 - 0x03C8)
class USFGFxDialog_GameResult_16vs16 : public USFGFxDialog_GameResult
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72232 ];

		return pClassPointer;
	};

};

UClass* USFGFxDialog_GameResult_16vs16::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameResult_Hero
// 0x0000 (0x03C8 - 0x03C8)
class USFGFxDialog_GameResult_Hero : public USFGFxDialog_GameResult
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72234 ];

		return pClassPointer;
	};

	void OnPage2BtnPress ( struct FEventData ev );
	void OnPage1BtnPress ( struct FEventData ev );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void AutoPageChange ( );
};

UClass* USFGFxDialog_GameResult_Hero::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_GameResult_HeroAll
// 0x0000 (0x0214 - 0x0214)
class USFGFxLobbyPart_GameResult_HeroAll : public USFGFxLobbyPart_GameResult_All
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72247 ];

		return pClassPointer;
	};

	void ASSetMatchResult ( int TeamCode, int OurTowerHealth, int OurTowerHealthMax, int EnemyTowerHealth, int EnemyTowerHealthMax, struct FString OurKDA, struct FString EnemyKDA, struct FString RemainTime, struct FString ModeName, struct FString MapName );
	struct FString GetTeamKDA ( TArray< struct FSUserResult >* UserResultList );
	void UpdateTeamScore ( );
	void SetDeathGameResultView ( );
	void UpdateResultListDataProvider ( struct FString GameModeName, class UGFxClikWidget* ScoreList, TArray< struct FSUserResult > ResultArray, int TeamIndex );
	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_GameResult_HeroAll::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_GameResult_HeroStatistics
// 0x0028 (0x0230 - 0x0208)
class USFGFxLobbyPart_GameResult_HeroStatistics : public USFGFxLobbyPart_GameResult
{
public:
	TArray< struct FSUIResultStatisticsTypes >         StatisticsData;                                   		// 0x0208 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      CurrentType;                                      		// 0x0214 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __StatisticsRankSort__Delegate;                   		// 0x0218 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UserResultStatisticsScoreSort__Delegate;        		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72248 ];

		return pClassPointer;
	};

	void ASSetStatisticsListIndex ( int Index );
	void ASSetStatisticsData ( TArray< class UGFxObject* > datalist );
	void ASSetStatisticsTypeList ( TArray< class UGFxObject* > TypeList );
	void resultHero_OnGraphComboClick ( int Index );
	int GetStatisticsDataFromUserResult ( unsigned char Type, struct FSUserResult ResultData );
	bool FillStatisticsDataList ( unsigned char Type, TArray< struct FSUserResult > ResultDataList, TArray< class UGFxObject* >* GFxDataList );
	void UpdateStatisticsData ( unsigned char NextType );
	void UpdateStatisticsTypeList ( );
	int UserResultStatisticsScoreSort ( struct FSPlayerStatisticsScoreData A, struct FSPlayerStatisticsScoreData B );
	int GetResultStatisticsRank ( int USN, unsigned char Type );
	int StatisticsRankSort ( struct FSStatisticsRankData A, struct FSStatisticsRankData B );
	unsigned char GetHighestResultStatisticsType ( );
	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_GameResult_HeroStatistics::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameResult_PVE
// 0x0008 (0x03AC - 0x03A4)
class USFGFxDialog_GameResult_PVE : public USFGFxDialog_GameResultBase
{
public:
	int                                                PrevPveLevelCount;                                		// 0x03A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTPReward : 1;                                    		// 0x03A8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72249 ];

		return pClassPointer;
	};

	void OnAddedBuddy ( struct FString strCodeName );
	struct FString GetRankImageByUserResult ( struct FSUserResult user_result );
	void ASSetFriendAddHelp ( int Number );
	void ASSetPvEScore ( int last_wave, int team_score );
	void ASSetPVEPlayerResults ( class UGFxObject* List );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	int GetAvailablePveLevels ( );
	void UpdatePlayerResults ( );
	void UpdatePVEScore ( );
	void InitializePVEResult ( );
};

UClass* USFGFxDialog_GameResult_PVE::pClassPointer = NULL;

// Class SFGame.SFMapBrief
// 0x0024 (0x0060 - 0x003C)
class USFMapBrief : public UObject
{
public:
	TArray< struct FSMapCaption >                      Captions;                                         		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSPvEDifficultyUIInfo >             PVELevelList;                                     		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FNoChallengeLevel >                 NoChallengeLevelList;                             		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72304 ];

		return pClassPointer;
	};

	int GetNoChallengeDefaultLevel ( int MapID );
	bool IsInNoChallengeLevelList ( int MapID );
	bool GetMapDifficultyList ( struct FString MapName, TArray< struct FSPvEDifficultyUIInfo >* OutPVELevelList );
	bool GetMapCaptions ( struct FString MapName, TArray< struct FSMapCaption >* OutCaptions );
};

UClass* USFMapBrief::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_GameResult_Me
// 0x0028 (0x0230 - 0x0208)
class USFGFxLobbyPart_GameResult_Me : public USFGFxLobbyPart_GameResult
{
public:
	struct FString                                     strRankingUpMessage;                              		// 0x0208 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strRankingDownMessage;                            		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                MaxShowKillIcon;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           KillFeedBackArray;                                		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72328 ];

		return pClassPointer;
	};

	void ClampKillFeedBackArray ( TArray< struct FString > InArray, TArray< struct FString >* OutArray );
	void SetCombatGrade ( );
	void SetPersonalRanking ( );
	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_GameResult_Me::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_GameResult_Zombie
// 0x0000 (0x03AC - 0x03AC)
class USFGFxDialog_GameResult_Zombie : public USFGFxDialog_GameResult_PVE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72329 ];

		return pClassPointer;
	};

};

UClass* USFGFxDialog_GameResult_Zombie::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_InGameEvent
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_InGameEvent : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72331 ];

		return pClassPointer;
	};

};

UClass* USFGFxDialog_InGameEvent::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeWeaponSet
// 0x0004 (0x0178 - 0x0174)
class USFItem_Func_ChangeWeaponSet : public USFItem_Functional_Weap
{
public:
	int                                                WeaponSetIndex;                                   		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72503 ];

		return pClassPointer;
	};

	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ChangeWeaponSet::pClassPointer = NULL;

// Class SFGame.SFItem_Func_MagazineUp
// 0x002C (0x01A0 - 0x0174)
class USFItem_Func_MagazineUp : public USFItem_Functional_Weap
{
public:
	int                                                TargetWeaponGroup;                                		// 0x0174 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            TargetWeaponGroups;                               		// 0x0178 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FString >                           TargetWeaponName;                                 		// 0x0184 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                AddedMagazine;                                    		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConstantMagazine;                                 		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxMagazine;                                      		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFillAllAmmo : 1;                                 		// 0x019C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72514 ];

		return pClassPointer;
	};

	bool CanPurchaseInGameStore ( class ASFPawn* ApplidedPawn );
	bool IsMaxAmmoCountInMgz ( class ASFWeapon* TargetWeapon );
	void ApplyItemToHostActor ( class AActor* AppliedActor );
	void GetMatchedWeaponList ( class ASFPawn* ApplidedPawn, TArray< class ASFWeapon* >* OutWeaponList );
	void ApplyWeapon ( class ASFWeapon* TargetWeapon );
};

UClass* USFItem_Func_MagazineUp::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ItemRepair
// 0x0020 (0x02F0 - 0x02D0)
class USFGFxDialog_ItemRepair : public USFGFxDialog_Repair
{
public:
	struct FsReservedData                              ReservedData;                                     		// 0x02D0 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72537 ];

		return pClassPointer;
	};

	void ASSetItemRepairDialog ( int X, int Y, struct FString MySp, struct FString NeedSp, struct FString msg, struct FString WeaponName, struct FString WeaponImg, int RepairGauge, struct FString CouponSP );
	void SetItemRepairDialog ( int X, int Y, struct FString MySp, struct FString NeedSp, struct FString msg, struct FString WeaponName, struct FString WeaponImg, int RepairGauge, struct FQWord ItemSN, int CouponID, struct FString CouponCount );
	void OnUseItemSuccess ( );
	void CouponOKButtonPress ( );
	int OKButtonPress ( );
};

UClass* USFGFxDialog_ItemRepair::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Navi
// 0x0268 (0x05BC - 0x0354)
class USFGFxLobby_Navi : public USFGFxLobbyScreenEx
{
public:
	class UGFxClikWidget*                              btnTopEnv;                                        		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnTopExit;                                       		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnTopEvent;                                      		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnGasha;                                         		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnShop;                                          		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnInven;                                         		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnClan;                                          		// 0x036C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMyInfo;                                        		// 0x0370 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnBack;                                          		// 0x0374 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMiniGame;                                      		// 0x0378 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCombine;                                       		// 0x037C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnTopSerial;                                     		// 0x0380 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnLP;                                            		// 0x0384 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnTopDeclare;                                    		// 0x0388 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnTDPEvent;                                      		// 0x038C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              mcReward;                                         		// 0x0390 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnEnchant;                                       		// 0x0394 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnClanLeague;                                    		// 0x0398 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnFeverTime;                                     		// 0x039C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RewardItemList;                                   		// 0x03A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RewardItembtnOk;                                  		// 0x03A4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnSelected;                                      		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnFaceBook;                                      		// 0x03AC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnAllModify;                                     		// 0x03B0 (0x0004) [0x0000000000000000]              
	int                                                LastLobbyViewIndex;                               		// 0x03B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayerInfoReceived : 1;                          		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRollOverUnitSelectArea : 1;                      		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRollOverPreviewArea : 1;                         		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowUnitSelectUI : 1;                            		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowWeaponRepaitUI : 1;                          		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowWeaponRepaitRate : 1;                        		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowWeaponSetSelectUI : 1;                       		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bShowWeaponPerformGraph : 1;                      		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShowWeaponPerformGraphForce : 1;                 		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bForceSendedtoServerInven : 1;                    		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bClickedCustomView : 1;                           		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCustomViewDisableLobbyScreen : 1;                		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bClickedOpenEventList : 1;                        		// 0x03B8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bUseShopDiffWidget : 1;                           		// 0x03B8 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned long                                      bUseGachaDiffWidget : 1;                          		// 0x03B8 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bIsSerialBtnEnable : 1;                           		// 0x03B8 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bIsClanBtnDisable : 1;                            		// 0x03B8 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bIsGashaBtnDisable : 1;                           		// 0x03B8 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bIsCouponBtnDisable : 1;                          		// 0x03B8 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bIsAlbumBtnDisable : 1;                           		// 0x03B8 (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      bIsCommunityBtnDisable : 1;                       		// 0x03B8 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bIsCustomViewBtnDisable : 1;                      		// 0x03B8 (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      bIsModifyAllBtnVisible : 1;                       		// 0x03B8 (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      bIsTopEventDisable : 1;                           		// 0x03B8 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      IsTDPEventBtnDisable : 1;                         		// 0x03B8 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bEnableGashaInRoom : 1;                           		// 0x03B8 (0x0004) [0x0000000000004000] [0x02000000] ( CPF_Config )
	unsigned long                                      bClanMarkToolTip : 1;                             		// 0x03B8 (0x0004) [0x0000000000004000] [0x04000000] ( CPF_Config )
	unsigned long                                      bShowCoinBonusBtn : 1;                            		// 0x03B8 (0x0004) [0x0000000000004000] [0x08000000] ( CPF_Config )
	unsigned long                                      bAutoMoving : 1;                                  		// 0x03B8 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bEnableNow : 1;                                   		// 0x03B8 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bBackbtnNow : 1;                                  		// 0x03B8 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bEnvbtnNow : 1;                                   		// 0x03B8 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bSerialbtnNow : 1;                                		// 0x03BC (0x0004) [0x0000000000000000] [0x00000001] 
	struct FRotator                                    LastCharRot;                                      		// 0x03C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     WeaponSocketLoc3DOld;                             		// 0x03CC (0x000C) [0x0000000000000000]              
	struct FString                                     ChannelInfoSrc;                                   		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerRankText;                                   		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AutoMovingNoticeStr;                              		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LuckyPointMessage;                                		// 0x03FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CannotJoinRoomBecause;                            		// 0x0408 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CannotEnterChannelBecause;                        		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     TwitchTVOnMessage;                                		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FQWord                                      ViewingRepairItemSN;                              		// 0x042C (0x0008) [0x0000000000000000]              
	int                                                ViewingWeaponID;                                  		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              SendInvenChangedtoServerTime;                     		// 0x0438 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxMovetoChannelRetrycount;                       		// 0x043C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DelayTimeMovetoChannel;                           		// 0x0440 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ExtraRewardTooltipFloatingTime;                   		// 0x0444 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LuckyPointURL;                                    		// 0x0448 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TDPEventURL;                                      		// 0x0454 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            CustomViewDisableLobbyScreenList;                 		// 0x0460 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           DevTestMsg;                                       		// 0x046C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DevTestMsgCount;                                  		// 0x0478 (0x0004) [0x0000000000000000]              
	int                                                MaxClanLeagueTicketCount;                         		// 0x047C (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FsUnitList >                        HasUnits;                                         		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsNaviBtnInfo >                     BtnInfoArray;                                     		// 0x048C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MovetoCallUserCodename;                           		// 0x0498 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nMovetoChanType;                                  		// 0x04A4 (0x0004) [0x0000000000000000]              
	int                                                nMovetoChanNum;                                   		// 0x04A8 (0x0004) [0x0000000000000000]              
	int                                                nMovetoRoomNo;                                    		// 0x04AC (0x0004) [0x0000000000000000]              
	struct FString                                     MovetoPassWord;                                   		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MovetoChannelTrycount;                            		// 0x04BC (0x0004) [0x0000000000000000]              
	int                                                nTryingChannelType;                               		// 0x04C0 (0x0004) [0x0000000000000000]              
	struct FString                                     AutoMoveCallUserCodenameResv;                     		// 0x04C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AutoMoveServerTypeResv;                           		// 0x04D0 (0x0004) [0x0000000000000000]              
	int                                                AutoMoveServerNumResv;                            		// 0x04D4 (0x0004) [0x0000000000000000]              
	int                                                AutoMoveRoomNumResv;                              		// 0x04D8 (0x0004) [0x0000000000000000]              
	struct FString                                     AutoMovePassWordResv;                             		// 0x04DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AdditionalStatusIdx;                              		// 0x04E8 (0x0004) [0x0000000000000000]              
	TArray< struct FsWatingInviteRespond >             WatingInviteResponds;                             		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                WeaponRepaitRate;                                 		// 0x04F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   RepairAllPos;                                     		// 0x04FC (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FTime_t                                     ClanLeagueRemainTime;                             		// 0x0504 (0x0020) [0x0000000000000000]              
	struct FTime_t                                     FeverRemainTime;                                  		// 0x0524 (0x0020) [0x0000000000000000]              
	struct FScriptDelegate                             __OnCharRotStartDelegate__Delegate;               		// 0x0544 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCharRotDelegate__Delegate;                    		// 0x0550 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCharRotEndDelegate__Delegate;                 		// 0x055C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickUnitChangeDelegate__Delegate;            		// 0x0568 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickPreWeponSetChangeDelegate__Delegate;     		// 0x0574 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickNextWeponSetChangeDelegate__Delegate;    		// 0x0580 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickWeaponRepairDelegate__Delegate;          		// 0x058C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRollOverPreviewAreaDelegate__Delegate;        		// 0x0598 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRollOutPreviewAreaDelegate__Delegate;         		// 0x05A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRollOverEmblemDeckDelegate__Delegate;         		// 0x05B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72552 ];

		return pClassPointer;
	};

	bool HandleGameMasterCommand ( struct FString strCommand );
	bool IsDisabledGashaBtn ( );
	void ASSetVisibleFeverTimeBtn ( unsigned long bVisible );
	void ASSetNoticeVisible ( unsigned long bVisible );
	void ASOnFeverNoticeOpen ( );
	void ASSetFeverTimerText ( struct FString Time );
	void ASSetFeverTimeActive ( unsigned long bActive );
	void StopFeverTimer ( );
	void SetFeverRemainTimeReset ( );
	void SetFeverTimer ( struct FSFeverTimeEvent CrrentFeverTimeEvent );
	void SetTxtFeverTime ( );
	void CalculateFeverTimeFormat ( struct FSFeverTimeEvent CrrentFeverTimeEvent );
	void UpdateFeverTime ( );
	void UpdateClanLeague ( );
	void StopClanLeagueTimer ( );
	void UpdateLeagueTicketCount ( unsigned long bClanLeagueParticipation );
	void ASSetClanLeagueActive ( unsigned long bActive );
	void ASSetClanLeagueTicket ( struct FString TicketCount );
	void ASSetClanLeagueTime ( struct FString Time );
	void SetClanLeagueRemainTimeReset ( );
	void StartClanLeagueTimer ( );
	void SetTxtClanLeagueTime ( );
	void CalculateClanLeagueTimeFormat ( );
	void GetCurrentTimeFromServerAtDailySec ( struct FTime_t* CurrentServerTime );
	void ASSetVisibleClanLeague ( unsigned long bShow );
	void SetShowWeaponSetAllRepair ( unsigned long bVisible );
	void ASsetTypeUpScoreMake ( TArray< struct FString > TagName );
	void OnAllModifyButtonPress ( struct FEventData ev );
	int GetChekedCustomUnitItemID ( );
	void AsToSendsetCustomViewCheck ( struct FString IsCheck );
	void SetCustomviewBtnPress ( unsigned long IsClick );
	void OnTDPEventButtonPress ( struct FEventData ev );
	void OnDeclareButtonPress ( struct FEventData ev );
	void PKT_GetTestDevMsg_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetTestDevMsg_REQ_OK ( class UPacket* recvPacket );
	void ASSetNaviReserveArmorInfoPointValueOver ( struct FString DefenceUp, struct FString SpeedUp, struct FString LuckyUp, struct FString ClanPointUp );
	void PKT_UseGashacouponNotifyMessage_Auto ( class UPacket* recvPacket );
	void ShowTPNoticeMessage ( );
	void OnSetLobbySeason ( );
	void OnKillDeathResetted ( );
	void OnDisguiseRankChanged ( );
	void OnClanMarkChanged ( );
	void OnColorCodeNameChanged ( );
	void OnCodenameChanged ( );
	void PKT_MESSENGER_InviteRepondAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_GameInviteAUTO ( class UPacket* recvPacket );
	void PKT_MESSENGER_GameInvite_REQ_ERROR ( int ErrorID, class UPacket* recvPacket );
	int RecvErrorJoinGameRoom ( int ErrorID, class UPacket* recvPacket );
	int RecvErrorJoinChannel ( int ErrorID, class UPacket* recvPacket );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void PKT_MESSENGER_GameInvite_REQ_OK ( class UPacket* recvPacket );
	void PKT_JoinChannel_REQ_OK ( class UPacket* Packet );
	void FloatExtraRewardTooltip ( float FloatingTime );
	void ClearTimerRetryJoinChannel ( );
	void SetTimerRetryJoinChannel ( );
	void AutoMoveCancel ( struct FEventData ev );
	int GetInviteUSN ( struct FString FollowStr );
	void GameInviteRespondProcess ( int FromUSN );
	void GameInviteRespondPreProcess ( struct FString InvitedStr );
	void GameFollowProcess ( struct FString FollowStr );
	int SetAutoMove ( );
	void ResvAutoMove ( struct FString CodeName, struct FString FollowStr );
	int MoveToRoom ( int roomNo, struct FString PassWD, int TargetWidgetIndex );
	int MoveToChannel ( int ChanType, int ChanNum );
	int MoveToChannelListScreen ( );
	void ClearAutoMove ( );
	int CheckAutoMoving ( );
	void DEBUGAutoMoveto ( struct FString ChanType, struct FString ChanNum, struct FString roomNo, struct FString PassWD );
	int AutoMoveTo ( struct FString CodeName, int ChanType, int ChanNum, int roomNo, struct FString PassWD );
	void SetViewingWeaponID ( int MainWeaponID );
	void UpdateRepairWidget ( struct FQWord ItemSN );
	void CheckForceSendtoServerInven ( );
	int RequestInvenSettingUpdate ( int* nIsChangePreviewChar );
	void ClearRequestInvenSettingUpdateTimer ( );
	void SetRequestInvenSettingUpdateTimer ( );
	void WeaponSetChangeto ( int WeaponSetIndexNxt );
	void WeaponSetChange ( int Dir );
	void UpdateRepairWidgetLocation ( );
	void ClearUpdateRepairWidgetLocationTimer ( );
	void SetUpdateRepairWidgetLocationTimer ( );
	void ShowPreviewAreaCharUI ( unsigned long bShow );
	bool IsGameInProgress ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OpenWeaponRepair ( int X, int Y );
	void SetCustomViewCheck ( unsigned long IsCheck );
	void SetShowCustomViewSetSelectUI ( );
	bool CheckCustomViewDisable ( );
	void SetShowWeaponSetSelectUI ( unsigned long bShow );
	void SetShowWeaponRepaitRate ( int* Rate );
	void SetShowWeaponRepaitUI ( unsigned long bShow );
	void SetShowUnitSelectUI ( unsigned long bShow );
	void OnRollOverEmblemDeck ( );
	void OnShowPreviewInfo ( );
	void OnHidePreviewInfo ( );
	void OnRollOutPreviewArea ( int X, int Y );
	void OnRollOverPreviewArea ( );
	void OnClickWeaponRepair ( int X, int Y );
	void OnClickNextWeponSetChange ( );
	void OnClickPreWeponSetChange ( );
	void OnClickUnitChange ( int Idx );
	void SetHasUnits ( );
	void UpdateOwnerServerLocation ( unsigned char NaviImgType );
	void GetRoomSetting ( struct FSRoomSetting* RoomSetting );
	void UpdatePreviewCharacterClanMark ( );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMakeClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinNo ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoin ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void ASSetClanMarkAni ( struct FString ClanMarkAniCode );
	void UpdateClanMark ( );
	void SetUnitMark ( int UnitID );
	void ASSetOffTwitchTV ( );
	void ASSetOnTwitchTV ( struct FString StringTag );
	void OnTwitchTVModeChanged ( unsigned long bSet );
	void OnVideoCaptureModeChanged ( unsigned long bSet, int nErrorType );
	bool IsViewActive ( );
	void OnCharRotEnd ( int xMove );
	void OnCharRot ( int xMove );
	void OnCharRotStart ( int xMove );
	void SetOnRollOverEmblemDeckDelegate ( struct FScriptDelegate InDelegate );
	void OnRollOverEmblemDeckDelegate ( );
	void SetOnRollOutPreviewAreaDelegate ( struct FScriptDelegate InDelegate );
	void OnRollOutPreviewAreaDelegate ( int X, int Y );
	void SetOnRollOverPreviewAreaDelegate ( struct FScriptDelegate InDelegate );
	void OnRollOverPreviewAreaDelegate ( );
	void SetOnClickWeaponRepairDelegate ( struct FScriptDelegate InDelegate );
	void OnClickWeaponRepairDelegate ( int X, int Y );
	void SetOnClickNextWeponSetChangeDelegate ( struct FScriptDelegate InDelegate );
	void OnClickNextWeponSetChangeDelegate ( );
	void SetOnClickPreWeponSetChangeDelegate ( struct FScriptDelegate InDelegate );
	void OnClickPreWeponSetChangeDelegate ( );
	void SetOnClickUnitChangeDelegate ( struct FScriptDelegate InDelegate );
	void OnClickUnitChangeDelegate ( int indx );
	void SetOnCharRotRightEndDelegate ( struct FScriptDelegate InDelegate );
	void SetOnCharRotRightDelegate ( struct FScriptDelegate InDelegate );
	void SetOnCharRotRightStartDelegate ( struct FScriptDelegate InDelegate );
	void SetOnCharRotLeftEndDelegate ( struct FScriptDelegate InDelegate );
	void SetOnCharRotLeftDelegate ( struct FScriptDelegate InDelegate );
	void SetOnCharRotLeftStartDelegate ( struct FScriptDelegate InDelegate );
	void OnCharRotEndDelegate ( int xMove );
	void OnCharRotDelegate ( int xMove );
	void OnCharRotStartDelegate ( int xMove );
	void ASSetGashaCount ( );
	void ASSetCommunityDisabled ( unsigned long bDisabled );
	void ASSetAlbumDisabled ( unsigned long bDisabled );
	void ASSetPlayerExtraRewardCoin ( float guage, int Coin, int CoinState );
	void AsSetSnowDecoVisible ( unsigned long bVisible );
	void ASSetEmblemDate ( unsigned long alert, struct FString rest_days, unsigned long Show );
	void ASSetPersonalMark ( struct FString strPersonalMark );
	void ASHideUnitSelectUI ( );
	void ASShowUnitSelectUI ( );
	void ASHideRepairGraphUI ( );
	void ASShowRepairGraphUI ( );
	void ASHideWeaponSetChangeUI ( );
	void ASShowWeaponSetChangeUI ( );
	void ASPreviewAreaMOuseEventOFF ( );
	void ASPreviewAreaMOuseEventON ( );
	void ASSetWeaponRepairGraphLoc ( int X, int Y );
	void ASSetWeaponRepairGraph ( int No, struct FString DayWarning, struct FString RestDays );
	void ASSetChangedWeaponSet ( struct FString Str );
	void ASSetHasUnitList ( int N, TArray< struct FString > Units );
	void ASSetPlayerStatGraph ( struct FString LuckyPoint, struct FString Armor, struct FString Speed, struct FString ClanPoint, struct FString Jump, struct FString HP, struct FString Swap, struct FString Reload );
	void ASSetServerLocation ( int NaviImgType, struct FString ServerStr, struct FString ChannelStr );
	void ASSetItemLuckyPointDownAnimInfo ( struct FString RemovePoint );
	void ASSetItemLuckyPointUpAnimInfo ( struct FString AddPoint, int Idx );
	void ASSetClanMarkEffect ( int IndexType );
	void ASSetItemLuckyPoint ( struct FString LuckyPoint );
	void ASSetClanMark ( struct FString ClanMark );
	void ASSetUnitMark ( struct FString UnitIconName );
	void ASSetPlayerExpGage ( int nPerc );
	void ASSetPlayerCodeName ( struct FString strCodeName );
	void ASSetPlayerRankText ( int DisguiseRank );
	void ASSetPlayerRank ( int DisguiseRank );
	void UpdateMyExtraRewardInfo ( unsigned long bFloatTooltip );
	void UpdateProfileEmblem ( );
	void ASSetNoticeLuckyPoint ( unsigned long bEnable );
	void UpdateLuckyPoint ( );
	void PKT_GetLuckyPoint_REQ_OK ( class UPacket* recvPacket );
	void OnRankUp ( );
	void UpdateMyPlayerInfo ( );
	bool IsNotSupportMiniGame ( );
	bool IsPlayerInRoom ( );
	void OnLPBtnPress ( struct FEventData ev );
	void EnableAllNaviButton ( int nEnable, int nBackbtn, int nEnvbtn, int nSerialbtn );
	int BackProcess ( );
	void SetBacktoNaviButton ( );
	void OnBackPress ( struct FEventData ev );
	int MyInfoPress ( );
	void OnMyInfoPress ( struct FEventData ev );
	int MiniGamePress ( );
	void OnMiniGamePress ( struct FEventData ev );
	int CombinePress ( );
	void OnCombinePress ( struct FEventData ev );
	int ClanPress ( int CSN, unsigned long bIsInvite );
	void OnClanPress ( struct FEventData ev );
	void OpenGashaOrgelBox ( int ItemId );
	int GashaPress ( );
	void OnGashaPress ( struct FEventData ev );
	int InventoryPress ( );
	void OnInventoryPress ( struct FEventData ev );
	int ItemShopPress ( );
	void OnItemShopPress ( struct FEventData ev );
	int Enchantpress ( );
	void OnEnchantButtonPress ( struct FEventData ev );
	int FeverTimeBtnPress ( );
	void OnFeverTimeButtonPress ( struct FEventData ev );
	int ClanLeaguePress ( );
	void OnClanLeagueButtonPress ( struct FEventData ev );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	int NavigationButtonSelected ( class UGFxClikWidget* btn );
	void UpdateNavigationButton ( class UClass* ScreenClass );
	void SetBacktoButton ( int PrevScreen );
	void OnClickBtnUseCoinBonus ( int CoinCount );
	void ASSetVisibleAddCompenMc ( unsigned long bVisible );
	void HideRoomVipInfo ( );
	void ShowRoomVipInfo ( struct FString Vipmark, struct FString AddSP, struct FString AddEXP );
	void OpenFacebookWebPage ( );
	void OnFacebookButtonPress ( struct FEventData ev );
	void OnEventPress ( struct FEventData ev );
	void OnExitgamePress ( struct FEventData ev );
	void OnSerialPress ( struct FEventData ev );
	void OnSystemSettingPress ( struct FEventData ev );
	void ASSetCommunityNewIcon ( );
	void OnOKButtonPress ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void ASSetNewIconVisible ( class UGFxClikWidget* btn, unsigned long bVisible );
	void ASSetClanMarkOnOff ( unsigned long bRender );
	void SetNewIconVisible ( unsigned char Type, unsigned long bVisble );
	void SetNewIcons ( );
	void SetEnchantBtnVisible ( unsigned long bVisible );
	void SetInitChat ( );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_Navi::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_ItemResell
// 0x0050 (0x0298 - 0x0248)
class USFGFxDialog_ItemResell : public USFGFxDialog
{
public:
	float                                              ResellPriceRatio;                                 		// 0x0248 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ResellPriceErrorMessage;                          		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FQWord                                      ResellItemSN;                                     		// 0x0258 (0x0008) [0x0000000000000000]              
	struct FString                                     ResellItemType;                                   		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ResellItemCount;                                  		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOpenReconfirmDialog : 1;                         		// 0x0278 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDeleteItemServerSetting : 1;                     		// 0x0278 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	class UGFxClikWidget*                              btnConfirmOK;                                     		// 0x027C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnConfirmCancel;                                 		// 0x0280 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnConfirmClose;                                  		// 0x0284 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ResellNumbericMC;                                 		// 0x0288 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnRequestResellItemDelegate__Delegate;          		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72577 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	int SetResellConfirmCancel ( );
	int SetResellConfirmOK ( );
	void OnConfirmCloseBtnPress ( struct FEventData ev );
	void OnConfirmCancelBtnPress ( struct FEventData ev );
	void OnConfirmOKBtnPress ( struct FEventData ev );
	int OKButtonPress ( );
	int GetResellSavingSP ( int ItemId );
	int GetNotUsedItemCount ( int ItemId );
	void SetItem ( int X, int Y, int ItemId, struct FQWord ItemSN, int DialogType );
	void OnRequestResellItemDelegate ( struct FQWord ItemSN, struct FString ItemType, int ItemCount );
	void ASOpenReconfirmDialog ( unsigned long bOpen );
	void ASSetSellDialogContext ( int X, int Y, struct FString RecvSP, struct FString context, struct FString WeaponName, struct FString WeaponImg, int DialogType, int NumberStepValue, struct FString ItemImageType );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_ItemResell::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_MatchingFound
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_MatchingFound : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72652 ];

		return pClassPointer;
	};

};

UClass* USFGFxDialog_MatchingFound::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_MsgrChat
// 0x0088 (0x02D0 - 0x0248)
class USFGFxDialog_MsgrChat : public USFGFxDialog
{
public:
	class UGFxObject*                                  ChatCreatedMC;                                    		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ChatDlgMC;                                        		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChattingList;                                     		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TxtTitle;                                         		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TxtIsOff;                                         		// 0x0258 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnMinimize;                                      		// 0x025C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnTaskBar;                                       		// 0x0260 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  BtnTaskBarAni;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsMinimized : 1;                                 		// 0x0268 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsOpenedByRecv : 1;                              		// 0x0268 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bButtonFlashOn : 1;                               		// 0x0268 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUse24Hour : 1;                                   		// 0x0268 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	int                                                ChatDlgIndex;                                     		// 0x026C (0x0004) [0x0000000000000000]              
	int                                                ContactUSN;                                       		// 0x0270 (0x0004) [0x0000000000000000]              
	struct FString                                     ContactCodeName;                                  		// 0x0274 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ContactNametagImage;                              		// 0x0280 (0x0004) [0x0000000000000000]              
	struct FString                                     strBuddyOffline;                                  		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBuddyOnline;                                   		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChattingTitleMessage;                             		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     str24Time;                                        		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strTimePM;                                        		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strTimeAM;                                        		// 0x02C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              PrevChatSendTime;                                 		// 0x02CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72654 ];

		return pClassPointer;
	};

	void OnMsgrBuddyCodeNameChanged ( int InChangedCodeNameUSN, struct FString InChangedCodeName );
	struct FString GetChatShowTimeStamp ( struct FString InTimeStamp );
	bool GetIsOpened ( );
	void SetButtonFlash ( unsigned long bTurnOn );
	void ASClearMsgrChatMessage ( );
	void ASRemoveMsgrChatMessage ( );
	void ASAddMsgrChatMessage ( int nLineIndex, class UGFxObject* ChatObject );
	int AddMsgrChatMessage ( int nIndex, struct FSChatMsgInfo MsgrChatMsg );
	void ShowMsgrChatMsgList ( unsigned long bAll );
	void NotifyMsgrChatMessageSended ( );
	void OnChatMsgAdded ( );
	void SendMsgrChatMessage ( struct FString InChatMsg );
	bool GetFocustoChatBox ( );
	int SetFocustoChatBox ( );
	bool OnEnterPressedWithChatting ( struct FString strInChatMsg );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ForceHide ( );
	bool IsViewActive ( );
	void SetActiveDialog ( );
	void UpdateMinimized ( );
	bool GetIsOpenedByRecv ( );
	void SetIsOpenedByRecv ( unsigned long bRecvOpen );
	bool GetMinimized ( );
	void SetMinimized ( unsigned long bMinimized );
	void ClearDialogMessage ( );
	void ResetDialogMessage ( int NewContactUSN );
	void OnFriendListUpdated ( );
	void SetTitleMessage ( );
	void UpdateContactCodeName ( );
	void InitDialogMessage ( );
	void ASHideChatDlg ( );
	void ASShowChatDlg ( );
	void OnCloseButtonPress ( struct FEventData ev );
	void OnTaskBarBtnPress ( struct FEventData ev );
	void OnMinimizeBtnPress ( struct FEventData ev );
	bool IsAllWidgetInitialized ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
	void OnViewLoaded ( );
};

UClass* USFGFxDialog_MsgrChat::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_PackagePreview
// 0x0000 (0x02B8 - 0x02B8)
class USFGFxDialog_PackagePreview : public USFGFxDialog_FuncUseDefault
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72790 ];

		return pClassPointer;
	};

	void ASSetUseDialogInfo ( );
	void RequsetSetUseGift ( );
	void RequsetSetOpenItem ( );
	void RequsetSetUseItem ( );
	void ProcessUseItem ( );
};

UClass* USFGFxDialog_PackagePreview::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Password
// 0x001C (0x0264 - 0x0248)
class USFGFxDialog_Password : public USFGFxDialog
{
public:
	class USFGFxClickWidget_NumericOnly*               PWTextInput;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PWMsg;                                            		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PWTitle;                                          		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputPasswordText;                                		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FString                                     strPW;                                            		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72805 ];

		return pClassPointer;
	};

	struct FString GetPassword ( );
	void PresetPassWord ( struct FString pass );
	void OnViewActivated ( int PrevIndex );
	void OnViewClosed ( int NextIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_Password::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_RecycleResult
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_RecycleResult : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72837 ];

		return pClassPointer;
	};

	void ASSetRecycleResultItemData ( class UGFxObject* ItemData );
	void SetRewardItem ( int ItemId, struct FString Rank );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_RecycleResult::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_RookieChannel
// 0x0020 (0x0268 - 0x0248)
class USFGFxDialog_RookieChannel : public USFGFxDialog
{
public:
	struct FString                                     strMessage1;                                      		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMessage2;                                      		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              btnChkLater;                                      		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                nRookieChannelNoticeDays;                         		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72857 ];

		return pClassPointer;
	};

	void ASSetDialogText ( struct FString str1, struct FString str2 );
	void OnChkBtnClik ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_RookieChannel::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_Serial
// 0x0050 (0x0298 - 0x0248)
class USFGFxDialog_Serial : public USFGFxDialog
{
public:
	class UGFxClikWidget*                              ImageAreaBtn;                                     		// 0x0248 (0x0004) [0x0000000000000000]              
	struct FString                                     SerialPopupTitle;                                 		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SerialExcess;                                     		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SerialSendTimeExcess;                             		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                btnSendTimeDelay;                                 		// 0x0270 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CurrentIndex;                                     		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                registBtnCount;                                   		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              PrevSerialSendTime;                               		// 0x027C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnbtnAreaIndexDelegate__Delegate;               		// 0x0280 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDialogSerialRegistButtonClickDelegate__Delegate;		// 0x028C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72886 ];

		return pClassPointer;
	};

	void ASSetPressSerialText ( );
	void ASSetSerialADImage ( TArray< struct FString > ImageArray );
	void ASSetTitleText ( struct FString Title );
	void SetSerialImage ( );
	void SetOnDialogSerialRegistButtonClickDelegate ( struct FScriptDelegate InDelegate );
	void OnDialogSerialRegistButtonClickDelegate ( struct FString serial );
	void SetOnbtnAreaIndexDelegate ( struct FScriptDelegate InDelegate );
	void OnbtnAreaIndexDelegate ( int Index );
	void OnbtnAreaIndex ( int Index );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void OnSerialNumberRegist ( struct FString inSerial );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnViewClosed ( int NextIndex );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_Serial::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_SpectatorDeco
// 0x0048 (0x0300 - 0x02B8)
class USFGFxDialog_SpectatorDeco : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              InputCommentWidget;                               		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  InputCommentTextField;                            		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultMessage;                                   		// 0x02C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CommentFilterMessage;                             		// 0x02CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CommentLengthMin;                                 		// 0x02D8 (0x0004) [0x0000000000008002]              ( CPF_Const | CPF_Localized )
	struct FString                                     SendProperty;                                     		// 0x02DC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsSpectatorSettingData                      SpectatorSettingData;                             		// 0x02E8 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 72943 ];

		return pClassPointer;
	};

	void RequsetSetUseItem ( );
	void spectatorDeco_OnSubmitBtnClick ( struct FString ImageSet, struct FString Comment, int StyleNum, int CommentColor, unsigned long bFlicker );
	struct FString SetSpectatorSettingData ( );
	void ASSpectatorDialogInfo ( struct FString ImageSet, struct FString ItemName, struct FString Content, struct FString Comment, int StyleNum, int CommentColor, TArray< struct FString > ColorArray, unsigned long bFlicker, unsigned long IsPreview );
	void ASCommentCheck ( int FilteringType, struct FString FilterComment );
	void OnFucusOutTextInput ( struct FEventData ev );
	void OnFucusInTextInput ( struct FEventData ev );
	void UpdateLastestFiltered ( );
	void CheckComment ( struct FString FilteredComment, struct FString TextboxComment );
	struct FString GetInputTextString ( );
	void InputWaitTimerRanout ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_SpectatorDeco::pClassPointer = NULL;

// Class SFGame.SFItem_Func_SpectatorEnhance
// 0x0014 (0x0188 - 0x0174)
class USFItem_Func_SpectatorEnhance : public USFItem_Functional_UI
{
public:
	int                                                SpectatorItemVersion;                             		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                SpectatorItemVersionCount;                        		// 0x0178 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           SpectatorDecoImageName;                           		// 0x017C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73014 ];

		return pClassPointer;
	};

	int GetDecoImageIndexFromName ( struct FString ImageName );
	void ConvertImageIndexToImageName ( struct FString* ReceiveItemProperty );
	void ApplyItemProperty ( class AActor* AppliedActor, struct FString ReceiveItemProperty );
};

UClass* USFItem_Func_SpectatorEnhance::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_SysSetting
// 0x0070 (0x02B8 - 0x0248)
class USFGFxDialog_SysSetting : public USFGFxDialog
{
public:
	class USFProfileSettings*                          SFProfile;                                        		// 0x0248 (0x0004) [0x0000000000000000]              
	class ASFPlayerController*                         SFPC;                                             		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TitleBar;                                         		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnApply;                                         		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnReset;                                         		// 0x0258 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMainTab;                                       		// 0x025C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  FocusedComboBox;                                  		// 0x0260 (0x0004) [0x0000000000000000]              
	TArray< struct USFGFxDialog_SysSetting_FSCategoryLocalized > MainTabsStrings;                                  		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxDialog_SysSetting_FSCategoryLocalized > MainTabsStringsInGame;                            		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxDialog_SysSetting_FSCategoryLocalized > CategotyString;                                   		// 0x027C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CaptureBottomNoticeText;                          		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxDialog_SysSetting_FSCategorySet > PreCategorySet;                                   		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SpecialKeyMissionToolTip;                         		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpecialKeyHeroToolTip;                            		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73019 ];

		return pClassPointer;
	};

	void SetDetailTabCategory ( TArray< struct USFGFxDialog_SysSetting_FSCategoryLocalized > TabStringArray );
	void ResetTabCategory ( );
	void SetTabCategory ( );
	void ASSetTabWindow ( int TabCode );
	void ASSetDisableKeyModify ( struct FString KeyCode );
	void ASSetEnableKeyModify ( struct FString KeyCode );
	void ASSetFaceboolOnlineStatus ( int Status );
	void ASSetSpecialKeyToolTipMessage ( );
	void ASHideSpecialKeySetting ( );
	void ASShowSpecialKeySetting ( );
	void ASShowScaleLevelOption ( unsigned long bShow );
	void ASSetEnableModeWeaponKey ( unsigned long bEnable );
	void ASSetEnableSprayKey ( unsigned long bEnable );
	void AsSetCaptureBottomNoticeText ( struct FString NoticeText );
	void ASCloseWarningKey ( );
	void ASOpenWarningFixKey ( );
	void ASOpenWarningDupKey ( );
	void ASKeyBindingSet ( TArray< struct FString > Keys );
	void ASOnKeyChanged ( struct FString Index, struct FString KeyCode );
	void ASMouseMoreClose ( );
	void ASMouseMoreOpen ( );
	void ASSetGraphicQulityIcon ( int Idx, int Icon );
	void ASPlayScaleLevelVideo ( struct FString Filename );
	void ASCloseExtraVideoOptionPopup ( );
	void ASOpenExtraVideoOptionPopup ( );
	void ASSetGameRating ( int IsAdult );
	void ASSetChangedItemCounter ( struct FString num );
	void SetMainTabL10n ( );
	bool UpdateEditBoxValue ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnReset ( struct FEventData ev );
	void OnTabButtonChanged ( struct FEventData ev );
	int GetChangedOptionCount ( unsigned char Part );
	void ApplyOptions ( );
	void OnApplyClicked ( struct FEventData ev );
	void PKT_UserKeyBinding_REQ_OK ( class UPacket* Packet );
	void UpdateChangedOptionCounter ( );
	int OKButtonPress ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_SysSetting::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting_Controll
// 0x00CC (0x02E4 - 0x0218)
class USFGFxLobbyPart_SysSetting_Controll : public USFGFxLobbyPart_SysSetting
{
public:
	class USFGFxClickWidget_NumericOnly*               MouseSensitivityValue;                            		// 0x0218 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               MouseExSensitivityValue;                          		// 0x021C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MouseSensitivitySlider;                           		// 0x0220 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MouseSensitivitySliderThumb;                      		// 0x0224 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MouseExSensitivitySlider;                         		// 0x0228 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MouseExSensitivitySliderThumb;                    		// 0x022C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              UseExSensitivitycb;                               		// 0x0230 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MouseInvertYcb[ 0x2 ];                            		// 0x0234 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              btnExOk;                                          		// 0x023C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnExClose;                                       		// 0x0240 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnExCancel;                                      		// 0x0244 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SprintKeyCheckBox;                                		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              HoldZoomKeyCheckBox;                              		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnSpecialOk;                                     		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnSpecialClose;                                  		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnSpecialCancel;                                 		// 0x0258 (0x0004) [0x0000000000000000]              
	struct FsConrollSetting                            ConrollSettingNow;                                		// 0x025C (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsConrollSetting                            ConrollSettingNew;                                		// 0x0280 (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                UseMouseSensitivityZoom;                          		// 0x02A4 (0x0004) [0x0000000000000000]              
	int                                                MouseSensitivityZoom;                             		// 0x02A8 (0x0004) [0x0000000000000000]              
	int                                                MouseInvertY;                                     		// 0x02AC (0x0004) [0x0000000000000000]              
	unsigned long                                      bExtraMouseSettingDialogActive : 1;               		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSpecialKeyDialogActive : 1;                      		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisableSprayKey : 1;                             		// 0x02B0 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bDisableModeWeaponKey : 1;                        		// 0x02B0 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bUseHoldZoomType : 1;                             		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FString                                     SprintKeyText;                                    		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMoreMouseSettingDelegate__Delegate;           		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnKeyChangeDelegate__Delegate;                  		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSpecialKeyPopUpOpenDlegate__Delegate;         		// 0x02D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73081 ];

		return pClassPointer;
	};

	void OnHoldZoomKeySetClicked ( struct FEventData ev );
	void OnSprintKeySetClicked ( struct FEventData ev );
	void SetUseExSensitivityUI ( int nUseExMouse );
	void ResetKeyTyping ( );
	void CheckChangedOptions ( );
	void MouseMoreOpen ( );
	void UpdateExtraMouseSetting ( );
	void InitExSetting ( );
	bool SpecialKeyPopUpCancelClose ( );
	bool SpecialKeyPopUpClose ( );
	void OnSpecialKeyPopUpOpen ( );
	void OnSpecialKeyCancel ( struct FEventData ev );
	void OnSpecialKeyClose ( struct FEventData ev );
	void OnSpecialKeyOK ( struct FEventData ev );
	int CheckKeyExist ( struct FString UnrealKeyName );
	void OnKeyChange ( int KeyCode, struct FString IndexStr );
	bool MoreMouseClose ( );
	void OnMoreMouseClose ( struct FEventData ev );
	void OnMoreMouseOK ( struct FEventData ev );
	bool OpenExtraMouseSettingPopup ( );
	void SetOnSpecialKeyPopUpOpenDlegate ( struct FScriptDelegate InDelegate );
	void OnSpecialKeyPopUpOpenDlegate ( );
	void SetOnKeyChangeDelegate ( struct FScriptDelegate InDelegate );
	void OnKeyChangeDelegate ( int KeyCode, struct FString Index );
	void SetOnMoreMouseSettingDelegate ( struct FScriptDelegate InDelegate );
	void OnMoreMouseSettingDelegate ( );
	struct FString MakeKeySetString ( TArray< struct FString > KeySetting );
	void ApplySetting ( );
	void UpdateSetting ( struct FsConrollSetting ConrollSetting );
	void ResetSetting ( );
	void InitSetting ( unsigned long forReset );
	void OnMouseInvertYChanged ( struct FEventData ev );
	void OnUseExSensitivityChanged ( struct FEventData ev );
	void OnMouseExSensitivitySlideChanged ( struct FEventData ev );
	void OnMouseSensitivitySlideChanged ( struct FEventData ev );
	bool UpdateEditBoxValue ( );
	void OnTabButtonChange ( int NextUIPart );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_SysSetting_Controll::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting_Video
// 0x0184 (0x039C - 0x0218)
class USFGFxLobbyPart_SysSetting_Video : public USFGFxLobbyPart_SysSetting
{
public:
	class UGFxClikWidget*                              ScreenResCB;                                      		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenTypeCB;                                     		// 0x021C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenGraphicCB;                                  		// 0x0220 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenGammaSlider;                                		// 0x0224 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ScreenGammaSliderThumb;                           		// 0x0228 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               ScreenGammaValue;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              InGameWindowChk[ 0x2 ];                           		// 0x0230 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              LobbyWindowChk[ 0x2 ];                            		// 0x0238 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ResultAutoSave[ 0x2 ];                            		// 0x0240 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              EnemyDefaultUnitChk[ 0x2 ];                       		// 0x0248 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              VerticalSync[ 0x2 ];                              		// 0x0250 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              FrameStability[ 0x2 ];                            		// 0x0258 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              Antialiasing[ 0x2 ];                              		// 0x0260 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              LightSpreadEffectChk[ 0x2 ];                      		// 0x0268 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              DynamicShadowsChk[ 0x2 ];                         		// 0x0270 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              DepthOfFieldChk[ 0x2 ];                           		// 0x0278 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ExploRadialBlurChk[ 0x2 ];                        		// 0x0280 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              IgnoreWindowSwitchingChk[ 0x2 ];                  		// 0x0288 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              UISizeChk[ 0x2 ];                                 		// 0x0290 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              GoreChk[ 0x2 ];                                   		// 0x0298 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              RadarRotation;                                    		// 0x02A0 (0x0004) [0x0000000000000000]              
	struct FsGraphicSetting                            GraphicSettingNew;                                		// 0x02A4 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsGraphicSetting                            GraphicSettingNow;                                		// 0x02F8 (0x0054) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultScreenResolution;                          		// 0x034C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ScreenResList;                                    		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ScreenType;                                       		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bExtraVideoSettingDialogActive : 1;               		// 0x0370 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableWindowModeInLobby : 1;                    		// 0x0370 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bDisableWindowModeInGame : 1;                     		// 0x0370 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bDisableChangeWindow : 1;                         		// 0x0370 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bDisableEnemyDefaultUnit : 1;                     		// 0x0370 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	TArray< struct FString >                           ScreenTypeStr;                                    		// 0x0374 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< unsigned char >                            ScreenTypeList;                                   		// 0x0380 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ScreenGraphicStr;                                 		// 0x038C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                EnableLightEffectLevel;                           		// 0x0398 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73156 ];

		return pClassPointer;
	};

	void OnFocusGraphicComboBox ( struct FEventData ev );
	void OnScreenGraphicFocusIn ( struct FEventData ev );
	void OnScreenGraphicChanged ( struct FEventData ev );
	void SetEnemyDefaultUnitChk ( );
	void SetupScreenResCB ( int InAspectRatioType );
	void SetScaleLevelSlider ( int N );
	int GetResIdxFromResStr ( struct FString ScrRes );
	void CheckChangedOptions ( );
	void OnScaleLevelChanged ( struct FEventData ev );
	void OnResultSaveClicked ( struct FEventData ev );
	void SetGammaCurrent ( );
	void SetGammaForInstance ( float NewGamma );
	bool UpdateEditBoxValue ( );
	void OnScreenGammaSlideChanged ( struct FEventData ev );
	void OnScreenTypeChanged ( struct FEventData ev );
	void OnLobbyWindowChkClicked ( struct FEventData ev );
	void OnEnemyDefaultUnitChkClicked ( struct FEventData ev );
	void OnInGameWindowChkClicked ( struct FEventData ev );
	void OnScreenResChanged ( struct FEventData ev );
	void GetResolutionfromResString ( struct FString VideoResolutions, int* ResX, int* ResY );
	void ApplySetting ( );
	int GetCurrentResolutionIndex ( int ResX, int ResY );
	struct FString GetScaleLevelMovieName ( int nLevel );
	void UpdateGraphicsSetting ( struct FsGraphicSetting GraphicSetting );
	void ResetSetting ( );
	void InitSetting ( unsigned long forReset );
	void OnGoreClicked ( struct FEventData ev );
	void OnIgnoreWindowSwitchingClicked ( struct FEventData ev );
	void OnUISizeClicked ( struct FEventData ev );
	void OnExploRadialBlurClicked ( struct FEventData ev );
	void OnDepthOfFieldClicked ( struct FEventData ev );
	void OnDynamicShadowsClicked ( struct FEventData ev );
	void OnLightSpreadEffectClicked ( struct FEventData ev );
	void OnAntialiasingClicked ( struct FEventData ev );
	void OnFrameStabilityClicked ( struct FEventData ev );
	void OnVerticalSyncClicked ( struct FEventData ev );
	void OnScreenTypeFocusIn ( struct FEventData ev );
	void OnScreenResFocusIn ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void SetScreenItemList ( int Index, class UGFxObject* DataProvider, struct FString Data );
	void SetupScreenTypeCB ( );
	void SetupScreenGraphicCB ( );
};

UClass* USFGFxLobbyPart_SysSetting_Video::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting_Audio
// 0x00C8 (0x02E0 - 0x0218)
class USFGFxLobbyPart_SysSetting_Audio : public USFGFxLobbyPart_SysSetting
{
public:
	class UGFxClikWidget*                              MuteBGM;                                          		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MuteEffect;                                       		// 0x021C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MuteEnv;                                          		// 0x0220 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MuteVoice;                                        		// 0x0224 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               VolumeMasterValue;                                		// 0x0228 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               VolumeBGMValue;                                   		// 0x022C (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               VolumeEffectValue;                                		// 0x0230 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               VolumeEnvValue;                                   		// 0x0234 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               VolumeVoiceValue;                                 		// 0x0238 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeMasterSliderThumb;                          		// 0x023C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeBGMSliderThumb;                             		// 0x0240 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeEffectSliderThumb;                          		// 0x0244 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeEnvSliderThumb;                             		// 0x0248 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeVoiceSliderThumb;                           		// 0x024C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeMasterSlider;                               		// 0x0250 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeBGMSlider;                                  		// 0x0254 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeEffectSlider;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeEnvSlider;                                  		// 0x025C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VolumeVoiceSlider;                                		// 0x0260 (0x0004) [0x0000000000000000]              
	class USFSoundGroup_UX*                            AudioSampleSoundGroup;                            		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FsSoundSetting                              SoundSettingNow;                                  		// 0x0268 (0x0028) [0x0000000000000000]              
	struct FsSoundSetting                              SoundSettingNew;                                  		// 0x0290 (0x0028) [0x0000000000000000]              
	struct FsSoundSetting                              SoundSettingOld;                                  		// 0x02B8 (0x0028) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73157 ];

		return pClassPointer;
	};

	void CheckChangedOptions ( );
	void ApplySetting ( );
	void ResetSetting ( );
	void UpdateSetting ( struct FsSoundSetting SoundSetting );
	void InitSetting ( unsigned long forReset );
	bool UpdateEditBoxValue ( );
	void RePlayVolumeSampleSound ( struct FName EventName );
	void StopVolumeSampleSound ( struct FName EventName );
	void PlayVolumeSampleSound ( struct FName EventName );
	void StopAllVolumeTestSound ( struct FsSoundSetting SoundSetting );
	void ApplyVolumes ( struct FsSoundSetting SoundSetting );
	void OnVolumeVoiceChanged ( struct FEventData ev );
	void OnVolumeVoiceEditEnd ( struct FEventData ev );
	void OnVolumeVoiceEditStart ( struct FEventData ev );
	void SetVolumeVoiceEnable ( unsigned long bEnable );
	void OnMuteVoiceChanged ( struct FEventData ev );
	void OnVolumeEnvChanged ( struct FEventData ev );
	void OnVolumeEnvEditEnd ( struct FEventData ev );
	void OnVolumeEnvEditStart ( struct FEventData ev );
	void SetVolumeEnvEnable ( unsigned long bEnable );
	void OnMuteEnvChanged ( struct FEventData ev );
	void OnVolumeEffectChanged ( struct FEventData ev );
	void OnVolumeEffectEditEnd ( struct FEventData ev );
	void OnVolumeEffectEditStart ( struct FEventData ev );
	void SetVolumeEffectEnable ( unsigned long bEnable );
	void OnMuteEffectChanged ( struct FEventData ev );
	void OnVolumeBGChanged ( struct FEventData ev );
	void OnVolumeBGMEditEnd ( struct FEventData ev );
	void OnVolumeBGMEditStart ( struct FEventData ev );
	void SetVolumeBGMEnable ( unsigned long bEnable );
	void OnMuteBGMChanged ( struct FEventData ev );
	void OnVolumeMasterEditEnd ( struct FEventData ev );
	void OnVolumeMasterEditStart ( struct FEventData ev );
	void OnVolumeMasterChanged ( struct FEventData ev );
	void OnTabButtonChange ( int NextUIPart );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_SysSetting_Audio::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting_Whisper
// 0x0028 (0x0240 - 0x0218)
class USFGFxLobbyPart_SysSetting_Whisper : public USFGFxLobbyPart_SysSetting
{
public:
	class UGFxClikWidget*                              ChkTotalBlockWhisper[ 0x2 ];                      		// 0x0218 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ChkNormalBlockWhisper[ 0x2 ];                     		// 0x0220 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ChkFriendBlockWhisper[ 0x2 ];                     		// 0x0228 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ChkClanBlockWhisper[ 0x2 ];                       		// 0x0230 (0x0008) [0x0000000000000000]              
	struct FSWhisperSettingInfo                        DefaultSetting;                                   		// 0x0238 (0x0004) [0x0000000000000000]              
	struct FSWhisperSettingInfo                        CurrentSetting;                                   		// 0x023C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73158 ];

		return pClassPointer;
	};

	void UpdateBlockWhisperCheckBox ( );
	void OnClanMemberBlockChanged ( struct FEventData ev );
	void OnFriendBlockChanged ( struct FEventData ev );
	void OnGeneralBlockChanged ( struct FEventData ev );
	void SetAllBlockCheckBox ( unsigned long bAllBlock );
	void SetAllBlock ( unsigned long bAllBlock );
	bool GetCurrentAllBlockState ( );
	void OnAllBlockChanged ( struct FEventData ev );
	void UpdateSettingBlockWhisperState ( struct FSWhisperSettingInfo SettingInfo );
	void ApplySetting ( );
	void CheckChangedOptions ( );
	void UpdateSettingUI ( );
	void UpdateDefaultSetting ( );
	void InitSetting ( unsigned long forReset );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_SysSetting_Whisper::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_SystemMessage
// 0x000C (0x0254 - 0x0248)
class USFGFxDialog_SystemMessage : public USFGFxDialog
{
public:
	TArray< struct FSSystemMessage >                   SystemMessageArray;                               		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73159 ];

		return pClassPointer;
	};

	void ASHideSystemMessage ( );
	void ASShowSystemMessage ( struct FString strMessage, int nTime );
	void HideSystemMessage ( );
	void ShowSystemMessage ( );
	void AddSystemMessage ( struct FString strMessage, int nTime );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_SystemMessage::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_TagSystem
// 0x011C (0x0364 - 0x0248)
class USFGFxDialog_TagSystem : public USFGFxDialog
{
public:
	struct FString                                     DialogTitle;                                      		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CenterText;                                       		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BottomText;                                       		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           QuestionText;                                     		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           SelectText;                                       		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CheckingText;                                     		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RightText;                                        		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WrongText;                                        		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AgreeText;                                        		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsAutoCompleteList >                AutoCompleteList;                                 		// 0x02B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FsAutoCompleteList                          SelectData[ 0x3 ];                                		// 0x02C0 (0x0048) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              AnswerEditBoxWidget[ 0x3 ];                       		// 0x0308 (0x000C) [0x0000000000000000]              
	class UGFxClikWidget*                              ListBoxScrollWidget;                              		// 0x0314 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              DropDownButtonWidget[ 0x3 ];                      		// 0x0318 (0x000C) [0x0000000000000000]              
	class UGFxClikWidget*                              AgreeCheckBtn;                                    		// 0x0324 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  TextMC[ 0x3 ];                                    		// 0x0328 (0x000C) [0x0000000000000000]              
	int                                                SelectType;                                       		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                TotalRecvCount;                                   		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                KeySelectNumber;                                  		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                TextLimitCount;                                   		// 0x0340 (0x0004) [0x0000000000000000]              
	struct FString                                     SearchKeyword;                                    		// 0x0344 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     CodeName;                                         		// 0x0350 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      IsListBoxShow : 1;                                		// 0x035C (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                TagCount;                                         		// 0x0360 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73180 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	void RecvDataCheckTimerFunction ( );
	void InputWaitTimerRanoutOfTagSystem ( );
	void OnTextChanged ( struct FEventData ev );
	void OnFreeTextEditBoxFocusIn ( struct FEventData ev );
	void OnHighSchoolEditBoxFocusIn ( struct FEventData ev );
	void OnLocalEditBoxFocusIn ( struct FEventData ev );
	void SelectListbox ( int Index );
	void UpdateOKBtnEnable ( );
	void OnClickAgreeCheckButton ( struct FEventData ev );
	void OnClickListBox ( struct FEventData ev );
	void OnHideListBox ( struct FEventData ev );
	void OnShowListBox ( struct FEventData ev );
	void OnRollOverListBox ( struct FEventData ev );
	void OnTextInputFocusIn ( struct FEventData ev );
	void OnTextInputFocusOut ( struct FEventData ev );
	void OnClickDropDownButton ( struct FEventData ev );
	void ASSetAlert ( int ControlNumber, int IconMode, struct FString AlertMessage, unsigned long IsShow );
	void ASSetListBoxItemList ( int ShowControlNumber, class UGFxObject* item_list );
	void SetListBoxItemList ( int Index, class UGFxObject* DataProvider, struct FString Data );
	void SetEditboxFocus ( );
	void SetComboBoxData ( int TagType );
	void ASSetAgreeText ( struct FString strAgreeText );
	void ASSetQuestionText ( );
	void ASSetBottomText ( struct FString SettingText );
	void ASSetCenterText ( struct FString SettingText );
	void ASSetDialogTitle ( struct FString SettingText );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void PKT_SetGroupTag_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetGroupTagLis_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGroupTagLis_REQ_OK ( class UPacket* recvPacket );
	void RequestSetGroupTag ( int LocalTagID, int HighSchoolTagID, int ArmyTagID );
	void SendToServerRequstAutoCompleteList ( int TagType, struct FString SearchText );
	void InputWaitTimerClearOfTagSystem ( );
	struct FString InputWaitTimerResetOfTagSystem ( class UGFxClikWidget* InInputText );
	void SetDialogMsgText ( struct FString strMsg );
	struct FString ReplaceAutoComplete ( struct FString OriginalText );
	struct FString ReplaceCodeName ( struct FString OriginalText );
	int CancelButtonPress ( );
	int OKButtonPress ( );
	void DelegateSetup ( );
	void ResetData ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_TagSystem::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseCamo
// 0x00D0 (0x0388 - 0x02B8)
class USFGFxDialog_UseCamo : public USFGFxDialog_FuncUseDefault
{
public:
	int                                                RowSize;                                          		// 0x02B8 (0x0004) [0x0000000000000000]              
	int                                                SelectedItemIdx;                                  		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                SelectedWeaponID;                                 		// 0x02C0 (0x0004) [0x0000000000000000]              
	struct FQWord                                      SelectedWeaponISN;                                		// 0x02C4 (0x0008) [0x0000000000000000]              
	TArray< int >                                      WeaponCamoMCItemArray;                            		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRotator                                    rRotLast;                                         		// 0x02D8 (0x000C) [0x0000000000000000]              
	struct FString                                     GFxName;                                          		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strWaringMessage;                                 		// 0x02F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strPrecautionMessage;                             		// 0x02FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strRemovalPrecautionMessage;                      		// 0x0308 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShouldRemove : 1;                                		// 0x0314 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< struct USFGFxDialog_UseCamo_FsCamouseWeaponList > DisplayWeapons;                                   		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASceneCapture2DActor*                        ViwingCamera;                                     		// 0x0324 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnItemClickedDelegate__Delegate;                		// 0x0328 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemDblClickedDelegate__Delegate;             		// 0x0334 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreviewRotationStartDelegate__Delegate;       		// 0x0340 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreviewRotationDelegate__Delegate;            		// 0x034C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreviewRotationEndDelegate__Delegate;         		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreviewZoomDeltaDelegate__Delegate;           		// 0x0364 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ItemListSortByItemIDDelegate__Delegate;         		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ItemListSortByItemTypeDelegate__Delegate;       		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73505 ];

		return pClassPointer;
	};

	int ItemListSortByItemTypeDelegate ( struct USFGFxDialog_UseCamo_FsCamouseWeaponList A, struct USFGFxDialog_UseCamo_FsCamouseWeaponList B );
	int ItemListSortByItemIDDelegate ( struct USFGFxDialog_UseCamo_FsCamouseWeaponList A, struct USFGFxDialog_UseCamo_FsCamouseWeaponList B );
	void SetSortItemList ( TArray< struct USFGFxDialog_UseCamo_FsCamouseWeaponList >* OutItemArray );
	void RequsetSetUseItem ( );
	void RequsetSetUseItemWithOK ( );
	int OKButtonPress ( );
	void SetCamoItemInfos ( int CamoItemID );
	void ASSetUseDialogInfo ( );
	void SetWeaponInfos ( int WeaponID );
	void SetCamoWeaponCustomPreview ( TArray< int > WeaponItemArray, unsigned long IsMuzzleFlash );
	void SetupPreviewPartsWeapon ( int InWeaponID );
	void SetOnPreviewZoomDeltaDelegate ( struct FScriptDelegate InDelegate );
	void OnPreviewZoomDeltaDelegate ( int zStep );
	void SetOnPreviewRotationEndDelegate ( struct FScriptDelegate InDelegate );
	void OnPreviewRotationEndDelegate ( int XStep, int YStep );
	void SetOnPreviewRotationDelegate ( struct FScriptDelegate InDelegate );
	void OnPreviewRotationDelegate ( int XStep, int YStep );
	void SetOnPreviewRotationStartDelegate ( struct FScriptDelegate InDelegate );
	void OnPreviewRotationStartDelegate ( int XStep, int YStep );
	void SetOnItemDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnItemDblClickedDelegate ( int Row, int column );
	void SetOnItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnItemClickedDelegate ( int Row, int column );
	void ASSetPrecaution ( struct FString PrecautionString );
	void ASSetCamouflageItemInfo ( struct FString camoImg, struct FString camoName );
	void ASSetWeaponInfo ( struct FString txtName, struct FString txtContent );
	void ASCloseItemList ( );
	void ASUpdateWeaponList ( );
	void ASSetWeaponRow ( int Row, TArray< class UGFxObject* > WeaponInfo );
	void OnPreviewZoomDelta ( int zDelta );
	void OnPreviewRotationEnd ( int XPos, int YPos );
	void OnPreviewRotation ( int XPos, int YPos );
	void OnPreviewRotationStart ( int XPos, int YPos );
	void OnItemDblClicked ( int Row, int column );
	void UpdateBtnOK ( );
	void OnItemClicked ( int Row, int column );
	class UGFxObject* GetAWeaponObject ( int Idx );
	void AddWeaponItemToList ( struct USFGFxDialog_UseCamo_FsCamouseWeaponList WeaponItem );
	void MakeWeaponList ( int ItemId );
	void SetAvaliableWeaponList ( );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnUseFailDialogClosed ( );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
	struct FString GetInvokeString ( struct FString strInvokeText );
};

UClass* USFGFxDialog_UseCamo::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseBombSPCoupon
// 0x0000 (0x0388 - 0x0388)
class USFGFxDialog_UseBombSPCoupon : public USFGFxDialog_UseCamo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73707 ];

		return pClassPointer;
	};

	void RequsetSetUseItem ( );
	void UpdateBtnOK ( );
	int OKButtonPress ( );
	void MakeWeaponList ( int ItemId );
	void SetOnItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
};

UClass* USFGFxDialog_UseBombSPCoupon::pClassPointer = NULL;

// Class SFGame.SFItem_Func_BombSP
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_BombSP : public USFItem_Functional_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73722 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_BombSP::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseCarveWeaponTag
// 0x002C (0x03B4 - 0x0388)
class USFGFxDialog_UseCarveWeaponTag : public USFGFxDialog_UseCamo
{
public:
	struct FSInputTextFilter                           InputTextLimit;                                   		// 0x0388 (0x0010) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FSClanTextInputStateMsg >           InputTextStateMsgs;                               		// 0x0398 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           SystemMsgColorArray;                              		// 0x03A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USFGFxMoviePlayer_WeaponNameTag*             WeaponTagMoviePlayer;                             		// 0x03B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73735 ];

		return pClassPointer;
	};

	void OnPreviewZoomDelta ( int zDelta );
	void SetCamoWeaponCustomPreview ( TArray< int > WeaponItemArray, unsigned long IsMuzzleFlash );
	void SetupPreviewPartsWeapon ( int InWeaponID );
	void RequsetSetUseItem ( );
	void UpdateLastestFiltered ( );
	void UpdateBtnOK ( );
	void AsSetInputTextMsgHide ( );
	void ASSetInputTextMsg ( struct FString strName, int BGColor );
	void ASSetNameEnableMessage ( int Type, unsigned long bVisibleMsg );
	void HideTextMsg ( );
	void InputWaitTimerRanout ( );
	void IMETextInputUpdated ( );
	void MakeWeaponList ( int ItemId );
	void OnViewClosed ( int NextIndex );
	void SetOnItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnViewActivated ( int PrevIndex );
	void SetCustomWeaponTagPreview ( unsigned long bIsWeaponTag );
	void OnPendingOpen ( );
};

UClass* USFGFxDialog_UseCarveWeaponTag::pClassPointer = NULL;

// Class SFGame.SFGFxMoviePlayer_WeaponNameTag
// 0x000C (0x01EC - 0x01E0)
class USFGFxMoviePlayer_WeaponNameTag : public USFGFxMoviePlayer
{
public:
	struct FString                                     TagString;                                        		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73741 ];

		return pClassPointer;
	};

	void SetNameTag ( struct FString InTagString );
	void SetNameTagToTexture ( );
	void SetWeaponTagRenderToTexture ( struct FString InTagString );
	void eventRestoreDevice ( );
};

UClass* USFGFxMoviePlayer_WeaponNameTag::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseChangeClanmark
// 0x0124 (0x03DC - 0x02B8)
class USFGFxDialog_UseChangeClanmark : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              RandomBtn;                                        		// 0x02B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ResetBtn;                                         		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FLayerInfo                                  LayerInfos[ 0x3 ];                                		// 0x02C0 (0x0084) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UseItemCode;                                      		// 0x0344 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectLayerIndex;                                 		// 0x0350 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           ClanMarkArray;                                    		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ViewClanMarkListCount;                            		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     HtmlTypeFront;                                    		// 0x0364 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     HtmlTypeEnd;                                      		// 0x0370 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SameClanMarkMessage;                              		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorNullClanMarkMessage;                         		// 0x0388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strOrigBtnOKMessage;                              		// 0x0394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FormatToolTipText;                                		// 0x03A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FormatToolTipLayerFront;                          		// 0x03AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FormatToolTipLayerEnd;                            		// 0x03B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __TabListSortByTabSortDelegate__Delegate;         		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ClanMarkListSortByImageSortDelegate__Delegate;  		// 0x03D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73803 ];

		return pClassPointer;
	};

	void AsToSendBlinkClanMark ( struct FString strBlinkClanMark );
	void AsToSendSetToolTip ( struct FString ToolTip );
	void AsToSendSetClanLayerSelectIndex ( int nSelectIndex );
	void AsClearClanLayerSelectIndex ( );
	void AsToSendSetClanMarkViewerList ( class UGFxObject* objClanMarkArray );
	void AsToSendSelectClanMarkList ( );
	void AsToSendSetClanMarkListPageSelectIndex ( int nSelectLayerIndex );
	void AsToSendSetClanMarkListMaxPage ( int nSelectLayerIndex );
	void AstoSendSetTabSelectIndex ( int nSelectIndex );
	void AsToSendSetTabIconArray ( TArray< struct FString > TabIcons );
	void AsToSendSetClanMarkViewer ( unsigned long bCloseViewer );
	void AsToSendSetClanNameAndMark ( );
	void CMM_OnBtnPageClick ( int nowNo );
	void CMM_OnListIndex ( int Index, int nowView );
	void CMM_OnSubTapIndex ( struct FString Index );
	void CMM_OnTapTopClick ( struct FString Index );
	int ClanMarkListSortByImageSortDelegate ( struct FsClanMarkInfo A, struct FsClanMarkInfo B );
	void SetSortClanMarklist ( TArray< struct FsClanMarkInfo >* ouClanMarkArray );
	int TabListSortByTabSortDelegate ( struct FsChangeClanMarkTabInfo A, struct FsChangeClanMarkTabInfo B );
	void SetSortTabList ( TArray< struct FsChangeClanMarkTabInfo >* OutItemArray );
	void PKT_CheckSameClanMark_REQ ( class UPacket* recvPacket );
	void RequsetSetUseItem ( );
	int OKButtonPress ( );
	void SetClanMarkToolTip ( );
	struct FString GetBlinkClanMark ( int nSelectLayer );
	struct FString GetSelectClanMarkMax ( );
	struct FString GetClanMarkFotmatRepl ( struct FString strClanMark );
	int GetClanMarkIndexbySelectLayerIndex ( int nSelectLayerIndex );
	void GetDisplayClanMarkArray ( int nSelectLayerIndex, class UGFxObject** outObjArray );
	void GetHtmlTypeTabNameArray ( int nSelectLayerIndex, TArray< struct FString >* outTabNameArray );
	void GetTransformHtmlTypeTabNameArray ( TArray< struct FString > TabNameArray, TArray< struct FString >* outHtmlTypeTabNameArray );
	void SetDisabledApplayBtn ( );
	void OnClickResetBtnBtn ( struct FEventData ev );
	void OnClickRandomBtn ( struct FEventData ev );
	void UpdateClanMarkListData ( int nSelectLayerIndex, unsigned long bTabType_All );
	void SetClanMarkList ( unsigned long UpdateTabArray );
	void SetupDatas ( );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseChangeClanmark::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseColorCodeName
// 0x0030 (0x02E8 - 0x02B8)
class USFGFxDialog_UseColorCodeName : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              ColorList;                                        		// 0x02B8 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           ColorTableArray;                                  		// 0x02BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultColor;                                     		// 0x02C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultClanName;                                  		// 0x02D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                nSelectColorIndex;                                		// 0x02E0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangeClanColorName : 1;                         		// 0x02E4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 73989 ];

		return pClassPointer;
	};

	void OnClickColorPress ( struct FEventData ev );
	void SetChangeColorNameType ( );
	void ASSetDefaultColorCodeName ( struct FString strCodeName, struct FString strColor );
	void AsSetCodeNameColorTable ( );
	void RequsetSetUseItem ( );
	void OnOkConfirm ( );
	int OKButtonPress ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseColorCodeName::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_Clan
// 0x0000 (0x0174 - 0x0174)
class USFItem_Functional_Clan : public USFItem_Functional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74026 ];

		return pClassPointer;
	};

	void AdjustClanItem ( struct FString ItemProperty, struct FSClanInfo* ClanInfo );
};

UClass* USFItem_Functional_Clan::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ColorClanName
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_ColorClanName : public USFItem_Functional_Clan
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74025 ];

		return pClassPointer;
	};

	void AdjustClanItem ( struct FString ItemProperty, struct FSClanInfo* ClanInfo );
};

UClass* USFItem_Func_ColorClanName::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ColorCodeName
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_ColorCodeName : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74027 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ColorCodeName::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseColorCodeNameV2
// 0x0024 (0x02DC - 0x02B8)
class USFGFxDialog_UseColorCodeNameV2 : public USFGFxDialog_FuncUseDefault
{
public:
	class UGFxClikWidget*                              ColorList;                                        		// 0x02B8 (0x0004) [0x0000000000000000]              
	int                                                nSelectColorIndex;                                		// 0x02BC (0x0004) [0x0000000000000000]              
	struct FString                                     ConvertColorIndex;                                		// 0x02C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultColor;                                     		// 0x02CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsChange : 1;                                     		// 0x02D8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74031 ];

		return pClassPointer;
	};

	void OnClickColorPress ( struct FEventData ev );
	void ASPressEnterButton ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void colorCodeVer2_click_ok ( struct FString ColorCodename );
	void SetCodeNameArray ( struct FString CodeName, struct FSCodeNameColor CodeNameColorInfo );
	void ASSetDefaultColorCodeName ( class UGFxObject* CodenameArray );
	void AsSetCodeNameColorTable ( );
	void RequsetSetUseItem ( );
	void OnOkConfirm ( );
	int OKButtonPress ( );
	void ASSetUseDialogInfo ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewClosed ( int NextIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseColorCodeNameV2::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseCoupon
// 0x0030 (0x0278 - 0x0248)
class USFGFxDialog_UseCoupon : public USFGFxDialog
{
public:
	struct FString                                     UseCouponTitleMessage;                            		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     UseCouponNoticeMessage;                           		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CodeLengthWrongMessage;                           		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CouponCodeLength;                                 		// 0x026C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFGFxClickWidget_NumericOnly*               InputCoupon;                                      		// 0x0270 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  InputCouponText;                                  		// 0x0274 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74102 ];

		return pClassPointer;
	};

	void ASSetUseCouponDialogInfo ( );
	int OKButtonPress ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseCoupon::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseFiringRangeScoreInitial
// 0x004C (0x0304 - 0x02B8)
class USFGFxDialog_UseFiringRangeScoreInitial : public USFGFxDialog_FuncUseDefault
{
public:
	int                                                WeaponType;                                       		// 0x02B8 (0x0004) [0x0000000000000000]              
	struct FString                                     Inputinitial;                                     		// 0x02BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Message;                                          		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBtnOK;                                         		// 0x02D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strUseMessage;                                    		// 0x02E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              InitialBox[ 0x3 ];                                		// 0x02EC (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  InitialTestField[ 0x3 ];                          		// 0x02F8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74123 ];

		return pClassPointer;
	};

	void SetWeaponType ( int Type );
	void AsGetInitialText ( );
	bool IsCommonCharacterSetWord ( struct FString new_word, struct FName Option, int CharSetIndex );
	void UpdateLastestFiltered ( );
	void OnTextInputFocusOut ( struct FEventData ev );
	void OnTextInputFocusIn ( struct FEventData ev );
	void IMETextInputUpdated ( );
	void SetInitialBoxText ( int Index, struct FString Str );
	void InitInitialBoxText ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnPendingOpen ( );
	void ProcessUseItem ( );
	struct FString GetInputinitial ( );
	int OKButtonPress ( );
	struct FString GetInitialBoxsText ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseFiringRangeScoreInitial::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseInitWeaponKillDeath
// 0x0084 (0x033C - 0x02B8)
class USFGFxDialog_UseInitWeaponKillDeath : public USFGFxDialog_FuncUseDefault
{
public:
	int                                                RowSize;                                          		// 0x02B8 (0x0004) [0x0000000000000000]              
	int                                                SelectedItemIdx;                                  		// 0x02BC (0x0004) [0x0000000000000000]              
	int                                                SelectedWeaponID;                                 		// 0x02C0 (0x0004) [0x0000000000000000]              
	struct FQWord                                      SelectedWeaponISN;                                		// 0x02C4 (0x0008) [0x0000000000000000]              
	struct FString                                     GFxName;                                          		// 0x02CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strWaringMessage;                                 		// 0x02D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strKADRatioMessage;                               		// 0x02E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSFWeaponLog >                      AllWeaponLogArray;                                		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList > DisplayWeapons;                                   		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASceneCapture2DActor*                        ViwingCamera;                                     		// 0x0308 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnItemClickedDelegate__Delegate;                		// 0x030C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreviewZoomDeltaDelegate__Delegate;           		// 0x0318 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ItemListSortByItemIDDelegate__Delegate;         		// 0x0324 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ItemListSortByItemTypeDelegate__Delegate;       		// 0x0330 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74179 ];

		return pClassPointer;
	};

	void MakeWeaponList ( );
	int ItemListSortByItemTypeDelegate ( struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList A, struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList B );
	int ItemListSortByItemIDDelegate ( struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList A, struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList B );
	void SetSortItemList ( TArray< struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList >* OutItemArray );
	void RequsetSetUseItem ( );
	void RequsetSetUseItemWithOK ( );
	int OKButtonPress ( );
	void SetWeaponInfos ( int WeaponID );
	void SetOnPreviewZoomDeltaDelegate ( struct FScriptDelegate InDelegate );
	void OnPreviewZoomDeltaDelegate ( int zStep );
	void SetOnItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnItemClickedDelegate ( int Row, int column );
	void AsSetWarningMsg ( struct FString msg );
	void ASSetUseInitItemInfo ( struct FString ItemImg, struct FString ItemName );
	void ASSetCamouflageItemInfo ( struct FString camoImg, struct FString camoName );
	void ASSetWeaponGraph ( float txtKill, float txtAssist, float txtEtc, float txtHead );
	void ASSetWeaponAccuracy ( struct FString txtHead, struct FString txtChest, struct FString txtEtc );
	void ASSetWeaponInfo ( struct FString txtName, struct FString txtContent, struct FString ItemImg, struct FString camoImg, struct FString Haed, struct FString Assist, struct FString Kill, struct FString Death );
	void ASCloseItemList ( );
	void ASUpdateWeaponList ( );
	void ASSetWeaponRow ( int Row, TArray< class UGFxObject* > WeaponInfo );
	void OnPreviewZoomDelta ( int zDelta );
	void UpdateBtnOK ( );
	void OnItemClicked ( int Row, int column );
	class UGFxObject* GetAWeaponObject ( int Idx );
	void AddWeaponItemToList ( struct USFGFxDialog_UseInitWeaponKillDeath_FsCamouseWeaponList WeaponItem );
	bool IsDisplayWearponsAddItem ( int ItemId );
	bool IsAddedDisplayWeaponsByGroup ( struct FString Group );
	void SetAvaliableWeaponList ( );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnUseFailDialogClosed ( );
	void SetCamoItemInfos ( int CamoItemID );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
	struct FString GetInvokeString ( struct FString strInvokeText );
};

UClass* USFGFxDialog_UseInitWeaponKillDeath::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseMuzzleFlash
// 0x0024 (0x03AC - 0x0388)
class USFGFxDialog_UseMuzzleFlash : public USFGFxDialog_UseCamo
{
public:
	class UGFxClikWidget*                              ColorList;                                        		// 0x0388 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           MuzzleColorTableArray;                            		// 0x038C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultMuzzleColor;                               		// 0x0398 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                SelectedColorIndex;                               		// 0x03A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsCanSilencerMuzzle : 1;                          		// 0x03A8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsCanSilencerMuzzleFlash : 1;                     		// 0x03A8 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74337 ];

		return pClassPointer;
	};

	void OnPreviewZoomDelta ( int zDelta );
	void OnPreviewRotationEnd ( int XPos, int YPos );
	void OnPreviewRotation ( int XPos, int YPos );
	void OnPreviewRotationStart ( int XPos, int YPos );
	int OKButtonPress ( );
	bool IsSpecialMuzzleFlash ( );
	void SetupPreviewPartsWeapon ( int InWeaponID );
	void SetCurrentMuzzleColor ( int ColorIndex );
	void OnClickColorPress ( struct FEventData ev );
	void ASSetVisibleColorList ( unsigned long bSpecialMuzzle );
	void ASSetDefaultMuzzleFlashColor ( struct FString strColor );
	void AsSetMuzzleFlashColorTable ( );
	void RequsetSetUseItem ( );
	void UpdateBtnOK ( );
	void MakeWeaponList ( int ItemId );
	void SetWeaponInfos ( int WeaponID );
	void InitMuzzleFlashColorTable ( class UGFxClikWidget* List, int ColorIndex );
	void OnViewClosed ( int NextIndex );
	void SetOnItemClickedDelegate ( struct FScriptDelegate InDelegate );
	bool CheckSpecialMuzzleFlash ( );
	void OnViewActivated ( int PrevIndex );
	void SetWeaponMuzzleFlashPreview ( unsigned long bIsMuzzleFlash );
	void OnPendingOpen ( );
	void ASSetCamouflageItemInfo ( struct FString camoImg, struct FString camoName );
	void ASSetPrecaution ( struct FString PrecautionString );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseMuzzleFlash::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseRandomBox
// 0x003C (0x02F4 - 0x02B8)
class USFGFxDialog_UseRandomBox : public USFGFxDialog_FuncUseDefault
{
public:
	struct FString                                     strRandomBoxPotupTitle;                           		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              RandomboxPopupTitleWidget;                        		// 0x02C4 (0x0004) [0x0000000000000000]              
	struct FString                                     strWaringMessage;                                 		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsRandomBoxItemInfo >               RollingDataList;                                  		// 0x02D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              RandomBoxRewardItemWidget;                        		// 0x02E0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RewardOKbtnWidget;                                		// 0x02E4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              KeyBuybtnWidget;                                  		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                RandomBoxRewardItemID;                            		// 0x02EC (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseRewardOkBtn : 1;                              		// 0x02F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74423 ];

		return pClassPointer;
	};

	void ASSetInputBottomPart ( int Index, int KeyCount, unsigned long bKeyBuyButton );
	void ASSetInputTopPart ( int Index, struct FString BoxName );
	void ASSetRollingData ( TArray< struct FsRandomBoxItemInfo > datalist );
	void AsSetRandomBoxRewardItemClose ( );
	void AsSetRandomBoxRewardItemOpen ( );
	void OpenBuyOneDialog ( int ItemId );
	struct FString IsRareRewardItem ( int RewardID );
	class UGFxObject* GetRewardItemInfo ( );
	void PlayRewardItemSound ( struct FName EventName, unsigned long bIsOverlapSound );
	void SetRecvRewardItem ( );
	int GetShopKeyIDFromBoxType ( int PurchaseType );
	void RequsetSetUseItem ( );
	int OKButtonPress ( );
	void SetRollingData ( );
	void SetRandomBoxTopPart ( int Type );
	void SetRandomBoxBottomPart ( int Type );
	bool IsBoxAndKeyMacthing ( int BoxType );
	int GetKeyType ( class UClass* KeyItem );
	int GetKeyCount ( );
	int GetBoxType ( );
	int GetInvenKeyItemID ( int BoxType );
	void OnKeyBuyOKButtonPress ( struct FEventData ev );
	void OnRewardOKButtonPress ( struct FEventData ev );
	void RecvGetUseRandomBoxItem ( class UPacket* recvPacket );
	void PKT_UseRandomBoxItem_REQ_OK ( class UPacket* recvPacket );
	void DelegateSetup ( );
	void ClearDialogInfo ( );
	void InitDialogInfo ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	int OKRewardButtonPress ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_UseRandomBox::pClassPointer = NULL;

// Class SFGame.SFItem_Func_RandomBox_Box
// 0x0014 (0x0190 - 0x017C)
class USFItem_Func_RandomBox_Box : public USFItem_Func_RandomBox
{
public:
	struct FString                                     strRandomBoxItemName;                             		// 0x017C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                RequiredKeyCount;                                 		// 0x0188 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeyBuyDisable : 1;                               		// 0x018C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74456 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_RandomBox_Box::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_UseStoredMaterial
// 0x0050 (0x0308 - 0x02B8)
class USFGFxDialog_UseStoredMaterial : public USFGFxDialog_FuncUseDefault
{
public:
	TArray< struct FStoredMaterialInfo >               StoredMaterialInfoArray;                          		// 0x02B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDisplayedItemInfo >                DisplayItems;                                     		// 0x02C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strWaringMessage;                                 		// 0x02D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                RowSize;                                          		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                SelectedItemIdx;                                  		// 0x02E0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __ItemListSortByItemIDDelegate__Delegate;         		// 0x02E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ItemListSortByItemTypeDelegate__Delegate;       		// 0x02F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemClickedDelegate__Delegate;                		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74673 ];

		return pClassPointer;
	};

	void ASSetTopItemData ( class UGFxObject* TopItemData );
	void SetOnItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnItemClickedDelegate ( int Row, int column );
	void SetDialogTitle ( struct FString strMsg );
	void RequsetSetUseItem ( );
	int OKButtonPress ( );
	struct FString ExtractStat ( struct FString Attrib );
	void GetItemAdditionalEffect ( int ItemId, struct FsItemAdditionalEffect* ItemAdditionalEffects );
	class UGFxObject* GetItemInfoData_FuncItem ( int ItemId );
	class UGFxObject* GetItemInfoData_Equip ( int ItemId );
	class UGFxObject* GetItemInfoData_Weapon ( int ItemId );
	class UGFxObject* GetItemInfoData ( int ItemId );
	void SetItemData ( int ItemId );
	struct FString GetItemTypeByID ( int ItemId );
	void UpdateBtnOK ( );
	void OnItemClicked ( int Row, int column );
	void ASUpdateWeaponList ( );
	void ASSetWeaponRow ( int Row, TArray< class UGFxObject* > WeaponInfo );
	class UGFxObject* GetAWeaponObject ( int Idx );
	void SetAvaliableItemList ( );
	int ItemListSortByItemTypeDelegate ( struct FDisplayedItemInfo A, struct FDisplayedItemInfo B );
	int ItemListSortByItemIDDelegate ( struct FDisplayedItemInfo A, struct FDisplayedItemInfo B );
	void SetSortItemList ( TArray< struct FDisplayedItemInfo >* OutItemArray );
	void MakeItemList ( int ItemId );
	void DelegateSetup ( );
	void OnUseFailDialogClosed ( );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
};

UClass* USFGFxDialog_UseStoredMaterial::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_VoteOut
// 0x0038 (0x0280 - 0x0248)
class USFGFxDialog_VoteOut : public USFGFxDialog
{
public:
	struct FString                                     VoteOutTitle;                                     		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoutOutContentText;                               		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteOutContent;                                   		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              MemberList;                                       		// 0x026C (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           MemberListArray;                                  		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedIndex;                                    		// 0x027C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74821 ];

		return pClassPointer;
	};

	int OKButtonPress ( );
	void OnClickMemberPress ( struct FEventData ev );
	void AsSetMemberList ( TArray< struct FString > DataArray );
	void SetUserNickNameList ( );
	void ASSetVoteTxt ( struct FString TitleText, struct FString ContentText );
	void SetContentText ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxDialog_VoteOut::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_WaitingAck
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_WaitingAck : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74858 ];

		return pClassPointer;
	};

};

UClass* USFGFxDialog_WaitingAck::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_WebLogin
// 0x0000 (0x0248 - 0x0248)
class USFGFxDialog_WebLogin : public USFGFxDialog
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74860 ];

		return pClassPointer;
	};

	void loginWeb_OnPagePosition ( int PosX, int PosY );
	void ASSetLoadingComplete ( );
	void ASSetDialogSize ( int Width, int Height, unsigned long IsInit );
	void SetDialogSize ( int Width, int Height );
	void OnCloseButtonPress ( struct FEventData ev );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxDialog_WebLogin::pClassPointer = NULL;

// Class SFGame.SFGFxDialog_WeeklyClanRank
// 0x0024 (0x026C - 0x0248)
class USFGFxDialog_WeeklyClanRank : public USFGFxDialog
{
public:
	int                                                TopRankingCount;                                  		// 0x0248 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     WeeklyClanRankDialogTitle;                        		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankAttendText;                         		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              TopRankList;                                      		// 0x0264 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BottomRankList;                                   		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74883 ];

		return pClassPointer;
	};

	void SetPreviousData ( );
	void PKT_GetWeeklyRealtimeRank_REQ_OK ( class UPacket* Packet );
	void PKT_GetWeeklyRealtimeRank_REQ_TRANSACTION ( class UPacket* Packet );
	void SetClanRankData ( TArray< struct FSWeeklyClanRankInfo > RecvClanInfo );
	void ASSetTextAttend ( struct FString AttenText );
	void SetTextAttend ( struct FString StartDate, struct FString EndDate );
	void ASSetTitle ( struct FString Title );
	void SetTitle ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxDialog_WeeklyClanRank::pClassPointer = NULL;

// Class SFGame.SFSoundGroup_UX
// 0x000C (0x0050 - 0x0044)
class USFSoundGroup_UX : public USFSoundGroup
{
public:
	TArray< struct FSUXSound >                         UXSounds;                                         		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 74937 ];

		return pClassPointer;
	};

	class USoundCue* FindCueByName ( struct FName EventName );
};

UClass* USFSoundGroup_UX::pClassPointer = NULL;

// Class SFGame.SFShutDownLaw
// 0x004C (0x0088 - 0x003C)
class USFShutDownLaw : public UObject
{
public:
	TArray< struct FSShutDownCloseMsg >                ShutDownCloseMsgArray;                            		// 0x003C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSShutDownRemainMsg >               ShutDownRemainMsgArray;                           		// 0x0048 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSForcedShutDownLaw >               ShutDownLawArray;                                 		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ShutDownStartTime;                                		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ShutDownFinishTime;                               		// 0x0064 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ShutDownCommonMessage;                            		// 0x0068 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           ShutDownLawMessage;                               		// 0x0074 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShutDownLawUse : 1;                              		// 0x0080 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                ShutDownMaxAge;                                   		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76099 ];

		return pClassPointer;
	};

	struct FString GetShutDownRemainMessageByName ( struct FString strName );
	struct FString GetShutDownCloseMessageByName ( struct FString strName );
	struct FString GetShutDownCloseMessageByCode ( int InCode );
	bool IsShutDownLawUse ( );
	bool GetShutDownStepIsPerMinute ( int InStep );
	struct FString GetShutDownLawMessage ( int InStep );
	int GetShutDownLastTime ( );
	int GetShutDownMaxStepIndex ( );
	int GetShutDownStepIndex ( int inTime );
};

UClass* USFShutDownLaw::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_StagePanel
// 0x001C (0x00DC - 0x00C0)
class USFGFxHUDWidget_StagePanel : public USFGFxHUDWidget
{
public:
	float                                              PendingBriefTime;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevPlayedRound;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                CountDownTime;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowRoundEnd : 1;                                		// 0x00CC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowTeamChanging : 1;                            		// 0x00CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bShowRoundBrief : 1;                              		// 0x00CC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< struct FString >                           IgnoreShowEndRoundGameMode;                       		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76131 ];

		return pClassPointer;
	};

	void OnScreenResChanged ( );
	void HideTeamChanged ( );
	void ShowTeamChanging ( float Duration );
	int GetLobbyTeamIndex ( );
	void OnStartSwitchingSide ( float Duration );
	void HideRoundEnd ( );
	void ShowRoundEnd ( struct FString RoundEndMessage, struct FString CurScoreMessage, int TeamIndex, int RedScore, int BlueScore, float Duration );
	void GetCodeNameWithChanged ( struct FString* RedCodeName, struct FString* BlueCodeName );
	void GetTeamMarkWithChanged ( unsigned char Size, struct FString* RedMark, struct FString* BlueMark );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnCountDown ( float Duration );
	void GetTeamScore ( int Team, int* Left, int* Right );
	void OnRoundStarted ( );
	void ASSetCountDown ( );
	void ShowCountDown ( int Time );
	void HideRoundBriefing ( );
	void ShowRoundBriefing ( struct FString strMessage, int nTeam, float Duration );
	void HideRoundStartType ( );
	void ShowRoundStartType ( struct FString strRoundStart );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
};

UClass* USFGFxHUDWidget_StagePanel::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ModeInfo
// 0x0008 (0x00C8 - 0x00C0)
class USFGFxHUDWidget_ModeInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevMyScore;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevOtherScore;                                   		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76132 ];

		return pClassPointer;
	};

	void ASSetRightTopPlayer ( struct FString TopPlayerText );
	void ASSetLeftTopPlayer ( struct FString TopPlayerText );
	void AsSetSnowDecoVisible ( unsigned long IsVisible );
	void ASSetDeathGamePlay ( );
	void ASSetModeInfo ( int team_color, struct FString goal_score, struct FString mode_name );
	void ASSetOtherTeamScore ( struct FString OtherScore );
	void ASSetMyTeamScore ( struct FString MyScore );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void SetForceModeInfo ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void SetConvoyanceTopPlayer ( struct FString TopPlayer, unsigned long IsSetLeft );
	void OnConvoyanceTopPlayerUpdated ( struct FString TopPlayer, unsigned long IsSetLeft );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void CloseWidget ( );
	void OpenWidget ( );
	void SetTeamScore ( int RedScore, int BlueScore, unsigned long bForce );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_RadioMsg
// 0x0008 (0x00C8 - 0x00C0)
class USFGFxHUDWidget_RadioMsg : public USFGFxHUDWidget
{
public:
	unsigned long                                      bShowRadioMsg : 1;                                		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowRadioMsgFlashBang : 1;                       		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000002] 
	class UClass*                                      CurrentRadioClass;                                		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76133 ];

		return pClassPointer;
	};

	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnPreRoundEnded ( );
	void HideRadioMessageMenu ( );
	void ASShowRadioMessageMenu ( TArray< struct FString > Arg );
	void ShowRadioMessageMenu ( class UClass* RadioMessageClass );
	bool NotifySetRadioMessage ( unsigned long bShow, class UClass* RadioMessageClass );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_RadioMsg::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_UserCount
// 0x0020 (0x00E0 - 0x00C0)
class USFGFxHUDWidget_UserCount : public USFGFxHUDWidget
{
public:
	int                                                UserCount[ 0x8 ];                                 		// 0x00C0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76134 ];

		return pClassPointer;
	};

	void SetUserCount ( int RedCount, int BlueCount );
	void ASSetCount ( unsigned long bIsLeft, int Count );
	void UpdateUserCount ( );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnStartSwitchingSide ( float Duration );
	void OnPawnDying ( class ASFPawn* DiedPawn );
	void OnChangedNumLives ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void ASCloseUserCount ( );
	void ASOpenUserCount ( );
	void ASSetUserCountName ( int Team, int Left, int Right );
	void InitUserCount ( );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_UserCount::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_KillCam
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_KillCam : public USFGFxHUDWidget
{
public:
	unsigned long                                      bShowKillCam : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76135 ];

		return pClassPointer;
	};

	void ASHideKillCam ( );
	void ASShowKillCam ( );
	void OnPreRoundEnded ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_KillCam::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Minimap
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_Minimap : public USFGFxHUDWidget
{
public:
	unsigned long                                      bUseWidgetDisableController : 1;                  		// 0x00C0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76136 ];

		return pClassPointer;
	};

	void HideRadar ( );
	void ShowRadar ( unsigned long bForce );
	void OnObsrToggleMiniMap ( unsigned long bShow );
	void OnToggleHUDByKismet ( unsigned long bShow );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnHideScoreBoard ( );
	void OnShowScoreBoard ( );
	bool ASCreateRadar ( );
	bool SetTimerCreateRadar ( );
	void OnPendingMatch ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_Minimap::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BlackOut
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_BlackOut : public USFGFxHUDWidget
{
public:
	unsigned long                                      bBlackOut : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76137 ];

		return pClassPointer;
	};

	void ASCloseBlackOut ( );
	void ASOpenBlackOut ( );
	void SetBlackOut ( unsigned long bSet );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnPreRoundEnded ( );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
};

UClass* USFGFxHUDWidget_BlackOut::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ChallengeMsg
// 0x0014 (0x00D4 - 0x00C0)
class USFGFxHUDWidget_ChallengeMsg : public USFGFxHUDWidget
{
public:
	class USFChallengeListCondition*                   SFChallengeInfoCondition;                         		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                ChallengeUIFloatingTime;                          		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FChallengeData >                    ChallengeOverlapData;                             		// 0x00C8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76138 ];

		return pClassPointer;
	};

	void ASShowChallengeSuccess ( class UGFxObject* Item, int play_time );
	void OnChallengeCompleted ( struct FName SupplyCode, int task_index );
	void OnViewLoaded ( );
};

UClass* USFGFxHUDWidget_ChallengeMsg::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_LeftNotice
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_LeftNotice : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76139 ];

		return pClassPointer;
	};

	void OnHideLeftNoticeMessage ( );
	void OnShowLeftNoticeMessage ( struct FString strMessage );
};

UClass* USFGFxHUDWidget_LeftNotice::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_VoteKick
// 0x0054 (0x0114 - 0x00C0)
class USFGFxHUDWidget_VoteKick : public USFGFxHUDWidget
{
public:
	struct FString                                     CoolTimeMessage;                                  		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteAcceptMessage;                                		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteDenyMessage;                                  		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteKickResultMessage;                            		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteKickResultYesMessage;                         		// 0x00F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteKickResultNoMessage;                          		// 0x00FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteKickResultIgnoreMessage;                      		// 0x0108 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76140 ];

		return pClassPointer;
	};

	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void HideVoteKickResult ( );
	void ShowVoteKickResult ( int AcceptPlayer, int RefusePlayer, int TotalPlayer );
	void HideVoteKick ( int nType );
	void ShowVoteKick ( struct FString strMessage );
	void OnVoteKickFinished ( unsigned long bShowResult, int AcceptPlayer, int RefusePlayer, int TotalPlayer );
	void OnVoteKickParticipated ( int nType );
	void OnVoteKickStarted ( struct FString strMessage );
};

UClass* USFGFxHUDWidget_VoteKick::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CombatReport
// 0x003C (0x00FC - 0x00C0)
class USFGFxHUDWidget_CombatReport : public USFGFxHUDWidget
{
public:
	float                                              fShowDuration;                                    		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxDamageUserCount;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                CombatReportEnableType;                           		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     KillText;                                         		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AssistText;                                       		// 0x00D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeathText;                                        		// 0x00E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                PrevKill;                                         		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                PrevAssist;                                       		// 0x00F4 (0x0004) [0x0000000000000000]              
	int                                                PrevDeath;                                        		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76141 ];

		return pClassPointer;
	};

	struct FString GetKillMessageString ( int nKillType );
	void ASSetCombatReport ( struct FString KilledWPImg, struct FString KilledWPCamo, struct FString KilledWP, struct FString KilledRank, struct FString KilledManner, struct FString KilledCodename, TArray< class UGFxObject* > DamageUserArray, int TotalDamage, int MaxDamage, struct FString strKill, int KillCount, int KillIncrease, struct FString strAssist, int AssistCount, int AssistIncrease, struct FString strDeath, int DeathCount, int DeathIncrease );
	bool SetCombatReport ( );
	void ASHideCombatReport ( );
	void ASShowCombatReport ( );
	void OnShowCombatReport ( );
};

UClass* USFGFxHUDWidget_CombatReport::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_GlowModeGauge
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_GlowModeGauge : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76142 ];

		return pClassPointer;
	};

	void OnPreRoundEnded ( );
	void SetGlowModeGaugeValue ( int GlowModeEffectType );
};

UClass* USFGFxHUDWidget_GlowModeGauge::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BuffInfo
// 0x001C (0x00DC - 0x00C0)
class USFGFxHUDWidget_BuffInfo : public USFGFxHUDWidget
{
public:
	TArray< unsigned char >                            DisplayBuffList;                                  		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSKillDeathStreakBuffInfo >         KillDeathStreakList;                              		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      InitializedStreakBuff : 1;                        		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76143 ];

		return pClassPointer;
	};

	void ASSetRemainingTime ( int BuffType, int ElapsedTime, int TotalTime );
	void ASCloseAllBuffInfo ( );
	void ASCloseBuffInfo ( int BuffType );
	void ASOpenBuffInfo ( int BuffType, struct FString ImageCode, struct FString ImageSetIndex, struct FString BuffDesc );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnBuffStateChanged ( unsigned char BuffType, unsigned char BuffState );
	void OnPreRoundEnded ( );
	void GetKillDeathStreakList ( );
	void eventUpdate ( float DeltaSeconds );
	void CloseWidget ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_BuffInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_UserCondition
// 0x0008 (0x00C8 - 0x00C0)
class USFGFxHUDWidget_UserCondition : public USFGFxHUDWidget
{
public:
	unsigned long                                      bShowUserCondition : 1;                           		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ConditionIconRange;                               		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76144 ];

		return pClassPointer;
	};

	void ASHideUserCondition ( );
	void ASShowUserCondition ( );
	void ASUpdateUserCondition ( float RecentKD, float BaseKD, int KDIcon, int HeadShot, int HeadshotIcon );
	void SetDefaultUserCondition ( );
	void ToggleUserCondition ( );
	void ShowUserCondition ( unsigned long bShow );
	int GetDisplayIcon ( float BaseRatio, float RecentRatio );
	void GetHeadshotInfo ( struct FUserConditionData ConditionInfo, int* HeadShotPercentage, int* HeadshotIcon );
	void GetDisplayKillDeathInfo ( struct FUserConditionData ConditionInfo, float* BaseRatio, float* RecentRatio, int* KDIcon );
	float GetHeadShotRatio ( struct FGameCondition PrivateCondition );
	float GetKDRatio ( struct FGameCondition PrivateCondition );
	bool IsValidGameCondition ( struct FGameCondition PrivateCondition );
	void UpdateConditionInfo ( class ASFPlayerReplicationInfo* SFPRI );
	bool IsUsingUserConditionDisplay ( );
	void OnStartDeadPersonCam ( );
	void OnRoundStarted ( );
	void OnHideScoreBoard ( );
	void OnShowScoreBoard ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnUpdateUserConditionInfo ( class ASFPlayerReplicationInfo* SFPRI, unsigned long bNeedInit );
	void CheckPlayerCondition ( class ASFPlayerReplicationInfo* SFPRI );
	void UnregisterDelegate ( );
	bool IsNeedToRequestCondition ( class ASFPlayerReplicationInfo* SFPRI );
	void InitializeConditionWidget ( );
};

UClass* USFGFxHUDWidget_UserCondition::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_VideoRec
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_VideoRec : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76145 ];

		return pClassPointer;
	};

	void ASSetOffREC ( );
	void ASSetOnREC ( struct FString Message );
	void OnVideoCaptureModeChanged ( unsigned long bSet, int nErrorType );
	void OnViewLoaded ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_VideoRec::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_TwichTV
// 0x000C (0x00CC - 0x00C0)
class USFGFxHUDWidget_TwichTV : public USFGFxHUDWidget
{
public:
	struct FString                                     TwitchTVOnMessage;                                		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76146 ];

		return pClassPointer;
	};

	void ASSetOffTwitchTV ( );
	void ASSetOnTwitchTV ( struct FString StringTag );
	void OnTwitchTVModeChanged ( unsigned long bSet );
	void OnViewLoaded ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_TwichTV::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_FeverTimeIcon
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_FeverTimeIcon : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76147 ];

		return pClassPointer;
	};

	void ASHideFeverTimeIcon ( );
	void ASShowFeverTimeIcon ( );
	void ShowFeverTimeIcon ( unsigned long bShow );
	void CheckFeverTime ( );
	void OnShowFeverTimeIcon ( unsigned long bShow );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_FeverTimeIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BeastModeInfo
// 0x0008 (0x00C8 - 0x00C0)
class USFGFxHUDWidget_BeastModeInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevMyScore;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevOtherScore;                                   		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76149 ];

		return pClassPointer;
	};

	void ASSetOtherTeamScore ( int OtherScore );
	void ASSetMyTeamScore ( int MyScore );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void OnRoundStarted ( );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void CloseWidget ( );
	void OpenWidget ( );
	void SetTeamScore ( int RedScore, int BlueScore, unsigned long bForce );
};

UClass* USFGFxHUDWidget_BeastModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BeastWeaponInfo
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_BeastWeaponInfo : public USFGFxHUDWidget
{
public:
	float                                              PrevCooltime;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76150 ];

		return pClassPointer;
	};

	void ASSetHPAddIcon ( struct FString strIconImg );
	void ASSetBeastSkillCooltime ( int Current, int total );
	void ASSetBeastType ( struct FString Type );
	void ASCloseWeaponInfo ( );
	void ASOpenWeaponInfo ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnChangedViewtarget ( );
	void UpdateWidgetVisibility ( );
	void ShowWidget ( unsigned long bShow );
	void CloseWidget ( );
	void OpenWidget ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_BeastWeaponInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BeastHealthInfo
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_BeastHealthInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevHealth;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76151 ];

		return pClassPointer;
	};

	void ASSetHealth ( int current_health, int max_health );
	void ASCloseHealthInfo ( );
	void ASOpenHealthInfo ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnChangedViewtarget ( );
	void UpdateWidgetVisibility ( );
	void ShowWidget ( unsigned long bShow );
	void CloseWidget ( );
	void OpenWidget ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_BeastHealthInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BeastChangeBeastType
// 0x0010 (0x00D0 - 0x00C0)
class USFGFxHUDWidget_BeastChangeBeastType : public USFGFxHUDWidget
{
public:
	int                                                NewBeastSet;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           BeastChangedMsgArray;                             		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76152 ];

		return pClassPointer;
	};

	void ASSetSelectedBeastSet ( int selected_index );
	void ASSetBeastSetInfo ( int slot_index, struct FString beast_type, struct FString beast_name, struct FString attack_type, struct FString weapon_name, struct FString skill_name );
	void ASCloseBeastSetInfo ( );
	void ASOpenBeastSetInfo ( );
	void OnWeaponSetChanged ( int new_set );
	void OnSpawnablePawnListInitialized ( );
	int GetCurrentBeastSet ( );
	void SetBeastSetInfo ( int Slot, struct FSSpawnableAlienInfo AlienInfo );
	void InitializeBeastSetData ( );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_BeastChangeBeastType::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_BeastBuffInfo
// 0x0012 (0x00D2 - 0x00C0)
class USFGFxHUDWidget_BeastBuffInfo : public USFGFxHUDWidget
{
public:
	unsigned char                                      PrevBuffList[ 0x12 ];                             		// 0x00C0 (0x0012) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76153 ];

		return pClassPointer;
	};

	void ASSetBuffInfo ( struct FString beast_type, struct FString skill_name );
	void ASCloseBuffInfo ( );
	void ASOpenBuffInfo ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnChangedViewtarget ( );
	void UpdateWidgetVisibility ( );
	void ShowWidget ( unsigned long bShow );
	void CloseWidget ( );
	void OpenWidget ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_BeastBuffInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CaptureTimer
// 0x0015 (0x00D5 - 0x00C0)
class USFGFxHUDWidget_CaptureTimer : public USFGFxHUDWidget
{
public:
	TArray< float >                                    WarningLevelTime;                                 		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              LastUpdatedTime;                                  		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              TotalTime;                                        		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned char                                      CaptureTeamIndex;                                 		// 0x00D4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76173 ];

		return pClassPointer;
	};

	void ASSetRemainTime ( int TeamIndex, int Current, int total, int warning_level );
	void ASCloseTimer ( );
	void ASOpenTimer ( );
	void OnCaptureRemainTimeChanged ( float remain, float total );
	void OnCaptureTeamChanged ( unsigned char captured_team, struct FString captured_player );
	void ClearCaptureTimer ( );
	int GetWarningLevel ( float remain_time );
	void Update ( float DeltaSeconds );
	void OnPreRoundEnded ( );
};

UClass* USFGFxHUDWidget_CaptureTimer::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CaptureModeInfo
// 0x0014 (0x00D4 - 0x00C0)
class USFGFxHUDWidget_CaptureModeInfo : public USFGFxHUDWidget
{
public:
	unsigned char                                      PrevCapturedTeam;                                 		// 0x00C0 (0x0001) [0x0000000000000000]              
	struct FString                                     PrevCapturedPlayer;                               		// 0x00C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFinishCaptureWaitTime : 1;                       		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateCaptureInfoBySecond : 1;                   		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76174 ];

		return pClassPointer;
	};

	void ASSetActivateTimeInfo ( int nMyTeamIndex, int nRemainTime, int nTotalTime );
	void ASSetCaptureInfo ( int nMyTeamIndex, unsigned long bCaptured, struct FString captured_player );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void OnUpdatePerSecond ( );
	void OnCaptureTeamChanged ( unsigned char captured_team, struct FString captured_player );
	void CloseWidget ( );
	void OpenWidget ( );
	bool UpdateCurrentCaptureInfo ( );
	void SetCaptureInfo ( unsigned char captured_team, struct FString captured_player, unsigned long bForce );
};

UClass* USFGFxHUDWidget_CaptureModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_CaptureResult
// 0x0018 (0x00D8 - 0x00C0)
class USFGFxHUDWidget_CaptureResult : public USFGFxHUDWidget
{
public:
	struct FString                                     MSG_Capture_Success;                              		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Capture_Failure;                              		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76175 ];

		return pClassPointer;
	};

	void ASShowResult ( struct FString myteam_msg, struct FString otherteam_msg );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
};

UClass* USFGFxHUDWidget_CaptureResult::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ConvoyancePush
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ConvoyancePush : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76177 ];

		return pClassPointer;
	};

	void ASClosePushCarGauge ( );
	void ASOpenPushCarGauge ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnStartDeadPersonCam ( );
	void OnStartKillCam ( );
	void UnregisterDelegate ( );
	void OnChangedViewtarget ( );
	void CloseWidget ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ConvoyancePush::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ConvoyanceMove
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ConvoyanceMove : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76178 ];

		return pClassPointer;
	};

	void ASCloseMoveCarGauge ( );
	void ASOpenMoveCarGauge ( );
	void ASSetMoveCarGauge ( int MovedValue );
	void UpdateConvoyanceMovedDistance ( );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnHideScoreBoard ( );
	void OnShowScoreBoard ( );
	void OnPreRoundEnded ( );
	void CloseMoveGauge ( );
	void ShowMoveGauge ( );
	void OnUpdatePerSecond ( );
	void InitConvoyanceMove ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_ConvoyanceMove::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ConvoyanceMatchResult
// 0x0018 (0x00D8 - 0x00C0)
class USFGFxHUDWidget_ConvoyanceMatchResult : public USFGFxHUDWidget
{
public:
	struct FString                                     WinMessage;                                       		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LoseMessage;                                      		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76179 ];

		return pClassPointer;
	};

	void ASOpenConvoyanceResult ( struct FString LeftRoundTxt, struct FString LeftGoldAmount, struct FString LeftPushScore, struct FString LeftTotalScore, struct FString RightRoundTxt, struct FString RightGoldAmount, struct FString RightPushScore, struct FString RightTotalScore );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
};

UClass* USFGFxHUDWidget_ConvoyanceMatchResult::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ConvoyanceSeizureIcon
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ConvoyanceSeizureIcon : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76180 ];

		return pClassPointer;
	};

	void ASCloseConvoyanceSeizureIcon ( );
	void ASOpenConvoyanceSeizureIcon ( );
	void ASSetConvoyanceSeizureAmount ( struct FString Amount );
	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnStartDeadPersonCam ( );
	void OnStartKillCam ( );
	void OnChangedViewtarget ( );
	void CloseWidget ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ConvoyanceSeizureIcon::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalModeInfo
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_SurvivalModeInfo : public USFGFxHUDWidget
{
public:
	int                                                LastWave;                                         		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76272 ];

		return pClassPointer;
	};

	void ASSetDifficulty ( struct FString Difficulty );
	void ASSetTotalWave ( int total_wave );
	void ASSetCurrentWave ( int current_wave );
	void ASCloseWaveInfo ( );
	void ASOpenWaveInfo ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void OnWaveStarted ( int current_wave );
	void SetWaveData ( int current_wave, unsigned long bForce );
};

UClass* USFGFxHUDWidget_SurvivalModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalMoneyInfo
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_SurvivalMoneyInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevModeMoney;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76273 ];

		return pClassPointer;
	};

	void ASIncreaseMoney ( int Score );
	void ASCloseMoneyInfo ( );
	void ASOpenMoneyInfo ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void OnModeMoneyUpdated ( int NewModeMoney );
	void SetMoneyData ( int NewModeMoney, unsigned long bForce );
};

UClass* USFGFxHUDWidget_SurvivalMoneyInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalResult
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_SurvivalResult : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76274 ];

		return pClassPointer;
	};

	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnWaveStarted ( int current_wave );
};

UClass* USFGFxHUDWidget_SurvivalResult::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalWaveSpeed
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_SurvivalWaveSpeed : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76275 ];

		return pClassPointer;
	};

	void ASHideWaveSpeed ( );
	void OnPreRoundEnded ( );
	void OnSetFastWave ( unsigned long bSet );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_SurvivalWaveSpeed::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Common_ModeExclusive_ItemSlot
// 0x0020 (0x00E0 - 0x00C0)
class USFGFxHUDWidget_Common_ModeExclusive_ItemSlot : public USFGFxHUDWidget
{
public:
	TArray< int >                                      ActiveItems;                                      		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      PassiveItems;                                     		// 0x00CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastActiveItemSlotNotice;                         		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                ActiveItemSlotCount;                              		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76316 ];

		return pClassPointer;
	};

	void ASSetActivatedItemSlot ( int slot_index );
	void ASCloseItemInfo ( );
	void ASOpenItemInfo ( struct FString Active, struct FString Active01, struct FString passive, struct FString passive01 );
	void OnChangedViewtarget ( );
	void Update ( float DeltaSeconds );
	void SwapActiveSlotUsedPassiveItem ( TArray< int > ActiveItemIDList, TArray< struct FString >* OutActiveItemImage );
	void UpdateModeItemSlotInfo ( );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_Common_ModeExclusive_ItemSlot::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrHPBarL
// 0x0000 (0x0FCC - 0x0FCC)
class USFGFxHUDWidget_ObsrHPBarL : public USFGFxHUDWidget_ObsrHPBarBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76324 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUDWidget_ObsrHPBarL::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrHPBarR
// 0x0000 (0x0FCC - 0x0FCC)
class USFGFxHUDWidget_ObsrHPBarR : public USFGFxHUDWidget_ObsrHPBarBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76325 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUDWidget_ObsrHPBarR::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrModeInfo
// 0x0024 (0x00E4 - 0x00C0)
class USFGFxHUDWidget_ObsrModeInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevScore[ 0x8 ];                                 		// 0x00C0 (0x0020) [0x0000000000000000]              
	unsigned long                                      bShowModeInfo : 1;                                		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76326 ];

		return pClassPointer;
	};

	void OnObsrToggleModeInfo ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void ASSetRightScore ( int inScore, int TeamIndex );
	void ASSetLeftScore ( int inScorem, int TeamIndex );
	void ASSetPanelColor ( int LeftColor );
	void SetTeamScore ( int AttackTeamScore, int DefenceTeamScore, unsigned long bForce );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void SetModeInfo ( );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_ObsrModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrBriefing
// 0x0028 (0x00E8 - 0x00C0)
class USFGFxHUDWidget_ObsrBriefing : public USFGFxHUDWidget
{
public:
	unsigned long                                      bShowRoundBrief : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                PrevPlayedRound;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                RoundScore[ 0x8 ];                                		// 0x00C8 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76327 ];

		return pClassPointer;
	};

	void OnStartSwitchingSide ( float Duration );
	void OnCountDown ( float Duration );
	void OnRoundStarted ( );
	bool CheckEndMessage ( );
	void ShowRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned long bMatchEnd );
	void HideRoundBriefing ( );
	void ShowRoundBriefing ( );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
};

UClass* USFGFxHUDWidget_ObsrBriefing::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ObsrFunKeyGuide
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ObsrFunKeyGuide : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76328 ];

		return pClassPointer;
	};

	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_ObsrFunKeyGuide::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardHardCore
// 0x0000 (0x0314 - 0x0314)
class USFGFxHUD_ScoreBoardHardCore : public USFGFxHUD_ScoreBoardNormal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76513 ];

		return pClassPointer;
	};

	struct FString GetScoreBoardPoint ( );
	bool IsRadarValid ( );
	void ASCreateRadar ( );
};

UClass* USFGFxHUD_ScoreBoardHardCore::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardShooter
// 0x0000 (0x02F0 - 0x02F0)
class USFGFxHUD_ScoreBoardShooter : public USFGFxHUD_ScoreBoardSurvival
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76554 ];

		return pClassPointer;
	};

	void SetTitleText ( );
	void ASCreateRadar ( );
};

UClass* USFGFxHUD_ScoreBoardShooter::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardTraining
// 0x0000 (0x02EC - 0x02EC)
class USFGFxHUD_ScoreBoardTraining : public USFGFxHUD_ScoreBoardBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76613 ];

		return pClassPointer;
	};

	void ASShowScoreBoard ( unsigned long bShow );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_ScoreBoardTraining::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ScoreBoardZombie
// 0x0000 (0x02F0 - 0x02F0)
class USFGFxHUD_ScoreBoardZombie : public USFGFxHUD_ScoreBoardSurvival
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76649 ];

		return pClassPointer;
	};

	bool IsRadarValid ( );
	void ASCreateRadar ( );
};

UClass* USFGFxHUD_ScoreBoardZombie::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Shooter
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Shooter : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76657 ];

		return pClassPointer;
	};

	bool OnTeamScoreUpdated ( int RedScore, int BlueScore );
};

UClass* USFGFXHUD_Shooter::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceDashBoard
// 0x000C (0x00D0 - 0x00C4)
class USFGFxHUDWidget_ShooterDefenceDashBoard : public USFGFxHUDWidget_SurvivalMoneyInfo
{
public:
	struct FString                                     strStatUseMsg;                                    		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76663 ];

		return pClassPointer;
	};

	void SetPlayerBuffUI ( class ASFShooterDefencePlayerReplicationInfo* SFPRI );
	void ASSetPlayerBuffOffense ( float BuffValue );
	void ASSetPlayerBuffDefence ( float BuffValue );
	void ASSetPlayerBuffSpeed ( float BuffValue );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void UpdateModeStatInfo ( );
	void OnPlayerRespawned ( );
	void OnPlayerPawnDied ( );
	void OnModeStatChanged ( );
	void OnChangedViewtarget ( );
	void CloseWidget ( );
	void OpenWidget ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_ShooterDefenceDashBoard::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceUserList
// 0x000C (0x0168 - 0x015C)
class USFGFxHUDWidget_ShooterDefenceUserList : public USFGFxHUDWidget_SurvivalUserList
{
public:
	TArray< struct USFGFxHUDWidget_ShooterDefenceUserList_FSUIModePlayerInfo > ModePlayerInfoList;                               		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76664 ];

		return pClassPointer;
	};

	struct FString GetModeLevelText ( int ModeLevel );
	void ASUpdatePlayerRespawnInfo ( int Index, float ElapsedTime, float TotalTime );
	void ASUpdatePlayerInfo ( int Index, struct FString ModeLevel, int Health, int MaxHealth, int Speed, int Defence, int Offense );
	void ASRemovePlayerInfo ( int Index );
	void ASAddNewPlayerInfo ( struct FString Emblem, struct FString ModeLevel, struct FString CodeName, int Health, int MaxHealth );
	void ASSetPlayerInfo ( struct FString Emblem, struct FString ModeLevel, struct FString CodeName, int Health, int MaxHealth, int AttackPoint, int DefencePoint, int MovePoint, int Exp, int NextExp );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void SetPlayerBuffStat ( struct USFGFxHUDWidget_ShooterDefenceUserList_FSUIModePlayerInfo NewInfo, int* Speed, int* Defence, int* Attack );
	void UpdatePlayerInfo ( int Index, struct USFGFxHUDWidget_ShooterDefenceUserList_FSUIModePlayerInfo NewInfo );
	void RemovePlayerInfo ( int Index );
	void AddNewPlayerInfo ( struct USFGFxHUDWidget_ShooterDefenceUserList_FSUIModePlayerInfo NewInfo );
	void UpdateAllPlayerInfo ( );
	void SetPlayerInfoByPRI ( class ASFShooterDefencePlayerReplicationInfo* SFWPRI, struct USFGFxHUDWidget_ShooterDefenceUserList_FSUIModePlayerInfo* NewInfo );
	void OnLocalPRIInitialized ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_ShooterDefenceUserList::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceEquip
// 0x000C (0x00CC - 0x00C0)
class USFGFxHUDWidget_ShooterDefenceEquip : public USFGFxHUDWidget
{
public:
	TArray< struct FString >                           SlotName;                                         		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76665 ];

		return pClassPointer;
	};

	void ASSetWeaponBullets ( int SlotNum, int AmmoNum );
	void SetWeaponBullets ( class ASFWeapon* WeaponInfo );
	void NotifySetSelectEqipSlot ( int SlotIndex );
	void ASSetSelectSlot ( int SlotNum );
	void OnSetSelectSlot ( int SlotNum );
	void AsSetEquipSlot ( int SlotIndex, struct FString ItmeType, struct FString ItemImg, struct FString ItemCamo, int ItemAmmo );
	void AsSetSlotShortCut ( struct FString Slot0, struct FString Slot1, struct FString Slot2, struct FString Slot3, struct FString Slot4 );
	void ASCloseShooterDefenceEquip ( );
	void ASOpenShooterDefenceEquip ( );
	int GetSlotNumber ( int ItemGroup );
	void ClearEquipSlot ( );
	void UpdateEquipData ( );
	void UpdateEquipSlot ( class ASFWeapon* WeaponInfo );
	void SetSlotShortCut ( );
	void CloseWidget ( );
	void OnPlayerRespawned ( );
	void OnPlayerPawnDied ( );
	void OpenWidget ( );
	void Update ( float DeltaSeconds );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ShooterDefenceEquip::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceCursor
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_ShooterDefenceCursor : public USFGFxHUDWidget
{
public:
	class UGFxObject*                                  AimCursor;                                        		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76666 ];

		return pClassPointer;
	};

	void OnFinishFlashBangEffect ( );
	void OnStartFlashBangEffect ( );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void SetAimCursorPosition ( );
	void shooter_OnAimCursor ( class UGFxObject* CursorMovieClip );
	void ASRequestAimCusor ( );
	void ASCloseAimCursor ( );
	void ASShowAimCursor ( );
	void CloseWidget ( );
	void OpenWidget ( );
	void OnRoundStarted ( );
	void Update ( float DeltaSeconds );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ShooterDefenceCursor::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceResult
// 0x0018 (0x00D8 - 0x00C0)
class USFGFxHUDWidget_ShooterDefenceResult : public USFGFxHUDWidget
{
public:
	struct FString                                     MissionClearMsg;                                  		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MissionFailureMsg;                                		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76667 ];

		return pClassPointer;
	};

	void ASSetCodeNames ( class UGFxObject* UserData );
	void SetPlayerData ( );
	void ASSetTitle ( struct FString msg );
	void ASSetSuccessCase ( unsigned long bSuccess );
	void SetTitle ( unsigned char MatchEndType );
	void ASHideResultWnd ( );
	void ASShowResultWnd ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
};

UClass* USFGFxHUDWidget_ShooterDefenceResult::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Sniper
// 0x000C (0x0218 - 0x020C)
class USFGFxHUD_Sniper : public USFGFxHUDMoviePlayer
{
public:
	class UGFxObject*                                  HitFromMeMC;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  HitFromEnemyMC;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	float                                              fShowDuration;                                    		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76668 ];

		return pClassPointer;
	};

	void ASHideHitFromEnemy ( );
	void ASShowHitFromEnemy ( int BodyPartIndex );
	void ASHideHitFromMe ( );
	void ASShowHitFromMe ( int BodyPartIndex );
	int GetBodyPartIndex ( unsigned char BodyPart );
	void OnPlayerHitEnemy ( unsigned char HitBody );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_Sniper::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Spy
// 0x0000 (0x020C - 0x020C)
class USFGFxHUD_Spy : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76701 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_Spy::pClassPointer = NULL;

// Class SFGame.SFGFxHudWidget_SpyHelp
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHudWidget_SpyHelp : public USFGFxHUDWidget
{
public:
	unsigned long                                      bExplainUsed : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76703 ];

		return pClassPointer;
	};

	void ASVisibleShortCut ( unsigned long Shortcut );
	void ASSetPosition ( unsigned long bRedTeam );
	void ASSetExplainText ( struct FString Shortcut );
	void ASCloseHelpPanel ( );
	void ASOpenHelpPanel ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnStartSwitchingSide ( float Duration );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void OnToggleHelp ( );
	void TeamClassify ( );
	void OnPlayerPawnDied ( );
	void OnViewLoaded ( );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHudWidget_SpyHelp::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_SurvivalSupressorProgress
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_SurvivalSupressorProgress : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76705 ];

		return pClassPointer;
	};

	void ASUpdateSupressorProgress ( int nStep );
	void ASHideSupressorProgress ( );
	void ASShowSupressorProgress ( );
	void OnUpdatePerSecond ( );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_SurvivalSupressorProgress::pClassPointer = NULL;

// Class SFGame.SFTrainingHUD
// 0x0024 (0x0E64 - 0x0E40)
class ASFTrainingHUD : public ASFTeamHUD
{
public:
	struct FScriptDelegate                             __OnTargetSpawned__Delegate;                      		// 0x0E40 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnToggleTimer__Delegate;                        		// 0x0E4C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClearTimer__Delegate;                         		// 0x0E58 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76915 ];

		return pClassPointer;
	};

	void NotifyMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, unsigned long bTeamChange, float Duration );
	void Reset ( );
	void OnClearTimer ( );
	void OnToggleTimer ( );
	void OnTargetSpawned ( int nCurCount );
};

UClass* ASFTrainingHUD::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Tutorial
// 0x000C (0x0218 - 0x020C)
class USFGFxHUD_Tutorial : public USFGFxHUDMoviePlayer
{
public:
	struct FScriptDelegate                             __OnsetHitTargetEndMotionDelegate__Delegate;      		// 0x020C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 76962 ];

		return pClassPointer;
	};

	void ASCloseScoreInfo ( );
	void ASOpenScoreInfo ( );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundStarted ( );
	void SetOnsetHitTargetEndMotionDelegate ( struct FScriptDelegate InDelegate );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	void OnsetHitTargetEndMotionDelegate ( int Index );
};

UClass* USFGFxHUD_Tutorial::pClassPointer = NULL;

// Class SFGame.SFGFXHUD_Warrior
// 0x0000 (0x020C - 0x020C)
class USFGFXHUD_Warrior : public USFGFxHUDMoviePlayer
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77096 ];

		return pClassPointer;
	};

	bool OnTeamScoreUpdated ( int RedScore, int BlueScore );
};

UClass* USFGFXHUD_Warrior::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_WarriorModeInfo
// 0x0008 (0x00C8 - 0x00C0)
class USFGFxHUDWidget_WarriorModeInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevMyScore;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevOtherScore;                                   		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77102 ];

		return pClassPointer;
	};

	void ASSetOtherTeamScore ( int Current, int total );
	void ASSetMyTeamScore ( int Current, int total );
	void ASSetMyTeamIndex ( int TeamIndex );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnRoundStarted ( );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void CloseWidget ( );
	void OpenWidget ( );
	void SetTeamScore ( int RedScore, int BlueScore, unsigned long bForce );
	void UpdateTeamScore ( unsigned long bForce );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_WarriorModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_WarriorUserList
// 0x000C (0x0168 - 0x015C)
class USFGFxHUDWidget_WarriorUserList : public USFGFxHUDWidget_SurvivalUserList
{
public:
	TArray< struct USFGFxHUDWidget_WarriorUserList_FSUIModePlayerInfo > ModePlayerInfoList;                               		// 0x015C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77103 ];

		return pClassPointer;
	};

	struct FString GetModeLevelText ( int ModeLevel );
	void ASUpdatePlayerRespawnInfo ( int Index, float ElapsedTime, float TotalTime );
	void ASUpdatePlayerInfo ( int Index, struct FString ModeLevel, int Health, int MaxHealth );
	void ASRemovePlayerInfo ( int Index );
	void ASAddNewPlayerInfo ( struct FString Emblem, struct FString ModeLevel, struct FString CodeName, int Health, int MaxHealth );
	void ASSetPlayerInfo ( struct FString Emblem, struct FString ModeLevel, struct FString CodeName, int Health, int MaxHealth, int AttackPoint, int DefencePoint, int MovePoint, int Exp, int NextExp );
	void ASSetTeamColor ( int TeamNum );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void UpdatePlayerInfo ( int Index, struct USFGFxHUDWidget_WarriorUserList_FSUIModePlayerInfo NewInfo );
	void RemovePlayerInfo ( int Index );
	void AddNewPlayerInfo ( struct USFGFxHUDWidget_WarriorUserList_FSUIModePlayerInfo NewInfo );
	void UpdateAllPlayerInfo ( );
	void SetPlayerInfoByPRI ( class ASFWarriorPlayerReplicationInfo* SFWPRI, struct USFGFxHUDWidget_WarriorUserList_FSUIModePlayerInfo* NewInfo );
	void OnLocalPRIInitialized ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_WarriorUserList::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_WarriorMoneyInfo
// 0x0000 (0x00C4 - 0x00C4)
class USFGFxHUDWidget_WarriorMoneyInfo : public USFGFxHUDWidget_SurvivalMoneyInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77104 ];

		return pClassPointer;
	};

	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_WarriorMoneyInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_HeroPlayerInfo
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_HeroPlayerInfo : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77105 ];

		return pClassPointer;
	};

	void ASSetMyData ( struct FString Emblem, struct FString ModeLevel, int ModeExp, int TotalModeExp, int ModeAttackPoint, int MaxModeAttackPoint, int ModeDefencePoint, int MaxModeDefencePoint, int ModeMovePoint, int MaxModeMovePoint );
	void ASSetRecallKey ( struct FString Key );
	void ASSetMyTeamIndex ( int TeamIndex );
	void ASClosePlayerInfo ( );
	void ASOpenPlayerInfo ( );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnModeStatChanged ( );
	void OnChangedViewtarget ( );
	void OnRoundStarted ( );
	void UpdatePlayerInfo ( );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_HeroPlayerInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_InGameQuest
// 0x0020 (0x00E0 - 0x00C0)
class USFGFxHUDWidget_InGameQuest : public USFGFxHUDWidget
{
public:
	class USFChallengeListCondition*                   ChallengeListCondition;                           		// 0x00C0 (0x0004) [0x0000000000000000]              
	TArray< struct FSInGameQuestData >                 InGameQuests;                                     		// 0x00C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FChallengeProgressData >            DisplayQuestList;                                 		// 0x00D0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CompletedDisplayQuestCount;                       		// 0x00DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77106 ];

		return pClassPointer;
	};

	void ASSetQuestComplete ( int Index );
	void ASCloseQuestInfo ( );
	void ASOpenQuestInfo ( TArray< class UGFxObject* > QuestList );
	void OnChallengeCompleted ( struct FName SupplyCode, int TaskIndex );
	void OnRoundStarted ( );
	void CheckAllQuestCompleted ( );
	void CompleteQuest ( struct FName SupplyCode, int TaskIndex );
	bool IsCompletedChallenge ( int Index );
	void UpdateQuestInfo ( unsigned long bIgnoreCloseWidget );
	void InitializeCurrentQuests ( );
	void CloseWidget ( );
	void OpenWidget ( );
	void OnViewLoaded ( );
};

UClass* USFGFxHUDWidget_InGameQuest::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Help
// 0x000C (0x00CC - 0x00C0)
class USFGFxHUDWidget_Help : public USFGFxHUDWidget
{
public:
	TArray< struct FString >                           HelpPage;                                         		// 0x00C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77107 ];

		return pClassPointer;
	};

	void ASSetShortcut ( struct FString Shortcut );
	void ASCloseHelp ( );
	void ASOpenHelp ( struct FString Page1, struct FString Page2, struct FString Page3, struct FString Page4 );
	void OnRoundStarted ( );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void OnToggleHelp ( );
	void OnViewLoaded ( );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_Help::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_Zombie
// 0x0000 (0x020C - 0x020C)
class USFGFxHUD_Zombie : public USFGFXHUD_PvEBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77178 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUD_Zombie::pClassPointer = NULL;

// Class SFGame.SFGFxHUD_ZombieHideSeek
// 0x000C (0x0218 - 0x020C)
class USFGFxHUD_ZombieHideSeek : public USFGFxHUDMoviePlayer
{
public:
	class UGFxObject*                                  ZombieToopTipMC;                                  		// 0x020C (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowZombieToolTip : 1;                           		// 0x0210 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                ShowZombieToolTipCount;                           		// 0x0214 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77180 ];

		return pClassPointer;
	};

	void SetHPBlinkAniCondition ( );
	void ASHideZombieToolTip ( );
	void ASShowZombieToolTip ( );
	void UpdateZombieToolTip ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxHUD_ZombieHideSeek::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ZombieHideSeekCount
// 0x000C (0x00CC - 0x00C0)
class USFGFxHUDWidget_ZombieHideSeekCount : public USFGFxHUDWidget
{
public:
	int                                                BlueCount;                                        		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                RedCount;                                         		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                RedAICount;                                       		// 0x00C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77198 ];

		return pClassPointer;
	};

	void ASSetCount ( );
	void UpdateUserCount ( );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnStartSwitchingSide ( float Duration );
	void OnPawnDying ( class ASFPawn* DiedPawn );
	void OnChangedNumLives ( );
	void OnFinishKillCam ( );
	void OnStartKillCam ( );
	void OnFinishDeadPersonCam ( );
	void OnStartDeadPersonCam ( );
	void ASCloseUserCount ( );
	void ASOpenUserCount ( );
	void ASSetTeam ( unsigned long bZombie );
	void InitUserCount ( );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnRoundStarted ( );
};

UClass* USFGFxHUDWidget_ZombieHideSeekCount::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ZombieHideSeekModeInfo
// 0x0010 (0x00D0 - 0x00C0)
class USFGFxHUDWidget_ZombieHideSeekModeInfo : public USFGFxHUDWidget
{
public:
	int                                                PrevMyScore;                                      		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevOtherScore;                                   		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                FeverTimeGauge;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              
	class ASFZombieHideSeekGameReplicationInfo*        ZombieHideSeekGRI;                                		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77199 ];

		return pClassPointer;
	};

	bool IsZombieTeam ( class ASFPawn* DiedPawn );
	bool IsSuicidedPlayer ( class ASFPawn* DiedPawn );
	bool IsUpdatableZombieKillCount ( class ASFPawn* DiedPawn );
	bool IsUpdatableHumanKillCount ( class ASFPawn* DiedPawn );
	void InitZombieHideSeekModeInfo ( );
	int GetKillCount ( );
	void UpdateToHumanPlayerKillCountUp ( );
	void UpdateToZombiePlayerKillCountUp ( );
	void UpdateToZombieHideSeekKillCount ( );
	void eventUpdate ( float DeltaSeconds );
	void ASResetHumanKillCount ( );
	void ASSetHumanKillCount ( int KillCount );
	void ASResetZombieKillCount ( );
	void ASSetZombieKillCount ( int KillCount );
	void ASResetFeverTimeGauge ( );
	void ASSetTeamImage ( unsigned long bZombie );
	void ASSetFeverTimeGauge ( int nGauge );
	void ASSetOtherTeamScore ( int OtherScore );
	void ASSetMyTeamScore ( int MyScore );
	void ASCloseModeInfo ( );
	void ASOpenModeInfo ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnRoundStarted ( );
	void OnTeamScoreUpdated ( int RedScore, int BlueScore );
	void CloseWidget ( );
	void OpenWidget ( );
	void SetTeamScore ( int RedScore, int BlueScore, unsigned long bForce );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_ZombieHideSeekModeInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHudWidget_ZombieHideSeekHelp
// 0x0010 (0x00D0 - 0x00C0)
class USFGFxHudWidget_ZombieHideSeekHelp : public USFGFxHUDWidget
{
public:
	unsigned long                                      bExplainUsed : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FString >                           ExplainPage;                                      		// 0x00C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 77200 ];

		return pClassPointer;
	};

	void TeamClassify ( );
	void ASVisibleShortCut ( unsigned long Shortcut );
	void ASExplainReset ( );
	void ASSetPosition ( unsigned long bZombie );
	void ASSetExplainText ( struct FString Shortcut );
	void ASCloseExplain ( );
	void ASOpenExplain ( struct FString Page1, struct FString Page2, struct FString Page3, struct FString Page4 );
	void OnPlayerPawnDied ( );
	void OnStartSwitchingSide ( float Duration );
	void OnMatchEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char MatchEndType, float Duration );
	void OnRoundEnded ( int RedScore, int BlueScore, unsigned char WinTeamIndex, unsigned char RoundEndType, float Duration, float ChangingTeamDuration );
	void OnRoundStarted ( );
	void OnToggleHelp ( );
	void OnViewLoaded ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void OnPreMatchInProgress ( float ProgressDuration, unsigned char RoundStartType );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHudWidget_ZombieHideSeekHelp::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_RandomWeaponProbabilityUp
// 0x0000 (0x0184 - 0x0184)
class USFItem_Functional_RandomWeaponProbabilityUp : public USFItem_Func_ProvideItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78246 ];

		return pClassPointer;
	};

};

UClass* USFItem_Functional_RandomWeaponProbabilityUp::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_HeroTimer
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_HeroTimer : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78479 ];

		return pClassPointer;
	};

	void ASSetCurrentTime ( struct FString TimeText, int Warning );
	void ASCloseTimer ( );
	void ASOpenTimer ( );
	void Update ( float DeltaSeconds );
	void CloseWidget ( );
	void OpenWidget ( );
};

UClass* USFGFxHUDWidget_HeroTimer::pClassPointer = NULL;

// Class SFGame.SFKillVoice
// 0x0004 (0x0040 - 0x003C)
class USFKillVoice : public UObject
{
public:
	class USFSoundGroup_Voice*                         KillVoice;                                        		// 0x003C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78657 ];

		return pClassPointer;
	};

	class USoundNodeWave* GetKillFeedBackVoiceSound ( struct FString strMessage );
};

UClass* USFKillVoice::pClassPointer = NULL;

// Class SFGame.SFSnowBallFightHud
// 0x0000 (0x0E40 - 0x0E40)
class ASFSnowBallFightHud : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 78806 ];

		return pClassPointer;
	};

};

UClass* ASFSnowBallFightHud::pClassPointer = NULL;

// Class SFGame.SFShooterPlayerController
// 0x0115 (0x1311 - 0x11FC)
class ASFShooterPlayerController : public ASFPvEPlayerController
{
public:
	struct FString                                     ReloadEffectString;                               		// 0x11FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ReloadEffectScale;                                		// 0x1208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystem*                             ReloadEffectPS;                                   		// 0x120C (0x0004) [0x0000000000000000]              
	class ASFEmitterNoSync*                            ReloadEmitter;                                    		// 0x1210 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     HitEffectString;                                  		// 0x1214 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              HitEffectScale;                                   		// 0x1220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UParticleSystem*                             HitEffectPS;                                      		// 0x1224 (0x0004) [0x0000000000000000]              
	class ASFEmitterNoSync*                            HitEmitter;                                       		// 0x1228 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     PlayerMarkString;                                 		// 0x122C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              PlayerMarkScale;                                  		// 0x1238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UDecalMaterial*                              PlayerMarkMaterial;                               		// 0x123C (0x0004) [0x0000000000000000]              
	class ADecalActorMovable*                          PlayerMarkDecal;                                  		// 0x1240 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FString                                     SpeedUpMarkString;                                		// 0x1244 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              SpeedUpMarkScale;                                 		// 0x1250 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UDecalMaterial*                              SpeedUpMarkMaterial;                              		// 0x1254 (0x0004) [0x0000000000000000]              
	class ADynamicSMActor_Spawnable*                   LookAtConeComponent;                              		// 0x1258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     LookAtConeMeshString;                             		// 0x125C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UStaticMesh*                                 LookAtConeMesh;                                   		// 0x1268 (0x0004) [0x0000000000000000]              
	class USpotLightComponent*                         LookAtLight;                                      		// 0x126C (0x0004) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRotator                                    LookAtConeRelRotation;                            		// 0x1270 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastFocusOrigin;                                  		// 0x127C (0x000C) [0x0000000000000000]              
	float                                              CameraIsolateViewDistance;                        		// 0x1288 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraMaxHeight;                                  		// 0x128C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraApplyRatio;                                 		// 0x1290 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraExtentViewRatio;                            		// 0x1294 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraInterpSpeed;                                		// 0x1298 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraFOV;                                        		// 0x129C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bEnableCameraExtentViewX : 1;                     		// 0x12A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bEnableCameraExtentViewY : 1;                     		// 0x12A0 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bEnableCameraExtentViewZ : 1;                     		// 0x12A0 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bSetDesiredCamera : 1;                            		// 0x12A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnableTargeting : 1;                             		// 0x12A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      ShooterMouseLocInited : 1;                        		// 0x12A0 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                StatStoreIndex;                                   		// 0x12A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DesiredCameraIsolateViewDistance;                 		// 0x12A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredCameraMaxHeight;                           		// 0x12AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredCameraApplyRatio;                          		// 0x12B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredCameraExtentViewRatio;                     		// 0x12B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredCameraApplyInterpTime;                     		// 0x12B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DesiredAlpha;                                     		// 0x12BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraBaseRotation;                               		// 0x12C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CameraBaseDirection;                              		// 0x12CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ViewRotationLimit;                                		// 0x12D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlaneConstantOld;                                 		// 0x12E4 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   StartTrace2d;                                     		// 0x12E8 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   EndTrace2d;                                       		// 0x12F0 (0x0008) [0x0000000000000000]              
	float                                              ShooterMouseSensitivity;                          		// 0x12F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ShooterMouseCalibration;                          		// 0x12FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector2D                                   ShooterMouseLoc;                                  		// 0x1300 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   HalfScreenRes;                                    		// 0x1308 (0x0008) [0x0000000000000000]              
	unsigned char                                      MouseModecurrent;                                 		// 0x1310 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79305 ];

		return pClassPointer;
	};

	bool eventCanUseEnemyCharacter ( );
	void GetSprayTargetDirection ( struct FVector* POVLoc, struct FRotator* POVRot );
	void SetCameraMode ( struct FName NewCamMode );
	bool SkipGunTracer ( struct FVector StartLocation, struct FVector EndLocation );
	void ChangeRoundMouseLoc ( );
	void ChangeFullMouseLoc ( );
	void SetVirtualCursorMode ( unsigned char NewMode );
	void ShooterMouseProcess ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void DrawTmpCursor ( class UCanvas* myCanvas, struct FVector2D CursorLoc );
	void SetHitInfoDebug ( struct FVector2D newStart, struct FVector2D newEnd );
	void eventNotifyChangedViewtarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
	void NotifyObserverFlashBangEffectEnd ( class ASFPawn* TakePawn );
	void NotifyObserverFlashBangEffectStart ( class ASFPawn* TakePawn );
	void NotifyPawnDied ( class ASFPawn* DiedPawn, class UClass* DamageType, struct FVector HitLocation );
	struct FRotator eventGetBaseAimRotation ( );
	void NotifyPawnTakeDamage ( class ASFPawn* HittedPawn );
	void OnMovePointChanged ( );
	void OnDefencePointChanged ( );
	void OnAttackPointChanged ( );
	void PreRender ( class UCanvas* InCanvas );
	void UpdateRotationEx ( struct FVector newAccel, float DeltaTime );
	struct FVector GetFocusOrigin ( struct FVector WorldOrigin, struct FVector WorldDirection );
	bool CalcTopViewCam ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	void CalcTopViewCamInternal ( float fDeltaTime, float IsolateViewDistance, float MaxHeight, float ApplyRatio, float ExtentViewRatio, float InterpSpeed, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	void EnableDesiredCamera ( unsigned long bEnable, float InDesiredCameraIsolateViewDistance, float InDesiredCameraMaxHeight, float InDesiredCameraApplyRatio, float InDesiredCameraExtentViewRatio, float InDesiredCameraApplyInterpTime );
	void eventSetForegroundFOVAngle ( float NewFOV );
	void ReloadFinished ( );
	bool ActivateStore ( int ShopGroupIndex );
	void ServerActivateStore ( int ShopGroupIndex );
	void WeaponStateChanged ( unsigned char WeaponStateNew, unsigned long bRedundance, class ASFWeapon* eventCaller );
	void GivePawn ( class APawn* NewPawn, unsigned long bInputFlag );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
};

UClass* ASFShooterPlayerController::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceMinimap
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ShooterDefenceMinimap : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79447 ];

		return pClassPointer;
	};

	void ASClosePlayerInfo ( );
	void ASOpenPlayerInfo ( );
	void OnPawnTeamChanged ( unsigned long bMyTeamChanged );
	void OnPlayerPawnDiedWithBodyPart ( unsigned char HitBody );
	void OnModeStatChanged ( );
	void OnChangedViewtarget ( );
	void OnRoundStarted ( );
	void CloseWidget ( );
	void OpenWidget ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_ShooterDefenceMinimap::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefencePlayerInfo
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ShooterDefencePlayerInfo : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79462 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUDWidget_ShooterDefencePlayerInfo::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ShooterDefenceProgress
// 0x0018 (0x00D8 - 0x00C0)
class USFGFxHUDWidget_ShooterDefenceProgress : public USFGFxHUDWidget
{
public:
	int                                                MaxHealth;                                        		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                PrevHealth;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              
	class ASFPawn*                                     CurrentPawn;                                      		// 0x00C8 (0x0004) [0x0000000000000000]              
	struct FString                                     strProgressName;                                  		// 0x00CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79464 ];

		return pClassPointer;
	};

	void ClearCurrentPawn ( );
	void ASSetProgressName ( struct FString strName );
	void SetCurrentHitPawn ( );
	void OnUpdatePerSecond ( );
	void ASUpdateProgressHP ( int CurHP, int MaxHP );
	void eventUpdateProgressInfo ( int nHP );
	void ASHideProgress ( );
	void ASShowProgress ( );
	void OnPreRoundEnded ( );
	void OnRoundStarted ( );
	void Update ( float DeltaSeconds );
};

UClass* USFGFxHUDWidget_ShooterDefenceProgress::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_Spectator
// 0x0004 (0x00C4 - 0x00C0)
class USFGFxHUDWidget_Spectator : public USFGFxHUDWidget
{
public:
	unsigned long                                      bShowSpectating : 1;                              		// 0x00C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79648 ];

		return pClassPointer;
	};

	void ASHideSpectator ( );
	void ASShowSpectator ( );
	void OnSpectatingChanged ( class APlayerReplicationInfo* PRI, unsigned long bIsSpectating );
	void UnregisterDelegate ( );
	void RegisterDelegate ( );
};

UClass* USFGFxHUDWidget_Spectator::pClassPointer = NULL;

// Class SFGame.SFGFxHUDWidget_ThrIndicator
// 0x0000 (0x00C0 - 0x00C0)
class USFGFxHUDWidget_ThrIndicator : public USFGFxHUDWidget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 79956 ];

		return pClassPointer;
	};

};

UClass* USFGFxHUDWidget_ThrIndicator::pClassPointer = NULL;

// Class SFGame.SFGFxMoviePlayer_ClanMark
// 0x0028 (0x0208 - 0x01E0)
class USFGFxMoviePlayer_ClanMark : public USFGFxMoviePlayer
{
public:
	struct FString                                     LobbyRankMarkString;                              		// 0x01E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bInit : 1;                                        		// 0x01EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FString                                     UvLoaderFilePath;                                 		// 0x01F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __UVimgLoader_InitDelegate__Delegate;             		// 0x01FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80547 ];

		return pClassPointer;
	};

	void SetUVimgLoader_InitDelegate ( struct FScriptDelegate InDelegate );
	void UVimgLoader_InitDelegate ( );
	void ASUVLoaderFilePath ( struct FString Param1 );
	void Init ( class ULocalPlayer* LocPlay );
	void UVimgLoader_Init ( );
	bool eventSetMark ( int SlotIndex, struct FString mark );
	void SetLobbyClanMarkInfo ( struct FString RankMark );
	void eventRestoreDevice ( );
};

UClass* USFGFxMoviePlayer_ClanMark::pClassPointer = NULL;

// Class SFGame.SFPawn_Lobby
// 0x0004 (0x1060 - 0x105C)
class ASFPawn_Lobby : public ASFPawn_Player
{
public:
	int                                                DisplayingUnitID;                                 		// 0x105C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80564 ];

		return pClassPointer;
	};

	void RebuildExtraParts ( );
	void UpdateExtraParts ( class USkeletalMeshComponent* newTargetMesh );
};

UClass* ASFPawn_Lobby::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_GachaRoll
// 0x002C (0x0380 - 0x0354)
class USFGFxLobby_GachaRoll : public USFGFxLobbyScreenEx
{
public:
	struct FString                                     GachaRollText;                                    		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bUseGachaRoll : 1;                                		// 0x0360 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                GachaRollTimeInterval;                            		// 0x0364 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     GachaRollItemTextFormat;                          		// 0x0368 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GachaRollFeverActiveTextFormat;                   		// 0x0374 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80574 ];

		return pClassPointer;
	};

	void GachaRollTxtEnd ( );
	void ASSetRollTxt ( struct FString GachaRollTxt );
	void SetGachaRollText ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_GachaRoll::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_PurchaseGuide
// 0x0058 (0x03AC - 0x0354)
class USFGFxLobby_PurchaseGuide : public USFGFxLobbyScreenEx
{
public:
	class UGFxClikWidget*                              btnExpand;                                        		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BtnMinimize;                                      		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnOk;                                            		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCancel;                                        		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ItemListMC;                                       		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnChkLater;                                      		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnToolTip;                                       		// 0x036C (0x0004) [0x0000000000000000]              
	unsigned long                                      bExpanded : 1;                                    		// 0x0370 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOpenedTooltip : 1;                               		// 0x0370 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< struct FSFItemData >                       BuyAllItemArray;                                  		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           PurchaseGuideTitles;                              		// 0x0380 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           PurchaseGuideMessages;                            		// 0x038C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSGuideItem >                       PurchaseGuideItemArray;                           		// 0x0398 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                nDisableDays;                                     		// 0x03A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fAutoHideTime;                                    		// 0x03A8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80577 ];

		return pClassPointer;
	};

	bool IsExpanded ( );
	void SetExpanded ( unsigned long bExpand, unsigned long bAutoClose );
	void ASMinimizePurchaseGuide ( );
	void ASExpandPurchaseGuide ( );
	void ASSetItemList ( );
	void ASSetGuideMessage ( );
	void ClosePurchaseGuide ( unsigned long bAutoClose );
	void OnActiveScreenClosed ( );
	void SetBtnLaterDisabled ( unsigned long bDisable );
	void OpenPurchaseGuideList ( );
	void ClosePurchaseGuideTooltip ( );
	void OpenPurchaseGuideToolTip ( );
	void OpenPurchaseGuide ( );
	bool IsCheckedNotToday ( );
	void OnCancelButtonPress ( struct FEventData ev );
	void OnOKButtonPress ( struct FEventData ev );
	void OnChkBtnClik ( struct FEventData ev );
	void OnItemListClicked ( struct FEventData ev );
	void OnClickMinimizeBtn ( struct FEventData ev );
	void OnClickExpandBtn ( struct FEventData ev );
	void OnToolTipBtnClick ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_PurchaseGuide::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_NotifyWindow
// 0x0024 (0x0378 - 0x0354)
class USFGFxLobby_NotifyWindow : public USFGFxLobbyScreenEx
{
public:
	class UGFxClikWidget*                              OpenBtn;                                          		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CloseBtn;                                         		// 0x0358 (0x0004) [0x0000000000000000]              
	int                                                nCurrentIndex;                                    		// 0x035C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsOpenWindow : 1;                                		// 0x0360 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOpenWebConfirm : 1;                              		// 0x0360 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	int                                                TargeShopPart;                                    		// 0x0364 (0x0004) [0x0000000000000000]              
	unsigned char                                      UpdateTartgetScreenIndex;                         		// 0x0368 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickTabBtnDelegate__Delegate;                		// 0x036C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80579 ];

		return pClassPointer;
	};

	void OpenWeb ( struct FString strURL );
	void AsSetNotifyTab ( int Index );
	void ASSetNotifyImage ( TArray< struct FString > ImgFilePathArray );
	void ASCloseNotifyWindow ( );
	void ASOpenNotifyWindow ( );
	void SetOnClickTabBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickTabBtnDelegate ( int Index );
	void OnClickTabBtn ( int Index );
	void OnClickCloseBtn ( struct FEventData ev );
	void OnClickOpenBtn ( struct FEventData ev );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void SetNofifyImage ( );
	void CheckRollingImageTimer ( );
	void ResetRollingImageTimer ( );
	void UpdateNotifyWindow ( int ViewIndex );
	bool IsOpenWindow ( );
	void SetOpenWindow ( unsigned long bIsOpen );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_NotifyWindow::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_MsgrChatting
// 0x002C (0x0380 - 0x0354)
class USFGFxLobby_MsgrChatting : public USFGFxLobbyScreenEx
{
public:
	int                                                MaxChatDlgCount;                                  		// 0x0354 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ActiveDlgIndex;                                   		// 0x0358 (0x0004) [0x0000000000000000]              
	TArray< class USFGFxDialog_MsgrChat* >             MsgrChatDlgArray;                                 		// 0x035C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MaxChattingListMessage;                           		// 0x0368 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnChatDlgCreatedDelegate__Delegate;             		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80580 ];

		return pClassPointer;
	};

	void ASSetLocationWindow ( int Location );
	void OnMsgrBuddyCodeNameChanged ( int InChangedCodeNameUSN, struct FString InChangedCodeName );
	void PKT_MESSENGER_BuddyChat_REQ_OK ( class UPacket* recvPacket );
	void NotifyFriendListUpdated ( int InUSN );
	void SetStartGameTimeStamp ( );
	int GetMsgNotificationCount ( int InUSN );
	void PKT_MESSENGER_BuddyChatAUTO ( class UPacket* recvPacket );
	void ResetActiveDlg ( int NewActiveDlgIndex );
	bool IsViewActive ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool IsChatBoxFocused ( );
	class USFGFxDialog_MsgrChat* GetChatDialog ( int InUSN );
	int GetOpenedDlgCount ( );
	void ASResetDialogLocation ( int NewMax );
	void ClearDialogMessage ( int nCloseIndex );
	void ResetDialogMessage ( int nCloseIndex );
	void ResetDialogLocation ( );
	void ASCloseChatDlgByIndex ( int InDlgNum );
	void ASOpenChatDlgByIndex ( int InIndex );
	void CloseChattingDialog ( int InUSN );
	class USFGFxDialog_MsgrChat* OpenChattingDialog ( int InUSN, unsigned long bFromRecv );
	void OpenAllChattingDialog ( );
	void OpenChattingDialogByChatting ( int InUSN );
	void OpenChattingDialogByClick ( int InUSN );
	void OnChatDlgCreated ( class UGFxObject* ChatCreatedMC, int InIndex );
	void ASCreateChatDlg ( int Index, int MaxIndex );
	void SetOnChatDlgCreatedDelegate ( struct FScriptDelegate InDelegate );
	void OnChatDlgCreatedDelegate ( class UGFxObject* ChattingMC, int Index );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_MsgrChatting::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_LoginTWN
// 0x0000 (0x0374 - 0x0374)
class USFGFxLobby_LoginTWN : public USFGFxLobby_Login
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80612 ];

		return pClassPointer;
	};

	void OnLoginViewActivated ( );
};

UClass* USFGFxLobby_LoginTWN::pClassPointer = NULL;

// Class SFGame.SFItem_Func_VIPSystem_Coupon
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_VIPSystem_Coupon : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 80840 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_VIPSystem_Coupon::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom
// 0x0058 (0x0664 - 0x060C)
class USFGFxLobby_WaitingRoom : public USFGFxLobby_BaseRoom
{
public:
	struct FString                                     SecondHalfMatchingMessage;                        		// 0x060C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EmptySlotName;                                    		// 0x0618 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                SecondHalfCounter;                                		// 0x0624 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMovetoRedDelegate__Delegate;                  		// 0x0628 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMovetoBlueDelegate__Delegate;                 		// 0x0634 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRolloverTeamBtnDelegate__Delegate;            		// 0x0640 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickEmptySlotDelegate__Delegate;             		// 0x064C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnChangedExtraOptionDelegate__Delegate;         		// 0x0658 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81089 ];

		return pClassPointer;
	};

	void PKT_LeftGameRoom_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetInGameScore_REQ_OK ( class UPacket* recvPacket );
	void PKT_RoomUserStatus_REQ_OK ( class UPacket* recvPacket );
	void OnShowChatMessageEvent ( int ChatType, struct FString strMessage, unsigned long bFromMe );
	void SetForceExitMatchingRoom ( );
	bool CheckForceExitMatchingRoom ( unsigned long bIsMatchOver );
	void CheckReadyToInGameMatching ( );
	void OnNotifyExpiredNoInputTime ( );
	void PKT_GameStartMessage_REQ_OK ( class UPacket* recvPacket );
	void PKT_GameIntrusion_REQ_OK ( class UPacket* Packet );
	void PKT_GameStartMessage_Auto ( class UPacket* Packet );
	void PKT_SetTeamSwitch_REQ_OK ( class UPacket* recvPacket );
	bool CheckOptionChanged ( unsigned long EnableOld, int EnableNew, int* Changed );
	void OnChangedExtraOption ( int EnableIntrusion, int EnableThirdPerson, int EnableSwitchSide, int EnableKillCam, int EnableTeamBalance, int EnableLastStand, int EnablePickUpWeapon );
	void OnMovetoBlue ( );
	void OnMovetoRed ( );
	void OnRolloverTeamBtn ( );
	void OnClickEmptySlot ( int SlotIndex, int mouseIndex );
	void SetOnChangedExtraOptionDelegate ( struct FScriptDelegate InDelegate );
	void OnChangedExtraOptionDelegate ( int EnableIntrusion, int EnableThirdPerson, int EnableSwitchSide, int EnableKillCam, int EnableTeamBalance, int EnableLastStand, int EnablePickUpWeapon );
	void SetOnClickEmptySlotDelegate ( struct FScriptDelegate InDelegate );
	void OnClickEmptySlotDelegate ( int SlotIndex, int mouseIndex );
	void SetOnRolloverTeamBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnRolloverTeamBtnDelegate ( );
	void SetOnMovetoBlueDelegate ( struct FScriptDelegate InDelegate );
	void OnMovetoBlueDelegate ( );
	void SetOnMovetoRedDelegate ( struct FScriptDelegate InDelegate );
	void OnMovetoRedDelegate ( );
	bool IsResultDialogViewActive ( );
	void OnDialogClosedAtActiveScreen ( class USFGFxUIView* DialogView );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetupWithOpen ( );
	void DelegateSetupWaitingRoom ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_WaitingRoom::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_MiniGame
// 0x0168 (0x04BC - 0x0354)
class USFGFxLobby_MiniGame : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              StartBtn;                                         		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MiniGameMainTabList;                              		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MiniGameSubTabList;                               		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TrainingMapList;                                  		// 0x0360 (0x0004) [0x0000000000000000]              
	int                                                CurrentMainTabIndex;                              		// 0x0364 (0x0004) [0x0000000000000000]              
	int                                                CurrentSubTabIndex;                               		// 0x0368 (0x0004) [0x0000000000000000]              
	int                                                CurrentRankingTypeIndex;                          		// 0x036C (0x0004) [0x0000000000000000]              
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x0370 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultMiniGameSubTabList;                        		// 0x037C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultRankingSubTabList;                         		// 0x0388 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultRankingTypeList;                           		// 0x0394 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxObject*                                  _global;                                          		// 0x03A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MiniGameList;                                     		// 0x03A4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FiringRangeScoreList;                             		// 0x03A8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FiringRangeScoreBtn[ 0x3 ];                       		// 0x03AC (0x000C) [0x0000000000000000]              
	class UGFxClikWidget*                              RegisterFiringRangeInitial;                       		// 0x03B8 (0x0004) [0x0000000000000000]              
	int                                                SelectMapIndex;                                   		// 0x03BC (0x0004) [0x0000000000000000]              
	unsigned long                                      bStartClick : 1;                                  		// 0x03C0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FString                                     TutorialRecTime;                                  		// 0x03C4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      MiniGameType;                                     		// 0x03D0 (0x0001) [0x0000000000000000]              
	TArray< struct FsMapSelectInfo >                   SelectMapIndexArray;                              		// 0x03D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocalizedDefaultScore;                            		// 0x03E0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedScore;                                   		// 0x03EC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedTraininContext;                          		// 0x03F8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedMinute;                                  		// 0x0404 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedSecond;                                  		// 0x0410 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsMiniGameInfo >                    MiniGameInfoArray;                                		// 0x041C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSTutoBestScore >                   TutoBestScoreArray;                               		// 0x0428 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RecvScoreCount;                                   		// 0x0434 (0x0004) [0x0000000000000000]              
	struct FString                                     StartGameModeClassName;                           		// 0x0438 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     StartGameMapName;                                 		// 0x0444 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FsFiringRangeScoreTabInfo >         FiringRangeScoreTabInfoList;                      		// 0x0450 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                SelectFiringRangeScoreIndex;                      		// 0x045C (0x0004) [0x0000000000000000]              
	int                                                SelectFiringRangeTabCode;                         		// 0x0460 (0x0004) [0x0000000000000000]              
	int                                                FiringRangeScorePageNumber;                       		// 0x0464 (0x0004) [0x0000000000000000]              
	int                                                FiringRangeScorePageIndex;                        		// 0x0468 (0x0004) [0x0000000000000000]              
	int                                                FiringRangePageMax;                               		// 0x046C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FiringRangePageViewCount;                         		// 0x0470 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FiringRangeListInfoMax;                           		// 0x0474 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                UseInitialItemID;                                 		// 0x0478 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class USFGFxDialog_UseFiringRangeScoreInitial*     DlgInitial;                                       		// 0x047C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMinigameMainTapClickedDelegate__Delegate;     		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMinigameSubTapClickedDelegate__Delegate;      		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickMiniGameMapDubbleClickDelegate__Delegate;		// 0x0498 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickMiniGameSelectMapDelegate__Delegate;     		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickFiringRangeListTabDelegate__Delegate;    		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81090 ];

		return pClassPointer;
	};

	void OnClickedPageRightBtn ( );
	void OnClickedPageLeftBtn ( unsigned long IsClickedPageLeftBtn );
	void GetPageIndexByAS ( int Index );
	void OnClickFiringRangeListTab ( int Code );
	void SetOnClickFiringRangeListTabDelegate ( struct FScriptDelegate InDelegate );
	void OnClickFiringRangeListTabDelegate ( int Code );
	void ASSetEnablePaging ( unsigned long IsVisible );
	void ASSetSelectedButton ( int Select );
	void ASSetPagingVisible ( unsigned long IsVisible );
	void ASSetPage ( int PageMax, int NowPage );
	void ASSetMainTab ( class UGFxObject* SubTabs );
	void ASSetScoreData ( class UGFxObject* ScoreData );
	void ASSetEnableFiringRangeVisible ( unsigned long IsVisible );
	void GetFiringRangeScoreTabInfoList ( unsigned char Type, TArray< struct FsFiringRangeScoreTabInfo >* outTabInfoList );
	class UGFxObject* GetFiringScoreMyDataObject ( int Index );
	void SetFiringRagneScoreTab ( unsigned char Type );
	void GetFiringRangeScoreList ( class UGFxObject** DataProvider );
	void SetPagingVisible ( TArray< struct FSFiringRangeListInfo > OutArray );
	void SetFiringRangeScoreList ( );
	void SetFiringRangeMyScore ( );
	void SetFiringRange ( unsigned long IsFirst );
	void OnLClickRegisterFiringRangeInitialBtn ( struct FEventData ev );
	void SetSelectFiringRangeScoreIndex ( int WeaponType, int Code );
	bool OnClickFiringRange ( unsigned char Type );
	void ServerToSendGetFiringRangeScoreRank ( int WeaponType, int SortType );
	void SetRankingDataByMoveBtn ( int Index );
	void OnLClickFiringRangeSWBtn ( struct FEventData ev );
	void OnLClickFiringRangeSRBtn ( struct FEventData ev );
	void OnLClickFiringRangeARBtn ( struct FEventData ev );
	void GetMiniGameSupportMapArray ( class USFUIDataProvider_ModeInfo* Provider, TArray< struct FString >* OutArray );
	class UGFxObject* GetGrobal ( );
	void OnClickMiniGameMapDubbleClick ( int Index, int MapIndex );
	void OnClickMiniGameSelectMap ( int Index, int MapIndex );
	void OnClickMiniGameStart ( struct FEventData ev );
	void OnGameStart ( );
	void SetOnClickMiniGameSelectMapDelegate ( struct FScriptDelegate InDelegate );
	void OnClickMiniGameSelectMapDelegate ( int Index, int MapIndex );
	void SetOnClickMiniGameMapDubbleClickDelegate ( struct FScriptDelegate InDelegate );
	void OnClickMiniGameMapDubbleClickDelegate ( int Index, int MapIndex );
	struct FSTutoBestScore GetBestScore ( int GameModeID, int MapID );
	bool CheckRecivedAllInfo ( );
	void PKT_GetTutorialScoreList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetTutorialScoreList_REQ_OK ( class UPacket* recvPacket );
	void PKT_UpdateFiringRangeNote_OK ( class UPacket* recvPacket );
	void PKT_StartMiniGame_REQ_OK ( class UPacket* Packet );
	void AsSetMiniGameMapList ( int Index, TArray< class UGFxObject* > MaplistArray );
	void SetMapList ( int Index, TArray< class USFUIDataProvider_ModeInfo* > Provider );
	class UGFxObject* SetMiniGameObject ( int Index, TArray< class USFUIDataProvider_ModeInfo* > Provider );
	void GetMiniGameScoreOrContext ( int Index, int MapID, struct FString* outScore, struct FString* outConText );
	TArray< class USFUIDataProvider_ModeInfo* > GetDataProvider ( unsigned char Type );
	void ASSetBaseMapSelect ( int Index, int MapIndex );
	void AddSelectMapInfoArray ( unsigned char Type );
	void SetMiniGameList ( );
	void StartGame ( );
	bool CheckDataProvider ( );
	void GetClassNameOrMapName ( struct FString* outGameClassName, struct FString* outGameMapName );
	void GetDataProviderOrSelectIndex ( unsigned char Type, TArray< class USFUIDataProvider_ModeInfo* >* outDataProvider, int* outSelectIndex );
	void OnClickStartBtn ( );
	void StartFirstTimeTutorial ( unsigned char Type );
	void SetMiniGameType ( unsigned char Type, int MapIndex );
	void SetVisibleFiringRangeBtn ( unsigned long IsVisible, unsigned char Type );
	void OnClickChangeSubTabList ( struct FEventData ev );
	void SetRegisterFiringRangeInitialVisible ( unsigned long IsVisible );
	bool CheckMiniGameSubTabList ( TArray< struct FSFUITabList > DefaultSubTabList );
	void RankingSubTab ( int TabIndex );
	void MiniGameSubTab ( int TabIndex );
	void SetOnMinigameSubTapClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnMinigameSubTapClickedDelegate ( int TabIndex );
	void SetOnMinigameMainTapClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnMinigameMainTapClickedDelegate ( int TabIndex );
	void OnPendingOpen ( );
	void OnMinigameClickedMainTap ( int InTabIndex );
	void OnMinigameClickedSubTap ( int InTabIndex );
	TArray< struct FSFUITabList > GetRankingSubTabList ( );
	TArray< struct FSFUITabList > GetMiniGameSubTabList ( );
	bool GetCurrentSubTabList ( TArray< struct FSFUITabList >* DefaultSubTabList );
	void InitializeSubTab ( int TabIndex );
	void InitializeMainTab ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_MiniGame::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_VideoPlayer
// 0x0064 (0x03B8 - 0x0354)
class USFGFxLobby_VideoPlayer : public USFGFxLobbyScreen
{
public:
	TArray< struct FString >                           CurIntroVideoArray;                               		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           CurIntroVideoExtension;                           		// 0x0360 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                IntroVideoIndex;                                  		// 0x036C (0x0004) [0x0000000000000000]              
	struct FString                                     RatingVideoName;                                  		// 0x0370 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NoRespondLoginMessage;                            		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CurrentIntroType;                                 		// 0x0388 (0x0004) [0x0000000000000000]              
	TArray< struct FSChannelngIntroVideo >             ChannelingIntroVideoArray;                        		// 0x038C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSIntroVideo >                      IntroVideoArray;                                  		// 0x0398 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSIntroVideo >                      RatingVideoArray;                                 		// 0x03A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              ImagePlaySecs;                                    		// 0x03B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ImagePlayIntervalSecs;                            		// 0x03B4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81290 ];

		return pClassPointer;
	};

	void OpenPreviewCharacter ( );
	void StopIntroImagePlay ( );
	void StopVideo ( unsigned long bForce );
	void ASSetImageLoaderClose ( );
	void ASSetImageLoaderOpen ( struct FString ImagePath );
	void ASSetPlayTopVideo ( struct FString VideoName );
	void PlayNextVideo ( );
	bool IsNeedToPlayRatingVideo ( );
	bool IsEnableToSkip ( );
	void Splash_OnTopVideoEnd ( );
	void Splash_OnClick ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnPendingOpen ( );
};

UClass* USFGFxLobby_VideoPlayer::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_BaseRoomList
// 0x00A4 (0x03F8 - 0x0354)
class USFGFxLobby_BaseRoomList : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              RoomListMC;                                       		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnQuick;                                         		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnRoomMake;                                      		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnJoin;                                          		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              headMode;                                         		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              headMap;                                          		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TopTitle;                                         		// 0x036C (0x0004) [0x0000000000000000]              
	class USFGFxDialog_Password*                       PasswordDialog;                                   		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                SelectedRoomIndex;                                		// 0x0374 (0x0004) [0x0000000000000000]              
	unsigned long                                      bComboListEditing : 1;                            		// 0x0378 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bListTestSw : 1;                                  		// 0x0378 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bOpenWebConfirm : 1;                              		// 0x0378 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned char                                      CurrentSortType;                                  		// 0x037C (0x0001) [0x0000000000000000]              
	int                                                CurrentSortKey;                                   		// 0x0380 (0x0004) [0x0000000000000000]              
	int                                                nMaxListforDebug;                                 		// 0x0384 (0x0004) [0x0000000000000000]              
	int                                                nADImageIndex;                                    		// 0x0388 (0x0004) [0x0000000000000000]              
	struct FString                                     ADImageURL;                                       		// 0x038C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     RoomPasswordMessage;                              		// 0x0398 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strRoomStateWaiting;                              		// 0x03A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strRoomStatePlaying;                              		// 0x03B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalCustomModeText;                              		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           RoomFrontName;                                    		// 0x03C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     RoomListBingingName;                              		// 0x03D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ConnectPassword;                                  		// 0x03E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSQuickJoin >                       CurQuickJoinConditionArray;                       		// 0x03EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81610 ];

		return pClassPointer;
	};

	bool datastore_OnDataChanged ( struct FString BindingName );
	int datastore_DataProviderLength ( struct FString BindingName );
	class UGFxObject* datastore_FillData_GameModeFilterAt ( int Index );
	void datastore_FillData_GameModeFilter ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	class UGFxObject* datastore_FillData_MapFilterAt ( int Index );
	void datastore_FillData_MapFilter ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	class UGFxObject* datastore_FillData_RoomListAt ( int Index );
	void datastore_FillData_RoomList ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillData ( struct FString BindingName, int Index, class UGFxObject** RowItem );
	bool EnablePreviewInfo ( );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void OnQuickJoinDialogOK ( );
	bool RealRequestQuickJoin ( );
	bool RequestQuickJoin ( );
	void AutoMoveToRoom ( int roomNo, struct FString PassWD );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void RoomAppendforDebug ( );
	void RoomListRandomAppend ( );
	void ToggleListTest ( int nCount );
	void SortRoomList ( );
	void OnChatCBItemSelect ( struct FEventData ev );
	void OnModeFiltterChanged ( struct FEventData ev );
	void OnMapFiltterChanged ( struct FEventData ev );
	void OnRoomListItemChange ( struct FEventData ev );
	void OnJoinRoomBtnClicked ( struct FEventData ev );
	void OnRoomListItemClick ( struct FEventData ev );
	void PKT_QuickJoin_REQ_OK ( class UPacket* Packet );
	void PKT_JoinGameRoom_REQ_OK ( class UPacket* Packet );
	void PKT_CreateGameRoom_REQ_OK ( class UPacket* Packet );
	void ASCloseAllComboList ( );
	void PKT_ChangeRoomVipGradeNotifyMessage_Auto ( class UPacket* recvPacket );
	void PKT_ChangeRoomListMessage_Auto ( class UPacket* recvPacket );
	void PKT_GetGameRoomList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetGameRoomList_REQ_OK ( class UPacket* recvPacket );
	void ASSetADImageList ( TArray< struct FString > ImageArray );
	void ASSetADImage ( struct FString URL );
	void SetAdvertisementImage ( );
	void CheckRollingImageTimer ( );
	void ASSetSelectedADImage ( int nIndex );
	void ResetRollingImageTimer ( );
	void OnADImageTabBtnClicked ( int nIndex );
	void OpenWeb ( struct FString strURL );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void JoinGameRoom ( int RoomNumber, struct FString Password );
	void RefreshAllWaitingRoomList ( );
	void OnClickHeaderBtn ( int Index );
	void OnQuickJoinBtnPress ( struct FEventData ev );
	int CreateRoomBtnPress ( );
	void OnCreateRoomBtnPress ( struct FEventData ev );
	void ProcessPassword ( );
	void ConnectRoom ( int Index, struct FString Password );
	void OnRoomListItemDoubleClick ( struct FEventData ev );
	void OnGhostModeChanged ( );
	void GetOutProcessChannelListTimer ( );
	void GetOutProcess ( int LastScreen );
	void SetGameModeIDArray ( );
	void OnViewClosed ( int NextIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void UpdateGhostMode ( );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_BaseRoomList::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WebLoginView
// 0x0014 (0x03C8 - 0x03B4)
class USFGFxLobby_WebLoginView : public USFGFxLobby_LoginView
{
public:
	class UGFxClikWidget*                              StartLoginButton;                                 		// 0x03B4 (0x0004) [0x0000000000000000]              
	unsigned long                                      ShowLoginButton : 1;                              		// 0x03B8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	struct FString                                     WebControlCreateFailMsg;                          		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81769 ];

		return pClassPointer;
	};

	void SetPostProcess ( unsigned long isEnable );
	void ShowPublisherLogin ( );
	void OnCancleGameClosed ( );
	void OnOpenGameExitDialog ( );
	void CancelButtonPress ( );
	void OnWebLoadingComplete ( );
	void OnWebLoginOK ( struct FString AuthCode );
	void RegisterDelegateWebLoginOK ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_WebLoginView::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_CHNLoginView
// 0x0008 (0x03BC - 0x03B4)
class USFGFxLobby_CHNLoginView : public USFGFxLobby_LoginView
{
public:
	unsigned char                                      ModuleState;                                      		// 0x03B4 (0x0001) [0x0000000000000000]              
	unsigned long                                      IsFirstCheck : 1;                                 		// 0x03B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81770 ];

		return pClassPointer;
	};

	void OnWebLoadingComplete ( );
	void GetCaptchaTxt ( struct FString Text );
	void OnCaptchaResetHandler ( );
	void AsToSendSetMarixData ( struct FString Title, struct FString Arg1, struct FString Arg2, struct FString Arg3 );
	void AsToSendSetCaptchaData ( struct FString Title, struct FString ImagePath );
	void AsToSendSetChnObjPosition ( struct FString Type );
	int RequestLogin ( struct FString InLoginID, struct FString InLoginPW );
	void SetMatrixCodeImage ( );
	void SetCodeImage ( );
	int OKButtonPress ( );
	bool LoadMatrixCodeImage ( );
	bool LoadVerifyCodeImage ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_CHNLoginView::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_PMSLoginView
// 0x0018 (0x03CC - 0x03B4)
class USFGFxLobby_PMSLoginView : public USFGFxLobby_LoginView
{
public:
	class UGFxClikWidget*                              OTPTextInput;                                     		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  OTPTextField;                                     		// 0x03B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              bOtpBtn;                                          		// 0x03BC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GoogleLoginBtn;                                   		// 0x03C0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FacebookLoginBtn;                                 		// 0x03C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      EnterOTPType : 1;                                 		// 0x03C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81771 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	void OnFacebookLoginButtonPress ( struct FEventData ev );
	void OnGoogleLoginButtonPress ( struct FEventData ev );
	int OTPButtonPress ( );
	void OnOTPButtonPress ( struct FEventData ev );
	void ASShowOtpWindowDisabled ( unsigned long bWebLogin );
	void ASHideLogInWindow ( unsigned long bHide );
	void OTPInputWindowOpen ( );
	void PKT_LOGIN_REQ_OK ( class UPacket* recvPacket );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_PMSLoginView::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_OTPLoginView
// 0x0010 (0x03C4 - 0x03B4)
class USFGFxLobby_OTPLoginView : public USFGFxLobby_LoginView
{
public:
	class UGFxClikWidget*                              OTPTextInput;                                     		// 0x03B4 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  OTPTextField;                                     		// 0x03B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              bOtpBtn;                                          		// 0x03BC (0x0004) [0x0000000000000000]              
	unsigned long                                      EnterOTPType : 1;                                 		// 0x03C0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81772 ];

		return pClassPointer;
	};

	int ProcessShortcutKeys ( struct FString KeyName );
	int OTPButtonPress ( );
	void OnOTPButtonPress ( struct FEventData ev );
	void ASShowOtpWindowDisabled ( unsigned long bWebLogin );
	void ASHideLogInWindow ( unsigned long bHide );
	void OTPInputWindowOpen ( );
	void PKT_LOGIN_REQ_OK ( class UPacket* recvPacket );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_OTPLoginView::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_RoomList
// 0x0000 (0x03F8 - 0x03F8)
class USFGFxLobby_RoomList : public USFGFxLobby_BaseRoomList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81773 ];

		return pClassPointer;
	};

	void ASCallRoomListData ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	int CreateRoomBtnPress ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_RoomList::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_GameModeBase
// 0x0020 (0x0374 - 0x0354)
class USFGFxLobby_GameModeBase : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              ModeListMC;                                       		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              TopTitle;                                         		// 0x0358 (0x0004) [0x0000000000000000]              
	int                                                SelectedModeIndex;                                		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  _global;                                          		// 0x0360 (0x0004) [0x0000000000000000]              
	int                                                WeaponTypeMode;                                   		// 0x0364 (0x0004) [0x0000000000000000]              
	struct FString                                     CustomModeName;                                   		// 0x0368 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81775 ];

		return pClassPointer;
	};

	void SetFilteredValidGameModeID ( TArray< int >* ModeIDArray );
	void ASClearModeList ( class UGFxClikWidget* ListMC );
	void ClearGameModeList ( );
	bool IsSelectableMode ( int GameModeID );
	void SetModeList ( );
	int GetGameModeSelIndex ( );
	int GetSelectedGameModeID ( );
	void SetGameModeIDArray ( );
	void OnCreateRoomBtnClicked ( struct FEventData ev );
	void OnModeDblClicked ( struct FEventData ev );
	bool SetListSelected ( int nIndex );
	void OnModeListClicked ( struct FEventData ev );
	void OnViewClosed ( int NextIndex );
	void DelegateSetupFlashEvent ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_GameModeBase::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_CreateRoom
// 0x0070 (0x03E4 - 0x0374)
class USFGFxLobby_CreateRoom : public USFGFxLobby_GameModeBase
{
public:
	class UGFxClikWidget*                              inputRoomTitle;                                   		// 0x0374 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               inputPassword;                                    		// 0x0378 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputRoomText;                                    		// 0x037C (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputPasswordText;                                		// 0x0380 (0x0004) [0x0000000000000000]              
	struct FString                                     strInputPassword;                                 		// 0x0384 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PreWeaponTypeMode;                                		// 0x0390 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LeftModeTab;                                      		// 0x0394 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CustomModeDropBox;                                		// 0x0398 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CreateRoomModeList;                               		// 0x039C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CreateRoomBtn;                                    		// 0x03A0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           ModeNameListArray;                                		// 0x03A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PrevLeftSelectedTab;                              		// 0x03B0 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           DisableCustomModeApplyBtnModeName;                		// 0x03B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      RotationGameModeIDArray;                          		// 0x03C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickLeftTabDelegate__Delegate;               		// 0x03CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickModeListDelegate__Delegate;              		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81774 ];

		return pClassPointer;
	};

	int GetDefaultCustomMode ( );
	int FindDisableCustomModeApplyBtnModeName ( struct FString ModeName );
	int ProcessShortcutKeys ( struct FString KeyName );
	void PKT_CreateGameRoom_REQ_OK ( class UPacket* Packet );
	void SetOnClickModeListDelegate ( struct FScriptDelegate InDelegate );
	void OnClickModeListDelegate ( struct FString ModeName );
	void SetOnClickLeftTabDelegate ( struct FScriptDelegate InDelegate );
	void OnClickLeftTabDelegate ( int Index );
	void GetOutProcess ( int LastScreen );
	bool CheckVipMapRotationMode ( );
	void OnModeDblClicked ( struct FEventData ev );
	void OnModeListClicked ( struct FEventData ev );
	int GetSelectedGameModeID ( );
	void ClearModeList ( );
	void ClearGameModeList ( );
	void ASSetSelectModeItem ( struct FString ModeItem );
	void ASSetDisableCustomModeRadioButton ( unsigned long Enable );
	void ASSetDisableCustomModeBtn ( unsigned long Enable );
	void ASSetModeListIcon ( TArray< class UGFxObject* > ObjList );
	void ASSetModeListData ( class UGFxObject* ObjList );
	void ASSetModeList ( TArray< int > ModeIDArray, class UGFxClikWidget* ListMC, int TabIndex );
	void UpdateModeOption ( int ModeIDData );
	void CheckEnablePassWordRoom ( struct FString ModeName );
	void OnChangedCustomModeDropBox ( struct FEventData ev );
	void InitCustomModeDropBox ( );
	void OnChangedLeftModeTab ( int SelectTabCode );
	void SetLeftModeSelectTabList ( );
	void OnViewClosed ( int NextIndex );
	void SetModeList ( );
	int OnPressF2 ( );
	void OnCreateRoomBtnClicked ( struct FEventData ev );
	void ASSetVisibleCustomModeDropBox ( unsigned long bVisible );
	void UpdateApplyCustomMode ( );
	struct FString GetRoomName ( );
	struct FString GetPassword ( );
	void SetGameModeIDArray ( );
	void OnTextInputFocusIn ( struct FEventData ev );
	void OnTextChanged ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetupFlashEvent ( );
	void DelegateSetup ( );
	void UpdateModeCondition ( );
	void ClearCustomMode ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_CreateRoom::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_QuickJoin
// 0x0028 (0x039C - 0x0374)
class USFGFxLobby_QuickJoin : public USFGFxLobby_GameModeBase
{
public:
	class UGFxClikWidget*                              MapListMC;                                        		// 0x0374 (0x0004) [0x0000000000000000]              
	int                                                SelectedMapIndex;                                 		// 0x0378 (0x0004) [0x0000000000000000]              
	struct FString                                     SelectedMapName;                                  		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              RoomJoinBtn;                                      		// 0x0388 (0x0004) [0x0000000000000000]              
	int                                                DisplayMapListColSize;                            		// 0x038C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickMapListDelegate__Delegate;               		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81776 ];

		return pClassPointer;
	};

	void OnModeListClicked ( struct FEventData ev );
	void ASSetScrollPosition ( int Position );
	bool IsAllMapSelected ( );
	bool IsAllModeSelected ( );
	void GetValidModeIDAtMapArray ( TArray< struct FSSupportMap > SupportMapArray, TArray< int >* OutModeIDArray );
	void JoinRoomPress ( );
	void OnRoomJoinBtnClicked ( struct FEventData ev );
	int GetSelectedGameModeID ( );
	struct FString GetLocalizedModeMapName ( int MapID, int GameModeID );
	class UGFxObject* GetMapItemInfo ( int Index, TArray< struct FSSupportMap > SupportMapArray );
	class UGFxObject* FillMapItemListAt ( int Index, TArray< struct FSSupportMap > SupportMapArray );
	void FillMapItemList ( TArray< struct FSSupportMap > SupportMapArray, class UGFxObject** TotalRow );
	void ASSetSelectMapInfo ( );
	void SetMapList ( );
	void ASSetMapList ( );
	void ASSetSelectedGameMode ( unsigned long bSelected );
	void SetModeList ( );
	int GetSupportMapCount ( TArray< struct FSSupportMap > SupportMapArray, int InGameModeID );
	void GetSupportMapArray ( TArray< struct FSSupportMap >* OutArray );
	int GetDisplayItemIndex ( int Row, int column );
	void OnDblClickedMapList ( int Row, int Col );
	void OnClickedMapList ( int Row, int Col );
	bool SetListSelected ( int nIndex );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
	void SetGameModeIDArray ( );
	void SetOnDblClickMapListDelegate ( struct FScriptDelegate InDelegate );
	void SetOnClickMapListDelegate ( struct FScriptDelegate InDelegate );
	void OnClickMapListDelegate ( int Row, int Col );
	void DelegateSetupFlashEvent ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_QuickJoin::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Shop
// 0x01E0 (0x0534 - 0x0354)
class USFGFxLobby_Shop : public USFGFxLobbyScreen
{
public:
	TArray< struct FSLastBuyItem >                     LastBuyItemArray;                                 		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              UnitListMC;                                       		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnAllBuy;                                        		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnAllReset;                                      		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCloseItemInfo;                                 		// 0x036C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnPreview;                                       		// 0x0370 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnItemSearch;                                    		// 0x0374 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ItemSearchInputWidget;                            		// 0x0378 (0x0004) [0x0000000000000000]              
	struct FString                                     BuyBtnText;                                       		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnTextForWP;                                  		// 0x0388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnTextForEvent;                               		// 0x0394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnTextForPCRoom;                              		// 0x03A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnTextForVIP;                                 		// 0x03AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnTextForMonthlyReward;                       		// 0x03B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuyBtnTextForGashaRareWeapon;                     		// 0x03C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMasterItemBuyFailedMessage;                   		// 0x03D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanManagerItemBuyFailedMessage;                  		// 0x03DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMemberItemBuyFailedMessage;                   		// 0x03E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strPCRoomItemCannotBuyMessage;                    		// 0x03F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strVipItemCannotBuyMessage;                       		// 0x0400 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strMonthlyRewardConnotBuyMessage;                 		// 0x040C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strGashaRareWeaponCannotBuyMessage;               		// 0x0418 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strBuyAllOKInvenUseMessage;                       		// 0x0424 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strDuplicateCannotBuyMessage;                     		// 0x0430 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                SelectedItemID;                                   		// 0x043C (0x0004) [0x0000000000000000]              
	struct FString                                     SelectedPaymentType;                              		// 0x0440 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectedUnitID;                                   		// 0x044C (0x0004) [0x0000000000000000]              
	TArray< struct FSFItemData >                       BuyAllItemArray;                                  		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsItemAttrib >                      ItemAttribStr;                                    		// 0x045C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strTPExchangeOKMessage;                           		// 0x0468 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LinkedURL;                                        		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     WarningIconName;                                  		// 0x0480 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x048C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bPackageItemPreview : 1;                          		// 0x0498 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUITabInitialized : 1;                            		// 0x0498 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      BuyOKItemIsInUse : 1;                             		// 0x0498 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      IsGiftDialog : 1;                                 		// 0x0498 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOpenWeaponProgresson : 1;                        		// 0x0498 (0x0004) [0x0000000000000000] [0x00000010] 
	int                                                BuyOKItemID;                                      		// 0x049C (0x0004) [0x0000000000000000]              
	int                                                LastSelectedItemWP;                               		// 0x04A0 (0x0004) [0x0000000000000000]              
	struct FString                                     VipPopupOkBtnStr;                                 		// 0x04A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GashaRarePopupOkBtnStr;                           		// 0x04B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnListItemClickedDelegate__Delegate;            		// 0x04BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuyClickedDelegate__Delegate;                 		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreviewClickedDelegate__Delegate;             		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBuyUnitClickedDelegate__Delegate;             		// 0x04E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemInfoCloseDelegate__Delegate;              		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemRollOverDelegate__Delegate;               		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHotNewItemOverData__Delegate;                 		// 0x0504 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnItemRollOutDelegate__Delegate;                		// 0x0510 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnHotNewItemOutDataDelegate__Delegate;          		// 0x051C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickOpenedEquipInfoUnitDelegate__Delegate;   		// 0x0528 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81777 ];

		return pClassPointer;
	};

	bool EnablePreviewInfo ( );
	void FocusSearchText ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void SetUseItem ( );
	void shopWeaponProgression_OnCloseBtnClick ( int nIndex );
	void shopWeaponProgression_OnSpBtnClick ( int nIndex );
	void shopWeaponProgression_OnCashBtnClick ( int nIndex );
	void shopWeaponProgression_OnListClick ( int nIndex );
	void SetApplyItemsToEntryPawn ( TArray< int > ItemArray );
	void GetArmorRollOutItemIndex ( int Row, int column );
	void GetArmorRollOverItemIndex ( int Row, int column );
	void ForceSetListScrollPosition ( int Index );
	int GetLastSelectedWeaponID ( );
	void SetupPreviewWeapon ( struct FQWord NeedISN, int NeedID, int NeedCamo );
	int GetPreviewWeaponCamo ( int WeapItemID, struct FQWord WeapISN );
	void OnClickOpenedEquipInfoUnit ( );
	void OnBuyUnit ( );
	void OnClickedShopItemPreview ( );
	void OnClickedShopItemGift ( );
	void OnClickedShopItemBuy ( );
	void OnDblClickShopItemList ( int Row, int colum );
	void OnClickShopItemList ( int Row, int colum );
	void SetOnClickOpenedEquipInfoUnitDelegate ( struct FScriptDelegate InDelegate );
	void OnClickOpenedEquipInfoUnitDelegate ( );
	void OpenLinkedURL ( );
	void OpenGashaponList ( );
	void OpenLinkedBuyVipItem ( );
	void OpenCannotBuyDialogByEvent ( int ItemId );
	void UpdateUnitChanged ( int UnitID );
	void UpdateSelectedWeaponSet ( );
	void OnItemSearchBtnClick ( struct FEventData ev );
	void OnItemRollOut ( int Row, int column, struct FString Tmp );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void SetOnHotNewItemOutDataDelegate ( struct FScriptDelegate InDelegate );
	void OnHotNewItemOutDataDelegate ( int Row, int column, struct FString Tmp );
	void SetOnItemRollOutDelegate ( struct FScriptDelegate InDelegate );
	void OnItemRollOutDelegate ( int Row, int column, struct FString Tmp );
	void SetOnHotNewItemOverDataDelegate ( struct FScriptDelegate InDelegate );
	void OnHotNewItemOverData ( int Row, int column, struct FString Tmp );
	void SetOnItemRollOverDelegate ( struct FScriptDelegate InDelegate );
	void OnItemRollOverDelegate ( int Row, int column, struct FString Tmp );
	int GetSelectedItemIDbyItemType ( int PartsIdx );
	void PreGameClosed ( );
	void OnVIPCouponUseStarted ( int ItemId );
	void OnClearSelectedItem ( );
	void OnItemInfoClose ( unsigned long bDumy );
	void SetOnItemInfoCloseDelegate ( struct FScriptDelegate InDelegate );
	void OnItemInfoCloseDelegate ( unsigned long bDumy );
	void SetOnBuyUnitClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnBuyUnitClickedDelegate ( );
	void PKT_FeverTimeEventFinish_AUTO ( class UPacket* Packet );
	void PKT_FeverTimeEventStart_AUTO ( class UPacket* Packet );
	void PKT_SetUsingUnit_REQ_OK ( class UPacket* Packet );
	void PKT_SetUnitEquipInfo_REQ_OK ( class UPacket* Packet );
	void PKT_SetWeaponSetInfo_REQ_OK ( class UPacket* Packet );
	void ASHideWeaponProgressionItem ( );
	void ASSetSelectedWeaponProgressionItem ( struct FString ItemName, struct FString ItemText, unsigned long bSPBuyable, int CashPrice, int SPPrice, int LimitType, struct FString LimitText, struct FString LimitImg, int CompleteChallengCount, int AllChallengeCount );
	void ASShowWeaponProgressionItem ( TArray< class UGFxObject* > objArray );
	void ASSetUnitStoryContext ( struct FString UnitName, struct FString context );
	void ASSetExistWeaponInfo ( struct FString Id );
	void ASSetSelectedItemCounter ( struct FString Counter );
	void ASCloseUnitInfo ( );
	void ASOpenUnitInfo ( struct FString UnitImgName );
	void ASUpdateUnitItem ( );
	void ASSetAUnitItem ( int num, class UGFxObject* Obj );
	void ASSetCompairWeaponInfo ( int Type, class UGFxObject* Obj );
	void ASCloseSelectedItemInfo ( int TabPrimary );
	void ASSetShowBannerType ( int ShowType );
	void AsCloseBannerItemInfo ( );
	void AsOpenBannerItemInfo ( );
	void AsSetBannerItemInfo ( class UGFxObject* Obj );
	void ASOpenSelectedItemInfo ( int TabPrimary );
	void ASSetSelectedItemInfo ( class UGFxObject* Obj, int TabPrimary );
	void ASCreateMainTab ( class UGFxObject* MainTabs );
	void SetSelectedItemInfo ( class UGFxObject* Obj, int ItemId, int TabPrimary );
	void OpenAllBuyDialog ( );
	void UpdateSelectedCounter ( int nSelectedLength );
	void ResetItemList ( );
	void ProcessBuyAfter ( unsigned long bPressedOK );
	void ProcessBuyAfterUseItem ( unsigned long bPressedOK );
	int GetShopTabType ( int ItemId );
	void OpenChangeTPBuyOkMessage ( int ItemId );
	void OnItemBuySuccess ( int ItemId, struct FQWord ItemSN, int ItemPrice, unsigned long bIsInUse );
	bool OpenItemPreviewDialog ( int ItemId );
	bool IsPreviewEnable ( class UClass* ItemClass );
	void SetBtnPreview ( class UClass* ItemClass );
	void SetPreviewDialog ( int ItemId );
	void ShowWeaponProgressionItem ( int ItemId, struct FName SupplyCode );
	void OpenBuyOneDialog ( int ItemId );
	bool OpenBuyDialog ( int ItemId );
	void InitializeSearchText ( );
	void ChangeSubTab ( int TabIndexNew, unsigned long bForceSelect );
	int ChangeMainTab ( int InTabIndex );
	void SetOnPreviewClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnPreviewClickedDelegate ( );
	void SetOnGiftItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnBuyModeItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnBuyFuncItemClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnBuyEquipmentClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnBuyWeaponClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnBuyClickedDelegate ( );
	void SetOnHotNewItemListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnModeItemListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnFuncItemListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnEquipmentListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnWeaponListDblClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnHotNewItemListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnModeItemListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnFuncItemListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnEquipmentListClickedDelegate ( struct FScriptDelegate InDelegate );
	void SetOnWeaponListClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnListItemClickedDelegate ( int Row, int colum );
	void GetOverlapItemIndex ( int Row, int column );
	int GetItemAddionalStat ( int Id );
	void OnClickedPageRightBtn ( );
	void OnClickedPageLeftBtn ( unsigned long IsClickedPageLeftBtn );
	void GetPageIndexByAS ( int Index );
	void OnClickedUnit ( struct FEventData ev );
	void OnResetSelected ( struct FEventData ev );
	void OnAllBuy ( struct FEventData ev );
	void OnCloseItemInfo ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnPendingOpen ( );
	void OnViewClosed ( int NextIndex );
	void ActivatePreviewAreaExtraUI ( );
	void OnViewActivatedDelayed ( );
	void OnViewActivated ( int PrevIndex );
	void ASSetEnablePaging ( unsigned long isEnable );
	void InitializeSubTab ( unsigned char eIdx, class UGFxObject* Widget );
	void InitializeMainTab ( );
	void InitializedUITab ( );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_Shop::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_CreateCodeName
// 0x0058 (0x03AC - 0x0354)
class USFGFxLobby_CreateCodeName : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              txtCreateNo;                                      		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  makeCodeWidget;                                   		// 0x0358 (0x0004) [0x0000000000000000]              
	struct FString                                     QuestionCodeNameRegist;                           		// 0x035C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CheckingCodename;                                 		// 0x0368 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ReservedCodename;                                 		// 0x0374 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RegistButtonTypeNow;                              		// 0x0380 (0x0004) [0x0000000000000000]              
	int                                                nCreateCodenameStep;                              		// 0x0384 (0x0004) [0x0000000000000000]              
	class USFGFxMoviePlayer_Dogtag*                    DogtagMoviePlayer;                                		// 0x0388 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USwfMovie*                                   DogtagMovie;                                      		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTextureRenderTarget2D*                      DogtagRenderTexture;                              		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FScriptDelegate                             __SetCodeName__Delegate;                          		// 0x0394 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCodeNameBtnRegist__Delegate;                  		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81778 ];

		return pClassPointer;
	};

	void OnCheckOutDateItem ( );
	void OnMinuteHasPassed ( );
	void OpenPreviewCharacter ( );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	bool OnEnterPressedWithChatting ( struct FString strInChatMsg );
	bool IsDisableEscapeInput ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnReadyToInputCodeName ( );
	void OnCodeNameCompleted ( );
	void SetBacktoNaviButton ( );
	void IMETextInputUpdated ( );
	struct FString GetDateString ( );
	void ASClearInputTimer ( );
	void ASSetWatingtime ( int DelayTime );
	void ASSetOptionTagOpen ( int caseby, struct FString context );
	void SetRegistButton ( unsigned char TypeNew );
	void CreateCodeNameCancel ( );
	void ServerToSendCreateCodeName ( );
	int OnButtonCodeNameRegist ( );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void PKT_CreateCodename_REQ_OK ( class UPacket* Packet );
	void ClearChatInputText ( );
	void RequestValideCodeName ( struct FString NewCodename );
	struct FString InputWaitTimerReset ( class UGFxClikWidget* InInputText );
	void InputWaitTimerRanout ( );
	void UpdateLastestFiltered ( );
	void SetOnCodeNameBtnRegistDelegate ( struct FScriptDelegate InDelegate );
	int OnCodeNameBtnRegist ( );
	void SetCodeNameDelegate ( struct FScriptDelegate InDelegate );
	void SetCodeName ( struct FString NewCodename );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_CreateCodeName::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_CreateCharacter
// 0x0064 (0x03B8 - 0x0354)
class USFGFxLobby_CreateCharacter : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              charUnitList;                                     		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              charWeaponList;                                   		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnMakeChar;                                      		// 0x035C (0x0004) [0x0000000000000000]              
	TArray< struct FsCreateableItemList >              UnitArray;                                        		// 0x0360 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< int >                                      WeaponArray;                                      		// 0x036C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DefaultUnitItemID;                                		// 0x0378 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     QuestionCharacterCreate;                          		// 0x037C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CreatedEventBottom;                               		// 0x0388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                UnitNum;                                          		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                WeaponNum;                                        		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      UnitSelected : 1;                                 		// 0x039C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      WeaponSelected : 1;                               		// 0x039C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWatingCreateEnd : 1;                             		// 0x039C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      UseTagSystem : 1;                                 		// 0x039C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	struct FString                                     NoneUnitString;                                   		// 0x03A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RecvCodeName;                                     		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81779 ];

		return pClassPointer;
	};

	void OnCheckOutDateItem ( );
	void OnMinuteHasPassed ( );
	void OnPlayerTagUpdated ( );
	void OpenPreviewCharacter ( );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	void ASSetWeaponInfos ( struct FString Id, struct FString wname, struct FString Con, int Top, int T1, int t2, int t3, int t4, struct FString t5 );
	void ASSetUnitInfos ( struct FString ImgName, struct FString ItemName, struct FString Con );
	int ProcessShortcutKeys ( struct FString KeyName );
	void ASSetUnitMark ( struct FString UnitIconName );
	void SetupPreviewCharacter ( int UnitItemID );
	void SetBacktoNaviButton ( );
	void CheckCreateBtnActivate ( );
	void SendCreateCharacter ( );
	void CreateCharacter ( );
	void OnCreateCharacter ( struct FEventData ev );
	void OnWeaponClicked ( struct FEventData ev );
	void ASWeaponSelectable ( );
	void OnUnitClicked ( struct FEventData ev );
	void OpenTagSystemDialog ( );
	void PKT_CreateCharacter_REQ_OK ( class UPacket* Packet );
	void SetItemList ( int Index, class UGFxObject* DataProvider, int ItemId, unsigned long bLock );
	void SetupWeaponList ( );
	void SetupUnitList ( );
	void UpdateListDataProvider ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_CreateCharacter::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Community
// 0x000C (0x0360 - 0x0354)
class USFGFxLobby_Community : public USFGFxLobbyScreen
{
public:
	TArray< struct FString >                           NoBuddyMessageArray;                              		// 0x0354 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81780 ];

		return pClassPointer;
	};

	void ASSetCommunityFeedbackList ( int ListIndex, int FeedbackType, TArray< struct FString > CodenameArray );
	void ASSetCommunityNoBuddyList ( int nType, struct FString Message );
	void ASSetCommunityBuddyList ( class UGFxObject* List );
	void SetCommunityBuddyListBase ( );
	void SetCommunityBuddyList ( unsigned long bForceRequest );
	void ASSetCommunityMessageListAt ( int Index, class UGFxObject* Item );
	void SetCommunityMessageListAt ( int Index );
	void ASSetCommunityMessageList ( class UGFxObject* List );
	class UGFxObject* GetCommunityMessageObject ( int Index );
	void SetCommunityMessageListBase ( );
	void SetCommunityMessageList ( unsigned long bForceRequest );
	void community_OnEmotionSelectClick ( int ListIndex, int FeedbackIndex );
	void OnCommunityNewsOK ( );
	void community_OnNewsWriteBtnClick ( );
	void PKT_MESSENGER_AddBuddyFL_REQ_OK ( class UPacket* recvPacket );
	void community_OnAddFriendBtnClick ( int nIndex );
	void OpenTagSystemDialog ( );
	bool RequestFeedbackList ( int ListIndex );
	void community_OnEmotionRollOver ( int ListIndex, int FeedbackType );
	void community_OnFriendExceptionBtnClick ( int nType );
	void community_OnTagBtnClick ( );
	void community_OnRankBtnClick ( );
	void community_OnNewsBtnClick ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void OnPlayerTagUpdated ( );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_Community::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_PartyRoomList
// 0x0018 (0x0410 - 0x03F8)
class USFGFxLobby_PartyRoomList : public USFGFxLobby_BaseRoomList
{
public:
	int                                                SelectedModeIndex;                                		// 0x03F8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ModeListMC;                                       		// 0x03FC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              inputRoomTitle;                                   		// 0x0400 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputRoomText;                                    		// 0x0404 (0x0004) [0x0000000000000000]              
	class USFGFxClickWidget_NumericOnly*               inputPassword;                                    		// 0x0408 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  inputPasswordText;                                		// 0x040C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81781 ];

		return pClassPointer;
	};

	void PKT_GetMatchingRoomList_REQ_TRANSACTION ( class UPacket* recvPackt );
	void PKT_GetMatchingRoomList_REQ_OK ( class UPacket* recvPacket );
	int CreateRoomBtnPress ( );
	void ClearGameModeList ( );
	void ASSetGameModeList ( );
	void SetGameModeIDArray ( );
	struct FString GetRoomName ( );
	struct FString GetPassword ( );
	void OnTextInputFocusIn ( struct FEventData ev );
	int GetGameModeSelIndex ( );
	void OnModeDblClicked ( struct FEventData ev );
	void OnModeClicked ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_PartyRoomList::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_PartyRoom
// 0x00A8 (0x06B4 - 0x060C)
class USFGFxLobby_PartyRoom : public USFGFxLobby_BaseRoom
{
public:
	struct FString                                     SearchingStartMessage;                            		// 0x060C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchingStopMessage;                             		// 0x0618 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchingStartFailedMessage;                      		// 0x0624 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchingPopUpMessage;                            		// 0x0630 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingAcceptMessage;                             		// 0x063C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingDeniedByTimeMessage;                       		// 0x0648 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanMatchingNoticeMessage;                        		// 0x0654 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisconnectedMactingMessage;                       		// 0x0660 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AcceptedFromMasterMessage;                        		// 0x066C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeniedFromMasterMessage;                          		// 0x0678 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AcceptedFromOtherMessage;                         		// 0x0684 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DeniedFromOtherMessage;                           		// 0x0690 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bFoundMatching : 1;                               		// 0x069C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisableCancel : 1;                               		// 0x069C (0x0004) [0x0000000000000000] [0x00000002] 
	class UGFxClikWidget*                              PartyMemberList;                                  		// 0x06A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              OtherPartyMemberList;                             		// 0x06A4 (0x0004) [0x0000000000000000]              
	TArray< struct FErrorCodeInfo >                    StartSearchingErrorCodeArray;                     		// 0x06A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81782 ];

		return pClassPointer;
	};

	void clanMatchWaitRoom_OnRoomCbOpen ( );
	void ShowDelayedChatMessage ( );
	void OnPlayerRowRollOver ( int Idx );
	void OnBackStepBtnPress ( int LastScreen );
	void PKT_GetMatchingRoomList_REQ_TRANSACTION ( class UPacket* recvPackt );
	void PKT_GetMatchingRoomList_REQ_OK ( class UPacket* recvPacket );
	void CheckStopSearchingMatch ( );
	void OnChangedRoomMaster ( int nIsRoomMaster, unsigned char InRoomType );
	void PKT_JoinGameRoomMessage_Auto ( class UPacket* recvPacket );
	void PKT_RoomUserStatusMessage_Auto ( class UPacket* recvPacket );
	void PKT_LeftGameRoomMessage_Auto ( class UPacket* recvPacket );
	void PKT_JoinGameRoom_REQ_OK ( class UPacket* Packet );
	void UpdateSearchingMatchStatus ( unsigned long bAddMessage, unsigned long bInSearching );
	void PKT_MatchingGameStartMessage_Auto ( class UPacket* recvPacket );
	void ClearWaitingAccept ( unsigned long bDeniedFromMe );
	void OnShowChatMessageEvent ( int ChatType, struct FString strMessage, unsigned long bFromMe );
	void PKT_MatchingDeniedMessage_Auto ( class UPacket* recvPacket );
	void PKT_MatchingAcceptedMessage_Auto ( class UPacket* recvPacket );
	int ProcessStartSearChingError ( int ProtocolID, int ResultID, struct FString BlockExpirationDate );
	bool GetErrorCodeMsg ( TArray< struct FErrorCodeInfo > ErrorCodeInfoArray, int ErrorCode, struct FString* ErrorCodeMsg );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void PKT_SetAcceptMatching_REQ_OK ( class UPacket* recvPacket );
	void OnDisconnetedMatchingByTimeOut ( );
	void OnMatchingDeniedByTimerOut ( );
	void OnMatchingDenied ( );
	void OnMatchingAccepted ( );
	void GetIsLock ( int Index, int InUSN, struct FString* IsLock );
	class UGFxObject* ASSetPartyRoomUser ( int Index, int InUSN, unsigned char CurRoomType );
	void ASSetBlockBtn ( unsigned long bLock );
	class UGFxObject* ASSetSlotList ( );
	void ClearOtherPartyUserList ( );
	int GetUserListSlotSize ( );
	void UpdatePartyUserList ( );
	void UpdateOtherPartyUserList ( );
	void UpdateAllRoomUserList ( );
	void SetMatchingFoundUserList ( );
	void PKT_GetGameRoomUserList_REQ_OK ( class UPacket* Packet );
	void PKT_GameEndMessage_Auto ( class UPacket* recvPacket );
	void PKT_MatchingFoundMessage_Auto ( class UPacket* recvPacket );
	void PKT_StopSearchingMatchMessage_Auto ( class UPacket* recvPacket );
	void PKT_StartSearchingMatchMessage_Auto ( class UPacket* recvPacket );
	void PKT_StopSearchingMatch_REQ_OK ( class UPacket* recvPacket );
	void PKT_StartSearchingMatch_REQ_OK ( class UPacket* recvPacket );
	void PKT_SetClanLeagueTicketCount_Auto ( class UPacket* recvPacket );
	void PKT_GetMatchingLinkedRoomInfo_REQ_OK ( class UPacket* recvPacket );
	void StartGamePreProcess ( );
	void ASSetPartyClanName ( );
	void AsSetRoomBlueClanMarkTitle ( struct FString ClanMark, struct FString ClanName );
	void AsSetRoomRedClanMarkTitle ( struct FString ClanMark, struct FString ClanName );
	void UpdateAllTeamMark ( );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxLobby_PartyRoom::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_GashaSelect
// 0x0090 (0x0404 - 0x0374)
class USFGFxLobby_GashaSelect : public USFGFxLobby_GashaBase
{
public:
	class UGFxClikWidget*                              JoinBtn;                                          		// 0x0374 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              CashBtn;                                          		// 0x0378 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GashaItemList;                                    		// 0x037C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GashaItemList_CHN;                                		// 0x0380 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ToolTipItemLIst;                                  		// 0x0384 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AllInOneList;                                     		// 0x0388 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GiftBtn;                                          		// 0x038C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ProbabilityNoticeBtn;                             		// 0x0390 (0x0004) [0x0000000000000000]              
	struct FString                                     ProbabilityNoticeURL;                             		// 0x0394 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bIsFirstActivated : 1;                            		// 0x03A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSendGiveCapSuleItemPacket : 1;                 		// 0x03A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      IsBigImageList : 1;                               		// 0x03A0 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	int                                                SelectedWeaponID;                                 		// 0x03A4 (0x0004) [0x0000000000000000]              
	int                                                SelectedGashaIndex;                               		// 0x03A8 (0x0004) [0x0000000000000000]              
	TArray< int >                                      WeaponCamoMCItemArray;                            		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SelectGashaCouponItemID;                          		// 0x03B8 (0x0004) [0x0000000000000000]              
	struct FString                                     ToolTipBonusGaugeMessage;                         		// 0x03BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                PrevWidgetIndex;                                  		// 0x03C8 (0x0004) [0x0000000000000000]              
	int                                                DisplayColSize;                                   		// 0x03CC (0x0004) [0x0000000000000000]              
	int                                                DisplayMinRowSize;                                		// 0x03D0 (0x0004) [0x0000000000000000]              
	TArray< struct FGashaListInfo >                    DisplayViewGashaListArray;                        		// 0x03D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UGFxObject* >                        GachaListObjectArray;                             		// 0x03E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWeaponViewDelegate__Delegate;                 		// 0x03EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedGachaListDelegate__Delegate;           		// 0x03F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81783 ];

		return pClassPointer;
	};

	void SetOnDblClickedGachaList ( struct FScriptDelegate InDelegate );
	void SetOnClickedGachaList ( struct FScriptDelegate InDelegate );
	void OnClickedGachaListDelegate ( int Row, int Col );
	void OnClickProbabilityNoticeBtn ( struct FEventData ev );
	void OnClickGiftBtn ( struct FEventData ev );
	void AsSetGiftButtonVisible ( unsigned long IsGiftButtonVisible );
	bool IsEnableGiftSendButton ( int ItemId );
	void SetSelectGashaCouponItemID ( );
	void AsToSendSetAllInOneRollTime ( int Time );
	void AsToSendUpdateToolTipAllinOneTime ( );
	void ASSetGashaProbability ( );
	void AsToSendProbabilityGauge ( unsigned long bVisible );
	void ASSetViewSelectInfo ( class UGFxObject* GachaListItemObj );
	void SetOnWeaponViewDelegate ( struct FScriptDelegate InDelegate );
	void OnWeaponViewDelegate ( );
	void SetFirstActivatedGashaData ( );
	void PKT_FeverTimeEventFinish_AUTO ( class UPacket* recvPacket );
	void PKT_FeverTimeEventStart_AUTO ( class UPacket* recvPacket );
	void PKT_GetGashaLogList_REQ_OK ( class UPacket* recvPacket );
	void OnWeaponView ( );
	void AsSetCash ( struct FString SP, struct FString Cash );
	void AsSetWeaponToolTip ( );
	int GetGachaListItemIndex ( int Row, int Col );
	void OnDblClickedGachaList ( int Row, int Col );
	void OnClickedGachaList ( int Row, int Col );
	void ServerToSendGiveCapsuleItem ( );
	void ASSetFirstSaleEnabled ( unsigned long bSet );
	void SetGashaData ( int Index );
	void SetCamoWeaponCustomPreview ( TArray< int > WeaponItemArray );
	void OnClickJoinBtn ( struct FEventData ev );
	class UGFxObject* GetToolTipRewardItemInfo ( int Index, TArray< struct FRewardInfo > ToolTipRewardItemList );
	class UGFxObject* GetTooltipRewardEmptyInfo ( );
	void SetToolTipBonusGaugeMessge ( );
	class UGFxObject* FillToolTipItemListAt ( int Index, TArray< struct FRewardInfo > ToolTipRewardItemList );
	void FillToolTipItemList ( TArray< struct FRewardInfo > ToolTipRewardItemList, class UGFxObject** TotalRow );
	void SetToolTipItemLIst ( );
	void SetToolTipAllInOneItemList ( int Index );
	class UGFxObject* GetGashaItemInfo ( int Index );
	class UGFxObject* FillGachaItemListAt ( int Index );
	void FillGachaItemList ( class UGFxObject** TotalRow );
	int GetGachaItemListLength ( );
	void SetGashaItemList ( );
	void ASClearList ( int ClearType );
	void MakeGashaItemList ( );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void ServerToSendGashaInfo ( );
	void OnViewClosed ( int NextIndex );
	void SetGashaListStyle ( );
	void OnViewActivatedDelayed ( );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_GashaSelect::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_GashaOrgelBox
// 0x0190 (0x0504 - 0x0374)
class USFGFxLobby_GashaOrgelBox : public USFGFxLobby_GashaBase
{
public:
	int                                                SelectBtnIndex;                                   		// 0x0374 (0x0004) [0x0000000000000000]              
	int                                                GashaVipListMax;                                  		// 0x0378 (0x0004) [0x0000000000000000]              
	int                                                SendCapsuleID;                                    		// 0x037C (0x0004) [0x0000000000000000]              
	int                                                EnterEventType;                                   		// 0x0380 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsDisableExit : 1;                               		// 0x0384 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsOpeningAniEnd : 1;                             		// 0x0384 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPushCloseBtn : 1;                              		// 0x0384 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAllBtnDisable : 1;                               		// 0x0384 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bVIPListViewGashaName : 1;                        		// 0x0384 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bVIPListNonConvertUserName : 1;                   		// 0x0384 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bIsDisableCapsuleComment : 1;                     		// 0x0384 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	class UGFxClikWidget*                              RewardItemList;                                   		// 0x0388 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GashaVipList;                                     		// 0x038C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GashaPVEVipList;                                  		// 0x0390 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              GetRewardOkBtn;                                   		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                JoinLimitSP;                                      		// 0x0398 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              UnderSpMsgTime;                                   		// 0x039C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PlayForceGarbageMax;                              		// 0x03A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ConvertDirection;                                 		// 0x03A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                ConvertByteCount;                                 		// 0x03B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     ConvertBtnCouponCountType;                        		// 0x03B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ConvertText;                                      		// 0x03C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LimitUnderSpMsg;                                  		// 0x03CC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           DevelopToolTipArray;                              		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsCapsuleCommenctInfo >             OpneCapsuleCommnetArray;                          		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoRewardItemErrorMsg;                             		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FsOrgelBtnInfo                              BtnInfoArray;                                     		// 0x03FC (0x0024) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFGFxDialog_BuyOne*                         BuyOneDlg;                                        		// 0x0420 (0x0004) [0x0000000000000000]              
	struct FName                                       SoundEventName;                                   		// 0x0424 (0x0008) [0x0000000000000000]              
	int                                                ExitCount;                                        		// 0x042C (0x0004) [0x0000000000000000]              
	int                                                PlayForceGarbageCount;                            		// 0x0430 (0x0004) [0x0000000000000000]              
	int                                                SelectedItemID;                                   		// 0x0434 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickBtnsDelegate__Delegate;                  		// 0x0438 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickCloseBtnDelegate__Delegate;              		// 0x0444 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickGashaOpenBtnDelegate__Delegate;          		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnBoxCloseDelegate__Delegate;                   		// 0x045C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshBtnInfoDelegate__Delegate;             		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOpeningAnimationEndDelegate__Delegate;        		// 0x0474 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGashaBallAnimationEndDelegate__Delegate;      		// 0x0480 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEvnetCapsuleOpenBtnViewDelegate__Delegate;    		// 0x048C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOverGashaBtnsDelegate__Delegate;              		// 0x0498 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOutGashaBtnsDelegate__Delegate;               		// 0x04A4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickSaveGashaCapsuleDelegate__Delegate;      		// 0x04B0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickSaveGashaCapsuleAnimationEndDelegate__Delegate;		// 0x04BC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSkipBtnShowDelegate__Delegate;                		// 0x04C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSound_Ball_startDelegate__Delegate;           		// 0x04D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSound_Ball_railDelegate__Delegate;            		// 0x04E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSound_Ball_bigDelegate__Delegate;             		// 0x04EC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSound_StopPlaySoundDelegate__Delegate;        		// 0x04F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81784 ];

		return pClassPointer;
	};

	void ASOnFeverNoticeOpen ( );
	void ASSetBlockVisible ( unsigned long bVisible );
	void NotifyGetRareReward ( );
	void SetSellButtonDisable ( );
	void SetGachaBonusGaugeReward ( );
	void SetOnSound_StopPlaySoundDelegate ( struct FScriptDelegate InDelegate );
	void OnSound_StopPlaySoundDelegate ( );
	void SetOnSound_Ball_bigDelegate ( struct FScriptDelegate InDelegate );
	void OnSound_Ball_bigDelegate ( );
	void SetOnSound_Ball_railDelegate ( struct FScriptDelegate InDelegate );
	void OnSound_Ball_railDelegate ( );
	void SetOnSound_Ball_startDelegate ( struct FScriptDelegate InDelegate );
	void OnSound_Ball_startDelegate ( );
	void SetOnSkipBtnShowDelegate ( struct FScriptDelegate InDelegate );
	void OnSkipBtnShowDelegate ( );
	void SetOnClickSaveGashaCapsuleAnimationEnd ( struct FScriptDelegate InDelegate );
	void OnClickSaveGashaCapsuleAnimationEndDelegate ( );
	void SetOnClickSaveGashaCapsuleDelegate ( struct FScriptDelegate InDelegate );
	void OnClickSaveGashaCapsuleDelegate ( );
	void SetOnOutGashaBtnsDelegate ( struct FScriptDelegate InDelegate );
	void OnOutGashaBtnsDelegate ( );
	void SetOnOverGashaBtnsDelegate ( struct FScriptDelegate InDelegate );
	void OnOverGashaBtnsDelegate ( );
	void SetOnEvnetCapsuleOpenBtnViewDelegate ( struct FScriptDelegate InDelegate );
	void OnEvnetCapsuleOpenBtnViewDelegate ( );
	void SetOnGashaBallAnimationEndDelegate ( struct FScriptDelegate InDelegate );
	void OnGashaBallAnimationEndDelegate ( );
	void SetOnOpeningAnimationEndDelegate ( struct FScriptDelegate InDelegate );
	void OnOpeningAnimationEndDelegate ( );
	void SetOnRefreshBtnInfoDelegate ( struct FScriptDelegate InDelegate );
	void OnRefreshBtnInfoDelegate ( );
	void SetOnBoxCloseDelegate ( struct FScriptDelegate InDelegate );
	void OnBoxCloseDelegate ( );
	void SetOnClickGashaOpenBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickGashaOpenBtnDelegate ( );
	void SetOnClickCloseBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickCloseBtnDelegate ( );
	void SetOnClickBtnsDelegate ( struct FScriptDelegate InDelegate );
	void OnClickBtnsDelegate ( struct FString Index );
	void OnChatCBItemSelect ( struct FEventData ev );
	void PKT_FeverTimeEventFinish_AUTO ( class UPacket* recvPacket );
	void PKT_FeverTimeEventStart_AUTO ( class UPacket* recvPacket );
	void PKT_GetGashaLogList_REQ_OK ( class UPacket* recvPacket );
	void SetOpenCapsuleCommentText ( );
	void AsToSendSetOpenCapsulePercentMsg ( int Mode, struct FString strMsg );
	void AsToSendCapsuleOpenTheNext ( );
	void GachaGame_SetStatImgAllInOne ( class UGFxObject* Object, int Time );
	void AsToSendSetAllInOneModeItemData ( );
	void AsToSendSetSpecialMode ( struct FString strType, struct FString Title, struct FString Content );
	void AsToSendSetProbabiltyVipList ( );
	void ASSetGashaProbability ( );
	void AsToSendGashaCapuseCount ( );
	void AsToSetLimitUnderSpMsgVisible ( unsigned long bVisible );
	void AsToSendSetLimitUnderSpMsg ( );
	void AsToSendSetSetDevContent ( );
	void AsToSendSkipAnimation ( );
	void AsToSendSetGetRewardOkbtn ( );
	void AsToSendSetRewardItemInfo ( );
	void AsSetGameGacha_Mode ( int Mode, int Number );
	void AsSetBoxClose ( );
	void AsSetGashaCouponCount ( int Number );
	void AsSetGashaOpen ( );
	void AsSetGashaState ( unsigned long bStete, int Index, unsigned long bIsBuyHide );
	void AsSetDialogClose ( int Index );
	void AsSetDialogPopup ( int Index );
	void ASSetBtnInfo ( int Index, struct FString Number, struct FString Price, struct FString SellType, unsigned long bDisable, struct FString DiscountRatio, struct FString BuyalbeType, struct FString BuyableCount, unsigned long bFirstSale );
	void StopGashaSound ( );
	void PlayGashaSound ( struct FName EventName, unsigned long bIsOverlapSound );
	void OnSound_StopPlaySound ( );
	void OnSound_Ball_big ( );
	void OnSound_Ball_rail ( );
	void OnSound_Ball_start ( );
	void OnDialogClose ( );
	void OnItemBuySuccess ( int ItemId, struct FQWord ItemSN, int ItemPrice, unsigned long bIsInUse );
	bool OnDialogBuyBtn ( );
	void OnGashaOpenBtn ( );
	void OnSkipBtnShow ( );
	void OnClickSaveGashaCapsuleAnimationEnd ( );
	void AsToSeneOnBunLater ( );
	void OnClickSaveGashaCapsule ( );
	void OnOutGashaBtns ( );
	void OnOverGashaBtns ( );
	void OnEvnetCapsuleOpenBtnView ( );
	void OnGashaBallAnimationEnd ( );
	void OnOpeningAnimationEnd ( );
	void OnRefreshBtnInfo ( );
	void OnBoxClose ( );
	void OnClickCloseBtn ( );
	void OnClickBtns ( struct FString Index );
	void OnRewardItemAddedToInven ( );
	void OnClickGetRewardOkBtn ( struct FEventData ev );
	int ProcessShortcutKeys ( struct FString KeyName );
	int GetRareItemIndex ( );
	bool IsCheckGetRareItem ( );
	class UGFxObject* GetRewardItemInfo ( int Index );
	void SetRecvRewardItemlist ( );
	struct FString GetVIpListGashaName ( int ListCount, int UserCount );
	void SetGashaVipList ( );
	void SetTPBtnInfo ( );
	void SetSPBtnInfo ( );
	void GetGashaCouponDiscountInfo ( int ItemId, struct FString* OutDiscountRatio, struct FString* OutBuyalbeCountType, struct FString* OutBuyableCount );
	bool GetFirstBuySaleGashaInfo ( int ItemId, struct FString* OutDiscountRatio );
	void SetCashBtnInfo ( );
	struct FString GetConvertBtnCouponCount ( int Index );
	void SetBtnInfo ( );
	void HideUnderSpMsg ( );
	void ShowUnderSpMsg ( );
	bool ConsoleCommand ( TArray< struct FString > cmds );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void PKT_GetRewardItem_REQ_TRANSACTION ( class UPacket* recvPacket );
	struct FString GetLanguageConvertCodeName ( struct FString strCodeName );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnPendingClose ( );
	void ServerToSendGashaInfo ( );
	void InitChatWindow ( );
	void SetInitChat ( );
	void OnViewClosed ( int NextIndex );
	void UpdateFeverOrgel ( );
	void SetChatting ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_GashaOrgelBox::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_ChannelRenweal
// 0x00A8 (0x03FC - 0x0354)
class USFGFxLobby_ChannelRenweal : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              QuickStart;                                       		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChannelList;                                      		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChannelList_Ad;                                   		// 0x035C (0x0004) [0x0000000000000000]              
	struct FSChannelSetting                            SelectedChannel;                                  		// 0x0360 (0x0028) [0x0000000000000000]              
	int                                                SelectedChannelIndex;                             		// 0x0388 (0x0004) [0x0000000000000000]              
	int                                                MaxChannelIndex;                                  		// 0x038C (0x0004) [0x0000000000000000]              
	struct FString                                     SeparationBaseString;                             		// 0x0390 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CannotConnecttoChannel;                           		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuddyFriendNumMessage;                            		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuddyClanNumMessage;                              		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSChannelFillInfo >                 ChannelFillInfoArray;                             		// 0x03C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsForceUsingTutorial : 1;                         		// 0x03CC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bRequestLogOut : 1;                               		// 0x03CC (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bChannelGraduate : 1;                             		// 0x03CC (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bUseADMode : 1;                                   		// 0x03CC (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bOpenWebConfirm : 1;                              		// 0x03CC (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned char                                      StartTutorialType;                                		// 0x03D0 (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     PendingServerIP;                                  		// 0x03D4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PendingServerPort;                                		// 0x03E0 (0x0004) [0x0000000000000000]              
	int                                                ChannelListADImageIndex;                          		// 0x03E4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChannelLeftTabList;                               		// 0x03E8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChannelMainTabList;                               		// 0x03EC (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickADTabBtnDelegate__Delegate;              		// 0x03F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81785 ];

		return pClassPointer;
	};

	void SetOnClickADTabBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickADTabBtnDelegate ( int Index );
	void OnClickTabBtn ( int Index );
	void ASSetShowDisplayType ( int DispType );
	void ASSetSelectedChannelADImage ( int ChannelListImgIndex );
	void ASSetAdMode ( unsigned long bMode );
	void ASSetChannelListADImageList ( TArray< struct FString > ImageArray );
	void SetChannelListImage ( );
	void CheckChannelListADMode ( );
	void ResetRollingImageTimer ( );
	void CheckRollingImageTimer ( );
	void OpenWeb ( struct FString strURL );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void FilterADModeForEachChannelGroup ( int GroupIndex );
	bool datastore_OnDataChanged ( struct FString BindingName );
	int datastore_DataProviderLength ( struct FString BindingName );
	void datastore_FillDataRow ( struct USFGFxLobby_ChannelRenweal_FSUIChannelInfo RowData, class UGFxObject** RowItem );
	struct FString GetChannelExtraColor ( int channelType, int CurrentColor, unsigned long bDisable );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void StartFirstTimeTutorial ( );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void OnQuickJoinDialogOK ( );
	void ASSetPCRoomIconImage ( struct FString IconImage );
	void AutoMoveToChannel ( int ChanType, int ChanNum );
	void ASSetChannelGroupSelected ( int No );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void SetNotifyClanMsg ( int USN );
	void PKT_GetNetmarbleDiscountCouponForVIP_REQ_OK ( class UPacket* Packet );
	int ProcessShortcutKeys ( struct FString KeyName );
	void SetBacktoNaviButton ( );
	void GetOutProcess ( int LastScreen );
	void RequestChannelList ( );
	void PKT_LeftChannel_REQ_OK ( class UPacket* Packet );
	void PKT_JoinChannel_REQ_OK ( class UPacket* Packet );
	int GetChannelFillTypeByPlayers ( int Index );
	void AsSetCatagoryBtnTooltip ( TArray< struct FString > Tooptips );
	void UpdateBuddysinChannelInfo ( );
	void SetChannelGroupBtn ( );
	void ClearQuickJoin ( unsigned long bSuccess );
	bool RequestQuickJoin ( );
	void ConnectRookieChannel ( );
	bool IsEnableRookieChannelPopUp ( );
	void PKT_GetChannelList_REQ_OK ( class UPacket* recvPacket );
	void ProcessPassword ( );
	void OnQuickJoinBtnPress ( struct FEventData ev );
	void SetReconnectServer ( );
	void PKT_LOGOUT_REQ_OK ( class UPacket* recvPacket );
	void PKT_LookupServerAddr_REQ_OK ( class UPacket* Packet );
	void RequestConnectChannel ( );
	void CheckConnectChannel ( );
	void ConnectChannel ( int Index );
	void OnChannelListItemDoubleClick ( struct FEventData ev );
	void OnChannelListItemClick ( struct FEventData ev );
	void OnClickedChannelLeftTab ( struct FEventData ev );
	void OnGhostModeChanged ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
};

UClass* USFGFxLobby_ChannelRenweal::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_NewSWF
// 0x000C (0x0670 - 0x0664)
class USFGFxLobby_WaitingRoom_NewSWF : public USFGFxLobby_WaitingRoom
{
public:
	TArray< int >                                      AvailableGameModeArray;                           		// 0x0664 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81787 ];

		return pClassPointer;
	};

	bool IsAvailableGameMode ( int gamemode );
};

UClass* USFGFxLobby_WaitingRoom_NewSWF::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_PVE
// 0x003C (0x06AC - 0x0670)
class USFGFxLobby_WaitingRoom_PVE : public USFGFxLobby_WaitingRoom_NewSWF
{
public:
	struct FString                                     MSG_Selected_Difficutly;                          		// 0x0670 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Rank_Date;                                    		// 0x067C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Rank_Title;                                   		// 0x0688 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableRoundCB_Text;                              		// 0x0694 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                LastMapID;                                        		// 0x06A0 (0x0004) [0x0000000000000000]              
	int                                                LastGameModeID;                                   		// 0x06A4 (0x0004) [0x0000000000000000]              
	int                                                CurrentDesctiptionPage;                           		// 0x06A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81786 ];

		return pClassPointer;
	};

	struct FString GetLastRankUpdatedDate ( );
	unsigned char GetNextTargetDifficulty ( );
	unsigned char GetCurrentDifficult ( );
	struct FString GetDifficultyText ( unsigned char level_code, unsigned long bShortWordOnly );
	struct FString GetCurrentLevelText ( );
	void ASSetRankInfo ( TArray< class UGFxObject* > List );
	void ASSetRankTitle ( struct FString Mode, struct FString Title, struct FString Date );
	void ASShowNextMapCaption ( );
	void ASShowPrevMapCaption ( );
	void ASSetMapCaptionData ( struct FString map_name, class UGFxObject* List );
	void ASSetSelectedDifficultyList ( int Index );
	void ASSetDifficultyList ( TArray< class UGFxObject* > List );
	void ASSetCurrentDifficultyText ( struct FString Label );
	void pveWaitRoom_OnRoomCbOpen ( );
	void pveWaitRoom_OnOptionCbOpen ( );
	void pveWaitRoom_OnDifficultyCBListClick ( int Index );
	void OnChangeWinPointCondition ( struct FEventData ev );
	void OnNewPveLevelOpened ( );
	void OnClickEmptySlot ( int SlotIndex, int mouseIndex );
	void PKT_LeftGameRoom_REQ_OK ( class UPacket* recvPacket );
	void InvitePlayer ( );
	void UpdateRankInfo ( );
	void UpdateMapDescription ( );
	void OnChangeWinRoundCondition ( struct FEventData ev );
	void UpdateModeDifficulty ( );
	void AutoSelectDifficulty ( unsigned long no_need_request );
	void UpdateMatchConditionCBList ( );
	void InitializeDifficultyList ( );
	int GetUserListSlotSize ( );
	void UpdateRoomUserInterface ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	class UGFxObject* ASSetSlotList ( int SlotType, struct FString CodeName );
	void UpdateAllRoomUserList ( );
	void OnViewClosed ( int NextIndex );
	int GetRoundModeUINum ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_WaitingRoom_PVE::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_Hero
// 0x0000 (0x0670 - 0x0670)
class USFGFxLobby_WaitingRoom_Hero : public USFGFxLobby_WaitingRoom_NewSWF
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81788 ];

		return pClassPointer;
	};

	void ASSetTeamBalanceMode ( int Mode );
	void ASSetCurrentMatchConditionIndex ( int Index );
	void ASSetMatchConditionList ( TArray< class UGFxObject* > ObjList );
	void heroWaitRoom_OnRoomCbOpen ( );
	void heroWaitRoom_OnOptionCbOpen ( );
	void heroWaitRoom_OnTimeLimitCBListClick ( int Index );
	void OnChangeWinPointCondition ( struct FEventData ev );
	void UpdateAllRoomUserList ( );
	bool CanGameStart ( int* ErrorNo );
	void ChangeMatchCondition ( int NewIndex );
	void UpdateSelectedMatchCondition ( );
	class UGFxObject* ASSetARoomUser ( int Index, int InUSN );
};

UClass* USFGFxLobby_WaitingRoom_Hero::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_AITDM
// 0x0070 (0x06E0 - 0x0670)
class USFGFxLobby_WaitingRoom_AITDM : public USFGFxLobby_WaitingRoom_NewSWF
{
public:
	struct FString                                     MSG_Selected_AIDifficutly_html;                   		// 0x0670 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_Selected_AIDifficutly;                        		// 0x067C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AddUserListImpossible;                            		// 0x0688 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AISlotName;                                       		// 0x0694 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              WaitAIList;                                       		// 0x06A0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AddRedAIBtn;                                      		// 0x06A4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AddRedPlayerBtn;                                  		// 0x06A8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AddBlueAIBtn;                                     		// 0x06AC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AddBluePlayerBtn;                                 		// 0x06B0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SubRedAIBtn;                                      		// 0x06B4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SubRedPlayerBtn;                                  		// 0x06B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SubBlueAIBtn;                                     		// 0x06BC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SubBluePlayerBtn;                                 		// 0x06C0 (0x0004) [0x0000000000000000]              
	int                                                DisplaySlotMax;                                   		// 0x06C4 (0x0004) [0x0000000000000000]              
	TArray< int >                                      DisplaySlotStates;                                		// 0x06C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AIModeSlotType;                                   		// 0x06D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                RedPlayerUserCnt;                                 		// 0x06D8 (0x0004) [0x0000000000000000]              
	int                                                BluePlayerUserCnt;                                		// 0x06DC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81789 ];

		return pClassPointer;
	};

	unsigned char CheckValidityValue ( unsigned char CheckValue, int Max );
	void AITDMwaitRoom_OnRoomCbOpen ( );
	void UpdateSelectedMatchCondition ( );
	void UpdatePlayerLimitList ( );
	int GetAvailableSlotIndexToOtherTeam ( int SlotIndex );
	void ASSetDisableRemoveButton ( unsigned long bDisable );
	void SetRoomPropButton ( unsigned long bEnable );
	void OnTeamSwitchBtnPress ( struct FEventData ev );
	void SubUserListSlot ( int TeamType, int UserType );
	bool CheckRoomUserStatus ( int SlotIndex );
	bool CannotStartGameAITeamDeath ( int* ErrorNo );
	void AddUserListSlot ( int TeamType, int UserType );
	void OnClickSubBluePlayer ( struct FEventData ev );
	void OnClickAddBluePlayer ( struct FEventData ev );
	void OnClickSubBlueAI ( struct FEventData ev );
	void OnClickAddBlueAI ( struct FEventData ev );
	void OnClickSubRedPlayer ( struct FEventData ev );
	void OnClickAddRedPlayer ( struct FEventData ev );
	void OnClickSubRedAI ( struct FEventData ev );
	void OnClickAddRedAI ( struct FEventData ev );
	class UGFxObject* ASSetSlotList ( int SlotType, struct FString CodeName );
	void UpdateAllRoomUserList ( );
	void UpdateSelectedPlayerUI ( );
	void OnChangePlayerCount ( struct FEventData ev );
	void ASSetCurrentDifficultyText ( struct FString Label );
	void InitializeDifficultyList ( );
	struct FString GetDifficultyText ( unsigned char level_code, unsigned long bShortWordOnly );
	unsigned char GetCurrentDifficult ( );
	void SetVisbleAddButton ( unsigned long Visible );
	void UpdateModeDifficulty ( );
	void OnChangeWinPointCondition ( struct FEventData ev );
	void UpdateRoomUserInterface ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void ChangePlayerNumber ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_WaitingRoom_AITDM::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_AITDMVS16
// 0x0000 (0x06E0 - 0x06E0)
class USFGFxLobby_WaitingRoom_AITDMVS16 : public USFGFxLobby_WaitingRoom_AITDM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81790 ];

		return pClassPointer;
	};

	int GetAvailableSlotIndexToOtherTeam ( int SlotIndex );
	bool CannotStartGameAITeamDeath ( int* ErrorNo );
	void UpdateAllRoomUserList ( );
	void UpdateRoomUserInterface ( );
};

UClass* USFGFxLobby_WaitingRoom_AITDMVS16::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_Zombie
// 0x0000 (0x06AC - 0x06AC)
class USFGFxLobby_WaitingRoom_Zombie : public USFGFxLobby_WaitingRoom_PVE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81791 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobby_WaitingRoom_Zombie::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_1VS1
// 0x0050 (0x06C0 - 0x0670)
class USFGFxLobby_WaitingRoom_1VS1 : public USFGFxLobby_WaitingRoom_NewSWF
{
public:
	class UGFxClikWidget*                              ObserverList;                                     		// 0x0670 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RankList;                                         		// 0x0674 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              AddObserverBtn;                                   		// 0x0678 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SubObserverBtn;                                   		// 0x067C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RankTabBtn;                                       		// 0x0680 (0x0004) [0x0000000000000000]              
	unsigned char                                      MaxPlayerCount;                                   		// 0x0684 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      MaxSlotCount;                                     		// 0x0685 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      DefaultObserverSlotCnt;                           		// 0x0686 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      DefaultRankPeriodDays;                            		// 0x0687 (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     AddUserListImpossible;                            		// 0x0688 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PlayerLimitText;                                  		// 0x0694 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WarningRankingNotify;                             		// 0x06A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                CustomModeType;                                   		// 0x06AC (0x0004) [0x0000000000000000]              
	int                                                MapID;                                            		// 0x06B0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnRankTapClickedDelegate__Delegate;             		// 0x06B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81792 ];

		return pClassPointer;
	};

	void UpdateObserverBtn ( );
	void UpdateSelectedPlayerUI ( );
	void UpdateRoomUserInterface ( );
	int GetChangeEmptySlot ( int TeamIndex );
	int GetAvailableSlotIndexInTeam ( int TeamIndex );
	int GetAvailableSlotIndexToOtherTeam ( int SlotIndex );
	void SetRoomPropButton ( unsigned long bEnable );
	class UGFxObject* ASSetRankUserList ( int Index, TArray< struct FS1VS1UserRankInfo > OutArray );
	struct FString GetEndRankDateInfo ( struct FString RankingStartDate );
	struct FString SetRankDateAddComma ( struct FString OutDate );
	void ASSetRankDateInfo ( struct FString RankDateString );
	struct FString GetResultRankDate ( TArray< struct FS1VS1UserRankInfo > OutArray );
	void NotifyRankDate ( );
	void SetRankInfoList ( int TabIndex );
	void ServerToSendGet1VS1ModeUserRank ( );
	void SetChangeMapID ( int CurrentMapID );
	void ChangeMap ( int Index );
	void AddUserListSlot ( );
	void OnClickSubObserverBtn ( struct FEventData ev );
	void OnClickAddObserverBtn ( struct FEventData ev );
	class UGFxObject* ASSetSlotList ( int SlotType, struct FString CodeName );
	class UGFxObject* GetSlotElementObject ( int SlotIndex, int* SlotCnt );
	void UpdateAllRoomUserList ( );
	void UpdateGameModeList ( );
	void UpdatePlayerLimitList ( );
	struct FSRoomSetting GetRoomSetting ( );
	void SubUserListSlot ( );
	void ChangePlayerNumber ( );
	void OnViewClosed ( int NextIndex );
	void SetRankTabModeList ( );
	void SetMapID ( );
	void InitWaitRoom ( );
	void OnViewActivated ( int PrevIndex );
	void OnClickedMainTap ( int InTabIndex );
	void DelegateSetup ( );
	void SetOnRankTapClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnRankTapClickedDelegate ( int TabIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_WaitingRoom_1VS1::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_WaitingRoom_16VS16
// 0x0000 (0x0670 - 0x0670)
class USFGFxLobby_WaitingRoom_16VS16 : public USFGFxLobby_WaitingRoom_NewSWF
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81793 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobby_WaitingRoom_16VS16::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Album
// 0x000C (0x0360 - 0x0354)
class USFGFxLobby_Album : public USFGFxLobbyScreen
{
public:
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x0354 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81794 ];

		return pClassPointer;
	};

	void OnSystemSettingChanged ( );
	void ASCreateMainTab ( class UGFxObject* MainTabs );
	void InitializeMainTab ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobby_Album::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_Rank
// 0x0018 (0x036C - 0x0354)
class USFGFxLobby_Rank : public USFGFxLobbyScreen
{
public:
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x0354 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bUITabInitialized : 1;                            		// 0x0360 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxClikWidget*                              ClanRankList;                                     		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PCRoomUserRankList;                               		// 0x0368 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81795 ];

		return pClassPointer;
	};

	void ASCreateMainTab ( class UGFxObject* MainTabs );
	void InitializeMainTab ( );
	void InitializedUITab ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_Rank::pClassPointer = NULL;

// Class SFGame.SFGFXLobby_Enchant
// 0x0108 (0x045C - 0x0354)
class USFGFXLobby_Enchant : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              btnItemSearch;                                    		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ItemSearchInputWidget;                            		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnExtractOK;                                     		// 0x035C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnPartOk;                                        		// 0x0360 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BuySPPartsBtn;                                    		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BuyCashPartsBtn;                                  		// 0x0368 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              UpgradeBtn;                                       		// 0x036C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PageWeapoonList;                                  		// 0x0370 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              EnchantDesignTree;                                		// 0x0374 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              BaseItemPage;                                     		// 0x0378 (0x0004) [0x0000000000000000]              
	TArray< struct FSDisplayItem >                     DisplayItems;                                     		// 0x037C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxObject*                                  ItemProvider;                                     		// 0x0388 (0x0004) [0x0000000000000000]              
	int                                                PageItemDisplayCount;                             		// 0x038C (0x0004) [0x0000000000000000]              
	int                                                CurrentPageIndex;                                 		// 0x0390 (0x0004) [0x0000000000000000]              
	int                                                MaxPageCount;                                     		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                PositionalNum;                                    		// 0x0398 (0x0004) [0x0000000000000000]              
	int                                                CurrentDesignID;                                  		// 0x039C (0x0004) [0x0000000000000000]              
	struct FQWord                                      SelectedItemSN;                                   		// 0x03A0 (0x0008) [0x0000000000000000]              
	int                                                SelectedBaseItemID;                               		// 0x03A8 (0x0004) [0x0000000000000000]              
	TArray< struct FSDisplayItem >                     SelectedItemList;                                 		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxMultiSelectItemCount;                          		// 0x03B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowBaseItemInInventory : 1;                     		// 0x03BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCurrentExtractState : 1;                         		// 0x03BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNowAnimationPlay : 1;                            		// 0x03BC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVisibleEnchantWeaponInfo : 1;                    		// 0x03BC (0x0004) [0x0000000000000000] [0x00000008] 
	class USFGFxDialog_BuyOne*                         BuyOneDlg;                                        		// 0x03C0 (0x0004) [0x0000000000000000]              
	int                                                CurrentPurchasePartsID;                           		// 0x03C4 (0x0004) [0x0000000000000000]              
	TArray< struct FDetailItem >                       ExtractInfoList;                                  		// 0x03C8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              PartsWarningRate;                                 		// 0x03D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     MaxPartsEarnWarning;                              		// 0x03D8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxPartsPurchaseWarning;                          		// 0x03E4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ItemExtractWarning;                               		// 0x03F0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ImportantItemExtractWarning;                      		// 0x03FC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MainItemExtractWarning;                           		// 0x0408 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EquipNoticeString;                                		// 0x0414 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnchanttipString;                                 		// 0x0420 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DesignNoticeString;                               		// 0x042C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableEnchantNeedsMorePartsString;               		// 0x0438 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DisableEnchantNeedsBaseItemString;                		// 0x0444 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __delegatePressFunc__Delegate;                    		// 0x0450 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81796 ];

		return pClassPointer;
	};

	void OnClickedPageRightBtn ( );
	void OnClickedPageLeftBtn ( unsigned long IsClickedPageLeftBtn );
	void GetPageIndexByAS ( int Index );
	void ASSetPagingVisible ( unsigned long bVisible );
	void ASSetEnablePaging ( unsigned long isEnable );
	void ASSetSelectedButton ( int Index );
	void ASSetPage ( int PageMax, int NowPage );
	void PlaySoundEnchantGetParts ( unsigned long bStart );
	void PlaySoundEnchantItemClick ( );
	void PlaySoundClickDefaultInfoView ( struct FEventData ev );
	void PlaySoundClickBaseSelectView ( struct FEventData ev );
	void PlaySoundEnchantBtnClick ( );
	void PlaySoundItemExtract ( unsigned long bStart );
	void PlaySoundItemEnchant ( unsigned long bStart );
	void UpdateEnchantPageInfo ( );
	void InitEnchantInventory ( unsigned long bWithBaseItem );
	void InitEnchantLobby ( );
	void OnClickPopupClose ( struct FEventData ev );
	void UpdateClosePopup ( );
	void ASOnClosePopup ( );
	void OnClickDisableStateUpgradeBtn ( );
	void OpenPopupDisableUpgradeBtn ( );
	void PKT_GiveEnchantUserDesignItem_REQ_OK ( class UPacket* recvPacket );
	void RequestEnchantUpgrade ( int EncahantDesignID, struct FDetailItem BaseItemInfo, unsigned char BuyType, int ItemPrice );
	void UpdateUpgradeWeaponAbility ( int WeaponID );
	void InitUpgradeWeaponAbility ( );
	void ASSetUpgradeWeaponAbility ( int Damage, int Recoil, int FireInterval, int Accuracy, int AmmoCountInMgz, int TotalAmmoCount );
	void ASSetUpgradePartData ( int MyPartsA, int NeedPartsA, int MyPartsB, int NeedPartsB, int MyPartsC, int NeedPartsC, int MyPartsD, int NeedPartsD );
	void ASSetVisibleEnchantWeaponInfo ( unsigned long bShow );
	void ASSetUpgradeItemImg ( struct FString WeaponTitle, struct FString WeaponName );
	void UpdateBaseSelectAlarm ( struct FEnchantDesignInfo DesignInfo );
	void UpdateEnchantCondition ( struct FEnchantDesignInfo DesignInfo );
	void OnSelectEnchantBaseWeaponItem ( int SelectedID, unsigned long bSelected );
	void onGraphPageClicked ( );
	void onWeaponPageClicked ( );
	void popupUpgradeItemResultClose ( );
	void popupUpgradeItemResultOpen ( );
	bool EnchantWeaponProcess ( );
	bool HasAnyBaseItem ( struct FEnchantDesignInfo DesignInfo );
	bool HasEnoughParts ( struct FEnchantDesignInfo DesignInfo );
	bool IsValidBaseItemSelected ( struct FEnchantDesignInfo DesignInfo, int BaseItemID );
	void OnClickUpgradeButton ( struct FEventData ev );
	void ASCloseUpgradePopUpView ( );
	void ASOpenUpgradePopUpView ( );
	void ASDisableUpgradeButton ( unsigned long bDisable );
	void ASSetEnchantDesignTipText ( struct FString TipString );
	void ASSetEnchantDesignText ( struct FString ExplainString );
	void InitEnchantDesignTree ( );
	void CreateNodeArray ( TArray< struct FString > NodeNameList, TArray< class UGFxObject* >* OutNodes );
	void SetNodeArray ( class UGFxObject* ParentNode, TArray< class UGFxObject* > ChildNodes );
	class UGFxObject* CreateEmptyNode ( struct FString ObjName, struct FString LabelName );
	void SetEnchantBaseItemPage ( TArray< int > BaseItemIDList );
	class UGFxObject* CreateBaseItemObj ( struct FSFItemData BaseItem, unsigned long bEnchantable, struct FString EquipString );
	void SetEnchantDesignView ( struct FEnchantDesignInfo EnchantDesign );
	void InitEnchantPrice ( );
	void SetEnchantItemPrice ( struct FEnchantDesignInfo EnchantDesign );
	bool GetEnchantDesignInfoByName ( struct FString DesignName, struct FEnchantDesignInfo* EnchnatDesign );
	void SetEnchantDesignViewOnClickTree ( struct FEnchantDesignInfo EnchantDesign );
	void SetEnchantEmptyDesignView ( );
	void ASSetDesignTreeIndex ( int TreeIndex );
	void OnClickEnchantDesignTree ( struct FEventData ev );
	void ASSetEnchantPrice ( int Cash, int TP, int SP );
	void ASSetEnchantItemResult ( struct FString A, struct FString B );
	void ASOnResetBaseWeaponList ( );
	void ASSetTreeNode ( class UGFxObject* TreeNode );
	void ASSetEnchantAlarm ( unsigned long bActive );
	void ShowCurrentEnchantParts ( );
	bool ConvertExtractItemData ( struct FSDisplayItem OrgItem, struct FDetailItem* ExtractItem );
	void popupPartResultClose ( );
	void popupPartResultOpen ( );
	void popupPartAbstractClose ( );
	void popupPartAbstractOpen ( );
	bool IsMainItemSafety ( );
	void OpenNoticePopup ( struct FString popupText, unsigned long bCloseByEnter );
	void OpenChoicePopup ( struct FString popupText, struct FScriptDelegate OkDelegate, struct FScriptDelegate CloseDelegate, unsigned long bCloseByEnter );
	void delegatePressFunc ( );
	void OnExtractBtnClick ( struct FEventData ev );
	bool IsExtractEndlessItem ( );
	void DelayProcessExtractCheck ( );
	void ProcessExtractWithCheck ( );
	void ProcessExtract ( );
	void ASSetMaxSelectCount ( int MaxCount );
	void SetExtractResultPartsCount ( int PartsA, int PartsB, int PartsC, int PartsD );
	void SetCurrnetPartsCounts ( int PartsA, int MaxPartsA, int PartsB, int MaxPartsB, int PartsC, int MaxPartsC, int PartsD, int MaxPartsD );
	void ASSetOpenPopupExtractResult ( );
	void ASSetOpenPopupExtract ( int AnimSeconds );
	bool GetItemDataFromPageTest ( int ItemIdx, struct FSDisplayItem* outItemData );
	bool GetItemDataFromPage ( int ItemPageIdx, int ItemIdx, struct FSDisplayItem* outItemData );
	int GetDisplayIndexFromPageInfo ( int PageIndex, int ItemIndexinPage );
	bool GetPageInfoFromDisplayIndex ( int DisplayIndex, int* OutItemPageIndex, int* OutItemIndexinPage );
	void GetDisplayItemInfo ( int ItemId, struct FQWord ItemSN, struct FSDisplayItem* OutItem );
	bool GetDisplayItems ( int ItemId, struct FQWord ItemSN, int ItemCount, unsigned long bUsedItem, struct FSDisplayItem* OutNewItem );
	void MakeInvenItemList ( TArray< int > FilterItemID, TArray< struct FSDisplayItem >* OutItemList );
	void ConstructPageObject ( class UGFxObject* PageObject, TArray< class UGFxObject* > ItemObjects );
	void GetPageItemObjects ( int PageIndex, TArray< class UGFxObject* >* ItemObjects );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void UpdatePageInfo ( int CurrentPageObjectIdx );
	void InitInventoryPage ( );
	void ApplySearchResult ( TArray< struct FSDisplayItem >* SearchedItemList );
	void GetSearchedItemList ( TArray< struct FSDisplayItem >* DisplayItemList );
	void OnItemSearchBtnClick ( struct FEventData ev );
	void ShowGetBaseWeaponList ( unsigned long bShowBase );
	void RemoveSelectedItemList ( struct FSDisplayItem ItemData );
	void AddSelectedItemList ( struct FSDisplayItem ItemData );
	int GetSelectedItemIndex ( struct FQWord ItemSN );
	void InitExtractItemList ( );
	void GetClickItemIndex ( int FlashPageListIndex, int ItemIndex, struct FString Selected );
	void ASSetPartsWarning ( struct FString WarningString );
	void ASLeftMove ( int PageCount );
	void ASRightMove ( int PageCount );
	void ASSetPageStepperMaxValue ( int PageCount );
	void ASResetCheckList ( );
	void PKT_BuyEnchantPartsItem_REQ_OK ( class UPacket* recvPacket );
	void RequestBuyEnchantParts ( int PartsID, int PaymentType, int Price, int PartsType );
	void InitBuyDialog ( );
	void OnViewClosed ( int NextIndex );
	bool PurchasePartsProcess ( );
	void PurchaseEnchantParts ( int PurchaseType );
	void OnClickPartsBuySPBtns ( struct FEventData ev );
	void OnClickPartsBuyCashBtns ( struct FEventData ev );
	int GetPartsItemID ( int PurchaseType );
	void DelegateSetup ( );
	void ASCreateSubTab ( int MainTabCode, class UGFxObject* SubTabs );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFXLobby_Enchant::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_ClanBase
// 0x0048 (0x039C - 0x0354)
class USFGFxLobby_ClanBase : public USFGFxLobbyScreen
{
public:
	struct FString                                     YearLocalized;                                    		// 0x0354 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MonthLocalized;                                   		// 0x0360 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DayLocalized;                                     		// 0x036C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           JoinDlgQuestion;                                  		// 0x0378 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     strJoinCSN;                                       		// 0x0384 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     strJoinClanName;                                  		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81798 ];

		return pClassPointer;
	};

	struct FString GetClanHomeFormtRegDate ( struct FString Regdate );
	void OpenJoinDlg ( struct FString CSN, struct FString ClanName, struct FString ClanRecommendNick );
	struct FString GetClanJoinFormtRegDate ( struct FString Regdate );
	struct FString GetClanBaseFormtRegDate ( struct FString Regdate );
};

UClass* USFGFxLobby_ClanBase::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_ClanLeague
// 0x00D8 (0x0474 - 0x039C)
class USFGFxLobby_ClanLeague : public USFGFxLobby_ClanBase
{
public:
	class UGFxClikWidget*                              MainBtn[ 0x5 ];                                   		// 0x039C (0x0014) [0x0000000000000000]              
	class UGFxClikWidget*                              SubBtn[ 0x2 ];                                    		// 0x03B0 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanJoinBtn;                                      		// 0x03B8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ListMoreBtn;                                      		// 0x03BC (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              MemberInfoListMoreBtn;                            		// 0x03C0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SeasonComboBox;                                   		// 0x03C4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanRankList;                                     		// 0x03C8 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  ClanMemberRankList;                               		// 0x03CC (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  PersonalRankList;                                 		// 0x03D0 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanLeagueSearchBtn;                              		// 0x03D4 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SearchInputWidget;                                		// 0x03D8 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanLeagueCloseBtn;                               		// 0x03DC (0x0004) [0x0000000000000000]              
	unsigned char                                      SelectMainTabType;                                		// 0x03E0 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectSubTabType;                                 		// 0x03E1 (0x0001) [0x0000000000000000]              
	int                                                NowShowListType;                                  		// 0x03E4 (0x0004) [0x0000000000000000]              
	int                                                BottomADImageIndex;                               		// 0x03E8 (0x0004) [0x0000000000000000]              
	struct FString                                     TopADImgPath;                                     		// 0x03EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     SelectedSeasonDate;                               		// 0x03F8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SearchText;                                       		// 0x0404 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PreSearchText;                                    		// 0x0410 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClanJoinMsg;                                      		// 0x041C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HaveNoLeagueDataMsg;                              		// 0x0428 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SeasonComboBoxLabel;                              		// 0x0434 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchResultNoDataMsg;                            		// 0x0440 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ClanJoinBtnLabel;                                 		// 0x044C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SearchResultNoDataBtnLabel;                       		// 0x0458 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              PreTickTime;                                      		// 0x0464 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickADTabBtnDelegate__Delegate;              		// 0x0468 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81797 ];

		return pClassPointer;
	};

	void SetOnClickADTabBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickADTabBtnDelegate ( int Index );
	struct FString GetClanHomeFormatLevel ( struct FString Level );
	void SetVisibleSeasonComboBox ( unsigned long bShow );
	void FocusSearchText ( );
	int ProcessShortcutKeys ( struct FString KeyName );
	void SetInfoDialog ( unsigned long bVisible, struct FString GuideMsg, struct FString BtnLabel, unsigned long btnVisible );
	void ASSetTextInfoDialog ( struct FString GuideMsg );
	void ASSetVisibleInfoDialog ( unsigned long bVisible );
	void ASSetLeagueGuideInfoURL ( struct FString PlayLeageTextPath, struct FString PunishmentTextPath );
	void ASSetTopAdImg ( struct FString ImgPath );
	void ResetRollingImageTimer ( );
	void CheckRollingImageTimer ( );
	void OnClickBottomADTabBtn ( int Index );
	void ASSetSelectedBottomADImage ( int BottomImgIndex );
	void ASSetBottomADImageList ( TArray< struct FString > ImageArray );
	void SetBottomADListImage ( );
	void InitADImage ( );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void SetLeagueGuideInfo ( );
	void InitTerms ( );
	struct FString GetPreRankIcon ( int Ranking, int OldRanking );
	void ASSetVisibleClanInfoText ( unsigned long bVisible );
	void ASSetClanInfoText ( class UGFxObject* MyClanInfoObj );
	void OnChangedComboBox ( struct FEventData ev );
	class UGFxObject* GetSeaeonComboBoxInfo ( int Index, int SeasonDate );
	void SetSeasonComboBox ( );
	void SetMyClanInfo ( );
	void UpdateRankList ( int ShowListTypeIdx, unsigned long bShowSeasonComboBox, unsigned long bSearching );
	void ASShowListWindow ( struct FString Index );
	class UGFxObject* GetTeamRankInfo ( int Index, TArray< struct FSClanLeagueRankInfo > ClanLeagueInfo );
	void ResetRankList ( );
	void SetTeamRankList ( TArray< struct FSClanLeagueRankInfo > ClanLeagueInfo, unsigned long bSearching );
	class UGFxObject* GetMyClanMemberRankInfo ( int Index );
	void SetMyClanMemberRankList ( );
	struct FString GetKDA ( struct FString KillCnt, struct FString DeathCnt, struct FString AssistCnt );
	class UGFxObject* GetPersonalRankInfo ( int Index, TArray< struct FSClanLeagueRankInfo > ClanLeagueInfo );
	void SetPersonalRankList ( TArray< struct FSClanLeagueRankInfo > ClanLeagueInfo, unsigned long bSearching );
	void CheckLeagueInfoData ( int DataLength, unsigned long bSerching );
	void InitSearchInputText ( );
	void OnClickSearchBtn ( struct FEventData ev );
	void OnClickClanJoinBtn ( struct FEventData ev );
	void MoveToClanHome ( struct FSClanLeagueRankInfo ClanLeagueInfo );
	void OnClickClanList ( struct FEventData ev );
	void OnClickClanLeagueCloseBtn ( struct FEventData ev );
	void OnClickMemberInfo ( struct FEventData ev );
	void OnClickClanInfo ( struct FEventData ev );
	void OnClickLeagueGuideBtnBtn ( struct FEventData ev );
	void OnClickRewardGuideBtn ( struct FEventData ev );
	void OnClickPersonalRankInfo ( struct FEventData ev );
	void OnClickTeamRankInfo ( struct FEventData ev );
	void OnClickMyClanRankInfo ( struct FEventData ev );
	int RequestLeagueSeasonPersonalRank ( struct FString SeasonDate, struct FString CodeName );
	int RequestLeagueSeasonClanRank ( struct FString SeasonDate, struct FString ClanName );
	int RequestLeagueClanMemberRank ( struct FString strCSN );
	int RequestLeagueMyClanRank ( struct FString strCSN );
	void RequestClanMemberList ( struct FString strCSN );
	bool RequestClanInfo ( struct FString strCSN );
	void ActivatedRequest ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void InitClanLeague ( );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobby_ClanLeague::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_FeverTime
// 0x0070 (0x03C4 - 0x0354)
class USFGFxLobby_FeverTime : public USFGFxLobbyScreen
{
public:
	TArray< struct FSFeverDisplayItem >                FeverDisplayItem;                                 		// 0x0354 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              MainBtn[ 0x4 ];                                   		// 0x0360 (0x0010) [0x0000000000000000]              
	class UGFxClikWidget*                              SubBtn[ 0x2 ];                                    		// 0x0370 (0x0008) [0x0000000000000000]              
	class UGFxClikWidget*                              FeverOrgelBtn;                                    		// 0x0378 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FeverSaleBtn;                                     		// 0x037C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FeverRewardList;                                  		// 0x0380 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              FeverCloseBtn;                                    		// 0x0384 (0x0004) [0x0000000000000000]              
	unsigned char                                      SelectMainTabType;                                		// 0x0388 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectSubTabType;                                 		// 0x0389 (0x0001) [0x0000000000000000]              
	int                                                CrrentDisplayType;                                		// 0x038C (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnableFeverSystem : 1;                           		// 0x0390 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	TArray< struct FString >                           strFeverRewardGrade;                              		// 0x0394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AcquireTooltipMsg;                                		// 0x03A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickFeverRewardAcceptBtnDelegate__Delegate;  		// 0x03AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __FeverLpRewardItemSortByGroup__Delegate;         		// 0x03B8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81799 ];

		return pClassPointer;
	};

	void EnableFeverOrgelBtn ( );
	void ASSetFeverGuideInfoTextPath ( struct FString TextPath );
	void ASSetMyLuckyPoint ( int HaveLP );
	void ASSetFeverProgressTabImage ( struct FString ImgPath );
	void ASShowFeverDisplay ( struct FString DisplayType );
	void GetSelectedItemArray ( int ItemListIndex, TArray< struct FSFItemData >* SelectedItemDataArray );
	void OpenAllBuyDialog ( int ItemListIndex );
	bool IsValidPrice ( int Price );
	int FeverLpRewardItemSortByGroup ( struct FSFeverDisplayItem A, struct FSFeverDisplayItem B );
	class UGFxObject* GetFeverRewardItem ( int Index, struct FSFeverDisplayItem DisplayItems );
	void SetFeverRewardItemList ( );
	void InitLPRewardItemList ( );
	void SetOnClickFeverRewardAcceptBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickFeverRewardAcceptBtnDelegate ( int Index );
	void OnItemBuySuccess ( int ItemId, struct FQWord ItemSN, int ItemPrice, unsigned long bIsInUse );
	void OnClickFeverCloseBtn ( struct FEventData ev );
	void OnClickFeverRewardAcceptBtn ( int Index );
	void OnClickFeverSaleBtn ( struct FEventData ev );
	void OnClickFeverOrgelBtn ( struct FEventData ev );
	void OnClickFeverAddtionalReward ( struct FEventData ev );
	void OnClickFeverSale ( struct FEventData ev );
	void OnClickFeverOrgel ( struct FEventData ev );
	void OnClickFeverProgress ( struct FEventData ev );
	void OnClickFeverGuide ( struct FEventData ev );
	void OnViewClosed ( int NextIndex );
	void SetFeverGuideInfo ( );
	void InitGuideInfoFile ( );
	void InitFeverSelectTab ( );
	void InitFeverPage ( );
	void OnViewActivated ( int PrevIndex );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobby_FeverTime::pClassPointer = NULL;

// Class SFGame.SFGFXLobby_Combine
// 0x00A8 (0x03FC - 0x0354)
class USFGFXLobby_Combine : public USFGFxLobbyScreen
{
public:
	int                                                CombineCheckOK;                                   		// 0x0354 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CombineCheckNO;                                   		// 0x0358 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CombineResult;                                    		// 0x035C (0x0004) [0x0000000000000000]              
	int                                                PartsTypeCount;                                   		// 0x0360 (0x0004) [0x0000000000000000]              
	TArray< struct FCombineIconData >                  CombineIconArray;                                 		// 0x0364 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultMainTabList;                               		// 0x0370 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FCombineDesignInfo >                TempCombineDesignList;                            		// 0x037C (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     CountTextOK;                                      		// 0x0388 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CountTextNO;                                      		// 0x0394 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ContentTextBlank;                                 		// 0x03A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      IsCombineActivate : 1;                            		// 0x03AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsOpenDialog : 1;                                 		// 0x03AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      DialogState;                                      		// 0x03B0 (0x0001) [0x0000000000000000]              
	struct FScriptDelegate                             __OnCombineMainTabClickedDelegate__Delegate;      		// 0x03B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCombineWeaponListClickedDelegate__Delegate;   		// 0x03C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCombineStartDelegate__Delegate;               		// 0x03CC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCombineOpenPopupDelegate__Delegate;           		// 0x03D8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCombineClosePopupDelegate__Delegate;          		// 0x03E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCombineCompleteDelegate__Delegate;            		// 0x03F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 81800 ];

		return pClassPointer;
	};

	void PKT_GiveCombineUserDesignItem_REQ_OK ( class UPacket* recvPacket );
	void OnCombineComplete ( );
	void SetOnCombineCompleteDelegate ( struct FScriptDelegate InDelegate );
	void OnCombineCompleteDelegate ( );
	void OnCombineClosePopup ( );
	void SetOnCombineClosePopupDelegate ( struct FScriptDelegate InDelegate );
	void OnCombineClosePopupDelegate ( );
	void OnCombineOpenPopup ( );
	void SetOnCombineOpenPopupDelegate ( struct FScriptDelegate InDelegate );
	void OnCombineOpenPopupDelegate ( );
	bool IsHiddenItem ( int HiddenItemID );
	void OnCombineStart ( int TabIndex );
	void SetOnCombineStartDelegate ( struct FScriptDelegate InDelegate );
	void OnCombineStartDelegate ( int TabIndex );
	void OnClickedSubTap ( int InTabIndex );
	void SetOnCombineWeaponListClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnCombineWeaponListClickedDelegate ( int TabIndex );
	void ClickedMainTap ( int InTabIndex, unsigned long IsUpdate );
	void OnClickedMainTap ( int InTabIndex );
	void SetOnCombineMainTabClickedDelegate ( struct FScriptDelegate InDelegate );
	void OnCombineMainTabClickedDelegate ( int TabIndex );
	void AsToSendKeyEvent ( int Key );
	void ASEnableCombineBtn ( unsigned long bEnable );
	void ASClosePopup ( );
	void ASOpenPopup ( );
	void ASSetPopupResultIndex ( int Result );
	void ASSetPopupData ( class UGFxObject* PopupData );
	void ASSetCombineData ( class UGFxObject* CombineDataArray );
	void ASSetWeaponData ( class UGFxObject* WeaponData );
	void ASSetTopItemData ( class UGFxObject* TopItemData );
	void ASSetWeaponListData ( TArray< struct FString > DataArray );
	struct FString GetContextText ( int Count, int NeedCount );
	int GetCombineCheck ( int Count, int NeedCount );
	struct FString GetCombineContext ( int Index, int Idx, int Type, int* outCheck, int* outVisible );
	class UGFxObject* SetCombineObject ( struct FCombineData Data );
	void SetCombineData ( int Index );
	struct FString GetItemTypeByID ( int ItemId );
	struct FString ExtractStat ( struct FString Attrib );
	struct FString GetItemGrade ( struct FString ItemTag, int IconType );
	class UGFxObject* GetItemInfoData_FuncItem ( int ItemId );
	class UGFxObject* GetItemInfoData_Equip ( int ItemId );
	class UGFxObject* GetItemInfoData_Weapon ( int ItemId );
	class UGFxObject* GetItemInfoData ( int ItemId );
	void SetWeaponData ( int ItemId );
	void SetTopItemData ( );
	void SetWeaponListData ( );
	void SetMainTabData ( );
	void ASSetMainTabData ( TArray< struct FString > DataArray );
	int ProcessShortcutKeys ( struct FString KeyName );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void SetCombineDialogState ( unsigned char State );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
	void DelegateSetup ( );
};

UClass* USFGFXLobby_Combine::pClassPointer = NULL;

// Class SFGame.SFGFxLobby_ChannelList
// 0x00AC (0x0400 - 0x0354)
class USFGFxLobby_ChannelList : public USFGFxLobbyScreen
{
public:
	class UGFxClikWidget*                              QuickStart;                                       		// 0x0354 (0x0004) [0x0000000000000000]              
	TArray< class UGFxClikWidget* >                    ChannelBtn;                                       		// 0x0358 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              ChannelList;                                      		// 0x0364 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChannelList_Ad;                                   		// 0x0368 (0x0004) [0x0000000000000000]              
	struct FSChannelSetting                            SelectedChannel;                                  		// 0x036C (0x0028) [0x0000000000000000]              
	int                                                SelectedChannelIndex;                             		// 0x0394 (0x0004) [0x0000000000000000]              
	int                                                MaxChannelIndex;                                  		// 0x0398 (0x0004) [0x0000000000000000]              
	struct FString                                     SeparationBaseString;                             		// 0x039C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           CannotConnecttoChannel;                           		// 0x03A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuddyFriendNumMessage;                            		// 0x03B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BuddyClanNumMessage;                              		// 0x03C0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSChannelFillInfo >                 ChannelFillInfoArray;                             		// 0x03CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      IsForceUsingTutorial : 1;                         		// 0x03D8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bRequestLogOut : 1;                               		// 0x03D8 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bChannelGraduate : 1;                             		// 0x03D8 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bUseADMode : 1;                                   		// 0x03D8 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bOpenWebConfirm : 1;                              		// 0x03D8 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned char                                      StartTutorialType;                                		// 0x03DC (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     PendingServerIP;                                  		// 0x03E0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PendingServerPort;                                		// 0x03EC (0x0004) [0x0000000000000000]              
	int                                                ChannelListADImageIndex;                          		// 0x03F0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickADTabBtnDelegate__Delegate;              		// 0x03F4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83826 ];

		return pClassPointer;
	};

	void SetOnClickADTabBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickADTabBtnDelegate ( int Index );
	void OnClickTabBtn ( int Index );
	void ASSetSelectedChannelADImage ( int ChannelListImgIndex );
	void ASSetAdMode ( unsigned long bMode );
	void ASSetChannelListADImageList ( TArray< struct FString > ImageArray );
	void SetChannelListImage ( );
	void CheckChannelListADMode ( );
	void ResetRollingImageTimer ( );
	void CheckRollingImageTimer ( );
	void OpenWeb ( struct FString strURL );
	void OnImageAreaBtnClicked ( struct FEventData ev );
	void FilterADModeForEachChannelGroup ( int GroupIndex );
	bool datastore_OnDataChanged ( struct FString BindingName );
	int datastore_DataProviderLength ( struct FString BindingName );
	void datastore_FillDataRow ( struct USFGFxLobby_ChannelList_FSUIChannelInfo RowData, class UGFxObject** RowItem );
	struct FString GetChannelExtraColor ( int channelType, int CurrentColor, unsigned long bDisable );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void StartFirstTimeTutorial ( );
	int HandlingPacketError ( int ProtocolID, int ErrorID, class UPacket* recvPacket );
	void OnQuickJoinDialogOK ( );
	void ASSetPCRoomIconImage ( struct FString IconImage );
	void AutoMoveToChannel ( int ChanType, int ChanNum );
	void ASSetChannelGroupSelected ( int No );
	void SetPreviewWeaponRepairUI ( unsigned long bShow, struct FQWord ItemSN );
	void ActivatePreviewAreaExtraUI ( );
	void NotifyClanMsgDestroyClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void SetNotifyClanMsg ( int USN );
	void PKT_GetNetmarbleDiscountCouponForVIP_REQ_OK ( class UPacket* Packet );
	int ProcessShortcutKeys ( struct FString KeyName );
	void SetBacktoNaviButton ( );
	void GetOutProcess ( int LastScreen );
	void RequestChannelList ( );
	void PKT_LeftChannel_REQ_OK ( class UPacket* Packet );
	void PKT_JoinChannel_REQ_OK ( class UPacket* Packet );
	int GetChannelFillTypeByPlayers ( int Index );
	void AsSetCatagoryBtnTooltip ( TArray< struct FString > Tooptips );
	void UpdateBuddysinChannelInfo ( );
	void SetChannelGroupBtn ( );
	void ClearQuickJoin ( unsigned long bSuccess );
	bool RequestQuickJoin ( );
	void ConnectRookieChannel ( );
	bool IsEnableRookieChannelPopUp ( );
	void PKT_GetChannelList_REQ_OK ( class UPacket* recvPacket );
	void ProcessPassword ( );
	void OnQuickJoinBtnPress ( struct FEventData ev );
	void SetReconnectServer ( );
	void PKT_LOGOUT_REQ_OK ( class UPacket* recvPacket );
	void PKT_LookupServerAddr_REQ_OK ( class UPacket* Packet );
	void RequestConnectChannel ( );
	void CheckConnectChannel ( );
	void ConnectChannel ( int Index );
	void OnChannelListItemDoubleClick ( struct FEventData ev );
	void OnChannelListItemClick ( struct FEventData ev );
	void OnChangeChannelType ( int GroupIndex );
	void OnChangeChannelType8 ( struct FEventData ev );
	void OnChangeChannelType7 ( struct FEventData ev );
	void OnChangeChannelType6 ( struct FEventData ev );
	void OnChangeChannelType5 ( struct FEventData ev );
	void OnChangeChannelType4 ( struct FEventData ev );
	void OnChangeChannelType3 ( struct FEventData ev );
	void OnChangeChannelType2 ( struct FEventData ev );
	void OnChangeChannelType1 ( struct FEventData ev );
	void OnChangeChannelType0 ( struct FEventData ev );
	void OnGhostModeChanged ( );
	bool IsValidChannelBtn ( int InIndex, class UGFxObject* InWidget );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void SetDefaultChannelGroup ( );
	void OnViewActivated ( int PrevIndex );
	void OnPendingOpen ( );
};

UClass* USFGFxLobby_ChannelList::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfo
// 0x0004 (0x020C - 0x0208)
class USFGFxLobbyPart_MyInfo : public USFGFxLobbyPart
{
public:
	class UGFxClikWidget*                              MyInfoModeListMC;                                 		// 0x0208 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83992 ];

		return pClassPointer;
	};

	void ASShowUseText ( unsigned long bShow );
	void OnDisguiseRankChanged ( );
	void OnMonthlyRewardStarted ( );
	void OnMonthlyRewardCheck ( );
	void OnVIPCouponUseStarted ( );
	void OnCheckOutDateVipItem ( );
	void OnUpdateProfileEmblem ( );
	void OnColorCodeNameChanged ( );
	void OnClickWeaponLog ( int Index );
	void OnClickChangeList ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_MyInfo::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfoVIp
// 0x00A0 (0x02AC - 0x020C)
class USFGFxLobbyPart_MyInfoVIp : public USFGFxLobbyPart_MyInfo
{
public:
	class UGFxClikWidget*                              GradeDropDown;                                    		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              RenewalBtn;                                       		// 0x0210 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VipItemBuyBtn;                                    		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                ImageIndex;                                       		// 0x0218 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsVipLevelTypeBG : 1;                             		// 0x021C (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsHighLevelVip : 1;                               		// 0x021C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	float                                              RollingTime;                                      		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxVIpPoint;                                      		// 0x0224 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           VipInfoImgs;                                      		// 0x0228 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct USFGFxLobbyPart_MyInfoVIp_FsInfoData > RegisterRequestCardInfoList;                      		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxLobbyPart_MyInfoVIp_FsInfoData > RegisterCardInfoList;                             		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxLobbyPart_MyInfoVIp_FsVIPLevelInfo > LevelInfoList;                                    		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LevelInfoContextList;                             		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocalizedToolTipMsg;                              		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedNexxExpToolTipMsg;                       		// 0x0270 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIPDiscountCouponMsg;                             		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PeriodOfGrace;                                    		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickLevelBtnDelegate__Delegate;              		// 0x0294 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOverLevelBtnDelegate__Delegate;               		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 83991 ];

		return pClassPointer;
	};

	void AsToSendVipInfoImgIndex ( int Index );
	void AsToSendVipInfoImgs ( TArray< struct FString > ImageArray );
	void AsToSendsetVipType ( unsigned long IsImageType );
	void AsToSendSetGaugeLevel ( class UGFxObject* Obj );
	void AsToSendSetLevel ( int Level );
	void ASSetGaugeNmyPosition ( int TotalPoint, int NextPoint, int TotalGrade, int NowGrade );
	void ASToSendSetMyPoint ( );
	void ASSetLeftSectioniTimeTxt ( struct FString VipPeriod );
	void ASToSendSetVipGaugeMax ( int Max );
	void ASSetVisibleDropDown ( unsigned long InVisible );
	void ASToSendSetTopContents ( struct FString Title, struct FString context );
	void CheckRollingImageTimer ( );
	void ClearRollingTimeImage ( );
	void ResetRollingTimeImage ( );
	void OnGradeComboBox ( struct FEventData ev );
	void OnGradeFocusIn ( struct FEventData ev );
	void OnGradeChanged ( struct FEventData ev );
	void SetupGradeComboBox ( );
	void SetLocalizedVipLevelInfo ( );
	void OnVIPCouponUseStarted ( );
	void OnCheckOutDateVipItem ( );
	void ASToSendSetRightContents ( int Index );
	void OnClickVipItemBuyBtn ( struct FEventData ev );
	void OnClickRenewalBtn ( struct FEventData ev );
	void SetOnOverLevelBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnOverLevelBtnDelegate ( struct FString Index );
	void SetOnClickLevelBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickLevelBtnDelegate ( struct FString Index );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	int GetLevelInfoListNextVipPointbyVipPoint ( int VipPoint );
	int GetLevelInfoListVipGradebyVipPoint ( int VipPoint );
	int GetLevelInfoListIndexbyVipPoint ( int VipPoint );
	class UGFxObject* GetLevelInfoObj ( int Index );
	struct FString GetLevelInfoLabelbyVipGrade ( int Grade );
	void SetTopCardInfo ( );
	void SetDetailLevelInfo ( );
	void SetRightVipInfo ( );
	void OnOverLevelBtn ( struct FString Index );
	void OnClickLevelBtn ( struct FString Index );
	void SetLeftSectionVipPeriod ( );
	void SetMyInfoVipData ( );
	void OnUpdateProfileEmblem ( );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_MyInfoVIp::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanRank
// 0x0144 (0x03C0 - 0x027C)
class USFGFxLobbyPart_ClanRank : public USFGFxLobbyPart_ClanRenewal
{
public:
	int                                                BlindTime;                                        		// 0x027C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ENoticeBgColor_Blind;                             		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ENoticeBgColor_Ready;                             		// 0x0284 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     WeeklyClanRankTitle;                              		// 0x0288 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNoticeText_Normal;                  		// 0x0294 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNoticeText_Blind;                   		// 0x02A0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNoticeText_Ready;                   		// 0x02AC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_Day;                     		// 0x02B8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_DayText;                 		// 0x02C4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_Hour;                    		// 0x02D0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_HourText;                		// 0x02DC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_Minute;                  		// 0x02E8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_MinuteText;              		// 0x02F4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_Blind;                    		// 0x0300 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_BlindTime;                		// 0x030C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_Ready;                    		// 0x0318 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_ReadyTime;                		// 0x0324 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankUnit;                               		// 0x0330 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNone;                               		// 0x033C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlind;                              		// 0x0348 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              LastWeekRankBtn;                                  		// 0x0354 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ClanRankList;                                     		// 0x0358 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              PCRoomUserRankList;                               		// 0x035C (0x0004) [0x0000000000000000]              
	int                                                EClanRankState_Normal;                            		// 0x0360 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EClanRankState_Blind;                             		// 0x0364 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EClanRankState_Ready;                             		// 0x0368 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ResultDay;                                        		// 0x036C (0x0004) [0x0000000000000000]              
	int                                                ResultHour;                                       		// 0x0370 (0x0004) [0x0000000000000000]              
	int                                                ResultMinute;                                     		// 0x0374 (0x0004) [0x0000000000000000]              
	struct FString                                     BlindDayString;                                   		// 0x0378 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlindHourString;                                  		// 0x0384 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlindMinuteString;                                		// 0x0390 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StartBlindAniStat;                                		// 0x039C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClosedStat;                                       		// 0x03A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EndBlindAniStat;                                  		// 0x03B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84529 ];

		return pClassPointer;
	};

	void ASInitBlind ( );
	void ASSetNoticeTextNBg ( int BGColor, struct FString Title, struct FString Time );
	void ChangeRankStat ( );
	void SetNoticeTextNBg ( );
	void ASSetBlindStat ( struct FString Stat );
	void SetBlindStat ( );
	void ClearRemainTimer ( );
	void SetPreviousLastWeekData ( );
	void SetPreviousThisWeekData ( );
	void SetPreviousData ( int RankType );
	void OnClickLastWeekRankBtn ( struct FEventData ev );
	void ASSetClanRankPosValue ( int NowClanRank, struct FString ClanImage, struct FString ClanPoint, unsigned long bHasClan, struct FString RankText );
	void ASSetClanRankPos ( );
	struct FString SetRankText ( int NowClanRank );
	void SetClanRankPos ( int NowClanRank, int ClanPointValue );
	void SetClearClanRankList ( );
	void SetClanRankData ( TArray< struct FSWeeklyClanRankInfo > RecvClanInfo );
	void ASSetClanRankMaxValue ( int MaxCount );
	void SetClanRankMaxValue ( int MaxCount );
	void ASSetTxtRankResultTime ( struct FString RemainTimeString );
	void SetTxtRankResultTime ( struct FString DayString, struct FString HourString, struct FString MinuteString );
	void SetRemainTimeReset ( );
	void CaculateRankTimeFormat ( int RecvTime, struct FString* DayString, struct FString* HourString, struct FString* MinuteString );
	void SetBlindTime ( );
	void SetRankResultTime ( int RecvTime );
	void ASSetTapWeekTopTitle ( struct FString Title );
	void SetTapWeekTopTitle ( struct FString StartDate, struct FString EndDate );
	void PKT_GetWeeklyRealtimeRank_REQ_OK ( class UPacket* Packet );
	void PKT_GetWeeklyRealtimeRank_REQ_TRANSACTION ( class UPacket* Packet );
	void SetLastWeekList ( );
	void SetThisWeekList ( );
	void SetLastWeek ( );
	void SetThisWeek ( );
	void RequestWeeklyClanRankType ( int RankType );
	void OnViewClosed ( int NextIndex );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void InitClanRankData ( );
	void OnChangeMainTab ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_ClanRank::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_ClanLeague
// 0x003C (0x00CC - 0x0090)
class USFUIDataStore_ClanLeague : public USFUIDataStore_ClanBase
{
public:
	TArray< struct FSClanLeagueRankInfo >              MyClanRankData;                                   		// 0x0090 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSClanLeagueRankInfo >              MyClanMemberRankData;                             		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSClanLeagueRankInfo >              SeasonClanRankData;                               		// 0x00A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSClanLeagueRankInfo >              SeasonPersonalRankData;                           		// 0x00B4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      SeasonDateArray;                                  		// 0x00C0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 84618 ];

		return pClassPointer;
	};

	int RequestLeagueSeasonPersonalRank ( struct FString year_month, struct FString CodeName );
	int RequestLeagueSeasonClanRank ( struct FString year_month, struct FString ClanName );
	void AddLeaguePersonalRank ( TArray< struct FString >* Results, int* I, TArray< struct FSClanLeagueRankInfo >* RankData );
	void RecvLeaguePersonalRank ( TArray< struct FString >* Results, TArray< struct FSClanLeagueRankInfo >* RankData );
	void AddLeagueMyClanMemberRank ( TArray< struct FString >* Results, int* I );
	void RecvLeagueMyClanMemberRank ( TArray< struct FString >* Results );
	int RequestLeagueMyClanMemberRank ( struct FString CSN );
	void AddLeagueClanRank ( TArray< struct FString >* Results, int* I, TArray< struct FSClanLeagueRankInfo >* RankData );
	void RecvLeagueClanRank ( TArray< struct FString >* Results, TArray< struct FSClanLeagueRankInfo >* RankData );
	int RequestLeagueMyClanRank ( struct FString CSN );
	void PKT_GetLeagueSeasonDate_REQ_OK ( class UPacket* recvPacket );
	void SetRecvPacketHandler ( );
};

UClass* USFUIDataStore_ClanLeague::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_WeaponTag
// 0x001B (0x017C - 0x0161)
class USFItem_WeapOption_WeaponTag : public USFItem_WeapOption
{
public:
	class UClass*                                      WeaponTagRISClass;                                		// 0x0164 (0x0004) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   WeaponTagMIC;                                     		// 0x0168 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  DiffuseTexture;                                   		// 0x016C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  NormalTexture;                                    		// 0x0170 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  SpecularTexture;                                  		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                WeaponTagMeshIndex;                               		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85091 ];

		return pClassPointer;
	};

	void GetSpecificIndexWithDataByID ( class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_WeapOption_WeaponTag::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ClanMarkEffect
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_ClanMarkEffect : public USFItem_Functional_Clan
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85092 ];

		return pClassPointer;
	};

	void ApplyItemProperty ( class AActor* AppliedActor, struct FString ReceiveItemProperty );
	void AdjustClanItem ( struct FString ItemProperty, struct FSClanInfo* ClanInfo );
};

UClass* USFItem_Func_ClanMarkEffect::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeClassMark
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_ChangeClassMark : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85093 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChangeClassMark::pClassPointer = NULL;

// Class SFGame.SFItem_Func_Combine
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_Combine : public USFItem_Functional_UI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85170 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_Combine::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfoChallenge
// 0x0070 (0x027C - 0x020C)
class USFGFxLobbyPart_MyInfoChallenge : public USFGFxLobbyPart_MyInfo
{
public:
	struct FString                                     MSG_Challenge_Achieved_Date;                      		// 0x020C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MSG_No_Challenge_Achieved_Date;                   		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultSubTabList;                                		// 0x0224 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      DefaultChallengeTypeTabList;                      		// 0x0230 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     BindingName_ChallengingList;                      		// 0x023C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BindingName_AchievementList;                      		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFChallengeListCondition*                   ChallengeListCondition;                           		// 0x0254 (0x0004) [0x0000000000000000]              
	TArray< struct FChallengeProgressData >            ProgressList;                                     		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FChallengeProgressData >            CompleteList;                                     		// 0x0264 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Current_SubTab_Index;                             		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                Current_ChallengeTypeTab_Index;                   		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                RecvChallengeListCount;                           		// 0x0278 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85190 ];

		return pClassPointer;
	};

	void ChangeChallengeTypeTab ( int new_typetab_index );
	void ChangeChallengeSubTab ( int new_subtab_index );
	bool datastore_OnDataChanged ( struct FString BindingName );
	int datastore_DataProviderLength ( struct FString BindingName );
	void datastore_FillCompletedItem ( int Index, class UGFxObject** Item );
	void datastore_FillCompletedList ( int start_index, int end_index, class UGFxObject** total_row );
	void datastore_FillProgressingItem ( int Index, class UGFxObject** Item );
	bool IsPlayTimeEvent ( struct FString EventName );
	void datastore_FillProgressingList ( int start_index, int end_index, class UGFxObject** total_row );
	void datastore_FillData ( struct FString BindingName, int Index, class UGFxObject** RowItem );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void SetChallengeTypeTabInfo ( class UGFxObject* List );
	void SetChallengeSubTabInfo ( class UGFxObject* List );
	void HideTotalChallengePoint ( );
	void SetTotalChallengePoint ( int Point );
	void SetSelectedIndexOfCompletedChallengeList ( int Index );
	void ASSetVisibleLeftModeList ( unsigned long bShow );
	void OnClickChangeList ( struct FEventData ev );
	void challenge_OnSubTabClick ( int subtab_code );
	void OnChangeChallengeTab ( );
	void OnChangeChallengeSubTab ( );
	void PKT_GetTaskList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetTaskList_REQ_OK ( class UPacket* Packet );
	void InitializedArchivementList ( );
	bool GetCurrentTaskInfo ( struct FName SupplyCode, struct FChallengeProgressData* out_challenge_info );
	void InitializeChallengeList ( int filter_type_index );
	bool IsHiddenChallenge ( struct FChallengeData TargetData );
	void SubModeIconTab ( );
	void ForceSetListScrollPosition ( );
	void InitializeChallengeTypeTab ( );
	void InitializeSubTab ( );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
	void OnViewLoaded ( );
};

UClass* USFGFxLobbyPart_MyInfoChallenge::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ProvideCharacter
// 0x0000 (0x0184 - 0x0184)
class USFItem_Func_ProvideCharacter : public USFItem_Func_ProvideItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85664 ];

		return pClassPointer;
	};

	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ProvideCharacter::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ColorCodeNameV2
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_ColorCodeNameV2 : public USFItem_Func_ColorCodeName
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85696 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ColorCodeNameV2::pClassPointer = NULL;

// Class SFGame.SFItem_Func_CombatReport
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_CombatReport : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85727 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_CombatReport::pClassPointer = NULL;

// Class SFGame.SFItem_Func_SPImmediatelyProvide
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_SPImmediatelyProvide : public USFItem_Func_SPGageUp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85738 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_SPImmediatelyProvide::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ProvideHealth
// 0x0000 (0x0184 - 0x0184)
class USFItem_Func_ProvideHealth : public USFItem_Func_ProvideItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 85942 ];

		return pClassPointer;
	};

	void ApplyItemToHostActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ProvideHealth::pClassPointer = NULL;

// Class SFGame.SFGFxMoviePlayer_Dogtag
// 0x0008 (0x01E8 - 0x01E0)
class USFGFxMoviePlayer_Dogtag : public USFGFxMoviePlayer
{
public:
	class UGFxObject*                                  CodeNameTextField;                                		// 0x01E0 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  DateTextField;                                    		// 0x01E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86597 ];

		return pClassPointer;
	};

	void SetCreationDate ( struct FString strDate );
	void SetText ( struct FString strMsg );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	bool Start ( unsigned long StartPaused );
};

UClass* USFGFxMoviePlayer_Dogtag::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_CodeNameNeeded
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_CodeNameNeeded : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86604 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_CodeNameNeeded::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_EndCodeName
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_EndCodeName : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 86639 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_EndCodeName::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Inven
// 0x0058 (0x0260 - 0x0208)
class USFGFxLobbyPart_Inven : public USFGFxLobbyPart
{
public:
	TArray< struct FSDisplayItem >                     DisplayItems;                                     		// 0x0208 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      SubTabList;                                       		// 0x0214 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FSResellDialogInfo                          ResellDialogInfo;                                 		// 0x0220 (0x0018) [0x0000000000000000]              
	TArray< unsigned long >                            InvenTabResellButtonVisible;                      		// 0x0238 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                DisplayItemCount;                                 		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                DisplayRowSize;                                   		// 0x0248 (0x0004) [0x0000000000000000]              
	int                                                DisplayColumnSize;                                		// 0x024C (0x0004) [0x0000000000000000]              
	int                                                PositionalNum;                                    		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                PageIndex;                                        		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                TotalPageIndex;                                   		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                PageGroupCount;                                   		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88359 ];

		return pClassPointer;
	};

	void AsSetPMCFlowData ( struct FString strImg, struct FString strDay, struct FString strDayNumber, struct FString Content );
	void SetPmcItem ( );
	int EquipPmc ( struct FQWord ItemSN, unsigned long bEquip );
	struct FString GetCannotResellType ( int InItemID, struct FQWord ItemSN );
	void OnItemSearchBtnClick ( struct FString InputText );
	void OnResellBtnClick ( );
	void OnUsedSendedGiftItem ( );
	void ASSetResellBtnView ( unsigned long bVisibleBtn );
	int GetCurrentSubTabCode ( );
	class UGFxObject* datastore_FillData_ItemListAt ( int Index );
	void datastore_FillData_ItemList ( int StartIndex, int EndIndex, struct FString BindingName, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	void ASSetCurrentSubTab ( int Index );
	void OnClickedDeleteButton ( int rowIdx, int columIdx, int MouseX, int MouseY, int DialogType );
	void OnItemResellSuccess ( int ItemId, struct FQWord ItemSN );
	void OnRequestResellItem ( struct FQWord ItemSN, struct FString ItemType, int ItemCount );
	void OnClickedResellButton ( int rowIdx, int columIdx, int MouseX, int MouseY, int DialogType );
	int SetMakeNewDisplayItem ( int ItemId, struct FQWord ItemSN, struct FSDisplayItem* OutItem );
	void SetSortItemList ( TArray< struct FSDisplayItem >* OutItemArray );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void InitializeSearchText ( );
	void ScrollIndexIntialize ( );
	void InitInvenItemList ( );
	void ApplySearchResult ( TArray< struct FSDisplayItem >* SearchedItemList );
	void GetSearchedItemList ( TArray< struct FSDisplayItem >* DisplayItemList );
	void InvenPartChangeNotify ( );
	void MakeInvenItemList ( );
	int EquipItem ( struct FQWord ItemSN, unsigned long Toggled );
	void UpdateUnitChanged ( int UnitID );
	struct FSDisplayItem GetDisplayItem ( int Index );
	void OnClickWeaponSetAllRepair ( int nSet, int X, int Y );
	void OnClickWeaponListRepair ( int Row, int colum, int DialogPosX, int DialogPosY );
	void OnClickWeaponSetRepair ( struct FString CaseStr, struct FString SetStr, int DialogPosX, int DialogPosY );
	void OnClickedEquipedThrowweapon ( int ClickedIdx );
	void OnClickUnitList ( int Index, unsigned long bForce );
	void OnClickWeaponSetType ( struct FString Index );
	void OnClickWeaponSetTypeClick ( int ClickedType );
	void OnPmcItemUseBtnClick ( int Row, int colum );
	void OnClickItemUse ( int Row, int colum );
	void OnClickPMCInvenList ( int Row, int colum );
	void OnClickRecycleInvenList ( int Row, int colum );
	void OnClickModeInvenList ( int Row, int colum );
	void OnClickFuncInvenList ( int Row, int colum );
	void OnClickEquipInvenList ( int Row, int colum );
	void OnClickWeaponInvenList ( int Row, int colum );
	void OnCheckOutDateVipItem ( );
	void ASSetWeaponSetList ( );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void InitInvenLobbyPart ( );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void OnChangeMainTab ( );
	void AsToSendSetPmcItemLock ( unsigned long bIsLock );
	void AsToSendSetPmcItem ( struct FString strImg, struct FString strDay, struct FString strDayNumber );
	void ASCreateSubTab ( int MainTabCode, class UGFxObject* SubTabs );
	void InitPageIndex ( );
	void ResetPageIndex ( );
	void InitalizeSearchItem ( );
	void ASSetPagingVisible ( unsigned long bShow );
	void ASSetSelectedButton ( int Index );
	void ASSetPage ( int TotalPageCount, int Index );
	void OnClickedPageRightBtn ( );
	void OnClickedPageLeftBtn ( unsigned long IsClickedPageLeftBtn );
	void GetPageIndexByAS ( int Index );
	void InitializeSubTab ( int MainTabCode, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
};

UClass* USFGFxLobbyPart_Inven::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ChangeClanMark
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_ChangeClanMark : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88393 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ChangeClanMark::pClassPointer = NULL;

// Class SFGame.SFItem_Func_InitWeaponKillDeath
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_InitWeaponKillDeath : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88394 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_InitWeaponKillDeath::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ClanLeague
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_ClanLeague : public USFItem_Functional_Clan
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88395 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ClanLeague::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenModeItem
// 0x001C (0x027C - 0x0260)
class USFGFxLobbyPart_InvenModeItem : public USFGFxLobbyPart_Inven
{
public:
	int                                                RecievedModeItemCount;                            		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FString                                     ModeItemOverlapMsg;                               		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SubTabSort__Delegate;                           		// 0x0270 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88396 ];

		return pClassPointer;
	};

	void ASSetModeOverlapItemIndex ( int Row, int colum );
	int SubTabSort ( struct FSFUITabList A, struct FSFUITabList B );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void ASSetPassiveModeItemData ( int SlotIndex, struct FString ImgCode, struct FString RestDays, struct FString AlertType );
	void ASSetActiveModeItemData ( int SlotIndex, struct FString ImgCode, struct FString RestDays, struct FString AlertType );
	void ASSetEquippedModeNameSet ( struct FString mode_name );
	void ASSetEquippedModeItem ( struct FString mode_name );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void Inventory_OnModePassiveSlotClick ( int Index );
	void Inventory_OnModeActiveSlotClick ( int Index );
	void PKT_SetModeArmsStore_REQ_OK ( class UPacket* recvPacket );
	void PKT_GetModeArmsStoreList_REQ_TRANSACTION ( class UPacket* recvPacket );
	void PKT_GetModeArmsStoreList_REQ_OK ( class UPacket* recvPacket );
	void OnClickModeInvenList ( int Row, int colum );
	void InitializeEquippedModeItemInfo ( );
	void AddToDisplayList ( int item_id, struct FQWord item_sn, int ItemCount );
	void InvenPartChangeNotify ( );
	void MakeInvenItemList ( );
	void InitInvenItemList ( );
	void InitInvenLobbyPart ( );
	void OnChangeMainTab ( );
	int ChangeGameMode ( );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void InitializeSubTab ( int MainTabCode, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_InvenModeItem::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenWeapon
// 0x000C (0x026C - 0x0260)
class USFGFxLobbyPart_InvenWeapon : public USFGFxLobbyPart_Inven
{
public:
	class UGFxClikWidget*                              GrenadeList;                                      		// 0x0260 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  WeaponSetList;                                    		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                GrenadeSetCount;                                  		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88512 ];

		return pClassPointer;
	};

	struct FString GetCannotResellTypeWeapon ( int InItemID );
	bool datastore_requestItemRange ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject* Scope, struct FString Callback );
	void datastore_FillData_GrenadeSet ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillData_WeaponSet ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void OnItemResellSuccess ( int ItemId, struct FQWord ItemSN );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void PutDownItem ( struct FQWord ItemSN );
	void ASSetWeaponTypeList ( int Type );
	int EquipWeapon ( struct FQWord ItemSN, unsigned long bEquip );
	int EquipItem ( struct FQWord ItemSN, unsigned long Equip );
	void ChangeSelectedWeaponSet ( int NewSet );
	int GetDurabilityWeaponinWeaponSet ( int SetNo, int Slot );
	void PKT_SetWeaponSetInfo_REQ_OK ( class UPacket* Packet );
	void PKT_SetUsingWeaponSet_REQ_OK ( class UPacket* Packet );
	void OnClickWeaponSetAllRepair ( int nSet, int X, int Y );
	void OnClickWeaponSetRepair ( struct FString CaseStr, struct FString SetStr, int DialogPosX, int DialogPosY );
	void OnClickWeaponListRepair ( int Row, int colum, int DialogPosX, int DialogPosY );
	void OnClickWeaponInvenList ( int Row, int colum );
	void OnClickedEquipedThrowweapon ( int nClickedIdx );
	void OnClickWeaponSetType ( struct FString Index );
	void OnChangeMainTab ( );
	void OnClickWeaponSetTypeClick ( int ClickedType );
	void AddDisplayItems ( int ItemId, struct FQWord ItemSN, int ItemCount );
	int GetDisplayItemType ( int ItemId );
	void InvenPartChangeNotify ( );
	void MakeInvenItemList ( );
	class UGFxObject* SetAGrenadeInfo ( int Id, struct FQWord ISN );
	void ASSetGrenadeList ( );
	void GetItemImageNameAndDurability ( int SetNo, int Slot, struct FQWord ISN, struct FString* outIcon, struct FString* outRate );
	class UGFxObject* SetAWeaponSetInfo ( int SetNo );
	void ASSetWeaponSetList ( );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void ASSetWeaponSelectName ( struct FString WeaponName );
	void ASSetWeaponSelectIndex ( int Index );
	void InitInvenLobbyPart ( );
	bool WidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_InvenWeapon::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenEquip
// 0x000C (0x026C - 0x0260)
class USFGFxLobbyPart_InvenEquip : public USFGFxLobbyPart_Inven
{
public:
	TArray< struct FSUnitInvenItem >                   UnitItemArray;                                    		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88671 ];

		return pClassPointer;
	};

	bool datastore_requestItemRange ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject* Scope, struct FString Callback );
	void datastore_FillData_UnitSet ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void PutDownItem ( struct FQWord ItemSN );
	int EquipItem ( struct FQWord ItemSN, unsigned long Equip );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void PKT_SetUnitEquipInfo_REQ_OK ( class UPacket* Packet );
	void PKT_SetUsingUnit_REQ_OK ( class UPacket* Packet );
	bool IsEquippedItem ( struct FQWord ItemSN );
	void OnClickEquipInvenList ( int Row, int colum );
	void OnClickUnitList ( int NewIndex, unsigned long bForce );
	void OnChangeMainTab ( );
	bool GetItemIsEquipped ( struct FQWord ItemSN );
	void AddDisplayItems ( int ItemId, struct FQWord ItemSN, struct FString EnableUnit, int ItemCount );
	int GetDisplayItemType ( int ItemId );
	void InvenPartChangeNotify ( );
	void MakeInvenItemList ( );
	void InsertUnitItem ( int UnitItemID );
	class UGFxObject* SetAUnitInfo ( int Id );
	void InitUnitList ( );
	void InitInvenLobbyPart ( );
	void UpdateUnitChanged ( int UnitID );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_InvenEquip::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenFuncItem
// 0x0038 (0x0298 - 0x0260)
class USFGFxLobbyPart_InvenFuncItem : public USFGFxLobbyPart_Inven
{
public:
	struct FString                                     NewCodename;                                      		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NewClanName;                                      		// 0x026C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PCRoomString;                                     		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FQWord >                            UsingFunctionalItemArray;                         		// 0x0284 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDisablePMCItem : 1;                              		// 0x0290 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                ClickedChangeBtnItemID;                           		// 0x0294 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88672 ];

		return pClassPointer;
	};

	void Inven_cashitem_change_btn_click ( int IndexNo );
	void Inventory_OnPmcSlotClick ( );
	void datastore_FillData_OccupiedItem ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void PKT_SetPmcForceEquip_REQ_OK ( class UPacket* recvPacket );
	int EquipItem ( struct FQWord ItemSN, unsigned long Equip );
	void OnClickFuncInvenList ( int Row, int colum );
	class UGFxObject* SetAUsedFuncItem ( struct FQWord ItemSN );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	void ASSetUsedFuncItemList ( );
	void InvenPartChangeNotify ( );
	void MakeNotUsedItems ( );
	void MakeFunctionalItems ( );
	void MakeInvenItemList ( );
	void OnChangeMainTab ( );
	void InitInvenLobbyPart ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_InvenFuncItem::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenRecycle
// 0x0034 (0x0294 - 0x0260)
class USFGFxLobbyPart_InvenRecycle : public USFGFxLobbyPart_Inven
{
public:
	TArray< struct FSDisplayItem >                     RecycleDisplayItems;                              		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxClikWidget*                              btnRecycleListClear;                              		// 0x026C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnRecycleListSend;                               		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                RecycleInfoCount;                                 		// 0x0274 (0x0004) [0x0000000000000000]              
	int                                                RecycleTotalScore;                                		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FString                                     strRecycleCountShort;                             		// 0x027C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FsRecycleInfo >                     RecycleInfoArray;                                 		// 0x0288 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88673 ];

		return pClassPointer;
	};

	void ASSetRecycleItemData ( class UGFxObject* ItemData, int TotalPrice );
	void SetRecycleItemData ( TArray< struct FSDisplayItem > RecycleList, int TotalPrice );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool NeedDataStoreBinding ( struct FString BindingName );
	int GetDisplayItemType ( int ItemId );
	void InvenPartChangeNotify ( );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	int SetMakeNewDisplayItem ( int ItemId, struct FQWord ItemSN, struct FSDisplayItem* OutItem );
	void MakeNotUsedItems ( );
	void OnRevertButton ( struct FEventData ev );
	bool IsGrenadeWeaponType ( int ItemId );
	bool IsSpecialWeaponType ( int ItemId );
	bool IsSubWeaponType ( int ItemId );
	void GetRecycleScore ( int ItemId, int* TotalScore );
	void PKT_GetRecycleInfo_REQ_Transaction ( class UPacket* recvPacket );
	void PKT_GetRecycleInfo_REQ_OK ( class UPacket* recvPacket );
	void PKT_BuyRecycle_REQ_OK ( class UPacket* recvPacket );
	void RequestRecycleStart ( struct FEventData ev );
	void AddSelectedItemList ( struct FSDisplayItem Item );
	void OnClickRecycleInvenList ( int Row, int colum );
	void SetAddMakeList ( );
	void MakeInvenItemList ( );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void InitInvenLobbyPart ( );
};

UClass* USFGFxLobbyPart_InvenRecycle::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenPMCItem
// 0x0004 (0x0270 - 0x026C)
class USFGFxLobbyPart_InvenPMCItem : public USFGFxLobbyPart_InvenEquip
{
public:
	class UGFxClikWidget*                              btnCustomView;                                    		// 0x026C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 88674 ];

		return pClassPointer;
	};

	void OnPmcItemUseBtnClick ( int Row, int colum );
	void PKT_SetPmcForceEquip_REQ_OK ( class UPacket* recvPacket );
	void OnClickPMCInvenList ( int Row, int colum );
	class UGFxObject* ASSetAInvenItemInfo ( int ItemId, struct FQWord ItemSN, int ItemCount );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void SetPmcItem ( );
	void AddDisplayItems ( int ItemId, struct FQWord ItemSN, struct FString EnableUnit, int ItemCount );
	void InvenPartChangeNotify ( );
	void MakeInvenItemList ( );
	void InitInvenLobbyPart ( );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
	void SetShowCustomView ( unsigned long bVisible );
	void OnCheckPMCButtonPress ( struct FEventData ev );
	void OnViewActivated ( int PrevIndex );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_InvenPMCItem::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfoProfile
// 0x004C (0x0258 - 0x020C)
class USFGFxLobbyPart_MyInfoProfile : public USFGFxLobbyPart_MyInfo
{
public:
	int                                                RankingMinimumRank;                               		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     KADRateTab;                                       		// 0x0210 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     HKRateTab;                                        		// 0x021C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     WINRateTab;                                       		// 0x0228 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     KDCountTab;                                       		// 0x0234 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     NoRankingMessage;                                 		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BattleTab;                                        		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90148 ];

		return pClassPointer;
	};

	void ASCreateMainTab ( class UGFxObject* MainTabs );
	void SetPlayerRanking ( );
	void SetPlayerGageInfo ( );
	void SetPlayerLogInfo ( );
	void OnDisguiseRankChanged ( );
	void OnColorCodeNameChanged ( );
	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_MyInfoProfile::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfoWeaponLog
// 0x0058 (0x0264 - 0x020C)
class USFGFxLobbyPart_MyInfoWeaponLog : public USFGFxLobbyPart_MyInfo
{
public:
	int                                                DefWeaponLogIndex;                                		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                WeaponLogIndex;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	unsigned long                                      bReceivedWeaponLog : 1;                           		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	class UGFxClikWidget*                              WeaponListMC;                                     		// 0x0218 (0x0004) [0x0000000000000000]              
	struct FString                                     KillRatioMsg;                                     		// 0x021C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     HeadShotRatioMsg;                                 		// 0x0228 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AssistRatioMsg;                                   		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EtcRatioMsg;                                      		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponPlayedTimeMsg;                              		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSFWeaponLog >                      AllWeaponLogArray;                                		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90149 ];

		return pClassPointer;
	};

	void SetSelectedWeponLogInfo ( int InIndex );
	class UGFxObject* SetAWeaponLoginfo ( struct FString ItemName );
	void SetAllWeaponLogInfoList ( );
	void OnClickWeaponList ( struct FEventData ev );
	void OnChangeMainTab ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_MyInfoWeaponLog::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfoVIPMapRotation
// 0x00B4 (0x02C0 - 0x020C)
class USFGFxLobbyPart_MyInfoVIPMapRotation : public USFGFxLobbyPart_MyInfo
{
public:
	class UGFxClikWidget*                              ModeMapListMC;                                    		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              SaveMapListMC;                                    		// 0x0210 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnSave;                                          		// 0x0214 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnCancel;                                        		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  SaveDataProvider;                                 		// 0x021C (0x0004) [0x0000000000000000]              
	class USFUIDataProvider_ModeInfo*                  SelectedGameModeData;                             		// 0x0220 (0x0004) [0x0000000000000000]              
	TArray< struct FSSupportMap >                      SupportMapList;                                   		// 0x0224 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMapRotationInfo >                  TempSaveMapList;                                  		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MapSelectedIndex;                                 		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                SaveSelectedIndex;                                		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsSuccessMapData : 1;                             		// 0x0244 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< unsigned long >                            IsSaveData;                                       		// 0x0248 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           RotationGameModeNameList;                         		// 0x0254 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           CurGRotationGameModeNameList;                     		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SuccessMapDataMessage;                            		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     InitializationMapDataMessage;                     		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ImpossibleMapDataMessage;                         		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NormalUserMessage;                                		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NothingSaveDataMessage;                           		// 0x029C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BlindMessage;                                     		// 0x02A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ChannelMessage;                                   		// 0x02B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90150 ];

		return pClassPointer;
	};

	int FindSaveDataIndex ( unsigned long IsRenew );
	void NormalUserSetting ( unsigned long Status );
	void PKT_SaveVipMapRotationInfo_REQ_OK ( class UPacket* recvPacket );
	void OnDlgClickInitializationOKBtn ( );
	void OnInitializationButtonPress ( struct FEventData ev );
	void OnOKButtonPress ( struct FEventData ev );
	void SelectedSaveMapSetting ( int Selected );
	void OnClickSaveMap ( struct FEventData ev );
	void OnClickModeMap ( struct FEventData ev );
	void OnClickChangeList ( struct FEventData ev );
	class UGFxObject* GetSubTabObject ( struct FString IconImg, struct FString Title, int Index );
	void SetSubSaveDataSetting ( );
	void SubSaveDataTab ( );
	void SubModeMapTab ( int SelectedIndex );
	void SubModeIconTab ( );
	void InitializationModeSetting ( );
	void AsToSendOnBlindEnabled ( unsigned long Enabled );
	void AsToSendSetBlindTxt ( struct FString BlindTxt );
	void OnChangeMainTab ( );
	void OnViewClosed ( int NextIndex );
	void DelegateSetup ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_MyInfoVIPMapRotation::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MyInfoMonthlyReward
// 0x00AC (0x02B8 - 0x020C)
class USFGFxLobbyPart_MyInfoMonthlyReward : public USFGFxLobbyPart_MyInfo
{
public:
	class UGFxClikWidget*                              RenewalBtn;                                       		// 0x020C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              VipItemBuyBtn;                                    		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                ImageIndex;                                       		// 0x0214 (0x0004) [0x0000000000000000]              
	unsigned long                                      IsVipLevelTypeBG : 1;                             		// 0x0218 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      IsHighLevelVip : 1;                               		// 0x0218 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	float                                              RollingTime;                                      		// 0x021C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxVIpPoint;                                      		// 0x0220 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           VipInfoImgs;                                      		// 0x0224 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TopContenImage;                                   		// 0x0230 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct USFGFxLobbyPart_MyInfoMonthlyReward_FsInfoData > RegisterRequestCardInfoList;                      		// 0x023C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxLobbyPart_MyInfoMonthlyReward_FsInfoData > RegisterCardInfoList;                             		// 0x0248 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct USFGFxLobbyPart_MyInfoMonthlyReward_FsVIPLevelInfo > LevelInfoList;                                    		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LevelInfoContextList;                             		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LocalizedToolTipMsg;                              		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LocalizedNexxExpToolTipMsg;                       		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VIPDiscountCouponMsg;                             		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PeriodOfGrace;                                    		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              GradeDropDown;                                    		// 0x029C (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnClickLevelBtnDelegate__Delegate;              		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOverLevelBtnDelegate__Delegate;               		// 0x02AC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 90151 ];

		return pClassPointer;
	};

	void AsToSendVipInfoImgIndex ( int Index );
	void AsToSendVipInfoImgs ( TArray< struct FString > ImageArray );
	void AsToSendsetVipType ( unsigned long IsImageType );
	void AsToSendSetGaugeLevel ( class UGFxObject* Obj );
	void AsToSendSetLevel ( int Level );
	void ASSetVisibleDropDown ( unsigned long InVisible );
	void ASSetLeftSectioniTimeTxt ( struct FString VipPeriod );
	void SetLeftSectionVipPeriod ( );
	int GetLevelInfoListNextCashPointbyCash ( int Cash );
	int GetLevelInfoListGradePointbyCash ( int Cash );
	void ASToSendSetMyPoint ( );
	void ASToSendSetVipGaugeMax ( int Max );
	void ASToSendSetTopContents ( struct FString Title, struct FString context );
	void CheckRollingImageTimer ( );
	void ClearRollingTimeImage ( );
	void ResetRollingTimeImage ( );
	void SetLocalizedVipLevelInfo ( );
	void OnMonthlyRewardStarted ( );
	void OnMonthlyRewardCheck ( );
	void SetupGradeComboBox ( );
	void ASToSendSetRightContents ( int Index );
	void OnClickVipItemBuyBtn ( struct FEventData ev );
	void OnClickRenewalBtn ( struct FEventData ev );
	void SetOnOverLevelBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnOverLevelBtnDelegate ( struct FString Index );
	void SetOnClickLevelBtnDelegate ( struct FScriptDelegate InDelegate );
	void OnClickLevelBtnDelegate ( struct FString Index );
	void OnGradeChanged ( struct FEventData ev );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	int GetLevelInfoListVipGradebyVipPoint ( int VipPoint );
	int GetLevelInfoListIndexbyVipPoint ( int VipPoint );
	class UGFxObject* GetLevelInfoObj ( int Index );
	struct FString GetLevelInfoLabelbyVipGrade ( int Grade );
	void SetTopCardInfo ( );
	void SetDetailLevelInfo ( );
	void SetRightVipInfo ( );
	void OnOverLevelBtn ( struct FString Index );
	void OnClickLevelBtn ( struct FString Index );
	void SetMyInfoMonthlyRewardData ( );
	void OnUpdateProfileEmblem ( );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_MyInfoMonthlyReward::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Rank
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_Rank : public USFGFxLobbyPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91600 ];

		return pClassPointer;
	};

	void OnChangeMainTab ( );
};

UClass* USFGFxLobbyPart_Rank::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanWeeklyRank
// 0x013C (0x0344 - 0x0208)
class USFGFxLobbyPart_ClanWeeklyRank : public USFGFxLobbyPart_Rank
{
public:
	int                                                BlindTime;                                        		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ENoticeBgColor_Blind;                             		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ENoticeBgColor_Ready;                             		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     WeeklyClanRankTitle;                              		// 0x0214 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNoticeText_Normal;                  		// 0x0220 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNoticeText_Blind;                   		// 0x022C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNoticeText_Ready;                   		// 0x0238 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_Day;                     		// 0x0244 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_DayText;                 		// 0x0250 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_Hour;                    		// 0x025C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_HourText;                		// 0x0268 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_Minute;                  		// 0x0274 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankRemainTime_MinuteText;              		// 0x0280 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_Blind;                    		// 0x028C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_BlindTime;                		// 0x0298 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_Ready;                    		// 0x02A4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlindText_ReadyTime;                		// 0x02B0 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankUnit;                               		// 0x02BC (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankNone;                               		// 0x02C8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeeklyClanRankBlind;                              		// 0x02D4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              LastWeekRankBtn;                                  		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                EClanRankState_Normal;                            		// 0x02E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EClanRankState_Blind;                             		// 0x02E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EClanRankState_Ready;                             		// 0x02EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ResultDay;                                        		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                ResultHour;                                       		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                ResultMinute;                                     		// 0x02F8 (0x0004) [0x0000000000000000]              
	struct FString                                     BlindDayString;                                   		// 0x02FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlindHourString;                                  		// 0x0308 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BlindMinuteString;                                		// 0x0314 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StartBlindAniStat;                                		// 0x0320 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ClosedStat;                                       		// 0x032C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EndBlindAniStat;                                  		// 0x0338 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91599 ];

		return pClassPointer;
	};

	void ASSetNoticeTextNBg ( int BGColor, struct FString Title, struct FString Time );
	void ChangeRankStat ( );
	void SetNoticeTextNBg ( );
	void ASSetBlindStat ( struct FString Stat );
	void SetBlindStat ( );
	void ClearRemainTimer ( );
	void SetPreviousData ( );
	void OnClickLastWeekRankBtn ( struct FEventData ev );
	void ASSetClanRankPosValue ( int NowClanRank, struct FString ClanImage, struct FString ClanPoint, unsigned long bHasClan, struct FString RankText );
	void ASSetClanRankPos ( );
	struct FString SetRankText ( int NowClanRank );
	void SetClanRankPos ( int NowClanRank, int ClanPointValue );
	void SetClanRankData ( TArray< struct FSWeeklyClanRankInfo > RecvClanInfo );
	void ASSetClanRankMaxValue ( int MaxCount );
	void SetClanRankMaxValue ( int MaxCount );
	void ASSetTxtRankResultTime ( struct FString RemainTimeString );
	void SetTxtRankResultTime ( struct FString DayString, struct FString HourString, struct FString MinuteString );
	void SetRemainTimeReset ( );
	void CaculateRankTimeFormat ( int RecvTime, struct FString* DayString, struct FString* HourString, struct FString* MinuteString );
	void SetBlindTime ( );
	void SetRankResultTime ( int RecvTime );
	void ASSetTapWeekTopTitle ( struct FString Title );
	void SetTapWeekTopTitle ( struct FString StartDate, struct FString EndDate );
	void PKT_GetWeeklyRealtimeRank_REQ_OK ( class UPacket* Packet );
	void PKT_GetWeeklyRealtimeRank_REQ_TRANSACTION ( class UPacket* Packet );
	void OnViewClosed ( int NextIndex );
	void OnChangeMainTab ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_ClanWeeklyRank::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_PCRoomRank
// 0x009C (0x02A4 - 0x0208)
class USFGFxLobbyPart_PCRoomRank : public USFGFxLobbyPart_Rank
{
public:
	struct FString                                     PCRoomName;                                       		// 0x0208 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PCRoomID;                                         		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SavedCurrentTime;                                 		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                PCRoomUserRankCount;                              		// 0x0224 (0x0004) [0x0000000000000000]              
	TArray< struct FSPCRoomRankData >                  PCRoomRankUserData;                               		// 0x0228 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PCRoomRankTitle;                                  		// 0x0234 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PCRoomRankMyInfoContents;                         		// 0x0240 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PCRoomMyRankDataNone;                             		// 0x024C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PCRoomMyPrevRankDataNone;                         		// 0x0258 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PCRoomMyRankEqualPrevRank;                        		// 0x0264 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FSPCRoomRankData                            TestMyRankInfo;                                   		// 0x0270 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91601 ];

		return pClassPointer;
	};

	void SetUserRankInfo ( );
	void ASSetMyRankInfo ( struct FString Grade, struct FString CodeName, struct FString Content );
	void SetMyRankInfo ( struct FSPCRoomRankData MyPCRoomRankData );
	void PKT_PCRoomUserRank_REQ_OK ( class UPacket* Packet );
	void PKT_PCRoomUserRank_REQ_TRANSACTION ( class UPacket* Packet );
	void SetPreviousData ( );
	bool RequestPCRoomUserRank ( );
	void ASSetUserNameNContent ( struct FString Grade, struct FString CodeName, struct FString Content );
	void ASSetTapPcRoomTopTitle ( struct FString Title, struct FString UserID );
	void SetPCRoomRankTitle ( );
	void SetTestMyRankData ( );
	void OnChangeMainTab ( );
	void DelegateSetup ( );
};

UClass* USFGFxLobbyPart_PCRoomRank::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Shop
// 0x0044 (0x024C - 0x0208)
class USFGFxLobbyPart_Shop : public USFGFxLobbyPart
{
public:
	int                                                DisplayItemCount;                                 		// 0x0208 (0x0004) [0x0000000000000000]              
	int                                                PageIndex;                                        		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                DisplayRowSize;                                   		// 0x0210 (0x0004) [0x0000000000000000]              
	int                                                DisplayColumnSize;                                		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                PositionalNum;                                    		// 0x0218 (0x0004) [0x0000000000000000]              
	int                                                TotalPageIndex;                                   		// 0x021C (0x0004) [0x0000000000000000]              
	TArray< struct FSDisplayItem >                     DisplayItems;                                     		// 0x0220 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastSelectedItem;                                 		// 0x022C (0x0004) [0x0000000000000000]              
	TArray< struct FSFItemData >                       SelectedItemArray;                                		// 0x0230 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSFUITabList >                      SubTabList;                                       		// 0x023C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bDisableReturnVipTP : 1;                          		// 0x0248 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bViewVisibleCash : 1;                             		// 0x0248 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91720 ];

		return pClassPointer;
	};

	void UpdateFeverItemList ( );
	int GetShopTabType ( int ItemId );
	void shopWeaponProgression_OnCloseBtnClick ( );
	void shopWeaponProgression_OnSpBtnClick ( );
	void shopWeaponProgression_OnCashBtnClick ( );
	void shopWeaponProgression_OnListClick ( int nIndex );
	void ShowWeaponProgressionItem ( int ItemId, struct FName SupplyCode );
	void OnRollOutItemIndex ( int Row, int column );
	void OnRollOverItemIndex ( int Row, int column );
	void CheckOverlapItemsByEquip ( int Id, TArray< int >* NeedUpdateItems );
	void SetSeperatePreviewItem ( int ItemId, TArray< int >* OutCharArray, TArray< int >* OutWeapArray );
	void SetupPreviewWithSelectedItem ( struct FQWord WeapItemISN, TArray< int > ProvideItemArray, TArray< int > PackageItemArray );
	void ProcessBuyEquipmentAfter ( unsigned long AutoEquip, int ItemId, struct FQWord ItemSN );
	void ProcessBuyWeaponAfter ( unsigned long AutoEquip, struct FQWord ItemSN );
	void ProcessBuyAfterWeapon ( unsigned long bPressedOK, int ItemId, struct FQWord ItemSN );
	void AddArrayItemNotExist ( int AddItem, TArray< int >* TargetArray );
	struct FString GetLuckyPointAnimString ( TArray< int > ItemIDArray );
	void PlayAdditionalStatusAnim ( TArray< int > AddedItems, TArray< int > RemovedItems );
	int GetCurrentSubTabCode ( );
	int SetMakeNewDisplayItem ( int ItemId, struct FQWord ItemSN, struct FSDisplayItem* OutItem );
	void UpdateDisplayItemList ( int ItemId, struct FString ItemCode );
	bool IsItemDefaultUseTime ( int ItemId );
	void UpdateDisplayItemByDefaultPrice ( int FindIndex, int newItemID, int NewItemPrice );
	class UGFxObject* datastore_FillData_ListAt ( int Index );
	bool IsNewItemTag ( int Index, int* ItemTagOld, int* ItemTagNew, struct FString* NewRowTitle );
	void datastore_FillData_List ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	void ASSetCurrentSubTab ( int Index );
	int GetWeaponCamoID ( int WeaponID, struct FQWord WeapISN );
	void SetSortItemList ( TArray< struct FSDisplayItem >* OutItemArray );
	class UGFxObject* ASSetASelectedItemInfo_FuncItem ( int ItemId );
	class UGFxObject* ASSetASelectedItemInfo_Weapon ( int ItemId, unsigned long IsWeapon );
	class UGFxObject* ASSetASelectedItemInfo_Mode ( int ItemId );
	class UGFxObject* ASSetASelectedItemInfo_Equip ( int ItemId );
	class UGFxObject* ASSetASelectedItemInfo ( int ItemId );
	void AddItemIDList ( TArray< int > AddItems, TArray< int >* ViewItems );
	void AddItemIDListByElement ( TArray< struct FItemElement > AddItems, TArray< int >* ViewItems );
	void InitializeSearchText ( );
	void ScrollIndexIntialize ( );
	void ApplySearchResult ( TArray< struct FSDisplayItem >* SearchedItemList );
	void GetSearchedItemList ( TArray< struct FSDisplayItem >* DisplayItemList );
	void ShopPartChangeNotify ( );
	void MakeItemList ( unsigned long bShowAlreadyHaveOnly, int Group );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
	void GetItemAdditionalEffectforShop ( int Id, TArray< struct FsUIItemStat >* Attribs );
	struct FString GetItemColorTag ( struct FString ItemCode, int ItemTag );
	bool IsEnableGiftSendButton ( int ItemId );
	bool IsValidPrice ( int Price );
	class UGFxObject* ASSetAShopItemInfo ( int Idx, int forceSetting );
	int GetSelectedItemIDbyItemType ( int PartsIdx );
	bool GetSelectedItemArray ( TArray< struct FSFItemData >* OutSelectedItemArray );
	int GetDisplayItemTag ( int ItemTag );
	void GetOverlapItemIndex ( int Row, int column );
	void UpdateUnitChanged ( int UnitID );
	void UpdateSelectedWeaponSet ( );
	void OnItemRollOut ( int Row, int column, struct FString Tmp );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void OnItemSearchBtnClick ( struct FString InputText );
	void OnItemInfoClose ( );
	void ResetItemList ( );
	void ProcessBuyUnitAfter ( unsigned long AutoEquip, int ItemId );
	void SetupUnitItemArray ( );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void OnClickedUnit ( int Index, unsigned long bForce );
	void OnClickOpenedEquipInfoUnit ( );
	void OnBuyUnit ( );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
	void ProcessDblClickedItemList ( int Idx );
	void OnClickedShopItemPreview ( );
	void OnClickedShopItemGift ( );
	void OnClickedShopItemBuy ( );
	void OnDblClickShopItemList ( int Row, int column );
	void OnClickShopItemList ( int Row, int column );
	int GetDisplayItemIndex ( int Row, int column );
	void OnVIPCouponUseStarted ( );
	void ClearSelectedItem ( );
	void InitPageIndex ( int nMySubTab );
	void OnChangeMainTab ( );
	void ASCreateSubTab ( int MainTabCode, class UGFxObject* SubTabs );
	void ASSetPagingVisible ( unsigned long bShow );
	void ASSetSelectedButton ( int Index );
	void ASSetPage ( int TotalPageCount, int Index );
	void OnClickedPageRightBtn ( );
	void OnClickedPageLeftBtn ( unsigned long IsClickedPageLeftBtn );
	void GetPageIndexByAS ( int Index );
	void InitializeSubTab ( int MainTabCode, class UGFxObject* Widget );
};

UClass* USFGFxLobbyPart_Shop::pClassPointer = NULL;

// Class SFGame.SFItem_Func_TpExchange
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_TpExchange : public USFItem_Functional_UI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 91854 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_TpExchange::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ShopWeapon
// 0x0018 (0x0264 - 0x024C)
class USFGFxLobbyPart_ShopWeapon : public USFGFxLobbyPart_Shop
{
public:
	struct FQWord                                      LastSelectedItemSN;                               		// 0x024C (0x0008) [0x0000000000000000]              
	int                                                SelectedWeaponProgItemID;                         		// 0x0254 (0x0004) [0x0000000000000000]              
	TArray< struct FSWeaponProgressionTask >           SelectedWeaponProgressionArray;                   		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92097 ];

		return pClassPointer;
	};

	bool NeedDataStoreBinding ( struct FString BindingName );
	bool IsNewItemTag ( int Index, int* ItemTagOld, int* ItemTagNew, struct FString* NewRowTitle );
	void shopWeaponProgression_OnCloseBtnClick ( );
	void shopWeaponProgression_OnSpBtnClick ( );
	void shopWeaponProgression_OnCashBtnClick ( );
	bool IsWeaponProgressionBaseIndex ( int Index );
	bool IsSPBuyableWeaponProgressionItem ( int nIndex, int* OutLimitRank, int* OutCurProgress, int* OutMaxProgress, struct FString* OutChallengeImage, struct FString* OutChallengeName, struct FString* OutChallengeMessage );
	void shopWeaponProgression_OnListClick ( int nIndex );
	void ShowWeaponProgressionItem ( int ItemId, struct FName SupplyCode );
	bool GetSelectedItemArray ( TArray< struct FSFItemData >* OutSelectedItemArray );
	void SetWeaponPreviewByInvenWeapon ( );
	void UpdateSelectedWeaponSet ( );
	void OnItemRollOut ( int Row, int column, struct FString Tmp );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void ResetItemList ( );
	class UGFxObject* SetAWeaponCompairInfo ( int ItemId );
	void SetWeaponCompairInfo ( int ItemId );
	void ShowSelectedItemInfo ( class UGFxObject* TempObj, int ItemId );
	void SetSelectedItemInfo ( int ItemId );
	void ClearSelectedItem ( );
	void GetSearchedItemList ( TArray< struct FSDisplayItem >* DisplayItemList );
	int GetDisplayItemType ( int ItemId );
	void UpdateDisplayItemList ( int ItemId, struct FString ItemCode );
	void ShopPartChangeNotify ( );
	void MakeItemList ( unsigned long bHave, int Group );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
	void SetWeaponPreviewByClicked ( int ItemId, struct FQWord ItemSN );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
};

UClass* USFGFxLobbyPart_ShopWeapon::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ShopEquip
// 0x0020 (0x026C - 0x024C)
class USFGFxLobbyPart_ShopEquip : public USFGFxLobbyPart_Shop
{
public:
	TArray< int >                                      DisplayUnitItemArray;                             		// 0x024C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      UnitListInited : 1;                               		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FSUnitShopItem >                    UnitItemArray;                                    		// 0x025C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                Test;                                             		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92098 ];

		return pClassPointer;
	};

	void ASSetVisibleUnitList ( unsigned long bShow );
	void OnRollOutItemIndex ( int Row, int column );
	void OnRollOverItemIndex ( int Row, int column );
	bool datastore_requestItemRange ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject* Scope, struct FString Callback );
	void datastore_FillData_Units ( int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	void datastore_FillDataArray ( struct FString BindingName, int StartIndex, int EndIndex, class UGFxObject** TotalRow );
	int datastore_DataProviderLength ( struct FString BindingName );
	bool NeedDataStoreBinding ( struct FString BindingName );
	bool GetSelectedItemArray ( TArray< struct FSFItemData >* OutSelectedItemArray );
	void UpdateUnitChanged ( int UnitID );
	void ResetUnitItemArray ( );
	void OnChangeMainTab ( );
	void OnClickOpenedEquipInfoUnit ( );
	void OnBuyUnit ( );
	void ResetItemList ( );
	void InsertToSingleUnitItem ( int UnitIndex, unsigned char ItemType, struct FSFItemData ShopItem );
	void InsertToAllUnitItem ( unsigned char ItemType, struct FSFItemData ShopItem );
	bool IsInSingleUnitList ( int Index, int ItemId );
	bool IsInAllUnitList ( struct FString ItemCode );
	int GetUnitArrayIndexByID ( int UnitItemID );
	void InitListDataProvider ( );
	void SetSelectedItemInfo ( int ItemId );
	class UGFxObject* SetAUnitItem ( int Id );
	void SetupUnitItemArray ( );
	bool IsValideItem ( int Group, int ItemId );
	int GetDisplayItemType ( int ItemId );
	void UpdateDisplayItemListGroup ( int Group, int ItemId, struct FString ItemCode );
	void ShopPartChangeNotify ( );
	void MakeItemList ( unsigned long bHave, int Group );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
	void OnClickedUnit ( int Index, unsigned long bForce );
	void RecheckSelectedItemInfo ( struct FQWord ItemSN );
	int GetPartIteminSelectedList ( unsigned char Part );
	void GetOverlapItemIndex ( int Row, int column );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
};

UClass* USFGFxLobbyPart_ShopEquip::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ShopFuncItem
// 0x0000 (0x024C - 0x024C)
class USFGFxLobbyPart_ShopFuncItem : public USFGFxLobbyPart_Shop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92099 ];

		return pClassPointer;
	};

	bool NeedDataStoreBinding ( struct FString BindingName );
	void ClearSelectedItem ( );
	void SetSelectedItemInfo ( int ItemId );
	int GetWeaponCamoID ( int WeaponID, struct FQWord WeapISN );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
	void ShopPartChangeNotify ( );
	void UpdateDisplayItemList ( int ItemId, struct FString ItemCode );
	void SetDisplayItems ( int ItemId, int current_filter_type );
	void MakeItemList ( unsigned long bShowAlreadyHaveOnly, int Group );
	void ResetItemList ( );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
};

UClass* USFGFxLobbyPart_ShopFuncItem::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ShopModeItem
// 0x0018 (0x0264 - 0x024C)
class USFGFxLobbyPart_ShopModeItem : public USFGFxLobbyPart_Shop
{
public:
	struct FString                                     DataProvider_BindingName;                         		// 0x024C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __SubTabSort__Delegate;                           		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92100 ];

		return pClassPointer;
	};

	int SubTabSort ( struct FSFUITabList A, struct FSFUITabList B );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
	void SetSelectedItemInfo ( int ItemId );
	void OnChangeSubTab ( unsigned long bForceSelect );
	void InitializeSubTab ( int MainTabCode, class UGFxObject* Widget );
	void ShopPartChangeNotify ( );
	void MakeItemList ( unsigned long bHave, int Group );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
};

UClass* USFGFxLobbyPart_ShopModeItem::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ShopEventItem
// 0x0020 (0x026C - 0x024C)
class USFGFxLobbyPart_ShopEventItem : public USFGFxLobbyPart_Shop
{
public:
	struct FQWord                                      LastSelectedItemSN;                               		// 0x024C (0x0008) [0x0000000000000000]              
	int                                                PrevLastSelectedItem;                             		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                HotNewInfoIndex;                                  		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                UpdateTime;                                       		// 0x025C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DataProvide_BindingName;                          		// 0x0260 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92101 ];

		return pClassPointer;
	};

	bool NeedDataStoreBinding ( struct FString BindingName );
	bool GetSelectedItemArray ( TArray< struct FSFItemData >* OutSelectedItemArray );
	void UpdateUnitChanged ( int UnitID );
	void UpdateSelectedWeaponSet ( );
	void OnItemRollOut ( int Row, int column, struct FString Tmp );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void ResetItemList ( );
	int GetDisplayItemType ( int ItemId );
	bool IsValideItem ( int Group, int ItemId );
	void SetSelectedItemInfo ( int ItemId );
	bool datastore_OnDataChanged ( struct FString BindingName );
	bool GetHotNewItemInfoObject ( int ItemId, class UGFxObject** GfxObj );
	void SetHotNewItemInfo ( );
	void ShopPartChangeNotify ( );
	void MakeItemList ( unsigned long bHave, int Group );
	void TimerClear ( );
	void TimerReset ( );
	void OnItemListClick ( struct FEventData ev );
	bool CheckEquipItem ( int LastSelectedItemID );
	void ClearSelectedItem ( );
	void InitShopItem ( );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
};

UClass* USFGFxLobbyPart_ShopEventItem::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ShopFeverItem
// 0x0020 (0x026C - 0x024C)
class USFGFxLobbyPart_ShopFeverItem : public USFGFxLobbyPart_Shop
{
public:
	struct FQWord                                      LastSelectedItemSN;                               		// 0x024C (0x0008) [0x0000000000000000]              
	int                                                PrevLastSelectedItem;                             		// 0x0254 (0x0004) [0x0000000000000000]              
	struct FString                                     DataProvide_BindingName;                          		// 0x0258 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                FeverItemInfoIndex;                               		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                UpdateTime;                                       		// 0x0268 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92102 ];

		return pClassPointer;
	};

	void TimerClear ( );
	void TimerReset ( );
	void OnItemRollOut ( int Row, int column, struct FString Tmp );
	void OnItemRollOver ( int Row, int column, struct FString Tmp );
	void ResetItemList ( );
	void ClearSelectedItem ( );
	void UpdateSelectedWeaponSet ( );
	void UpdateUnitChanged ( int UnitID );
	bool GetSelectedItemArray ( TArray< struct FSFItemData >* OutSelectedItemArray );
	bool datastore_OnDataChanged ( struct FString BindingName );
	void ShopPartChangeNotify ( );
	bool NeedDataStoreBinding ( struct FString BindingName );
	void UpdateFeverItemList ( );
	void ClearFeverItemInfo ( );
	bool IsValideItem ( int Group, int ItemId );
	void MakeItemList ( unsigned long bHave, int Group );
	bool GetFeverItemInfoObject ( int ItemId, class UGFxObject** GfxObj );
	void SetFeverItemInfo ( );
	void InitShopItemList ( int nMySubTab, unsigned long bResetSelectedArray );
	void InitShopItem ( );
	bool CheckEquipItem ( int LastSelectedItemID );
	void SetSelectedItemInfo ( int ItemId );
	void OnClickedItemListbyIDX ( int Idx, unsigned long bDblClicked );
};

UClass* USFGFxLobbyPart_ShopFeverItem::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_Rank
// 0x003C (0x00C8 - 0x008C)
class USFUIDataStore_Rank : public USFUIDataStoreBase
{
public:
	TArray< struct FModeRankInfo >                     ModeRankTeamList;                                 		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPVERankTeamInfo >                  CurrentRankTeamList;                              		// 0x0098 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRankUpdateDateInfo                         LastRankUpdatedDate;                              		// 0x00A4 (0x000C) [0x0000000000000000]              
	int                                                ReceivedRankSize;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                LastRequestedModeID;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                CurrentGameModeID;                                		// 0x00B8 (0x0004) [0x0000000000000000]              
	TArray< struct FModeRankProtocol >                 ModeRankProtocolList;                             		// 0x00BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 92749 ];

		return pClassPointer;
	};

	void SetDebugData ( );
	void PostReceivedPVERankTop100_TRANSACTION ( class UPacket* recvPacket );
	void PostReceivedPVERankTop100_OK ( class UPacket* recvPacket );
	void SetCurrentGameMode ( int game_mode_id );
	void OnEndUpdate ( );
	void UpdateRankData ( int game_mode_id );
	void UpdateAllRankData ( );
	void SetRecvPacketHandler ( );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
};

UClass* USFUIDataStore_Rank::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_Clan
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_Clan : public USFGFxLobbyPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93361 ];

		return pClassPointer;
	};

	void UpdateClanHomeButton ( unsigned long bMyClan, unsigned long bManager );
	void GetMemberLevelDefineList ( int Type, TArray< int >* outLevels );
	void OnClickUserTabWaitPeopleListSortBtn ( struct FString Index );
	void OnClickUserTabMemberListSortBtn ( struct FString Index );
	void OnClickUserTabWaitPeoplePaper ( struct FString Index );
	void OnClickClanHomeWaitPeoplePopupMenu ( struct FString SlotIndex, struct FString MenuText );
	void OnClickClanHomeMemberPopupMenu ( struct FString SlotIndex, struct FString MenuText );
	void OnRClickUserTabWaitPeopleSlot ( struct FString Index );
	void OnRClickUserTabMemberSlot ( struct FString Index, unsigned long IsMaster );
	void OnClickUserTabMemberList ( struct FString Index );
	void OnOverUserTabMemberList ( struct FString Index );
	void OnClickUserTabBtns ( int SelectIndex );
	void OnRClickManagerTabMemberList ( struct FString Index );
	void OnClickManagerTabDestroyClanCheck ( int Index, unsigned long IsCheck );
	void OnClickManagerTabWaitPeopleListSortBtn ( struct FString Index );
	void OnClickManagerTabMemberListSortBtn ( struct FString Index );
	void OnClickManagerTabBtns ( int Index );
	void OnClickManagerTabWaitPeopleJoinNo ( struct FString Index );
	void OnClickManagerTabWaitPeopleJoinOk ( struct FString Index );
	void OnClickManagerTabWaitPeopleRecommendPaperForm ( struct FString Imdex );
	void OnClickManagerTabWaitPeoplePaperForm ( struct FString Index );
	void OnChangeManagerTabMemberListLevelComboBox ( int Index );
	void OnClickManagerTabMemberListCheckBox ( struct FString Index );
	void OnClickUserViewBtn ( );
	void OnClickManagerViewBtn ( );
	void OnClickRecordListClan ( struct FString Index );
	void OnClickWebURL ( );
	void OnCloseSingupPopup ( );
	void OnClickClanHomeTabBtn ( int Index );
	void SetClanHomeBtns ( );
	void InitData ( );
};

UClass* USFGFxLobbyPart_Clan::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanManagerTab
// 0x0094 (0x029C - 0x0208)
class USFGFxLobbyPart_ClanManagerTab : public USFGFxLobbyPart_Clan
{
public:
	class UGFxObject*                                  ManagerTabList[ 0x3 ];                            		// 0x0208 (0x000C) [0x0000000000000000]              
	class UGFxObject*                                  MemberSlotPopup;                                  		// 0x0214 (0x0004) [0x0000000000000000]              
	class UGFxObject*                                  LevelSettingComboBox;                             		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              LevelSettingApplyBtn;                             		// 0x021C (0x0004) [0x0000000000000000]              
	int                                                LevelSettingType;                                 		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                SelectPopupMemberUSN;                             		// 0x0224 (0x0004) [0x0000000000000000]              
	int                                                RClickSlotIndex;                                  		// 0x0228 (0x0004) [0x0000000000000000]              
	TArray< struct FSWidgetBoxInfoData >               ComboBoxArray;                                    		// 0x022C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UGFxClikWidget*                              DestroyClanBtn;                                   		// 0x0238 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              btnModify;                                        		// 0x023C (0x0004) [0x0000000000000000]              
	unsigned char                                      CurrentSortType;                                  		// 0x0240 (0x0001) [0x0000000000000000]              
	unsigned char                                      SelectManagerTabType;                             		// 0x0241 (0x0001) [0x0000000000000000]              
	class UGFxClikWidget*                              DestroyClanCheckBoxs[ 0x4 ];                      		// 0x0244 (0x0010) [0x0000000000000000]              
	TArray< struct FString >                           ClanHomeManagerTabMsgs;                           		// 0x0254 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FSManagetTabMemberListPopupInfo >   ManagerTabMemberListPopupData;                    		// 0x0260 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GiveMasterUnderLevelError;                        		// 0x026C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MemberOutErrorMsg;                                		// 0x0278 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DestroyComboBoxMsg;                               		// 0x0284 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ErrorChangeClanMemberLevelMsg;                    		// 0x0290 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 93910 ];

		return pClassPointer;
	};

	void OnDestroyClanCheckBoxClicked ( struct FEventData ev );
	void InitClanDestroyInfoArray ( );
	bool GetDestroyClanBtnState ( );
	void OnClickManagerTabDestroyClanCheck ( int Index, unsigned long IsCheck );
	void OnRClickManagerTabMemberList ( struct FString Index );
	void OnClickManagerTabWaitPeopleListSortBtn ( struct FString Index );
	void OnClickManagerTabMemberListSortBtn ( struct FString Index );
	void OnClickManagerTabBtns ( int Index );
	void OnClickManagerTabWaitPeopleRecommendPaperForm ( struct FString Index );
	void OnClickManagerTabWaitPeoplePaperForm ( struct FString Index );
	void OnChangeManagerTabMemberListLevelComboBox ( int Index );
	void OnClickManagerTabMemberListCheckBox ( struct FString Index );
	void OnClickUserViewBtn ( );
	void OnClickManagerViewBtn ( );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinNo ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoin ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void UpdateMemberList ( unsigned long bIsSort );
	void UpdateClanHomeManagerTabLists ( unsigned long bResutSortRule );
	void SetLevelSettingPopup ( );
	struct FString GetClanHomeManagerTabFormatMsg ( int Type, int USN );
	class UGFxObject* GetLevelComboBoxInfo ( int I );
	void SetLevelSettingComboBox ( );
	void SetClanHomeManagerTabList ( unsigned char Type );
	class UGFxObject* GetManagerTabWaitPeopleInfo ( int Index, struct FSClanMemberInfo MemberInfo );
	class UGFxObject* GetManagerTabMemberInfo ( int Index, struct FSClanMemberInfo MemberInfo );
	void OnModifyBtnClicked ( struct FEventData ev );
	void UpdateClanHomeButton ( unsigned long bMyClan, unsigned long bManager );
	void InitData ( );
	bool WidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_ClanManagerTab::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_ClanUserTab
// 0x0024 (0x022C - 0x0208)
class USFGFxLobbyPart_ClanUserTab : public USFGFxLobbyPart_Clan
{
public:
	unsigned char                                      SelectUserTabType;                                		// 0x0208 (0x0001) [0x0000000000000000]              
	unsigned char                                      CurrentSortType;                                  		// 0x0209 (0x0001) [0x0000000000000000]              
	class UGFxObject*                                  UserTabList[ 0x2 ];                               		// 0x020C (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsPopupClickMasterSlot : 1;                      		// 0x0214 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< struct FSPopupInfo >                       ClanHomeUserTabPopupMenuInfo;                     		// 0x0218 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                WantViewIDCardIdx;                                		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              ViewIDCardTimer;                                  		// 0x0228 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 95661 ];

		return pClassPointer;
	};

	void ClearViewIDCardTimer ( );
	void ViewIDCard ( );
	void StartViewIDCardTimer ( int Idx );
	void ClickUserTabSlot ( int Index, unsigned long bIsMaster );
	void OnClickUserTabWaitPeopleListSortBtn ( struct FString Index );
	void OnClickUserTabMemberListSortBtn ( struct FString Index );
	void OnClickUserTabWaitPeoplePaper ( struct FString Index );
	void OnClickClanHomeWaitPeoplePopupMenu ( struct FString SlotIndex, struct FString MenuText );
	void OnClickClanHomeMemberPopupMenu ( struct FString SlotIndex, struct FString MenuText );
	void OnRClickUserTabWaitPeopleSlot ( struct FString Index );
	void OnRClickUserTabMemberSlot ( struct FString Index, unsigned long bIsMaster );
	void OnClickUserTabMemberList ( struct FString Index );
	void OnOverUserTabMemberList ( struct FString Index );
	void OnClickUserTabBtns ( int Index );
	void OnClickUserViewBtn ( );
	void OnClickClanHomeManagerBtn ( );
	void NotifyClanMsgChangeClanMark ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeClanName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgChangeCodeName ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgGiveMaster ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgLevelChange ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgMemberOut ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinNo ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoinOk ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgRemoveClan ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void NotifyClanMsgJoin ( TArray< struct FString > strUSNArray, TArray< struct FString > strCodeNameArray, TArray< struct FString > ClanNameArray );
	void UpdateMemberList ( unsigned long bIsSort );
	void SetUserTabPopupData ( int USN );
	class UGFxObject* SetAPopupMenu ( int Idx, struct FString Text, unsigned long IsDisabled );
	void SortMember ( int Type );
	void OnClickUserTabPopupMenu ( int SlotIndex, struct FString MenuText );
	int GetClanHomeMemberPopupMenuIndex ( struct FString MenuText );
	class UGFxObject* GetUserTabWaitPeopleInfo ( int Index, struct FSClanMemberInfo MemberInfo );
	class UGFxObject* GetUserTabMemberInfo ( int Index, struct FSClanMemberInfo MemberInfo );
	void SetClanHomeUserTabList ( unsigned char Type );
	void UpdateClanHomeUserTabLists ( unsigned long bResutSortRule );
	void InitData ( );
	bool WidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_ClanUserTab::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_InvenGift
// 0x0000 (0x0260 - 0x0260)
class USFGFxLobbyPart_InvenGift : public USFGFxLobbyPart_Inven
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96673 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobbyPart_InvenGift::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_PST
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_PST : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96907 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_PST::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Special
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_Special : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96912 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_Special::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Throw
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_Throw : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 96917 ];

		return pClassPointer;
	};

	bool CanPurchaseInGameStore ( class ASFPawn* ApplidedPawn );
};

UClass* USFItem_Weap_Throw::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MiniGame
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_MiniGame : public USFGFxLobbyPart
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97178 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobbyPart_MiniGame::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MiniGame_Game
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_MiniGame_Game : public USFGFxLobbyPart_MiniGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97180 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobbyPart_MiniGame_Game::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_MiniGame_Ranking
// 0x0000 (0x0208 - 0x0208)
class USFGFxLobbyPart_MiniGame_Ranking : public USFGFxLobbyPart_MiniGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 97182 ];

		return pClassPointer;
	};

};

UClass* USFGFxLobbyPart_MiniGame_Ranking::pClassPointer = NULL;

// Class SFGame.SFGFxLobbyPart_SysSetting_Facebook
// 0x0018 (0x0230 - 0x0218)
class USFGFxLobbyPart_SysSetting_Facebook : public USFGFxLobbyPart_SysSetting
{
public:
	class UGFxClikWidget*                              ChkAutoUpdate_Event;                              		// 0x0218 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChkAutoUpdate_Screenshot;                         		// 0x021C (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChkAutoUpdate_Movie;                              		// 0x0220 (0x0004) [0x0000000000000000]              
	class UGFxClikWidget*                              ChkMaintainCookie;                                		// 0x0224 (0x0004) [0x0000000000000000]              
	struct FSFacebookSettingInfo                       DefaultSetting;                                   		// 0x0228 (0x0004) [0x0000000000000000]              
	struct FSFacebookSettingInfo                       CurrentSetting;                                   		// 0x022C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99517 ];

		return pClassPointer;
	};

	void OnMaintainCookieChanged ( struct FEventData ev );
	void OnAutoUpdateMovieChanged ( struct FEventData ev );
	void OnAutoUpdateScreenshotChanged ( struct FEventData ev );
	void OnAutoUpdateEventChanged ( struct FEventData ev );
	void PKT_UpdateFacebookInfo_REQ_OK ( class UPacket* receivedPacket );
	void UpdateSettingUI ( );
	void ApplySetting ( );
	void ResetSetting ( );
	void InitSetting ( unsigned long forReset );
	void UpdateDefaultSetting ( );
	void CheckChangedOptions ( );
	bool eventWidgetInitialized ( struct FName WidgetName, struct FName WidgetPath, class UGFxObject* Widget );
	void DelegateSetup ( );
	void OnViewClosed ( int NextIndex );
	void OnViewActivated ( int PrevIndex );
};

UClass* USFGFxLobbyPart_SysSetting_Facebook::pClassPointer = NULL;

// Class SFGame.SFGFxMoviePlayer_Spray
// 0x001C (0x01FC - 0x01E0)
class USFGFxMoviePlayer_Spray : public USFGFxMoviePlayer
{
public:
	struct FString                                     UvLoaderFilePath;                                 		// 0x01E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bInit : 1;                                        		// 0x01EC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	struct FScriptDelegate                             __UVimgLoader_InitDelegate__Delegate;             		// 0x01F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99905 ];

		return pClassPointer;
	};

	bool SetMark ( int SlotIndex, struct FString ImgID );
	bool SetMarkByID ( int SlotIndex, int imgNo );
	void SetUVimgLoader_InitDelegate ( struct FScriptDelegate InDelegate );
	void UVimgLoader_InitDelegate ( );
	void ASUVLoaderFilePath ( struct FString Param1 );
	void Init ( class ULocalPlayer* LocPlay );
	void UVimgLoader_Init ( );
	void OnClose ( );
	void eventRestoreDevice ( );
};

UClass* USFGFxMoviePlayer_Spray::pClassPointer = NULL;

// Class SFGame.SFGlassBGMMutator
// 0x0009 (0x024D - 0x0244)
class ASFGlassBGMMutator : public AMutator
{
public:
	struct FName                                       GlassBGMName;                                     		// 0x0244 (0x0008) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      EnemyTeam;                                        		// 0x024C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99951 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	int GetCurrentTeamMemberCount ( unsigned char Team );
};

UClass* ASFGlassBGMMutator::pClassPointer = NULL;

// Class SFGame.SFGlassGame
// 0x0018 (0x085C - 0x0844)
class ASFGlassGame : public ASFTeamGameInfo
{
public:
	struct FString                                     PreNewMatchInProgressBGM_RED;                     		// 0x0844 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PreNewMatchInProgressBGM_BLUE;                    		// 0x0850 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99966 ];

		return pClassPointer;
	};

	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
};

UClass* ASFGlassGame::pClassPointer = NULL;

// Class SFGame.SFGlassGameScore
// 0x0008 (0x00C8 - 0x00C0)
class USFGlassGameScore : public USFGameScore
{
public:
	float                                              SCORE_BreakEnemyGlass;                            		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_EnemyKillForGlassMode;                      		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99973 ];

		return pClassPointer;
	};

	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFGlassGameScore::pClassPointer = NULL;

// Class SFGame.SFGlassHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFGlassHUD : public ASFHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99974 ];

		return pClassPointer;
	};

};

UClass* ASFGlassHUD::pClassPointer = NULL;

// Class SFGame.SFGlassPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFGlassPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99975 ];

		return pClassPointer;
	};

};

UClass* ASFGlassPlayerController::pClassPointer = NULL;

// Class SFGame.SFGlassGameReplicationInfo
// 0x0018 (0x04C0 - 0x04A8)
class ASFGlassGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	TArray< struct FString >                           NoDrawTeamBaseMap;                                		// 0x04A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           UnUseBGMSoundMapName;                             		// 0x04B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99976 ];

		return pClassPointer;
	};

	bool CanProcessHitInfoLog ( );
	bool CouldSendWeaponLog ( );
	void OnMatchOver ( float Duration, class UClass* SFGameClass );
	void PlayBGMBySoundCue ( class USoundCue* SoundCue, float FadeInTime, float FadeOutTime, float Duration );
	void PlayInstantBGM ( struct FName InInstantBGMName );
	void PlayBGM ( struct FString SoundCueName, float FadeInTime, float FadeOutTime, float Duration );
	bool IsHideTeamBase ( );
	bool IsBGMSoundNotPlaybleMap ( );
};

UClass* ASFGlassGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGlassGameKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFGlassGameKillDeathMessage : public USFKillDeathMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 99977 ];

		return pClassPointer;
	};

	void ProcessAssistLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI1, class ASFPlayerReplicationInfo* PRI2, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
	void ProcessDeadLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI2, int KillType, class UObject* OptionalObject );
	void ProcessKillLog ( class ASFPlayerReplicationInfo* SFPRI, class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, int WeaponItemID, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
};

UClass* USFGlassGameKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFGlowModeHUD
// 0x000C (0x0E4C - 0x0E40)
class ASFGlowModeHUD : public ASFTeamHUD
{
public:
	struct FString                                     GlowModeScoreTextColor;                           		// 0x0E40 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100043 ];

		return pClassPointer;
	};

	void SetGlowModeTextValue ( int Score );
	void SetGlowModeGaugeValue ( int GlowModeEffectType );
};

UClass* ASFGlowModeHUD::pClassPointer = NULL;

// Class SFGame.SFGlowTDMGame
// 0x0000 (0x0844 - 0x0844)
class ASFGlowTDMGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100051 ];

		return pClassPointer;
	};

	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	int CalculateScore ( class ASFPlayerReplicationInfo* Scorer, unsigned char ScoreType, int LadderDiff, class ASFPlayerReplicationInfo* VictimPRI );
};

UClass* ASFGlowTDMGame::pClassPointer = NULL;

// Class SFGame.SFGlowTDMGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFGlowTDMGameScore : public USFTeamDeathGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100069 ];

		return pClassPointer;
	};

};

UClass* USFGlowTDMGameScore::pClassPointer = NULL;

// Class SFGame.SFStealOffPlayerReplicationInfo
// 0x0008 (0x0758 - 0x0750)
class ASFStealOffPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:
	int                                                Money;                                            		// 0x0750 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                DefaultMoney;                                     		// 0x0754 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100080 ];

		return pClassPointer;
	};

	void IncrementKill ( int Amt );
	bool AddMoney ( int InMoney );
	bool NeedMoney ( int InMoney );
	int ClampMoney ( int InMoney );
	int GetMoney ( );
	bool HasMoney ( );
	void NotifyMoneyChanged ( int MoneyDelta );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFStealOffPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGoldDiggerPlayerReplicationInfo
// 0x0008 (0x0760 - 0x0758)
class ASFGoldDiggerPlayerReplicationInfo : public ASFStealOffPlayerReplicationInfo
{
public:
	int                                                MaxMoney;                                         		// 0x0758 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MoneyWeight;                                      		// 0x075C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100079 ];

		return pClassPointer;
	};

	struct FString eventGetDisplayedCodeName ( unsigned long bToFriends, class ASFPawn* Pawn );
	void NotifyScoreUp ( int MoneyDelta );
	void NotifyMoneyChanged ( int MoneyDelta );
	bool AddMoney ( int InMoney );
	bool NeedMoney ( int InMoney );
	int ClampMoney ( int InMoney );
};

UClass* ASFGoldDiggerPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFStealOffGame
// 0x002C (0x0870 - 0x0844)
class ASFStealOffGame : public ASFBaseTeamDeathGame
{
public:
	struct FString                                     DroppedPickupMoneyClassName;                      		// 0x0844 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFixedMoneyDrop : 1;                              		// 0x0850 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bReduceMoneyWhenDrop : 1;                         		// 0x0850 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bDropMoneyEvenIfTeamKill : 1;                     		// 0x0850 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	int                                                DropMoneyWhenDead;                                		// 0x0854 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                GiveMoneyWhenSpawn;                               		// 0x0858 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     MoneySpawnRandomVel;                              		// 0x085C (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                DropMoneyMaxBunch;                                		// 0x0868 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DropMoneyMinBunch;                                		// 0x086C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100115 ];

		return pClassPointer;
	};

	void NotifyMoneyChanged ( class ASFStealOffPlayerReplicationInfo* PRI, int MoneyDelta );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void DropMoney ( struct FVector SpawnLocation, int Money );
	void RestartPlayer ( class AController* NewPlayer );
};

UClass* ASFStealOffGame::pClassPointer = NULL;

// Class SFGame.SFGoldSafeVolume
// 0x0001 (0x0261 - 0x0260)
class ASFGoldSafeVolume : public AVolume
{
public:
	unsigned char                                      CheckTeam;                                        		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100153 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void RegisterObjectIcon ( );
	void eventPostBeginPlay ( );
};

UClass* ASFGoldSafeVolume::pClassPointer = NULL;

// Class SFGame.SFGrenadeFlashLight
// 0x0000 (0x0248 - 0x0248)
class USFGrenadeFlashLight : public USFExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100168 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeFlashLight::pClassPointer = NULL;

// Class SFGame.SFGrenadeFlashLight_FBang
// 0x0000 (0x0248 - 0x0248)
class USFGrenadeFlashLight_FBang : public USFGrenadeFlashLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100170 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeFlashLight_FBang::pClassPointer = NULL;

// Class SFGame.SFGrenadeFlashLight_Frag
// 0x0000 (0x0248 - 0x0248)
class USFGrenadeFlashLight_Frag : public USFGrenadeFlashLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100172 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeFlashLight_Frag::pClassPointer = NULL;

// Class SFGame.SFGrenadeFlashLight_Smoke
// 0x0000 (0x0248 - 0x0248)
class USFGrenadeFlashLight_Smoke : public USFGrenadeFlashLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100174 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeFlashLight_Smoke::pClassPointer = NULL;

// Class SFGame.SFGrenadeFlashLight_VXGas
// 0x0000 (0x0248 - 0x0248)
class USFGrenadeFlashLight_VXGas : public USFGrenadeFlashLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100176 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeFlashLight_VXGas::pClassPointer = NULL;

// Class SFGame.SFGrenadeGame
// 0x0000 (0x0844 - 0x0844)
class ASFGrenadeGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100178 ];

		return pClassPointer;
	};

};

UClass* ASFGrenadeGame::pClassPointer = NULL;

// Class SFGame.SFGrenadeGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFGrenadeGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100180 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeGameScore::pClassPointer = NULL;

// Class SFGame.SFGrenadeHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFGrenadeHUD : public ASFHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100181 ];

		return pClassPointer;
	};

};

UClass* ASFGrenadeHUD::pClassPointer = NULL;

// Class SFGame.SFGrenadeGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFGrenadeGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100182 ];

		return pClassPointer;
	};

};

UClass* ASFGrenadeGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFGrenadeKillEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFGrenadeKillEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100186 ];

		return pClassPointer;
	};

};

UClass* USFGrenadeKillEventData::pClassPointer = NULL;

// Class SFGame.SFGrenadePlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFGrenadePlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100188 ];

		return pClassPointer;
	};

};

UClass* ASFGrenadePlayerController::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ModeStatUp
// 0x000C (0x0180 - 0x0174)
class USFItem_Func_ModeStatUp : public USFItem_Functional_Char
{
public:
	unsigned char                                      TargetStat;                                       		// 0x0174 (0x0001) [0x0000000000000000]              
	unsigned char                                      BuffEffect;                                       		// 0x0175 (0x0001) [0x0000000000000000]              
	int                                                IncreaseAmount;                                   		// 0x0178 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxAmount;                                        		// 0x017C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100239 ];

		return pClassPointer;
	};

	bool CanPurchaseInGameStore ( class ASFPawn* ApplidedPawn );
	void ApplyItemToActor ( class AActor* AppliedActor );
	void ApplyItemToHostActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ModeStatUp::pClassPointer = NULL;

// Class SFGame.SFHammerEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFHammerEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100341 ];

		return pClassPointer;
	};

};

UClass* USFHammerEventData::pClassPointer = NULL;

// Class SFGame.SFHardcoreBlastingGame
// 0x0000 (0x0848 - 0x0848)
class ASFHardcoreBlastingGame : public ASFBlastingGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100437 ];

		return pClassPointer;
	};

};

UClass* ASFHardcoreBlastingGame::pClassPointer = NULL;

// Class SFGame.SFHardcoreBlastingGameScore
// 0x0000 (0x00D4 - 0x00D4)
class USFHardcoreBlastingGameScore : public USFBlastingGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100439 ];

		return pClassPointer;
	};

};

UClass* USFHardcoreBlastingGameScore::pClassPointer = NULL;

// Class SFGame.SFHardCoreTeamHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFHardCoreTeamHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100441 ];

		return pClassPointer;
	};

	void UnregisterActionMessage ( unsigned char InActionIndex, class AActor* InActionActor );
	void RegisterActionMessage ( unsigned char InActionIndex, class AActor* InActionActor, struct FString InActionMsg );
};

UClass* ASFHardCoreTeamHUD::pClassPointer = NULL;

// Class SFGame.SFHardCoreBlastingHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFHardCoreBlastingHUD : public ASFHardCoreTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100440 ];

		return pClassPointer;
	};

};

UClass* ASFHardCoreBlastingHUD::pClassPointer = NULL;

// Class SFGame.SFHardcoreEscapeGame
// 0x0000 (0x0848 - 0x0848)
class ASFHardcoreEscapeGame : public ASFEscapeGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100452 ];

		return pClassPointer;
	};

};

UClass* ASFHardcoreEscapeGame::pClassPointer = NULL;

// Class SFGame.SFHardcoreEscapeGameScore
// 0x0000 (0x00CC - 0x00CC)
class USFHardcoreEscapeGameScore : public USFEscapeGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100454 ];

		return pClassPointer;
	};

};

UClass* USFHardcoreEscapeGameScore::pClassPointer = NULL;

// Class SFGame.SFHardCoreEscapeHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFHardCoreEscapeHUD : public ASFHardCoreTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100455 ];

		return pClassPointer;
	};

};

UClass* ASFHardCoreEscapeHUD::pClassPointer = NULL;

// Class SFGame.SFSeizureGame
// 0x0004 (0x0848 - 0x0844)
class ASFSeizureGame : public ASFTeamGameInfo
{
public:
	class ASFSeizureGameReplicationInfo*               SFSeizureGRI;                                     		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100464 ];

		return pClassPointer;
	};

	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void CheckGRI ( );
	void OnCaptureObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFSeizureGame::pClassPointer = NULL;

// Class SFGame.SFSeizureGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFSeizureGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100466 ];

		return pClassPointer;
	};

};

UClass* ASFSeizureGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFSeizureHUD
// 0x0004 (0x0E44 - 0x0E40)
class ASFSeizureHUD : public ASFTeamHUD
{
public:
	class ASFSeizureGameReplicationInfo*               SFSzGRI;                                          		// 0x0E40 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100476 ];

		return pClassPointer;
	};

	void CheckGRI ( );
};

UClass* ASFSeizureHUD::pClassPointer = NULL;

// Class SFGame.SFHardcoreSeizureGame
// 0x0000 (0x0848 - 0x0848)
class ASFHardcoreSeizureGame : public ASFSeizureGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100477 ];

		return pClassPointer;
	};

};

UClass* ASFHardcoreSeizureGame::pClassPointer = NULL;

// Class SFGame.SFHardcoreSeizureGameScore
// 0x0000 (0x00D0 - 0x00D0)
class USFHardcoreSeizureGameScore : public USFSeizureGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100479 ];

		return pClassPointer;
	};

};

UClass* USFHardcoreSeizureGameScore::pClassPointer = NULL;

// Class SFGame.SFHardCoreSeizureHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFHardCoreSeizureHUD : public ASFHardCoreTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100480 ];

		return pClassPointer;
	};

};

UClass* ASFHardCoreSeizureHUD::pClassPointer = NULL;

// Class SFGame.SFHardcoreTDMGame
// 0x0000 (0x0844 - 0x0844)
class ASFHardcoreTDMGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100483 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFHardcoreTDMGame::pClassPointer = NULL;

// Class SFGame.SFHardcoreTDMGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFHardcoreTDMGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100491 ];

		return pClassPointer;
	};

};

UClass* USFHardcoreTDMGameScore::pClassPointer = NULL;

// Class SFGame.SFHardCoreTDMHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFHardCoreTDMHUD : public ASFHardCoreTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100492 ];

		return pClassPointer;
	};

};

UClass* ASFHardCoreTDMHUD::pClassPointer = NULL;

// Class SFGame.SFHardcoreTDMPC
// 0x0000 (0x11A8 - 0x11A8)
class ASFHardcoreTDMPC : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100493 ];

		return pClassPointer;
	};

};

UClass* ASFHardcoreTDMPC::pClassPointer = NULL;

// Class SFGame.SFHardcoreTDMGRI
// 0x0000 (0x04A8 - 0x04A8)
class ASFHardcoreTDMGRI : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100494 ];

		return pClassPointer;
	};

};

UClass* ASFHardcoreTDMGRI::pClassPointer = NULL;

// Class SFGame.SFHardWaveCompleteByMap
// 0x0000 (0x0140 - 0x0140)
class USFHardWaveCompleteByMap : public USFWaveCompleteByMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100500 ];

		return pClassPointer;
	};

};

UClass* USFHardWaveCompleteByMap::pClassPointer = NULL;

// Class SFGame.SFHeadHitCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFHeadHitCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100502 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeadHitCountEventData::pClassPointer = NULL;

// Class SFGame.SFHeadPointHitCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFHeadPointHitCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100510 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeadPointHitCountEventData::pClassPointer = NULL;

// Class SFGame.SFHeadShotCountEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFHeadShotCountEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100808 ];

		return pClassPointer;
	};

};

UClass* USFHeadShotCountEventData::pClassPointer = NULL;

// Class SFGame.SFHealthUpTDMGame
// 0x0000 (0x0844 - 0x0844)
class ASFHealthUpTDMGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100810 ];

		return pClassPointer;
	};

};

UClass* ASFHealthUpTDMGame::pClassPointer = NULL;

// Class SFGame.SFHeroAICriticalKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFHeroAICriticalKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100812 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeroAICriticalKillEventData::pClassPointer = NULL;

// Class SFGame.SFHeroAIKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFHeroAIKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100819 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeroAIKillEventData::pClassPointer = NULL;

// Class SFGame.SFHeroDestroyAlienControllerEventData
// 0x0000 (0x0140 - 0x0140)
class USFHeroDestroyAlienControllerEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100866 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeroDestroyAlienControllerEventData::pClassPointer = NULL;

// Class SFGame.SFHeroDestroyTurretEventData
// 0x0000 (0x0140 - 0x0140)
class USFHeroDestroyTurretEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100873 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeroDestroyTurretEventData::pClassPointer = NULL;

// Class SFGame.SFHeroKillWeaponEventData
// 0x0000 (0x0140 - 0x0140)
class USFHeroKillWeaponEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100880 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHeroKillWeaponEventData::pClassPointer = NULL;

// Class SFGame.SFHideAndSeekHUD
// 0x0000 (0x0E4C - 0x0E4C)
class ASFHideAndSeekHUD : public ASFBeastHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100899 ];

		return pClassPointer;
	};

};

UClass* ASFHideAndSeekHUD::pClassPointer = NULL;

// Class SFGame.SFHitEnemyCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFHitEnemyCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100901 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFHitEnemyCountEventData::pClassPointer = NULL;

// Class SFGame.SFHoldSpot
// 0x0000 (0x0304 - 0x0304)
class ASFHoldSpot : public ASFDefensePoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100910 ];

		return pClassPointer;
	};

};

UClass* ASFHoldSpot::pClassPointer = NULL;

// Class SFGame.SFHorrorGame
// 0x000C (0x0850 - 0x0844)
class ASFHorrorGame : public ASFRoundTDMGame
{
public:
	struct FString                                     DefaultHorrorPlayerClassName;                     		// 0x0844 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100913 ];

		return pClassPointer;
	};

	class UClass* GetDefaultPlayerClass ( class AController* C );
};

UClass* ASFHorrorGame::pClassPointer = NULL;

// Class SFGame.SFHorrorHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFHorrorHUD : public ASFRoundTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100920 ];

		return pClassPointer;
	};

};

UClass* ASFHorrorHUD::pClassPointer = NULL;

// Class SFGame.SFHorrorPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFHorrorPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100921 ];

		return pClassPointer;
	};

};

UClass* ASFHorrorPlayerController::pClassPointer = NULL;

// Class SFGame.SFHorrorGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFHorrorGameReplicationInfo : public ASFRoundTDMReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100922 ];

		return pClassPointer;
	};

	bool CanUseEnemyCharacter ( );
};

UClass* ASFHorrorGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFHudControler_interface
// 0x0000 (0x003C - 0x003C)
class USFHudControler_interface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 100931 ];

		return pClassPointer;
	};

	void SetWeaponName ( struct FString Value );
	void SetWeaponBullitCount ( int Value );
	void SetGameTime ( struct FString Value );
	void SetMyEnameWinCount ( int Value );
	void SetMyTeamWinCount ( int Value );
	void SetHp ( int Value );
};

UClass* USFHudControler_interface::pClassPointer = NULL;

// Class SFGame.SFIncreaseModeMoneyEventData
// 0x0000 (0x0140 - 0x0140)
class USFIncreaseModeMoneyEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101012 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFIncreaseModeMoneyEventData::pClassPointer = NULL;

// Class SFGame.SFItem_Func_MagazineUpAndGiveWeapon
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Func_MagazineUpAndGiveWeapon : public USFItem_Func_MagazineUp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101218 ];

		return pClassPointer;
	};

	bool CanPurchaseInGameStore ( class ASFPawn* ApplidedPawn );
};

UClass* USFItem_Func_MagazineUpAndGiveWeapon::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Belt
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Belt : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101304 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Belt::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Cap
// 0x0008 (0x01A8 - 0x01A0)
class USFItem_Char_Cap : public USFItem_Char
{
public:
	unsigned long                                      IsDroppableHelmet : 1;                            		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      IsExplosionHelmet : 1;                            		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleSystem*                             ExplosionEffect;                                  		// 0x01A4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101306 ];

		return pClassPointer;
	};

	void GetSpecificIndexWithDataByID ( class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Char_Cap::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Eye
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Eye : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101328 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Eye::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Face
// 0x0080 (0x0220 - 0x01A0)
class USFItem_Char_Face : public USFItem_Char
{
public:
	unsigned char                                      SkinType;                                         		// 0x01A0 (0x0001) [0x0000000000000000]              
	int                                                FaceIndex;                                        		// 0x01A4 (0x0004) [0x0000000000000000]              
	struct FString                                     MorphSetName;                                     		// 0x01A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     RadioMsgClassName[ 0x4 ];                         		// 0x01B4 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     KillVoiceClassName;                               		// 0x01E4 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SoundEffectName;                                  		// 0x01F0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     HairPhysAssetName;                                		// 0x01FC (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     OverridePhysAssetName;                            		// 0x0208 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0214 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101330 ];

		return pClassPointer;
	};

	struct FString GetAdditionalResource ( );
	void PostApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
	void GetSpecificIndexWithDataByID ( class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Char_Face::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Face_Female
// 0x0000 (0x0220 - 0x0220)
class USFItem_Char_Face_Female : public USFItem_Char_Face
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101363 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Face_Female::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Face_Male
// 0x0000 (0x0220 - 0x0220)
class USFItem_Char_Face_Male : public USFItem_Char_Face
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101365 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Face_Male::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Glove
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Glove : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101367 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Glove::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Jacket
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Jacket : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101369 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Jacket::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Mask
// 0x0004 (0x01A4 - 0x01A0)
class USFItem_Char_Mask : public USFItem_Char
{
public:
	unsigned long                                      bUseMorph : 1;                                    		// 0x01A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101371 ];

		return pClassPointer;
	};

	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Char_Mask::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Pants
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Pants : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101377 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Pants::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Shoes
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Shoes : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101379 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Shoes::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Suit
// 0x0000 (0x01A0 - 0x01A0)
class USFItem_Char_Suit : public USFItem_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101381 ];

		return pClassPointer;
	};

};

UClass* USFItem_Char_Suit::pClassPointer = NULL;

// Class SFGame.SFItem_Char_Wrist
// 0x0010 (0x01B0 - 0x01A0)
class USFItem_Char_Wrist : public USFItem_Char
{
public:
	struct FName                                       CustomAnimName;                                   		// 0x01A0 (0x0008) [0x0000000000000000]              
	float                                              MinDelay;                                         		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              MaxDelay;                                         		// 0x01AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101384 ];

		return pClassPointer;
	};

	void ApplyItemToPawn ( class ASFPawn* AppliedPawn );
};

UClass* USFItem_Char_Wrist::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_DotSight
// 0x0000 (0x018C - 0x018C)
class USFItem_WeapOption_DotSight : public USFItem_WeapOption_Sight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101421 ];

		return pClassPointer;
	};

	int SetUsingScope ( class ASFWeap_Bullet* SFWB );
};

UClass* USFItem_WeapOption_DotSight::pClassPointer = NULL;

// Class SFGame.SFItem_Common_DotSight_Reflex
// 0x000C (0x0198 - 0x018C)
class USFItem_Common_DotSight_Reflex : public USFItem_WeapOption_DotSight
{
public:
	TArray< class UMaterialInstanceConstant* >         NewScopeMaterial;                                 		// 0x018C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101426 ];

		return pClassPointer;
	};

};

UClass* USFItem_Common_DotSight_Reflex::pClassPointer = NULL;

// Class SFGame.SFItem_Func_AddHealth
// 0x0008 (0x018C - 0x0184)
class USFItem_Func_AddHealth : public USFItem_Func_ProvideItem
{
public:
	int                                                AddHP;                                            		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxHP;                                            		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101462 ];

		return pClassPointer;
	};

	bool CanPurchaseInGameStore ( class ASFPawn* ApplidedPawn );
	void ApplyItemToHostActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_AddHealth::pClassPointer = NULL;

// Class SFGame.SFItem_Func_EditCarveWeaponTag
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_EditCarveWeaponTag : public USFItem_Functional_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101507 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_EditCarveWeaponTag::pClassPointer = NULL;

// Class SFGame.SFItem_Func_EmotionEffect
// 0x0008 (0x017C - 0x0174)
class USFItem_Func_EmotionEffect : public USFItem_Functional_Char
{
public:
	struct FName                                       EmotionAnimName;                                  		// 0x0174 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101509 ];

		return pClassPointer;
	};

	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_EmotionEffect::pClassPointer = NULL;

// Class SFGame.SFItem_Func_Enchant_Extract
// 0x0000 (0x017C - 0x017C)
class USFItem_Func_Enchant_Extract : public USFItem_Func_Enchant
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101518 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_Enchant_Extract::pClassPointer = NULL;

// Class SFGame.SFItem_Func_GlowEffect
// 0x0000 (0x0174 - 0x0174)
class USFItem_Func_GlowEffect : public USFItem_Functional_Char
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101562 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_GlowEffect::pClassPointer = NULL;

// Class SFGame.SFItem_Func_PKG_VIP_Capsule
// 0x0000 (0x0190 - 0x0190)
class USFItem_Func_PKG_VIP_Capsule : public USFItem_Func_Package
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101638 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_PKG_VIP_Capsule::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ProvideWeapon
// 0x0000 (0x0184 - 0x0184)
class USFItem_Func_ProvideWeapon : public USFItem_Func_ProvideItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101655 ];

		return pClassPointer;
	};

	void ApplyItemToHostActor ( class AActor* AppliedActor );
	bool IsPossibleToUse ( class ASFPawn* AppliedPawn );
};

UClass* USFItem_Func_ProvideWeapon::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ProvideMissionWeapon
// 0x000C (0x0190 - 0x0184)
class USFItem_Func_ProvideMissionWeapon : public USFItem_Func_ProvideWeapon
{
public:
	struct FString                                     DeleteWeapon;                                     		// 0x0184 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101668 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_ProvideMissionWeapon::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ProvideShooterDefence
// 0x0000 (0x0184 - 0x0184)
class USFItem_Func_ProvideShooterDefence : public USFItem_Func_ProvideItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101671 ];

		return pClassPointer;
	};

	void ApplyItemToHostActorEx ( class ASFShooterDefencePlayerReplicationInfo* ShooterPRI, int ValIdx );
	void ApplyItemToHostActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ProvideShooterDefence::pClassPointer = NULL;

// Class SFGame.SFItem_Func_RandomWeaponSetAmmo
// 0x000C (0x0180 - 0x0174)
class USFItem_Func_RandomWeaponSetAmmo : public USFItem_Functional_Weap
{
public:
	TArray< struct FSRandomWeaponAmmo >                RandomWeaponAmmoArray;                            		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101689 ];

		return pClassPointer;
	};

	void ApplyItemToHostActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_RandomWeaponSetAmmo::pClassPointer = NULL;

// Class SFGame.SFItem_Func_ReduceRespawnDelay
// 0x0004 (0x017C - 0x0178)
class USFItem_Func_ReduceRespawnDelay : public USFItem_Functional_ETC
{
public:
	float                                              ReducedRespawnDelay;                              		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101702 ];

		return pClassPointer;
	};

	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Func_ReduceRespawnDelay::pClassPointer = NULL;

// Class SFGame.SFItem_Func_SuitCamo
// 0x0000 (0x01D0 - 0x01D0)
class USFItem_Func_SuitCamo : public USFItem_Functional_Camo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101757 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_SuitCamo::pClassPointer = NULL;

// Class SFGame.SFItem_Func_UseFiringRangeScoreInitial
// 0x0000 (0x0178 - 0x0178)
class USFItem_Func_UseFiringRangeScoreInitial : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101761 ];

		return pClassPointer;
	};

};

UClass* USFItem_Func_UseFiringRangeScoreInitial::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_ActionCamo
// 0x000C (0x0060 - 0x0054)
class USFWeaponRIS_ActionCamo : public USFWeaponRISBase
{
public:
	struct FName                                       ActionStateName;                                  		// 0x0054 (0x0008) [0x0000000000000000]              
	float                                              CamoInfiniteTime;                                 		// 0x005C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101768 ];

		return pClassPointer;
	};

	void ScalarParameterMaterials ( class USkeletalMeshComponent* MeshComponent, struct FName ParameterName, float Value );
	void SetMaterials ( struct FName ParameterName, float Value );
	bool OwnerDetached ( );
	void PlayActionCamo ( float PlayTime );
	void ActionCamoOff ( );
};

UClass* USFWeaponRIS_ActionCamo::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_RandomWeapon
// 0x0018 (0x018C - 0x0174)
class USFItem_Functional_RandomWeapon : public USFItem_Functional_Weap
{
public:
	TArray< struct FSRandomWeapon >                    RandomWeaponArray;                                		// 0x0174 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSRandomWeapon >                    RandomWeaponProbabilityUpArray;                   		// 0x0180 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101787 ];

		return pClassPointer;
	};

	int GetRandomWeaponID ( );
	int GetRandomWeaponProbabilityUpID ( );
	void ApplyItemToHostActor ( class AActor* AppliedActor );
};

UClass* USFItem_Functional_RandomWeapon::pClassPointer = NULL;

// Class SFGame.SFItem_Functional_UserCondition
// 0x0000 (0x0178 - 0x0178)
class USFItem_Functional_UserCondition : public USFItem_Functional_ETC
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101824 ];

		return pClassPointer;
	};

	void ApplyItemToActor ( class AActor* AppliedActor );
};

UClass* USFItem_Functional_UserCondition::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_AI
// 0x000C (0x02AC - 0x02A0)
class USFItem_Weap_AI : public USFItem_Weap
{
public:
	TArray< struct FsClassbyAIType >                   ClassbyAIType;                                    		// 0x02A0 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101851 ];

		return pClassPointer;
	};

	struct FString GetSpecificClassName ( int OwnerID );
};

UClass* USFItem_Weap_AI::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_AI_Charge
// 0x0000 (0x02AC - 0x02AC)
class USFItem_Weap_AI_Charge : public USFItem_Weap_AI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101862 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_AI_Charge::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_AI_Explode
// 0x0000 (0x02AC - 0x02AC)
class USFItem_Weap_AI_Explode : public USFItem_Weap_AI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101864 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_AI_Explode::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_AI_Melee
// 0x0000 (0x02AC - 0x02AC)
class USFItem_Weap_AI_Melee : public USFItem_Weap_AI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101866 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_AI_Melee::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_AI_Range
// 0x0000 (0x02AC - 0x02AC)
class USFItem_Weap_AI_Range : public USFItem_Weap_AI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101868 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_AI_Range::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_AR
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_AR : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101870 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_AR::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Beacon
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_Beacon : public USFItem_Weap_Throw
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101878 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_Beacon::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Flashbang
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_Flashbang : public USFItem_Weap_Throw
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101880 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_Flashbang::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Sample
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_Sample : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101882 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_Sample::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_GLauncher
// 0x0000 (0x0161 - 0x0161)
class USFItem_Weap_GLauncher : public USFItem_WeapOption_Sample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101884 ];

		return pClassPointer;
	};

	void ApplyItemToWeap ( class ASFWeapon* AppliedWeap );
};

UClass* USFItem_Weap_GLauncher::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Grenade
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_Grenade : public USFItem_Weap_Throw
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101888 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_Grenade::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Knife
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_Knife : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101890 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_Knife::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Magazine
// 0x0000 (0x0161 - 0x0161)
class USFItem_Weap_Magazine : public USFItem_WeapOption_Sample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101892 ];

		return pClassPointer;
	};

	void ApplyItemToWeap ( class ASFWeapon* AppliedWeap );
};

UClass* USFItem_Weap_Magazine::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_MG
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_MG : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101896 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_MG::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_SG
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_SG : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101899 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_SG::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Sight
// 0x0007 (0x0168 - 0x0161)
class USFItem_Weap_Sight : public USFItem_WeapOption_Sample
{
public:
	class USkeletalMesh*                               SightCrosshairSM;                                 		// 0x0164 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101901 ];

		return pClassPointer;
	};

	void ApplyItemToWeap ( class ASFWeapon* AppliedWeap );
};

UClass* USFItem_Weap_Sight::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Silencer
// 0x0000 (0x0161 - 0x0161)
class USFItem_Weap_Silencer : public USFItem_WeapOption_Sample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101908 ];

		return pClassPointer;
	};

	void ApplyItemToWeap ( class ASFWeapon* AppliedWeap );
};

UClass* USFItem_Weap_Silencer::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_SMG
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_SMG : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101918 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_SMG::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_Smoke
// 0x0018 (0x02B8 - 0x02A0)
class USFItem_Weap_Smoke : public USFItem_Weap_Throw
{
public:
	float                                              SmokeColor[ 0x6 ];                                		// 0x02A0 (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101920 ];

		return pClassPointer;
	};

	void PostApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_Weap_Smoke::pClassPointer = NULL;

// Class SFGame.SFItem_Weap_SR
// 0x0000 (0x02A0 - 0x02A0)
class USFItem_Weap_SR : public USFItem_Weap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101929 ];

		return pClassPointer;
	};

};

UClass* USFItem_Weap_SR::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Barrel
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_Barrel : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101931 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_Barrel::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Body
// 0x000B (0x016C - 0x0161)
class USFItem_WeapOption_Body : public USFItem_WeapOption
{
public:
	class USkeletalMesh*                               WeaponTagSkeletalMesh[ 0x2 ];                     		// 0x0164 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101933 ];

		return pClassPointer;
	};

	void GetSpecificIndexWithDataByID ( class UObject** SpecificObject, class UObject** SpecificObjectEx, int* SpecificIndex, int* SpecificIndexEx );
};

UClass* USFItem_WeapOption_Body::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_GLauncher
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_GLauncher : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101941 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_GLauncher::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Grip
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_Grip : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101943 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_Grip::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_LaserPointer
// 0x000F (0x0170 - 0x0161)
class USFItem_WeapOption_LaserPointer : public USFItem_WeapOption
{
public:
	struct FString                                     SightRISClassName;                                		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101945 ];

		return pClassPointer;
	};

	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_WeapOption_LaserPointer::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Magazine
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_Magazine : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101953 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_Magazine::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_TacticalLight
// 0x000F (0x0170 - 0x0161)
class USFItem_WeapOption_TacticalLight : public USFItem_WeapOption
{
public:
	struct FString                                     SightRISClassName;                                		// 0x0164 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101955 ];

		return pClassPointer;
	};

	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_WeapOption_TacticalLight::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Melee_LightFlash
// 0x0000 (0x0170 - 0x0170)
class USFItem_WeapOption_Melee_LightFlash : public USFItem_WeapOption_TacticalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101963 ];

		return pClassPointer;
	};

	void PreApplyItemInternal ( class AActor* AppliedActor, unsigned long bUsePenalty );
};

UClass* USFItem_WeapOption_Melee_LightFlash::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Scope
// 0x0004 (0x0190 - 0x018C)
class USFItem_WeapOption_Scope : public USFItem_WeapOption_Sight
{
public:
	class USkeletalMesh*                               ScopeMesh;                                        		// 0x018C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101982 ];

		return pClassPointer;
	};

	int SetUsingScope ( class ASFWeap_Bullet* SFWB );
};

UClass* USFItem_WeapOption_Scope::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_SilencerBase
// 0x0088 (0x0118 - 0x0090)
class USFWeaponRIS_SilencerBase : public USFWeaponRIS_SkelComponentBase
{
public:
	class USoundCue*                                   SilenceFireSound;                                 		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FMuzzleFlash >                      MuzzleFlash1stViewDef;                            		// 0x0094 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FMuzzleFlash >                      MuzzleFlash3rdViewDef;                            		// 0x00A0 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystem*                             SilencerTracerTemplateFriend;                     		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SilencerTracerTemplateFoe;                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGunTrailInfo                               SilencerTrailInfos[ 0x3 ];                        		// 0x00B4 (0x0048) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FsMuzzleFlashEffect >               SilencerMuzzleFlash1stview;                       		// 0x00FC (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FsMuzzleFlashEffect >               SilencerMuzzleFlash3rdview;                       		// 0x0108 (0x000C) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      AttachedMuzzleFlash1stview : 1;                   		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      AttachedMuzzleFlash3rdview : 1;                   		// 0x0114 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101991 ];

		return pClassPointer;
	};

	bool SetupSubWeaponMuzzle ( unsigned long b3rdview );
	void AddSilencerMuzzleFlash ( struct FMuzzleFlash myMuzzleFlashDef, unsigned long b3rdview, TArray< struct FsMuzzleFlashEffect >* myMuzzleFlash );
	void CloseMuzzleFlash ( );
	void CauseSilencerMuzzleFlash ( );
	struct FVector GetMuzzleLocation ( );
	void Init ( class ASFWeapon* InWeaponOwner );
};

UClass* USFWeaponRIS_SilencerBase::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Stock
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_Stock : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101997 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_Stock::pClassPointer = NULL;

// Class SFGame.SFItem_WeapOption_Trigger
// 0x0000 (0x0161 - 0x0161)
class USFItem_WeapOption_Trigger : public USFItem_WeapOption
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 101999 ];

		return pClassPointer;
	};

};

UClass* USFItem_WeapOption_Trigger::pClassPointer = NULL;

// Class SFGame.SFPackageItem
// 0x000C (0x0048 - 0x003C)
class USFPackageItem : public UObject
{
public:
	TArray< struct FSPackageItem >                     PackageItemArray;                                 		// 0x003C (0x000C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 102603 ];

		return pClassPointer;
	};

	int GetSubItemUseTime ( int ItemId );
	void GetSubItemList ( int ItemId, TArray< int >* OutArray );
	bool IsInPackageItemList ( int ItemId );
};

UClass* USFPackageItem::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddRadialImpulse
// 0x0018 (0x0100 - 0x00E8)
class USFSeqAct_AddRadialImpulse : public USequenceAction
{
public:
	float                                              Impulse;                                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Position;                                         		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      SpawnPoint;                                       		// 0x00F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bVelChange : 1;                                   		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 102999 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AddRadialImpulse::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddImpulse
// 0x0024 (0x010C - 0x00E8)
class USFSeqAct_AddImpulse : public USequenceAction
{
public:
	struct FVector                                     Impulse;                                          		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Position;                                         		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103006 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AddImpulse::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetPhysicsWeight
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetPhysicsWeight : public USequenceAction
{
public:
	float                                              NewPhysicsWeight;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103132 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetPhysicsWeight::pClassPointer = NULL;

// Class SFGame.SFKillByGrenadeWeapEventData
// 0x0000 (0x0140 - 0x0140)
class USFKillByGrenadeWeapEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103223 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFKillByGrenadeWeapEventData::pClassPointer = NULL;

// Class SFGame.SFKillBySecondWeapEventData
// 0x0000 (0x0140 - 0x0140)
class USFKillBySecondWeapEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103230 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFKillBySecondWeapEventData::pClassPointer = NULL;

// Class SFGame.SFKillBySpecialWeapEventData
// 0x0000 (0x0140 - 0x0140)
class USFKillBySpecialWeapEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103237 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFKillBySpecialWeapEventData::pClassPointer = NULL;

// Class SFGame.SFKillVolume
// 0x0001 (0x02A9 - 0x02A8)
class ASFKillVolume : public APhysicsVolume
{
public:
	unsigned char                                      TargetTeamToKill;                                 		// 0x02A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103344 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
	void CausePainTo ( class AActor* Other );
};

UClass* ASFKillVolume::pClassPointer = NULL;

// Class SFGame.SFKillZDamageType_FirstPersonFell
// 0x0000 (0x0078 - 0x0078)
class USFKillZDamageType_FirstPersonFell : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103356 ];

		return pClassPointer;
	};

	bool IsFirstPersonCamera ( );
};

UClass* USFKillZDamageType_FirstPersonFell::pClassPointer = NULL;

// Class SFGame.SFKnifeGame
// 0x0000 (0x0844 - 0x0844)
class ASFKnifeGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103361 ];

		return pClassPointer;
	};

};

UClass* ASFKnifeGame::pClassPointer = NULL;

// Class SFGame.SFLastOneShotEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFLastOneShotEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103381 ];

		return pClassPointer;
	};

};

UClass* USFLastOneShotEventData::pClassPointer = NULL;

// Class SFGame.SFLastStandMutator
// 0x001D (0x0261 - 0x0244)
class ASFLastStandMutator : public AMutator
{
public:
	class AController*                                 LastController;                                   		// 0x0244 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DamageMutationRatio[ 0x2 ];                       		// 0x0248 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDamageRatio;                               		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              ActivationTime;                                   		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                PlayerGapCondition;                               		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                PlayerHealthCondition;                            		// 0x025C (0x0004) [0x0000000000000000]              
	unsigned char                                      EnemyTeam;                                        		// 0x0260 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103393 ];

		return pClassPointer;
	};

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	int GetCurrentTeamMemberCount ( unsigned char Team );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void NotifyLogout ( class AController* Exiting );
	void ResetMutator ( unsigned long bSuppressBroadcastMessage );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
};

UClass* ASFLastStandMutator::pClassPointer = NULL;

// Class SFGame.SFLDBTestCase_SampleTableData1
// 0x0000 (0x0234 - 0x0234)
class ASFLDBTestCase_SampleTableData1 : public ASFUnitTestCase_LocalDB
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103455 ];

		return pClassPointer;
	};

	void LocalDBTest_DataName ( int tableIndex );
	void LocalDBTest_DataID ( int tableIndex );
};

UClass* ASFLDBTestCase_SampleTableData1::pClassPointer = NULL;

// Class SFGame.SFLDBTestCase_SampleTableData2
// 0x0000 (0x0234 - 0x0234)
class ASFLDBTestCase_SampleTableData2 : public ASFUnitTestCase_LocalDB
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103461 ];

		return pClassPointer;
	};

	void LocalDBTest_DataID ( int tableIndex );
};

UClass* ASFLDBTestCase_SampleTableData2::pClassPointer = NULL;

// Class SFGame.SFSampleTableData2
// 0x001C (0x0060 - 0x0044)
class USFSampleTableData2 : public USFLocalDBTableData
{
public:
	struct FString                                     LocalString;                                      		// 0x0044 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      intArray;                                         		// 0x0050 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103465 ];

		return pClassPointer;
	};

};

UClass* USFSampleTableData2::pClassPointer = NULL;

// Class SFGame.SFLDBTestRunner_SampleTableData1
// 0x0000 (0x0244 - 0x0244)
class ASFLDBTestRunner_SampleTableData1 : public ASFUnitTestRunner_LocalDB
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103484 ];

		return pClassPointer;
	};

};

UClass* ASFLDBTestRunner_SampleTableData1::pClassPointer = NULL;

// Class SFGame.SFLDBTestRunner_SampleTableData2
// 0x0000 (0x0244 - 0x0244)
class ASFLDBTestRunner_SampleTableData2 : public ASFUnitTestRunner_LocalDB
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103486 ];

		return pClassPointer;
	};

};

UClass* ASFLDBTestRunner_SampleTableData2::pClassPointer = NULL;

// Class SFGame.SFLimbsHitCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFLimbsHitCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103488 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFLimbsHitCountEventData::pClassPointer = NULL;

// Class SFGame.SFLoadingTip
// 0x0054 (0x0090 - 0x003C)
class USFLoadingTip : public UObject
{
public:
	float                                              LoadingTipX;                                      		// 0x003C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LoadingTipY;                                      		// 0x0040 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MapLocalizedNameX;                                		// 0x0044 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MapLocalizedNameY;                                		// 0x0048 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InternationalNameX;                               		// 0x004C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InternationalNameY;                               		// 0x0050 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LoadingTip;                                       		// 0x0054 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipCommon;                                 		// 0x0060 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipBase;                                   		// 0x006C (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipSpecial;                                		// 0x0078 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FString >                           LoadingTipFun;                                    		// 0x0084 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103496 ];

		return pClassPointer;
	};

	void GetLoaingTipMessageByCount ( int nCount, TArray< struct FString > InLoadingTipMessage, TArray< struct FString >* OutLoadingTipMessage );
	struct FString GetLoadingTipMessage ( int InRank );
};

UClass* USFLoadingTip::pClassPointer = NULL;

// Class SFGame.SFLongShotEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFLongShotEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103597 ];

		return pClassPointer;
	};

};

UClass* USFLongShotEventData::pClassPointer = NULL;

// Class SFGame.SFLoveShotEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFLoveShotEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103599 ];

		return pClassPointer;
	};

	bool IsMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFLoveShotEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntBeastAssistEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntBeastAssistEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103617 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntBeastAssistEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntBeastDeadEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntBeastDeadEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103624 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntBeastDeadEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntBeastKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntBeastKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103631 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntBeastKillEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntBeastPlayTimeEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntBeastPlayTimeEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103638 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntBeastPlayTimeEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntHumanAssistEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntHumanAssistEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103645 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntHumanAssistEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntHumanDeadEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntHumanDeadEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103652 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntHumanDeadEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntHumanKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntHumanKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103659 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntHumanKillEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntHumanPlayTimeEventData
// 0x0000 (0x0140 - 0x0140)
class USFManHuntHumanPlayTimeEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103666 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFManHuntHumanPlayTimeEventData::pClassPointer = NULL;

// Class SFGame.SFManHuntKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFManHuntKillDeathMessage : public USFKillDeathMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103673 ];

		return pClassPointer;
	};

	void ProcessAssistLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* AssistPRI, class ASFPlayerReplicationInfo* KilledPRI, int KillType, int ItemCodeNameIndex, class UObject* DamageCauser );
	void ProcessDeadLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* KilledPRI, int KillType, class UObject* DamageCauser );
	void ProcessKillLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, int WeaponItemID, int KillType, int ItemCodeNameIndex, class UObject* DamageCauser );
};

UClass* USFManHuntKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFManOnAStickEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFManOnAStickEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103702 ];

		return pClassPointer;
	};

};

UClass* USFManOnAStickEventData::pClassPointer = NULL;

// Class SFGame.SFPlayerLogEventData
// 0x0000 (0x0140 - 0x0140)
class USFPlayerLogEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103782 ];

		return pClassPointer;
	};

};

UClass* USFPlayerLogEventData::pClassPointer = NULL;

// Class SFGame.SFMatchOverCounterEventData
// 0x0000 (0x0140 - 0x0140)
class USFMatchOverCounterEventData : public USFPlayerLogEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103784 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFMatchOverCounterEventData::pClassPointer = NULL;

// Class SFGame.SFMatchOverPlayerCounterEventData
// 0x0000 (0x0140 - 0x0140)
class USFMatchOverPlayerCounterEventData : public USFPlayerLogEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 103792 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	bool IsMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFMatchOverPlayerCounterEventData::pClassPointer = NULL;

// Class SFGame.SFMissionEventData
// 0x0000 (0x0140 - 0x0140)
class USFMissionEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104087 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFMissionEventData::pClassPointer = NULL;

// Class SFGame.SFMission1EventData
// 0x0000 (0x0140 - 0x0140)
class USFMission1EventData : public USFMissionEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104094 ];

		return pClassPointer;
	};

};

UClass* USFMission1EventData::pClassPointer = NULL;

// Class SFGame.SFMission2EventData
// 0x0000 (0x0140 - 0x0140)
class USFMission2EventData : public USFMissionEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104096 ];

		return pClassPointer;
	};

};

UClass* USFMission2EventData::pClassPointer = NULL;

// Class SFGame.SFMission3EventData
// 0x0000 (0x0140 - 0x0140)
class USFMission3EventData : public USFMissionEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104098 ];

		return pClassPointer;
	};

};

UClass* USFMission3EventData::pClassPointer = NULL;

// Class SFGame.SFMissionScoreEventData
// 0x0000 (0x0140 - 0x0140)
class USFMissionScoreEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104100 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFMissionScoreEventData::pClassPointer = NULL;

// Class SFGame.SFTotalPlayGameCountEventData
// 0x0000 (0x0140 - 0x0140)
class USFTotalPlayGameCountEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104107 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFTotalPlayGameCountEventData::pClassPointer = NULL;

// Class SFGame.SFModePlayGameCountEventData
// 0x0000 (0x0140 - 0x0140)
class USFModePlayGameCountEventData : public USFTotalPlayGameCountEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104114 ];

		return pClassPointer;
	};

};

UClass* USFModePlayGameCountEventData::pClassPointer = NULL;

// Class SFGame.SFMultiKillEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFMultiKillEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104116 ];

		return pClassPointer;
	};

};

UClass* USFMultiKillEventData::pClassPointer = NULL;

// Class SFGame.SFMuzzleFlashLight_GL
// 0x0000 (0x0248 - 0x0248)
class USFMuzzleFlashLight_GL : public USFExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104118 ];

		return pClassPointer;
	};

};

UClass* USFMuzzleFlashLight_GL::pClassPointer = NULL;

// Class SFGame.SFMuzzleFlashLight_Pistol
// 0x0000 (0x0248 - 0x0248)
class USFMuzzleFlashLight_Pistol : public USFExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104120 ];

		return pClassPointer;
	};

};

UClass* USFMuzzleFlashLight_Pistol::pClassPointer = NULL;

// Class SFGame.SFMuzzleFlashLight_Rifle
// 0x0000 (0x0248 - 0x0248)
class USFMuzzleFlashLight_Rifle : public USFExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104122 ];

		return pClassPointer;
	};

};

UClass* USFMuzzleFlashLight_Rifle::pClassPointer = NULL;

// Class SFGame.SFMuzzleFlashLight_SilencerRifle
// 0x0000 (0x0248 - 0x0248)
class USFMuzzleFlashLight_SilencerRifle : public USFMuzzleFlashLight_Rifle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104124 ];

		return pClassPointer;
	};

};

UClass* USFMuzzleFlashLight_SilencerRifle::pClassPointer = NULL;

// Class SFGame.SFMuzzleFlashLight_TeslaCanon
// 0x0000 (0x0248 - 0x0248)
class USFMuzzleFlashLight_TeslaCanon : public USFExplosionLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104126 ];

		return pClassPointer;
	};

};

UClass* USFMuzzleFlashLight_TeslaCanon::pClassPointer = NULL;

// Class SFGame.SFNormalWaveCompleteByMap
// 0x0000 (0x0140 - 0x0140)
class USFNormalWaveCompleteByMap : public USFWaveCompleteByMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104128 ];

		return pClassPointer;
	};

};

UClass* USFNormalWaveCompleteByMap::pClassPointer = NULL;

// Class SFGame.SFObserverInput
// 0x0000 (0x0174 - 0x0174)
class USFObserverInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104445 ];

		return pClassPointer;
	};

};

UClass* USFObserverInput::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetPrimaryTargetIcon
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_SetPrimaryTargetIcon : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104459 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetPrimaryTargetIcon::pClassPointer = NULL;

// Class SFGame.SFOnetoOneObserverController
// 0x0000 (0x11F8 - 0x11F8)
class ASFOnetoOneObserverController : public ASFObserverController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104509 ];

		return pClassPointer;
	};

	void ToggleCombatMsg ( );
	void ToggleLinebottom ( );
	void ToggleMinimap ( );
	void ToggleHUDCodeName ( );
	void ToggleChattingLog ( );
	void ToggleModeInfo ( );
	void ToggleHPBar ( );
	void KeyInputF9 ( );
	void SetCCTVInfo ( int Index );
	void DrawPlayerOutline ( unsigned char DrawTeam );
	void ToggleDrawOutline ( );
	void NumberKeyPressed ( int Index );
	void ToggleObserverHud ( );
	void ExecChangedArmBandMode ( );
	void ExecToggleIFFParticle ( );
	bool LimitFunctionCam ( unsigned char ViewMode );
};

UClass* ASFOnetoOneObserverController::pClassPointer = NULL;

// Class SFGame.SFOnetoOneHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFOnetoOneHUD : public ASFRoundTDMHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104510 ];

		return pClassPointer;
	};

};

UClass* ASFOnetoOneHUD::pClassPointer = NULL;

// Class SFGame.SFOnetoOnePlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFOnetoOnePlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104511 ];

		return pClassPointer;
	};

	void KeyInputF11 ( );
	void KeyInputF10 ( );
	void KeyInputF9 ( );
};

UClass* ASFOnetoOnePlayerController::pClassPointer = NULL;

// Class SFGame.SFOnetoOneGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFOnetoOneGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104512 ];

		return pClassPointer;
	};

	void EndGame ( );
};

UClass* ASFOnetoOneGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFOnetoOneObserverInput
// 0x0000 (0x0174 - 0x0174)
class USFOnetoOneObserverInput : public USFObserverInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 104539 ];

		return pClassPointer;
	};

};

UClass* USFOnetoOneObserverInput::pClassPointer = NULL;

// Class SFGame.SFOutLineVolume
// 0x0024 (0x0284 - 0x0260)
class ASFOutLineVolume : public AVolume
{
public:
	unsigned char                                      TargetTeam;                                       		// 0x0260 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineIntense;                                   		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineCullDistance;                              		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineOverlapDistance;                           		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OutLineFadeTime;                                  		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              OutlineWidth;                                     		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FOutlineColor >                     OutlineColorInfo;                                 		// 0x0278 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107323 ];

		return pClassPointer;
	};

	void UnTouch ( class AActor* Other );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void SetDrawOutlineForPawn ( class ASFPawn* TargetPawn, int OutLineIndex );
};

UClass* ASFOutLineVolume::pClassPointer = NULL;

// Class SFGame.SFOutlineVolumeDynamic
// 0x0010 (0x0294 - 0x0284)
class ASFOutlineVolumeDynamic : public ASFOutLineVolume
{
public:
	unsigned long                                      bIsSuppressInCovertActivities : 1;                		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class ASFPawn* >                           PawnsInVolume;                                    		// 0x0288 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107355 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
	int GetOutlineColorIndex ( class ASFPawn* TargetPawn );
	void SetDrawOutlineForPawn ( class ASFPawn* TargetPawn, int OutLineIndex );
	bool CovertActivitiesTest ( class ASFPawn* TargetPawn );
	void UnTouch ( class AActor* Other );
	void Touch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFOutlineVolumeDynamic::pClassPointer = NULL;

// Class SFGame.SFWarriorPlayerController
// 0x003C (0x11E4 - 0x11A8)
class ASFWarriorPlayerController : public ASFPlayerController
{
public:
	struct FString                                     WarriorLevelUpMessage;                            		// 0x11A8 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Message_MissionActorDamaged;                      		// 0x11B4 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              RespawningDeltaTime;                              		// 0x11C0 (0x0004) [0x0000000000000000]              
	float                                              WaitForSpectatingDelay;                           		// 0x11C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RecallStartTime;                                  		// 0x11C8 (0x0004) [0x0000000000000000]              
	float                                              RecallCastingDelay;                               		// 0x11CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EmergencyNotifyHealthRate;                        		// 0x11D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EmergencyNotifyLoopDelay;                         		// 0x11D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastEmergencyNoticedTime;                         		// 0x11D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTestForceRPCSend : 1;                            		// 0x11DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	int                                                RecvRewardCount;                                  		// 0x11E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107532 ];

		return pClassPointer;
	};

	bool ActivateStore ( int ShopGroupIndex );
	void OnGiveWeapon ( class USFSeqAct_GiveWeapon* GiveWeapon );
	void ServerChangePawn ( struct FString PawnClassName );
	void ChangePawn ( struct FString PawnClassName );
	void PolymorphByModeStat ( unsigned char StatType );
	bool CanUsePingNotice ( );
	void ServerAddModeMP ( float Value );
	void AddModeMP ( float Value );
	void ServerAddModeDP ( float Value );
	void AddModeDP ( float Value );
	void ServerAddModeAP ( float Value );
	void AddModeAP ( float Value );
	void ServerAddModeExp ( float Value );
	void AddModeExp ( float Value );
	void eventPlayerTick ( float DeltaTime );
	void ServerCancelRecall ( );
	void CancelRecall ( );
	void ServerStartRecall ( );
	void StartRecall ( );
	void DeactivateTurrets ( unsigned long bValue );
	void SummonAI ( unsigned char AIType, unsigned char TeamNum );
	void NotifyModeStatPointChanged ( );
	void NotifyTurretDestroyed ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyTurretDamaged ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyMissionActorDestroyed ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyMissionActorDamaged ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam, int DamageAmount );
	void SpawnAIPet ( unsigned char AIType );
	void DisplayRemainingRespawnTime ( float RemainingTime );
	void UpdateRemainingRespawnTime ( float DeltaTime, unsigned long bForce );
	void SetRemainingRespawnTime ( float TotalRespawnDelay );
	void ServerSetTotalDeadTime ( float DeadTime );
	float GetRespawnReduceRate ( );
	float GetTotalRespawnDelay ( );
	void SetLogInfoWeapPlayTime ( );
	void SendPlayerLogToDataBase ( unsigned char bIsAbnormalMatchEnd );
	void NotifyEnemyCountChanged ( );
	void HideInGameStoreUI ( );
	bool ShowInGameStoreUI ( );
	void ServerBackupWeaponInventoryInfo ( int nSetIndex, struct FWeaponInventorySet BackupWeaponInvSet );
	void SyncItemDataToServer ( );
	void BackupWeaponInventoryInfoInClient ( );
	int GetDurabilityWeaponinWeaponSet ( int SetNo, int Slot, unsigned long bConvert );
	void OnModeLevelUp ( );
	void SwitchWeapon ( unsigned char T );
	void ViewAPlayer ( int Dir );
	bool GetViewTargetActorList ( TArray< class AActor* >* ViewTargetActorList );
	bool IsAlwaysMovementSync ( );
	void TesToggletRPCSend ( );
	void GivePawn ( class APawn* NewPawn, unsigned long bInputFlag );
	void ServerThrowWeapon ( );
	void PKT_SendWarriorPlayerLogToDatabase_REQ_TRANSACTION ( class UPacket* recvPacket );
	void ProcessRecvPacket ( int ProtocoID, int ResultID, class UPacket* Packet );
	void WeaponSetChange ( int Type );
	unsigned char GetHeroVersion ( );
};

UClass* ASFWarriorPlayerController::pClassPointer = NULL;

// Class SFGame.SFParticleModuleEventSendToGame
// 0x0000 (0x003C - 0x003C)
class USFParticleModuleEventSendToGame : public UParticleModuleEventSendToGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107610 ];

		return pClassPointer;
	};

	void DoEvent ( struct FName EventType, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};

UClass* USFParticleModuleEventSendToGame::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ParticleModuleEvent
// 0x0000 (0x0108 - 0x0108)
class USFSeqEvent_ParticleModuleEvent : public USFSeqEvent_byScript
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107617 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ParticleModuleEvent::pClassPointer = NULL;

// Class SFGame.SFPostEffect
// 0x0008 (0x0044 - 0x003C)
class USFPostEffect : public UObject
{
public:
	float                                              Lifetime;                                         		// 0x003C (0x0004) [0x0000000000000000]              
	float                                              RatioTime;                                        		// 0x0040 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 107683 ];

		return pClassPointer;
	};

	void UpdatePostEffect ( class ASFPawn* SFP, int inPostEffectRefInfo );
};

UClass* USFPostEffect::pClassPointer = NULL;

// Class SFGame.SFWeap_Weaponless
// 0x0000 (0x0C78 - 0x0C78)
class ASFWeap_Weaponless : public ASFWeap_Mission
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108019 ];

		return pClassPointer;
	};

	void eventShellOut ( );
	void DetachWeapon ( );
	void AttachWeapon ( unsigned long bViaReplication );
	bool ChangeDyingWeapon ( class UClass* dmgType );
};

UClass* ASFWeap_Weaponless::pClassPointer = NULL;

// Class SFGame.SFThirdAnimName
// 0x0458 (0x0494 - 0x003C)
class USFThirdAnimName : public UObject
{
public:
	TArray< struct FName >                             VT_DeathHeadF;                                    		// 0x003C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathHeadB;                                    		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathHeadL;                                    		// 0x0054 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathHeadR;                                    		// 0x0060 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathUpperF;                                   		// 0x006C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathUpperB;                                   		// 0x0078 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathUpperL;                                   		// 0x0084 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathUpperR;                                   		// 0x0090 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathLowerF;                                   		// 0x009C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathLowerB;                                   		// 0x00A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathLowerL;                                   		// 0x00B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathLowerR;                                   		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchF;                                  		// 0x00CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchB;                                  		// 0x00D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchL;                                  		// 0x00E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchR;                                  		// 0x00F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchExplosiveF;                         		// 0x00FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchExplosiveB;                         		// 0x0108 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchExplosiveL;                         		// 0x0114 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathCrouchExplosiveR;                         		// 0x0120 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathExplosiveF;                               		// 0x012C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathExplosiveB;                               		// 0x0138 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathExplosiveL;                               		// 0x0144 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathExplosiveR;                               		// 0x0150 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathJumpF;                                    		// 0x015C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathJumpB;                                    		// 0x0168 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathJumpL;                                    		// 0x0174 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             VT_DeathJumpR;                                    		// 0x0180 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathHeadF;                                       		// 0x018C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathHeadB;                                       		// 0x0198 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathHeadL;                                       		// 0x01A4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathHeadR;                                       		// 0x01B0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathUpperF;                                      		// 0x01BC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathUpperB;                                      		// 0x01C8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathUpperL;                                      		// 0x01D4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathUpperR;                                      		// 0x01E0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathLowerF;                                      		// 0x01EC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathLowerB;                                      		// 0x01F8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathLowerL;                                      		// 0x0204 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathLowerR;                                      		// 0x0210 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchF;                                     		// 0x021C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchB;                                     		// 0x0228 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchL;                                     		// 0x0234 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchR;                                     		// 0x0240 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchExplosiveF;                            		// 0x024C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchExplosiveB;                            		// 0x0258 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchExplosiveL;                            		// 0x0264 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathCrouchExplosiveR;                            		// 0x0270 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathExplosiveF;                                  		// 0x027C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathExplosiveB;                                  		// 0x0288 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathExplosiveL;                                  		// 0x0294 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathExplosiveR;                                  		// 0x02A0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathJumpF;                                       		// 0x02AC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathJumpB;                                       		// 0x02B8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathJumpL;                                       		// 0x02C4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DeathJumpR;                                       		// 0x02D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TakeHitAnimF;                                     		// 0x02DC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TakeHitAnimB;                                     		// 0x02E8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TakeHitAnimL;                                     		// 0x02F4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TakeHitAnimR;                                     		// 0x0300 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TakeHitAnimFlashBang;                             		// 0x030C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             TakeHitAnimGas;                                   		// 0x0318 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             EmotionWinAnims;                                  		// 0x0324 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             EmotionLoseAnims;                                 		// 0x0330 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathHeadF;                                  		// 0x033C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathHeadB;                                  		// 0x0348 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathHeadL;                                  		// 0x0354 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathHeadR;                                  		// 0x0360 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathUpperF;                                 		// 0x036C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathUpperB;                                 		// 0x0378 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathUpperL;                                 		// 0x0384 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathUpperR;                                 		// 0x0390 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathLowerF;                                 		// 0x039C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathLowerB;                                 		// 0x03A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathLowerL;                                 		// 0x03B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathLowerR;                                 		// 0x03C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchF;                                		// 0x03CC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchB;                                		// 0x03D8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchL;                                		// 0x03E4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchR;                                		// 0x03F0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchExplosiveF;                       		// 0x03FC (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchExplosiveB;                       		// 0x0408 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchExplosiveL;                       		// 0x0414 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathCrouchExplosiveR;                       		// 0x0420 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathExplosiveF;                             		// 0x042C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathExplosiveB;                             		// 0x0438 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathExplosiveL;                             		// 0x0444 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathExplosiveR;                             		// 0x0450 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathJumpF;                                  		// 0x045C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathJumpB;                                  		// 0x0468 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathJumpL;                                  		// 0x0474 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             DBNO_DeathJumpR;                                  		// 0x0480 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       DefaultDeathAnimName;                             		// 0x048C (0x0008) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108203 ];

		return pClassPointer;
	};

	struct FName GetEmotionAnimName ( unsigned char EmotionType, unsigned long OptionalArg1 );
	struct FName GetTakeHitAnimName ( unsigned char HitType, unsigned char FallDir );
	bool IsExplosiveDamage ( class UClass* DamageType );
	struct FName GetDeathAnimName ( class ASFPawn* DeadPawn, class UClass* DamageType, struct FVector TearOffMomentum, unsigned char* FallDir );
	struct FName GetDeathAnimNameDBNO ( class ASFPawn* DeadPawn, class UClass* DamageType, struct FVector TearOffMomentum, unsigned char* FallDir );
	struct FName GetDeathAnimNameOthers ( class ASFPawn* DeadPawn, class UClass* DamageType, struct FVector TearOffMomentum, unsigned char* FallDir );
	struct FName GetDeathAnimNameViewTarget ( class ASFPawn* DeadPawn, class UClass* DamageType, struct FVector TearOffMomentum, unsigned char* FallDir );
};

UClass* USFThirdAnimName::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddHealth
// 0x0008 (0x00F0 - 0x00E8)
class USFSeqAct_AddHealth : public USequenceAction
{
public:
	int                                                HealthForAdd;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClampByMaxHealth : 1;                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108668 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AddHealth::pClassPointer = NULL;

// Class SFGame.SFSeqAct_AddMoney
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_AddMoney : public USequenceAction
{
public:
	int                                                Money;                                            		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 108673 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_AddMoney::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetPawnGroundSpeed
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetPawnGroundSpeed : public USequenceAction
{
public:
	float                                              SpeedRate;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109094 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetPawnGroundSpeed::pClassPointer = NULL;

// Class SFGame.SFPawn_AI_Turret
// 0x0000 (0x0F88 - 0x0F88)
class ASFPawn_AI_Turret : public ASFPawn_AI
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 109997 ];

		return pClassPointer;
	};

	void eventInitVoiceResource ( );
	void ComposePawnMesh ( );
	bool IsValidEnemy ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventStopDriving ( class AVehicle* V );
	void SetMovementPhysics ( );
	void EndManningTurret ( );
	void StartManningTurret ( );
	int GetCurrentWeaponSetForLog ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
};

UClass* ASFPawn_AI_Turret::pClassPointer = NULL;

// Class SFGame.SFPawn_Aliens
// 0x0000 (0x0EC8 - 0x0EC8)
class ASFPawn_Aliens : public ASFPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110403 ];

		return pClassPointer;
	};

};

UClass* ASFPawn_Aliens::pClassPointer = NULL;

// Class SFGame.SFPawn_Human
// 0x0000 (0x0EC8 - 0x0EC8)
class ASFPawn_Human : public ASFPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110490 ];

		return pClassPointer;
	};

};

UClass* ASFPawn_Human::pClassPointer = NULL;

// Class SFGame.SFPawnAI_Spectre
// 0x0020 (0x1030 - 0x1010)
class ASFPawnAI_Spectre : public ASFPawn_AI_Aliens_Base
{
public:
	float                                              HeadShotDamageRate;                               		// 0x1010 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NotHeadShotDamageRate;                            		// 0x1014 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< class UAnimSet* >                          ZombiePawnRandomAnimset;                          		// 0x1018 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                ZombiePawnRandomMaterial;                         		// 0x1024 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110744 ];

		return pClassPointer;
	};

	bool GetReactLureGrenade ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void PlayPawnActionAutoVoice ( unsigned char WeaponState );
	void PostUpdateCharMesh ( );
};

UClass* ASFPawnAI_Spectre::pClassPointer = NULL;

// Class SFGame.SFPawnAI_ZombieHideSeekWalker
// 0x0000 (0x1028 - 0x1028)
class ASFPawnAI_ZombieHideSeekWalker : public ASFPawnAI_ZombieWalker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110804 ];

		return pClassPointer;
	};

	bool GetPawnIsWanderingOnly ( );
};

UClass* ASFPawnAI_ZombieHideSeekWalker::pClassPointer = NULL;

// Class SFGame.SFPawnAI_ZombiePunisher
// 0x0000 (0x1028 - 0x1028)
class ASFPawnAI_ZombiePunisher : public ASFPawnAI_ZombieWalker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110815 ];

		return pClassPointer;
	};

	bool GetReactLureGrenade ( );
};

UClass* ASFPawnAI_ZombiePunisher::pClassPointer = NULL;

// Class SFGame.SFPawnBlockingVolumeDynamic
// 0x0000 (0x0270 - 0x0270)
class ASFPawnBlockingVolumeDynamic : public ASFPawnBlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110826 ];

		return pClassPointer;
	};

};

UClass* ASFPawnBlockingVolumeDynamic::pClassPointer = NULL;

// Class SFGame.SFPawnBlockingVolumeStatic
// 0x0000 (0x0270 - 0x0270)
class ASFPawnBlockingVolumeStatic : public ASFPawnBlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110829 ];

		return pClassPointer;
	};

};

UClass* ASFPawnBlockingVolumeStatic::pClassPointer = NULL;

// Class SFGame.SFPawnEffectManager
// 0x0000 (0x003C - 0x003C)
class USFPawnEffectManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110832 ];

		return pClassPointer;
	};

};

UClass* USFPawnEffectManager::pClassPointer = NULL;

// Class SFGame.SFPawnEquipment
// 0x003C (0x0078 - 0x003C)
class USFPawnEquipment : public UObject
{
public:
	float                                              ProtectiveHead[ 0x2 ];                            		// 0x003C (0x0008) [0x0000000000000000]              
	float                                              ProtectiveUpper[ 0x3 ];                           		// 0x0044 (0x000C) [0x0000000000000000]              
	float                                              ProtectiveLower[ 0x3 ];                           		// 0x0050 (0x000C) [0x0000000000000000]              
	float                                              DurableWeapon;                                    		// 0x005C (0x0004) [0x0000000000000000]              
	float                                              DurableEquip;                                     		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              DefensiveSmoke;                                   		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              DefensiveFragment;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              DecreaseNoise;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              IncreaseMagazine;                                 		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              IncreaseRadarRange;                               		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 110834 ];

		return pClassPointer;
	};

};

UClass* USFPawnEquipment::pClassPointer = NULL;

// Class SFGame.SFRadioMsgAuto
// 0x0000 (0x0080 - 0x0080)
class USFRadioMsgAuto : public USFRadioMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111318 ];

		return pClassPointer;
	};

};

UClass* USFRadioMsgAuto::pClassPointer = NULL;

// Class SFGame.SFPawnZombiePlayer_Walker
// 0x0018 (0x1094 - 0x107C)
class ASFPawnZombiePlayer_Walker : public ASFPawn_AlienPlayer
{
public:
	TArray< class UAnimSet* >                          ZombiePawnRandomAnimset;                          		// 0x107C (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                ZombiePawnRandomMaterial;                         		// 0x1088 (0x000C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111580 ];

		return pClassPointer;
	};

	void SetGroundSpeedByRate ( float fRate );
	void PostUpdateCharMesh ( );
	bool CanInfluenceKnockBack ( );
	bool EnableStoppingPower ( );
	void SetImpactLocation ( struct FVector HitLocation, struct FVector HitNormal, struct FVector RayDir, class AActor* HitActor, struct FTraceHitInfo HitInfo, int Index, unsigned long bEnd, class ASFWeapon* myWeapon, int AdditionalDecalAngle );
	void StartFire ( unsigned char FireModeNum );
};

UClass* ASFPawnZombiePlayer_Walker::pClassPointer = NULL;

// Class SFGame.SFPiercingShotEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFPiercingShotEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111665 ];

		return pClassPointer;
	};

};

UClass* USFPiercingShotEventData::pClassPointer = NULL;

// Class SFGame.SFThirdPersonCamera
// 0x0048 (0x01C0 - 0x0178)
class USFThirdPersonCamera : public UGameThirdPersonCamera
{
public:
	class UGameThirdPersonCameraMode*                  DeadPersonCamDefault;                             		// 0x0178 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      DeadPersonCamDefaultClass;                        		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  FelloutPersonCamDefault;                          		// 0x0180 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      FelloutPersonCamDefaultClass;                     		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  FlashBackCamDefault;                              		// 0x0188 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      FlashBackCamDefaultClass;                         		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  FelloutFirstPersonCamDefault;                     		// 0x0190 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      FelloutFirstPersonCamDefaultClass;                		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  RespawnCamDefault;                                		// 0x0198 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      RespawnCamDefaultClass;                           		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  TurretCamDefault;                                 		// 0x01A0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      TurretCamDefaultClass;                            		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  TurretTargetCamDefault;                           		// 0x01A8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      TurretTargetCamDefaultClass;                      		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  AlienCamDefault;                                  		// 0x01B0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      AlienCamDefaultClass;                             		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameThirdPersonCameraMode*                  TopViewDeadPersonCamDefault;                      		// 0x01B8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      TopViewDeadPersonCamDefaultClass;                 		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111758 ];

		return pClassPointer;
	};

	void UpdatePlayerInput ( class UPlayerInput* Input );
	void UpdateCamera ( class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT );
	class UGameThirdPersonCameraMode* FindBestCameraMode ( class APawn* P );
	void OnBecomeInActive ( class UGameCameraBase* NewCamera );
	void Init ( );
};

UClass* USFThirdPersonCamera::pClassPointer = NULL;

// Class SFGame.SFPlayTimeByMode
// 0x0000 (0x0140 - 0x0140)
class USFPlayTimeByMode : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111804 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFPlayTimeByMode::pClassPointer = NULL;

// Class SFGame.SFPlayTimeByWeapSetEventData
// 0x0000 (0x0140 - 0x0140)
class USFPlayTimeByWeapSetEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111811 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFPlayTimeByWeapSetEventData::pClassPointer = NULL;

// Class SFGame.SFPostEffect_FlashBang
// 0x0030 (0x0074 - 0x0044)
class USFPostEffect_FlashBang : public USFPostEffect
{
public:
	float                                              SoundDuration;                                    		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundFadeOutDuration;                             		// 0x0048 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutStartTimeRate;                            		// 0x004C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutEndTimeRate;                              		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WhiteOutStartTimeRate;                            		// 0x0054 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WhiteOutEndTimeRate;                              		// 0x0058 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaPowerFront;                                  		// 0x005C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaPowerSide;                                   		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaPowerBack;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WhiteOutPowerFront;                               		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WhiteOutPowerSide;                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WhiteOutPowerBack;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111871 ];

		return pClassPointer;
	};

	void UpdatePostEffect ( class ASFPawn* SFP, int inPostEffectRefInfo );
};

UClass* USFPostEffect_FlashBang::pClassPointer = NULL;

// Class SFGame.SFPostEffect_TearGas
// 0x0000 (0x0044 - 0x0044)
class USFPostEffect_TearGas : public USFPostEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111896 ];

		return pClassPointer;
	};

	void UpdatePostEffect ( class ASFPawn* SFP, int inPostEffectRefInfo );
};

UClass* USFPostEffect_TearGas::pClassPointer = NULL;

// Class SFGame.SFPrimaryTargetActor_Movable
// 0x0000 (0x0344 - 0x0344)
class ASFPrimaryTargetActor_Movable : public ASFPrimaryTargetActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 111901 ];

		return pClassPointer;
	};

	void eventDetach ( class AActor* Other );
};

UClass* ASFPrimaryTargetActor_Movable::pClassPointer = NULL;

// Class SFGame.SFProj_HG_Frag
// 0x0004 (0x041C - 0x0418)
class ASFProj_HG_Frag : public ASFProj_HandGrenade
{
public:
	class USoundCue*                                   ProjectileImpactSound;                            		// 0x0418 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 112850 ];

		return pClassPointer;
	};

	void SpawnImpactEffectMain ( struct FVector HitLocation, struct FVector HitNormal, class AActor* HitActor, struct FTraceHitInfo HitInfo );
};

UClass* ASFProj_HG_Frag::pClassPointer = NULL;

// Class SFGame.SFProj_AI_CallPawn
// 0x0001 (0x041D - 0x041C)
class ASFProj_AI_CallPawn : public ASFProj_HG_Frag
{
public:
	unsigned char                                      SpawnPawn;                                        		// 0x041C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 112869 ];

		return pClassPointer;
	};

	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProj_AI_CallPawn::pClassPointer = NULL;

// Class SFGame.SFProj_AI_Kidnaping
// 0x0004 (0x0420 - 0x041C)
class ASFProj_AI_Kidnaping : public ASFProj_HG_Frag
{
public:
	float                                              KidnapingPower;                                   		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 112883 ];

		return pClassPointer;
	};

	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProj_AI_Kidnaping::pClassPointer = NULL;

// Class SFGame.SFProj_GrenadeLauncher
// 0x0010 (0x03F8 - 0x03E8)
class ASFProj_GrenadeLauncher : public ASFProj_Explosive
{
public:
	unsigned long                                      bSafe : 1;                                        		// 0x03E8 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              BlindSpeed;                                       		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fSafeDist;                                        		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              fSafeTime;                                        		// 0x03F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113110 ];

		return pClassPointer;
	};

	bool IsBlindShell ( );
	void SpawnExplosionEffects ( struct FVector HitLocation, struct FVector HitNormal );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	bool Strike ( class AActor* Victim, unsigned long bBreakableGlassForProjectile );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void SafeOut ( );
	void SafeIn ( );
	void Timer ( );
	void SetSafeTime ( );
	void PostBeginPlay ( );
};

UClass* ASFProj_GrenadeLauncher::pClassPointer = NULL;

// Class SFGame.SFProj_HG_FlashBang
// 0x000C (0x0424 - 0x0418)
class ASFProj_HG_FlashBang : public ASFProj_HandGrenade
{
public:
	float                                              fFlashTime;                                       		// 0x0418 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrontDot;                                         		// 0x041C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackDot;                                          		// 0x0420 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113309 ];

		return pClassPointer;
	};

	void ProjectileHurtRadiusExtraEffectTo ( class ASFPawn* Victim, struct FVector vOrigin, float DamageScale, unsigned long bDamageBlocked );
};

UClass* ASFProj_HG_FlashBang::pClassPointer = NULL;

// Class SFGame.SFProj_IncendiaryGrenade
// 0x0000 (0x0418 - 0x0418)
class ASFProj_IncendiaryGrenade : public ASFProj_HandGrenade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113342 ];

		return pClassPointer;
	};

};

UClass* ASFProj_IncendiaryGrenade::pClassPointer = NULL;

// Class SFGame.SFProj_Kukri
// 0x0014 (0x0428 - 0x0414)
class ASFProj_Kukri : public ASFProj_Knife
{
public:
	float                                              IncreaseValue;                                    		// 0x0414 (0x0004) [0x0000000000000000]              
	float                                              DecreaseValue;                                    		// 0x0418 (0x0004) [0x0000000000000000]              
	float                                              DecreaseRate;                                     		// 0x041C (0x0004) [0x0000000000000000]              
	float                                              OriginVelocityZ;                                  		// 0x0420 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartTime;                                        		// 0x0424 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113423 ];

		return pClassPointer;
	};

	struct FImpactInfo GetHitWallImpactInfo ( class AActor* Wall, unsigned long bSuppressStrike, float HitWallImpactDistance, int WorldHitTraceFlag, int ActorHitTraceFlag );
	void SetProjectileMesh ( );
	void PostBeginPlay ( );
};

UClass* ASFProj_Kukri::pClassPointer = NULL;

// Class SFGame.SFProjectile_AI_StunnerExplo
// 0x0000 (0x041C - 0x041C)
class ASFProjectile_AI_StunnerExplo : public ASFProj_HG_Frag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113503 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFProjectile_AI_StunnerExplo::pClassPointer = NULL;

// Class SFGame.SFProjectile_Flare
// 0x0010 (0x042C - 0x041C)
class ASFProjectile_Flare : public ASFProj_HG_Frag
{
public:
	class UParticleSystemComponent*                    SmokePSC;                                         		// 0x041C (0x0004) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             SmokePS;                                          		// 0x0420 (0x0004) [0x0000000000000000]              
	struct FName                                       SocketName;                                       		// 0x0424 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113512 ];

		return pClassPointer;
	};

	void DeactiveSmokeEffects ( );
	void SpawnSmokeEffects ( );
	class AActor* ToStop ( );
};

UClass* ASFProjectile_Flare::pClassPointer = NULL;

// Class SFGame.SFProjectileDOTGas
// 0x0000 (0x0488 - 0x0488)
class ASFProjectileDOTGas : public ASFProj_HG_Gas
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113537 ];

		return pClassPointer;
	};

	void ProjectileDOTCheck ( );
	void Destroyed ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProjectileDOTGas::pClassPointer = NULL;

// Class SFGame.SFProjectileIncendiaryBomb
// 0x0000 (0x0488 - 0x0488)
class ASFProjectileIncendiaryBomb : public ASFProjectileDOTGas
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113553 ];

		return pClassPointer;
	};

	void StartSmokeEffect ( );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFProjectileIncendiaryBomb::pClassPointer = NULL;

// Class SFGame.SFProjectileTearGas
// 0x0000 (0x0488 - 0x0488)
class ASFProjectileTearGas : public ASFProjectileDOTGas
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113565 ];

		return pClassPointer;
	};

	void eventProcessDOT ( struct FProjectileDot DurationDamage );
};

UClass* ASFProjectileTearGas::pClassPointer = NULL;

// Class SFGame.SFPromotionEvent
// 0x0000 (0x003C - 0x003C)
class USFPromotionEvent : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113576 ];

		return pClassPointer;
	};

};

UClass* USFPromotionEvent::pClassPointer = NULL;

// Class SFGame.SFPurchaseInGameStoreItemEventData
// 0x0000 (0x0140 - 0x0140)
class USFPurchaseInGameStoreItemEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113586 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFPurchaseInGameStoreItemEventData::pClassPointer = NULL;

// Class SFGame.SFPVEPlayTimeEventData
// 0x0000 (0x0140 - 0x0140)
class USFPVEPlayTimeEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113627 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFPVEPlayTimeEventData::pClassPointer = NULL;

// Class SFGame.SFPVPPlayTimeEventData
// 0x0000 (0x0140 - 0x0140)
class USFPVPPlayTimeEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113634 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFPVPPlayTimeEventData::pClassPointer = NULL;

// Class SFGame.SFRadioMsgCommand
// 0x0000 (0x0080 - 0x0080)
class USFRadioMsgCommand : public USFRadioMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113688 ];

		return pClassPointer;
	};

};

UClass* USFRadioMsgCommand::pClassPointer = NULL;

// Class SFGame.SFRadioMsgMission
// 0x0000 (0x0080 - 0x0080)
class USFRadioMsgMission : public USFRadioMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113691 ];

		return pClassPointer;
	};

};

UClass* USFRadioMsgMission::pClassPointer = NULL;

// Class SFGame.SFRankEventData
// 0x0000 (0x0140 - 0x0140)
class USFRankEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113819 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFRankEventData::pClassPointer = NULL;

// Class SFGame.SFRealTimeEventCondition
// 0x000C (0x0054 - 0x0048)
class USFRealTimeEventCondition : public USFBaseCondition
{
public:
	TArray< struct FName >                             RealTimeScoreEventType;                           		// 0x0048 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113913 ];

		return pClassPointer;
	};

};

UClass* USFRealTimeEventCondition::pClassPointer = NULL;

// Class SFGame.SFRescueGame
// 0x0000 (0x0844 - 0x0844)
class ASFRescueGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 113996 ];

		return pClassPointer;
	};

	void OnRescued ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFRescueGame::pClassPointer = NULL;

// Class SFGame.SFRescueHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFRescueHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114002 ];

		return pClassPointer;
	};

};

UClass* ASFRescueHUD::pClassPointer = NULL;

// Class SFGame.SFRescueVolume
// 0x0008 (0x02A0 - 0x0298)
class ASFRescueVolume : public ASFModeVolume
{
public:
	int                                                OccupiedTime;                                     		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RemainTime;                                       		// 0x029C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114004 ];

		return pClassPointer;
	};

	void ShowWaitingTime ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFRescueVolume::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_RescueVolume
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_RescueVolume : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114024 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_RescueVolume::pClassPointer = NULL;

// Class SFGame.SFRevengeEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFRevengeEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114036 ];

		return pClassPointer;
	};

};

UClass* USFRevengeEventData::pClassPointer = NULL;

// Class SFGame.SFRevolverGame
// 0x0000 (0x0844 - 0x0844)
class ASFRevolverGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114052 ];

		return pClassPointer;
	};

};

UClass* ASFRevolverGame::pClassPointer = NULL;

// Class SFGame.SFRevolverGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFRevolverGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114054 ];

		return pClassPointer;
	};

};

UClass* USFRevolverGameScore::pClassPointer = NULL;

// Class SFGame.SFRevolverHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFRevolverHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114055 ];

		return pClassPointer;
	};

};

UClass* ASFRevolverHUD::pClassPointer = NULL;

// Class SFGame.SFSniperGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFSniperGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114056 ];

		return pClassPointer;
	};

	bool CouldSendWeaponLog ( );
};

UClass* ASFSniperGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFRevolverGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFRevolverGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114057 ];

		return pClassPointer;
	};

	bool CouldSendWeaponLog ( );
};

UClass* ASFRevolverGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFRoundOverCounterEventData
// 0x0000 (0x0140 - 0x0140)
class USFRoundOverCounterEventData : public USFPlayerLogEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114072 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFRoundOverCounterEventData::pClassPointer = NULL;

// Class SFGame.SFSampleTableData
// 0x0010 (0x0054 - 0x0044)
class USFSampleTableData : public USFLocalDBTableData
{
public:
	int                                                IntValue;                                         		// 0x0044 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LocalName;                                        		// 0x0048 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  Texture;                                          		// 0x0050 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114081 ];

		return pClassPointer;
	};

};

UClass* USFSampleTableData::pClassPointer = NULL;

// Class SFGame.SFScenarioGame
// 0x0008 (0x084C - 0x0844)
class ASFScenarioGame : public ASFTeamGameInfo
{
public:
	class ASFScenarioGameReplicationInfo*              SFScenarioGRI;                                    		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      OnlyOne : 1;                                      		// 0x0848 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114090 ];

		return pClassPointer;
	};

	void OnEscaped ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnDropObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void OnSecureObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
	void SetNextEventMessage ( );
	void SetEventAfterArrivedAt ( );
	void SetEventAfterExplosion ( );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void SetNumBots ( );
	void RestartFromBeginning ( );
	int GetForcedTeam ( class AController* Other, int Team );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	bool PlayerIsAlive ( class AController* Player, class AController* Killed );
	void CheckGRI ( );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool NearGoal ( class AController* C );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool CheckMaxLives ( class APlayerReplicationInfo* LastDeath );
};

UClass* ASFScenarioGame::pClassPointer = NULL;

// Class SFGame.SFSeizureGameSpy
// 0x0000 (0x0848 - 0x0848)
class ASFSeizureGameSpy : public ASFSeizureGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114256 ];

		return pClassPointer;
	};

	unsigned char CheckSurvivor ( );
	bool CheckMaxLives ( class APlayerReplicationInfo* LastDeath );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
};

UClass* ASFSeizureGameSpy::pClassPointer = NULL;

// Class SFGame.SFSeizureGameSpyScore
// 0x0004 (0x00C4 - 0x00C0)
class USFSeizureGameSpyScore : public USFGameScore
{
public:
	float                                              SCORE_ObjectDefusedTeam;                          		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114275 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
};

UClass* USFSeizureGameSpyScore::pClassPointer = NULL;

// Class SFGame.SFSpyHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFSpyHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114276 ];

		return pClassPointer;
	};

};

UClass* ASFSpyHUD::pClassPointer = NULL;

// Class SFGame.SFSpyPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFSpyPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114277 ];

		return pClassPointer;
	};

	void ServerGiveWeapon ( int WeaponID, unsigned long bTossWeapon );
	void ViewAOtherTeamsPlayer ( int Dir );
	void ViewAPlayer ( int Dir );
	void WeaponSetChange ( int Type );
};

UClass* ASFSpyPlayerController::pClassPointer = NULL;

// Class SFGame.SFSeizureGameVs16
// 0x0000 (0x0848 - 0x0848)
class ASFSeizureGameVs16 : public ASFSeizureGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114284 ];

		return pClassPointer;
	};

};

UClass* ASFSeizureGameVs16::pClassPointer = NULL;

// Class SFGame.SFSeizureGameVs16Score
// 0x0000 (0x00D0 - 0x00D0)
class USFSeizureGameVs16Score : public USFSeizureGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114286 ];

		return pClassPointer;
	};

};

UClass* USFSeizureGameVs16Score::pClassPointer = NULL;

// Class SFGame.SFSeizureVs16HUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFSeizureVs16HUD : public ASF16VS16ModeHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114287 ];

		return pClassPointer;
	};

};

UClass* ASFSeizureVs16HUD::pClassPointer = NULL;

// Class SFGame.SFSeizureVolume
// 0x0000 (0x0298 - 0x0298)
class ASFSeizureVolume : public ASFModeVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114292 ];

		return pClassPointer;
	};

};

UClass* ASFSeizureVolume::pClassPointer = NULL;

// Class SFGame.SFSeqAct_ChangeBackgroundImage
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_ChangeBackgroundImage : public USequenceAction
{
public:
	class UTexture2D*                                  NewBackGroundImage;                               		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114335 ];

		return pClassPointer;
	};

	void Activated ( );
};

UClass* USFSeqAct_ChangeBackgroundImage::pClassPointer = NULL;

// Class SFGame.SFSeqAct_DrawBarricadePreview
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_DrawBarricadePreview : public USequenceAction
{
public:
	unsigned long                                      bShowPreview : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114386 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_DrawBarricadePreview::pClassPointer = NULL;

// Class SFGame.SFSeqAct_Explode
// 0x0034 (0x011C - 0x00E8)
class USFSeqAct_Explode : public USequenceAction
{
public:
	class UClass*                                      ExplosionActorClass;                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UGameExplosion*                              ExplosionTemplate;                                		// 0x00EC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class AActor*                                      TargetActor;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTargetLocationNRotation : 1;                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      SpawnPoint;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpawnLocation;                                    		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SpawnOrientation;                                 		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DefaultDamageType;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114392 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

UClass* USFSeqAct_Explode::pClassPointer = NULL;

// Class SFGame.SFSeqAct_GetTutorialSectionScore
// 0x0010 (0x00F8 - 0x00E8)
class USFSeqAct_GetTutorialSectionScore : public USequenceAction
{
public:
	int                                                SectionID;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BestScore;                                        		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                AdjustScore;                                      		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScoreRate;                                        		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114413 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USFSeqAct_GetTutorialSectionScore::pClassPointer = NULL;

// Class SFGame.SFSeqAct_MovingInterpActor
// 0x0009 (0x00FD - 0x00F4)
class USFSeqAct_MovingInterpActor : public USFSeqAct_SFGameInfo
{
public:
	unsigned long                                      bIsMoveEnded : 1;                                 		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      MovingSubject;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TeamNumber;                                       		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114464 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_MovingInterpActor::pClassPointer = NULL;

// Class SFGame.SFSeqAct_PickEventOriginator
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_PickEventOriginator : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114470 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

UClass* USFSeqAct_PickEventOriginator::pClassPointer = NULL;

// Class SFGame.SFSeqAct_PlayWave
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_PlayWave : public USequenceAction
{
public:
	class USoundNodeWave*                              Sound;                                            		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114482 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

UClass* USFSeqAct_PlayWave::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetActivatedPawn
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetActivatedPawn : public USequenceAction
{
public:
	class APawn*                                       ActivatedPawn;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114523 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetActivatedPawn::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetStrongHoldRoundTime
// 0x0004 (0x00EC - 0x00E8)
class USFSeqAct_SetStrongHoldRoundTime : public USequenceAction
{
public:
	float                                              RoundTime;                                        		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114552 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USFSeqAct_SetStrongHoldRoundTime::pClassPointer = NULL;

// Class SFGame.SFSeqAct_SetTeam
// 0x0001 (0x00E9 - 0x00E8)
class USFSeqAct_SetTeam : public USequenceAction
{
public:
	unsigned char                                      newTeamNum;                                       		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114557 ];

		return pClassPointer;
	};

};

UClass* USFSeqAct_SetTeam::pClassPointer = NULL;

// Class SFGame.SFSeqAct_StartCountDown
// 0x0000 (0x00E8 - 0x00E8)
class USFSeqAct_StartCountDown : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114600 ];

		return pClassPointer;
	};

	void eventActivated ( );
};

UClass* USFSeqAct_StartCountDown::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_BombTrigger
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_BombTrigger : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114653 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_BombTrigger::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_FastWave
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_FastWave : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114692 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_FastWave::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_HostMigration
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_HostMigration : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114700 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_HostMigration::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Intro
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_Intro : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114703 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_Intro::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ProgressComplete
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ProgressComplete : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114710 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ProgressComplete::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_PvEShop
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_PvEShop : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114712 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_PvEShop::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_SFTriggerState
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_SFTriggerState : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114731 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_SFTriggerState::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_ThunderRunState
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_ThunderRunState : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114736 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_ThunderRunState::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_Turret
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_Turret : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114747 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};

UClass* USFSeqEvent_Turret::pClassPointer = NULL;

// Class SFGame.SFSeqEvent_TutCourseSelected
// 0x0000 (0x0100 - 0x0100)
class USFSeqEvent_TutCourseSelected : public USFSeqEvent_Base
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114751 ];

		return pClassPointer;
	};

};

UClass* USFSeqEvent_TutCourseSelected::pClassPointer = NULL;

// Class SFGame.SFShooterGame
// 0x0018 (0x085C - 0x0844)
class ASFShooterGame : public ASFTeamGameInfo
{
public:
	TArray< struct FString >                           DroppedPickupList;                                		// 0x0844 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FVector                                     PickupSpawnRandomVel;                             		// 0x0850 (0x000C) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114796 ];

		return pClassPointer;
	};

	bool AllPawnReactionToFlashbang ( );
	void SpawnHealthPack ( class APawn* KilledPawn );
	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFShooterGame::pClassPointer = NULL;

// Class SFGame.SFShooterHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFShooterHUD : public ASFHardCoreTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114819 ];

		return pClassPointer;
	};

};

UClass* ASFShooterHUD::pClassPointer = NULL;

// Class SFGame.SFShooterGameReplicationInfo
// 0x0000 (0x04E0 - 0x04E0)
class ASFShooterGameReplicationInfo : public ASFSurvivalGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114820 ];

		return pClassPointer;
	};

};

UClass* ASFShooterGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFShooterCTFGame
// 0x0000 (0x085C - 0x085C)
class ASFShooterCTFGame : public ASFShooterGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114821 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFShooterCTFGame::pClassPointer = NULL;

// Class SFGame.SFShooterCTFHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFShooterCTFHUD : public ASFShooterHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114829 ];

		return pClassPointer;
	};

};

UClass* ASFShooterCTFHUD::pClassPointer = NULL;

// Class SFGame.SFShooterDefenceGame
// 0x0098 (0x0904 - 0x086C)
class ASFShooterDefenceGame : public ASFSurvivalGame
{
public:
	float                                              MinSpectateDelay;                                 		// 0x086C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< float >                                    BonusPawnRating;                                  		// 0x0870 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              ExpRatePerKill;                                   		// 0x087C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ExpRatePerAssist;                                 		// 0x0880 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FsDroppedPickupInfo >               DroppedPickupInfos;                               		// 0x0884 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FsDroppedPickupInfo >               DroppedHealthPickupInfos;                         		// 0x0890 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsDroppedPickupInfo >               DroppedMoneyPickupInfos;                          		// 0x089C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FsDroppedPickupInfo >               DroppedPowUpPickupInfos;                          		// 0x08A8 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              DroppedHealthRateTotal;                           		// 0x08B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DroppedMoneyRateTotal;                            		// 0x08B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DroppedPowUpRateTotal;                            		// 0x08BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ItemCarrierAICount;                               		// 0x08C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ItemCarrierSpawnRate;                             		// 0x08C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ItemCarrierSpawnAdd;                              		// 0x08C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              OverStockItemExcepRate;                           		// 0x08CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< float >                                    DifficultyHealthRate;                             		// 0x08D0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                NextZoneLimitTime;                                		// 0x08DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bUseMoveZoneTimeLimit : 1;                        		// 0x08E0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bNextZoneOpen : 1;                                		// 0x08E0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                CountDownSeconds;                                 		// 0x08E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< class ASFPlayerController* >               AllPlayerControllers;                             		// 0x08E8 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            TouchedPawnList;                                  		// 0x08F4 (0x000C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                TotalPlayerCount;                                 		// 0x0900 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114832 ];

		return pClassPointer;
	};

	void UnTouchedPawnKill ( );
	void ClearCountDown ( );
	void BeginPlayerCountDown ( int Second );
	bool IsValidTouchPlayer ( class ASFPlayerController* SFPC );
	void NextZoneLimitTimer ( );
	void eventActorTouched ( class USFSeqEvent_Touch* TouchEvent );
	void BaseScoreDeath ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI, class UClass* DamageType );
	void AdjustInitHealth ( class APawn* TargetPawn );
	bool IsSuppressedHackType ( unsigned char InHackType );
	bool CanSpawnItemCarrier ( );
	unsigned char GetExceptionAIClass ( int OrgType );
	float GetSpectateDelay ( );
	bool AllPawnReactionToFlashbang ( );
	void CalculatePVEMoney ( class ASFPlayerReplicationInfo* Scorer, unsigned char ScoreType, class ASFPlayerReplicationInfo* OtherPRI );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	void RestartPlayer ( class AController* aPlayer );
	float AddHealthDropItems ( TArray< struct FsDroppedPickupInfo >* PickupInfos );
	float AddPowerUpDropItems ( TArray< struct FsDroppedPickupInfo >* PickupInfos );
	float AddMoneyDropItems ( TArray< struct FsDroppedPickupInfo >* PickupInfos );
	class UClass* GetDroppedPickUpClass ( int* DroppedPickupIndex );
	struct FVector GetThrowLocation ( class APawn* KilledPawn, int SpawnDirBase, int DivNum, int SpawnDir );
	void SpawnDroppedPickUp ( class APawn* KilledPawn, int SpawnDirBase, int DivNum, int SpawnDir );
	void AISpawned ( int AIType, class AController* AIController, class APawn* AIPawn );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	void BaseScoreAssist ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI, class APawn* KilledPawn );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void eventPostBeginPlay ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
};

UClass* ASFShooterDefenceGame::pClassPointer = NULL;

// Class SFGame.SFShooterDefencePlayerController
// 0x01AB (0x14BC - 0x1311)
class ASFShooterDefencePlayerController : public ASFShooterPlayerController
{
public:
	struct FWeaponInventorySet                         OldWeaponInventoryInfo[ 0x3 ];                    		// 0x1314 (0x01A4) [0x0000000000002000]              ( CPF_Transient )
	int                                                NextZoneProcessTime;                              		// 0x14B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 114968 ];

		return pClassPointer;
	};

	void ActivateNextZoneTimer ( );
	void ShowNextZoneTimer ( int Time );
	void UpdateStatUp ( );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void NotifyModeStatPointChanged ( );
	void PreparedLocalWeapon ( class ASFWeapon* PreparedWeapon );
	bool IsValidItemForDefaultWeaponSet ( int WeaponID );
	void ResetWeaponSet ( );
	void CheckItemValidation ( );
};

UClass* ASFShooterDefencePlayerController::pClassPointer = NULL;

// Class SFGame.SFShooterDefenceGameScore
// 0x0000 (0x00DC - 0x00DC)
class USFShooterDefenceGameScore : public USFSurvivalGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115020 ];

		return pClassPointer;
	};

	float GetPawnBasisCriticalDistance ( unsigned char PawnType );
};

UClass* USFShooterDefenceGameScore::pClassPointer = NULL;

// Class SFGame.SFShooterDefenceHUD
// 0x0010 (0x0E58 - 0x0E48)
class ASFShooterDefenceHUD : public ASFDefenceHUD
{
public:
	int                                                PrevModeMoney;                                    		// 0x0E48 (0x0004) [0x0000000000000000]              
	int                                                PrevKillCount;                                    		// 0x0E4C (0x0004) [0x0000000000000000]              
	int                                                PrevMyDeathCount;                                 		// 0x0E50 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDraw2dHitTestBox : 1;                            		// 0x0E54 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115021 ];

		return pClassPointer;
	};

	void Draw2dHitTestBox ( );
	void eventPostRender ( );
	void UpdateMyDeathCount ( );
	void UpdateKillBeastKill ( );
	void UpdateModeMoney ( );
	void SetupOwnerPRI ( class ASFPlayerReplicationInfo* InPlayerPRI );
	void Tick ( float DeltaTime );
};

UClass* ASFShooterDefenceHUD::pClassPointer = NULL;

// Class SFGame.SFShooterDefenceGameReplicationInfo
// 0x0018 (0x04F8 - 0x04E0)
class ASFShooterDefenceGameReplicationInfo : public ASFSurvivalGameReplicationInfo
{
public:
	float                                              EnemyMarkOutlineWidth;                            		// 0x04E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnemyMarkOutLineIntense;                          		// 0x04E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ItemCarrierPointedColor;                          		// 0x04E8 (0x0010) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115022 ];

		return pClassPointer;
	};

	struct FLinearColor GetModePointedColor ( int newCase );
	class ASFGrowUpPlayerReplicationInfo* GetLowestGrowLevelPRI ( class APlayerReplicationInfo* SrcPRI );
	bool ForceUsingAISpawnAnim ( );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, class UClass* DamageType, int* Damage );
};

UClass* ASFShooterDefenceGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFThunderRunGame
// 0x001C (0x0860 - 0x0844)
class ASFThunderRunGame : public ASFTeamGameInfo
{
public:
	class ASFThunderRunGameReplicationInfo*            SFThunderRunGRI;                                  		// 0x0844 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFThunderRunState*                          GameStateInfo;                                    		// 0x0848 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReduceRespawnTimeTeam;                            		// 0x084C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ReduceRespawnTimePerMinute;                       		// 0x0850 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxReduceRespawnTime;                             		// 0x0854 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RespawnTimeByKillVolume;                          		// 0x0858 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FadeDurationOnPostRoundOver;                      		// 0x085C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115661 ];

		return pClassPointer;
	};

	int GetCCTVIndexByGameMode ( );
	void CheckMatchWinningTeam ( );
	void ResetRemainTime ( );
	void OnSHAreaIndex ( class USFSeqAct_SHAreaIndex* Action );
	float GetMinRespawnDelay ( class ASFPlayerController* TargetPC, unsigned long bShowKillCam );
	void Reset ( );
	void StartMatch ( );
	bool CheckPlayerStartByMode ( class AController* Player, unsigned char InTeam, class ASFGamePlayerStart* SFPS );
	class ASFThunderRunState* GetGameStateInfo ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void CheckGRI ( );
};

UClass* ASFThunderRunGame::pClassPointer = NULL;

// Class SFGame.SFThunderRunPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFThunderRunPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115706 ];

		return pClassPointer;
	};

	void StartRespawnCamera ( );
	void CalcRespawnCameraState ( );
};

UClass* ASFThunderRunPlayerController::pClassPointer = NULL;

// Class SFGame.SFThunderRunScore
// 0x0008 (0x00C8 - 0x00C0)
class USFThunderRunScore : public USFGameScore
{
public:
	float                                              SCORE_TouchDown;                                  		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_TouchDownTeam;                              		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115713 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFThunderRunScore::pClassPointer = NULL;

// Class SFGame.SFThunderRunPlayerReplicationInfo
// 0x0000 (0x0750 - 0x0750)
class ASFThunderRunPlayerReplicationInfo : public ASFPlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115714 ];

		return pClassPointer;
	};

	void IncrementDeaths ( int Amt, class UClass* DamageType );
};

UClass* ASFThunderRunPlayerReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFShooterThunderRunGame
// 0x0000 (0x0860 - 0x0860)
class ASFShooterThunderRunGame : public ASFThunderRunGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115715 ];

		return pClassPointer;
	};

};

UClass* ASFShooterThunderRunGame::pClassPointer = NULL;

// Class SFGame.SFShotgunGame
// 0x0000 (0x0844 - 0x0844)
class ASFShotgunGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115721 ];

		return pClassPointer;
	};

};

UClass* ASFShotgunGame::pClassPointer = NULL;

// Class SFGame.SFShotgunGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFShotgunGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115723 ];

		return pClassPointer;
	};

	bool CouldSendWeaponLog ( );
};

UClass* ASFShotgunGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFShotgunTDMGame
// 0x0000 (0x0844 - 0x0844)
class ASFShotgunTDMGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115727 ];

		return pClassPointer;
	};

};

UClass* ASFShotgunTDMGame::pClassPointer = NULL;

// Class SFGame.SFShotgunTDMGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFShotgunTDMGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115729 ];

		return pClassPointer;
	};

};

UClass* USFShotgunTDMGameScore::pClassPointer = NULL;

// Class SFGame.SFShotgunTDMHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFShotgunTDMHUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115730 ];

		return pClassPointer;
	};

};

UClass* ASFShotgunTDMHUD::pClassPointer = NULL;

// Class SFGame.SFSHPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFSHPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115733 ];

		return pClassPointer;
	};

};

UClass* ASFSHPlayerController::pClassPointer = NULL;

// Class SFGame.SFSHTeamInfo
// 0x0004 (0x0274 - 0x0270)
class ASFSHTeamInfo : public ASFTeamInfo
{
public:
	int                                                WinningArea;                                      		// 0x0270 (0x0004) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115736 ];

		return pClassPointer;
	};

	int GetWinningArea ( );
	int eventGetScore ( unsigned char ScoreType );
	void Reset ( );
};

UClass* ASFSHTeamInfo::pClassPointer = NULL;

// Class SFGame.SFSkelControlFullBodyIK
// 0x0000 (0x00C4 - 0x00C4)
class USFSkelControlFullBodyIK : public USkelControlBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115838 ];

		return pClassPointer;
	};

};

UClass* USFSkelControlFullBodyIK::pClassPointer = NULL;

// Class SFGame.SFSkeletalMeshActor
// 0x0000 (0x0264 - 0x0264)
class ASFSkeletalMeshActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115840 ];

		return pClassPointer;
	};

};

UClass* ASFSkeletalMeshActor::pClassPointer = NULL;

// Class SFGame.SFSlashEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFSlashEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115845 ];

		return pClassPointer;
	};

	bool IsMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSlashEventData::pClassPointer = NULL;

// Class SFGame.SFSniperGame
// 0x0000 (0x0844 - 0x0844)
class ASFSniperGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115871 ];

		return pClassPointer;
	};

};

UClass* ASFSniperGame::pClassPointer = NULL;

// Class SFGame.SFSniperGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFSniperGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115873 ];

		return pClassPointer;
	};

};

UClass* USFSniperGameScore::pClassPointer = NULL;

// Class SFGame.SFSniperHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFSniperHUD : public ASFSniperHUDBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115874 ];

		return pClassPointer;
	};

};

UClass* ASFSniperHUD::pClassPointer = NULL;

// Class SFGame.SFSniperSpot
// 0x0000 (0x0304 - 0x0304)
class ASFSniperSpot : public ASFDefensePoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115881 ];

		return pClassPointer;
	};

};

UClass* ASFSniperSpot::pClassPointer = NULL;

// Class SFGame.SFSniperTDMGame
// 0x0000 (0x0844 - 0x0844)
class ASFSniperTDMGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115884 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFSniperTDMGame::pClassPointer = NULL;

// Class SFGame.SFSnowballFightGame
// 0x0000 (0x0844 - 0x0844)
class ASFSnowballFightGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115894 ];

		return pClassPointer;
	};

	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
};

UClass* ASFSnowballFightGame::pClassPointer = NULL;

// Class SFGame.SFSnowBallPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFSnowBallPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115902 ];

		return pClassPointer;
	};

	void SetLogInfoWeapPlayTime ( );
};

UClass* ASFSnowBallPlayerController::pClassPointer = NULL;

// Class SFGame.SFSnowballFightGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFSnowballFightGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115903 ];

		return pClassPointer;
	};

	bool CouldSendWeaponTime ( );
	bool CouldSendWeaponLog ( );
};

UClass* ASFSnowballFightGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFSoundGroup_Item
// 0x0000 (0x0044 - 0x0044)
class USFSoundGroup_Item : public USFSoundGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115913 ];

		return pClassPointer;
	};

};

UClass* USFSoundGroup_Item::pClassPointer = NULL;

// Class SFGame.SFSoundGroup_Weapon
// 0x0000 (0x0044 - 0x0044)
class USFSoundGroup_Weapon : public USFSoundGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 115985 ];

		return pClassPointer;
	};

};

UClass* USFSoundGroup_Weapon::pClassPointer = NULL;

// Class SFGame.SFSpawner_EHoldSpawnable
// 0x0000 (0x024C - 0x024C)
class ASFSpawner_EHoldSpawnable : public ASFSpawner_EHole
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116085 ];

		return pClassPointer;
	};

};

UClass* ASFSpawner_EHoldSpawnable::pClassPointer = NULL;

// Class SFGame.SFSpecialforceEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFSpecialforceEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116089 ];

		return pClassPointer;
	};

};

UClass* USFSpecialforceEventData::pClassPointer = NULL;

// Class SFGame.SFSpecialistEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFSpecialistEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116091 ];

		return pClassPointer;
	};

};

UClass* USFSpecialistEventData::pClassPointer = NULL;

// Class SFGame.SFSpecialWeaponGame
// 0x0008 (0x084C - 0x0844)
class ASFSpecialWeaponGame : public ASFTeamGameInfo
{
public:
	int                                                CurrentRoundWeaponID;                             		// 0x0844 (0x0004) [0x0000000000000000]              
	unsigned long                                      EachCheckStartRoundForGiveWeapon : 1;             		// 0x0848 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116093 ];

		return pClassPointer;
	};

	bool GetCheckGiveWeapon ( );
	void CheckGiveWeaponRound ( );
	int GetCurrentRoundWeaponID ( );
	void SetCurrentRoundWeaponID ( int WeaponID );
};

UClass* ASFSpecialWeaponGame::pClassPointer = NULL;

// Class SFGame.SFSpecialWeaponGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFSpecialWeaponGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116107 ];

		return pClassPointer;
	};

};

UClass* USFSpecialWeaponGameScore::pClassPointer = NULL;

// Class SFGame.SFSpecialWeaponHUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFSpecialWeaponHUD : public ASFHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116108 ];

		return pClassPointer;
	};

};

UClass* ASFSpecialWeaponHUD::pClassPointer = NULL;

// Class SFGame.SFSpecialWeaponPlayerController
// 0x0000 (0x11A8 - 0x11A8)
class ASFSpecialWeaponPlayerController : public ASFPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116109 ];

		return pClassPointer;
	};

	void ServerGiveWeapon ( int WeaponID, unsigned long bTossWeapon );
	void ReturnPrevWeapon ( );
};

UClass* ASFSpecialWeaponPlayerController::pClassPointer = NULL;

// Class SFGame.SFSpecialWeaponGameReplicationInfo
// 0x0000 (0x04A8 - 0x04A8)
class ASFSpecialWeaponGameReplicationInfo : public ASFGameReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116110 ];

		return pClassPointer;
	};

	bool CouldSendWeaponLog ( );
};

UClass* ASFSpecialWeaponGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFSpecialWeaponKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFSpecialWeaponKillDeathMessage : public USFKillDeathMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116116 ];

		return pClassPointer;
	};

	void ProcessAssistLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI1, class ASFPlayerReplicationInfo* PRI2, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
	void ProcessDeadLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI2, int KillType, class UObject* OptionalObject );
	void ProcessKillLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* VictimPRI, int WeaponItemID, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
};

UClass* USFSpecialWeaponKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFSplashEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFSplashEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116279 ];

		return pClassPointer;
	};

};

UClass* USFSplashEventData::pClassPointer = NULL;

// Class SFGame.SFSquadFormation_Line
// 0x0000 (0x024C - 0x024C)
class ASFSquadFormation_Line : public ASFSquadFormation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116519 ];

		return pClassPointer;
	};

};

UClass* ASFSquadFormation_Line::pClassPointer = NULL;

// Class SFGame.SFSquadFormation_Wedged
// 0x0000 (0x024C - 0x024C)
class ASFSquadFormation_Wedged : public ASFSquadFormation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116521 ];

		return pClassPointer;
	};

};

UClass* ASFSquadFormation_Wedged::pClassPointer = NULL;

// Class SFGame.SFStairVolume
// 0x0000 (0x02A8 - 0x02A8)
class ASFStairVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116523 ];

		return pClassPointer;
	};

};

UClass* ASFStairVolume::pClassPointer = NULL;

// Class SFGame.SFStomachHitCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFStomachHitCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116599 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFStomachHitCountEventData::pClassPointer = NULL;

// Class SFGame.SFStrikeEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFStrikeEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116607 ];

		return pClassPointer;
	};

};

UClass* USFStrikeEventData::pClassPointer = NULL;

// Class SFGame.SFStrongHold2Game
// 0x0000 (0x0844 - 0x0844)
class ASFStrongHold2Game : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116609 ];

		return pClassPointer;
	};

};

UClass* ASFStrongHold2Game::pClassPointer = NULL;

// Class SFGame.SFStrongHoldGameScore
// 0x0030 (0x00F0 - 0x00C0)
class USFStrongHoldGameScore : public USFGameScore
{
public:
	float                                              SCORE_Escaped;                                    		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_EscapedTeam;                                		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Planted;                                    		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_PlantedTeam;                                		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Exploded;                                   		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_ExplodedTeam;                               		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Defused;                                    		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_DefusedTeam;                                		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_Seizured;                                   		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_SeizuredTeam;                               		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_SH_Trigger;                                 		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_SH_TriggerTeam;                             		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116611 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFStrongHoldGameScore::pClassPointer = NULL;

// Class SFGame.SFStrongHold2HUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFStrongHold2HUD : public ASFTeamHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116612 ];

		return pClassPointer;
	};

};

UClass* ASFStrongHold2HUD::pClassPointer = NULL;

// Class SFGame.SFStrongHold3Game
// 0x0000 (0x0844 - 0x0844)
class ASFStrongHold3Game : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116614 ];

		return pClassPointer;
	};

};

UClass* ASFStrongHold3Game::pClassPointer = NULL;

// Class SFGame.SFStrongHoldHUD
// 0x00AC (0x0EEC - 0x0E40)
class ASFStrongHoldHUD : public ASFTeamHUD
{
public:
	class ASFStrongHoldGameReplicationInfo*            SFSHGRI;                                          		// 0x0E40 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjectMessageArea2_A[ 0x2 ];                      		// 0x0E44 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectMessageArea2_B[ 0x2 ];                      		// 0x0E5C (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectMessageArea3_A[ 0x2 ];                      		// 0x0E74 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectMessageArea3_B[ 0x2 ];                      		// 0x0E8C (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectMessageArea4_A[ 0x2 ];                      		// 0x0EA4 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ObjectMessageArea4_B[ 0x2 ];                      		// 0x0EBC (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WaitingForNextMission[ 0x2 ];                     		// 0x0ED4 (0x0018) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116671 ];

		return pClassPointer;
	};

	void NotifyWaitingForNextMission ( float Duration );
	void NotifyChangeAreaIndex ( unsigned char nNewAreaIndex, float Duration );
	struct FString GetObjectMessage ( int TeamIndex );
	void CheckGRI ( );
};

UClass* ASFStrongHoldHUD::pClassPointer = NULL;

// Class SFGame.SFSuperMarioEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFSuperMarioEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116728 ];

		return pClassPointer;
	};

};

UClass* USFSuperMarioEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalAssistEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalAssistEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116730 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalAssistEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalBossKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalBossKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116737 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalBossKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalCloakingRipperKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalCloakingRipperKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116744 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalCloakingRipperKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalCriticalKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalCriticalKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116751 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
	bool IsMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalCriticalKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalCurrentWaveEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalCurrentWaveEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116764 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalCurrentWaveEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalEliteCrawlerKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalEliteCrawlerKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116771 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalEliteCrawlerKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalEliteLibertineKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalEliteLibertineKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116778 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalEliteLibertineKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalEliteRipperKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalEliteRipperKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116785 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalEliteRipperKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalEliteStunnerKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalEliteStunnerKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116792 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalEliteStunnerKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalEliteTyrantKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalEliteTyrantKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116799 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalEliteTyrantKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalGasStunnerKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalGasStunnerKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116806 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalGasStunnerKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalKillByAIType
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalKillByAIType : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116813 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalKillByAIType::pClassPointer = NULL;

// Class SFGame.SFSurvivalKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFSurvivalKillDeathMessage : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116820 ];

		return pClassPointer;
	};

	void SurvivalKillProcess ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* KilledPRI, class ASFPlayerController* SFPC, int KillType );
	void ClientKillDeathReceive ( class APlayerController* P, int Index1, int Index2, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFSurvivalKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFSurvivalKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116843 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalMatchClearEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalMatchClearEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116850 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalMatchClearEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalNamedCrawlerKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalNamedCrawlerKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116857 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalNamedCrawlerKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalNamedLibertineKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalNamedLibertineKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116864 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalNamedLibertineKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalNamedRipperKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalNamedRipperKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116871 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalNamedRipperKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalNamedStunnerKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalNamedStunnerKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116878 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalNamedStunnerKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalNamedTyrantKillEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalNamedTyrantKillEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 116885 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalNamedTyrantKillEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalRevivalCountEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalRevivalCountEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117125 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalRevivalCountEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalScoreEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalScoreEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117132 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalScoreEventData::pClassPointer = NULL;

// Class SFGame.SFSurvivalSpendScoreEventData
// 0x0000 (0x0140 - 0x0140)
class USFSurvivalSpendScoreEventData : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117139 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFSurvivalSpendScoreEventData::pClassPointer = NULL;

// Class SFGame.SFTeamDeathGameVs16
// 0x0000 (0x0844 - 0x0844)
class ASFTeamDeathGameVs16 : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117212 ];

		return pClassPointer;
	};

};

UClass* ASFTeamDeathGameVs16::pClassPointer = NULL;

// Class SFGame.SFTeamDeathGameVs16Score
// 0x0000 (0x00C0 - 0x00C0)
class USFTeamDeathGameVs16Score : public USFTeamDeathGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117214 ];

		return pClassPointer;
	};

};

UClass* USFTeamDeathGameVs16Score::pClassPointer = NULL;

// Class SFGame.SFTeamDeathVs16HUD
// 0x0000 (0x0E40 - 0x0E40)
class ASFTeamDeathVs16HUD : public ASF16VS16ModeHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117215 ];

		return pClassPointer;
	};

};

UClass* ASFTeamDeathVs16HUD::pClassPointer = NULL;

// Class SFGame.SFTeamDeathTestOneGame
// 0x0000 (0x0844 - 0x0844)
class ASFTeamDeathTestOneGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117217 ];

		return pClassPointer;
	};

};

UClass* ASFTeamDeathTestOneGame::pClassPointer = NULL;

// Class SFGame.SFTeamDeathTestTwoGame
// 0x0000 (0x0844 - 0x0844)
class ASFTeamDeathTestTwoGame : public ASFBaseTeamDeathGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117219 ];

		return pClassPointer;
	};

	int GetMainScore ( unsigned char TeamIndex, unsigned long bRoundOver );
	void OnCaptureObject ( class AController* Scorer, class ASFPlayerReplicationInfo* ScorerPRI, unsigned char WinnerTeamIndex );
};

UClass* ASFTeamDeathTestTwoGame::pClassPointer = NULL;

// Class SFGame.SFTeamTestOneGame
// 0x006D (0x08B1 - 0x0844)
class ASFTeamTestOneGame : public ASFTeamGameInfo
{
public:
	struct FSSpawnableAlienInfo                        SpawnableAlienInfoList[ 0x3 ];                    		// 0x0844 (0x0060) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      AlienPawnClass[ 0x3 ];                            		// 0x08A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      BeastTeam;                                        		// 0x08B0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117230 ];

		return pClassPointer;
	};

	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* GetDefaultPlayerClass ( class AController* C );
};

UClass* ASFTeamTestOneGame::pClassPointer = NULL;

// Class SFGame.SFTeamTestTwoGame
// 0x0000 (0x0844 - 0x0844)
class ASFTeamTestTwoGame : public ASFTeamGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117245 ];

		return pClassPointer;
	};

};

UClass* ASFTeamTestTwoGame::pClassPointer = NULL;

// Class SFGame.SFThrowingKnifeEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFThrowingKnifeEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117516 ];

		return pClassPointer;
	};

};

UClass* USFThrowingKnifeEventData::pClassPointer = NULL;

// Class SFGame.SFThunderrunKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFThunderrunKillDeathMessage : public USFKillDeathMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117573 ];

		return pClassPointer;
	};

	void ProcessDeadLog ( class ASFPlayerReplicationInfo* LocalPRI, class ASFPlayerReplicationInfo* PRI2, int KillType, class UObject* OptionalObject );
};

UClass* USFThunderrunKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFTomahawkEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFTomahawkEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117661 ];

		return pClassPointer;
	};

};

UClass* USFTomahawkEventData::pClassPointer = NULL;

// Class SFGame.SFTotalDeadTime
// 0x0000 (0x0140 - 0x0140)
class USFTotalDeadTime : public USFBaseEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117687 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFTotalDeadTime::pClassPointer = NULL;

// Class SFGame.SFTotalHitCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFTotalHitCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117694 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFTotalHitCountEventData::pClassPointer = NULL;

// Class SFGame.SFTPCM_Libertine
// 0x0018 (0x0244 - 0x022C)
class USFTPCM_Libertine : public USFThirdPersonCameraModeBase
{
public:
	struct FVector                                     EvadePawnRelativeOffset;                          		// 0x022C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorstLocAimingZOffset;                            		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTemporaryOriginRotInterp : 1;                    		// 0x023C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              TemporaryOriginRotInterpSpeed;                    		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117823 ];

		return pClassPointer;
	};

};

UClass* USFTPCM_Libertine::pClassPointer = NULL;

// Class SFGame.SFTrafficCheckVolume
// 0x000C (0x026C - 0x0260)
class ASFTrafficCheckVolume : public AVolume
{
public:
	float                                              TrafficMax;                                       		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionBase;                                    		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrafficNow;                                       		// 0x0268 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117829 ];

		return pClassPointer;
	};

	bool CanPassThrough ( );
	float GetTrafficNow ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

UClass* ASFTrafficCheckVolume::pClassPointer = NULL;

// Class SFGame.SFTrainingGameReplicationInfo
// 0x0038 (0x04E0 - 0x04A8)
class ASFTrainingGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	TArray< struct FSubLevelInfo >                     SubLevelModes;                                    		// 0x04A8 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< unsigned char >                            DefaultSubLevelModes;                             		// 0x04B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ProjectileTrailName;                              		// 0x04C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PerformGCPeriod;                                  		// 0x04CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastPerformGCTime;                                		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class ASFEmitterNoSyncSpawnable*                   ProjectileEmitter;                                		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentDummyCount;                                		// 0x04D8 (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned long                                      bShowProjectileTrail : 1;                         		// 0x04DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFollowProjectile : 1;                            		// 0x04DC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117857 ];

		return pClassPointer;
	};

	bool CanAcquireLuckyPoint ( );
	void eventTimer ( );
	unsigned char GetSubLevelModeIDFromDataStoreModeID ( unsigned char DataStoreModeID );
	void ReceivedGameClass ( );
	void RequestEndGame_GameExit ( );
	bool eventIsTrainingGame ( );
	bool eventCouldSendGameScore ( );
	bool CouldSendWeaponLog ( );
	bool CouldSendPlayerLog ( );
	bool CouldSendEndGame ( );
	bool CouldSendGameLog ( );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, class UClass* DamageType, int* Damage );
	void SetCurrentDummyCount ( int nNewCount );
	void ToggleProjectileTrail ( );
	void DestroyedProjectile ( class AProjectile* NewProj );
	void SpawnedProjectile ( class ASFProjectile* NewProj, struct FString ProjTrailName );
	class ASFEmitterNoSyncSpawnable* GetProjectileEmitter ( );
	void eventReplicatedEvent ( struct FName VarName );
};

UClass* ASFTrainingGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFTrainingGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFTrainingGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117881 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
};

UClass* USFTrainingGameScore::pClassPointer = NULL;

// Class SFGame.SFTrainingPlayerController
// 0x0010 (0x11B8 - 0x11A8)
class ASFTrainingPlayerController : public ASFPlayerController
{
public:
	class ASFProjectile*                               FiredProjectile;                                  		// 0x11A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    SavedRotation;                                    		// 0x11AC (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 117882 ];

		return pClassPointer;
	};

	void SetMiniGameEnd ( );
	void UpdateTrainingHUD ( );
	void ServerRespawnCurrentLocation ( );
	void HideWeaponSetChange ( );
	void eventSetIgnoreAllInput ( unsigned long bFlag );
	void NotifyProjectileFired ( class ASFProjectile* Proj );
	void KeyInputEnd ( );
	void KeyInputHome ( );
	void PageDown ( );
	void PageUp ( );
	void ServerRemoveAllDummy ( );
	void ServerRemoveDummy ( );
	void ServerCreateDummy ( );
	void UpdateClanCSN ( );
	void PressAllDelete ( );
	void PressDelete ( );
	void PressInsert ( );
};

UClass* ASFTrainingPlayerController::pClassPointer = NULL;

// Class SFGame.SFTrigger_ConvoyanceSeizure
// 0x000C (0x03C0 - 0x03B4)
class ASFTrigger_ConvoyanceSeizure : public ASFTrigger_Use
{
public:
	TArray< struct FItemSeizureInfoStruct >            ItemSeizureInfo;                                  		// 0x03B4 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 118564 ];

		return pClassPointer;
	};

	int GetItemAmount ( float CheckTime );
	bool eventCanUsing ( class APawn* User );
	bool IsAttachItem ( class AController* InstigatedBy );
	void AttachConvoyanceItem ( class AController* InstigatedBy, int ItemAmount, unsigned long IsCompleteAttach );
	void CancelUse ( class AController* InstigatedBy );
	void OnComplete ( class AController* InstigatedBy );
};

UClass* ASFTrigger_ConvoyanceSeizure::pClassPointer = NULL;

// Class SFGame.SFTrigger_ConvoyanceStoreHouse
// 0x0000 (0x03B4 - 0x03B4)
class ASFTrigger_ConvoyanceStoreHouse : public ASFTrigger_Use
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 118598 ];

		return pClassPointer;
	};

	void OnComplete ( class AController* InstigatedBy );
	bool IsUseable ( class APawn* User );
	bool eventCanUsing ( class APawn* User );
};

UClass* ASFTrigger_ConvoyanceStoreHouse::pClassPointer = NULL;

// Class SFGame.SFTrigger_ShooterInteract
// 0x0000 (0x03B8 - 0x03B8)
class ASFTrigger_ShooterInteract : public ASFTrigger_PvE
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 118933 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
	bool UsedBy ( class APawn* User );
	bool IsUseable ( class APawn* User );
};

UClass* ASFTrigger_ShooterInteract::pClassPointer = NULL;

// Class SFGame.SFUIDataStore_CombatReport
// 0x001C (0x00A8 - 0x008C)
class USFUIDataStore_CombatReport : public USFUIDataStoreBase
{
public:
	TArray< struct FsCombatReport >                    CombatReports;                                    		// 0x008C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                LastSummaryIdx;                                   		// 0x0098 (0x0004) [0x0000000000000000]              
	TArray< struct FsSumDamage >                       SumDamages;                                       		// 0x009C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 119764 ];

		return pClassPointer;
	};

	void ClearSumDamageReport ( );
	void ClearReport ( );
	void OutPutCombatReportDebug ( int LocalPlayerPID, TArray< struct FsCombatReport > PawnCombatReports );
	int LastExistCombatReport ( TArray< struct FsCombatReport > PawnCombatReports, int AttackerID, int VictimID, class UClass* DamageType );
	void SummaryCombatReport ( int LocalPlayerPID, TArray< struct FsCombatReport >* PawnCombatReports );
	void ResetCombatReport ( );
	int SetNewCombatReport ( unsigned char CombatReportType, class ASFPlayerReplicationInfo* AttackerPRI, class ASFPlayerReplicationInfo* VictimPRI, int Damage, int WeaponID, int KillType, class UClass* DamageType, int PreKillerID, struct FsCombatReport* newCombatReport );
	int GetLastHealth ( class ASFPlayerReplicationInfo* VictimPRI );
	int GetAlreadyDiePawnReportIdx ( class ASFPlayerReplicationInfo* VictimPRI, int* PreKillerID );
	void AppendCombatReport ( unsigned char CombatReportType, class ASFPlayerReplicationInfo* AttackerPRI, class ASFPlayerReplicationInfo* VictimPRI, int Damage, int WeaponID, int KillType, class UClass* DamageType );
};

UClass* USFUIDataStore_CombatReport::pClassPointer = NULL;

// Class SFGame.SFUIItemCodeType
// 0x0024 (0x0060 - 0x003C)
class USFUIItemCodeType : public UObject
{
public:
	TArray< struct FSCharItemType >                    CharItemTypeArray;                                		// 0x003C (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSWeapItemType >                    WeapItemTypeArray;                                		// 0x0048 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSWeapPartType >                    WeapPartTypeArray;                                		// 0x0054 (0x000C) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 123119 ];

		return pClassPointer;
	};

	unsigned char GetWeapPartType ( struct FString ItemGroup );
	unsigned char GetWeapItemType ( struct FString ItemGroup );
	unsigned char GetCharItemType ( struct FString ItemGroup );
};

UClass* USFUIItemCodeType::pClassPointer = NULL;

// Class SFGame.SFUnitTestCase_SampleTableData1
// 0x0008 (0x0230 - 0x0228)
class ASFUnitTestCase_SampleTableData1 : public ASFUnitTestCase_Base
{
public:
	class USFLocalDB*                                  LocalDB1;                                         		// 0x0228 (0x0004) [0x0000000000000000]              
	class USFLocalDB*                                  LocalDB2;                                         		// 0x022C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 123277 ];

		return pClassPointer;
	};

	void TestGetLocalizedString ( );
	void TestFindTableDataByName_DB1 ( );
	void TestFindTableDatabyID_DB1 ( );
	void TestRawAccessIntvalueDB1 ( );
	void TestRawAccessIDDB1 ( );
	void TestDB2Loading ( );
	void TestDB1Loading ( );
	void Setup ( );
};

UClass* ASFUnitTestCase_SampleTableData1::pClassPointer = NULL;

// Class SFGame.SFUnitTestGame
// 0x0014 (0x0858 - 0x0844)
class ASFUnitTestGame : public ASFDeathGame
{
public:
	float                                              UnitTestGamePlayTime;                             		// 0x0844 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PawnRefreshTime;                                  		// 0x0848 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< struct FString >                           TestMapNames;                                     		// 0x084C (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 123294 ];

		return pClassPointer;
	};

	void UnitTestChange ( );
	void RefreshPawn ( );
	bool CheckMaxLives ( class APlayerReplicationInfo* LastDeath );
};

UClass* ASFUnitTestGame::pClassPointer = NULL;

// Class SFGame.SFUnitTestRunner_SampleTableData1
// 0x0000 (0x0244 - 0x0244)
class ASFUnitTestRunner_SampleTableData1 : public ASFUnitTestRunner_Unit
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 123317 ];

		return pClassPointer;
	};

};

UClass* ASFUnitTestRunner_SampleTableData1::pClassPointer = NULL;

// Class SFGame.SFWeap_GLauncher
// 0x000C (0x0C70 - 0x0C64)
class ASFWeap_GLauncher : public ASFWeap_Projectile
{
public:
	class UClass*                                      FatherWeapon;                                     		// 0x0C64 (0x0004) [0x0000000000000000]              
	float                                              FireAniCut;                                       		// 0x0C68 (0x0004) [0x0000000000000000]              
	int                                                nUsingSight;                                      		// 0x0C6C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124362 ];

		return pClassPointer;
	};

	void CopyWeaponProps ( class ASFWeapon* BaseWeapon );
	bool CheckAltFire ( );
	bool CanZoomModeChange ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
};

UClass* ASFWeap_GLauncher::pClassPointer = NULL;

// Class SFGame.SFVehicleWeapon
// 0x0000 (0x0C60 - 0x0C60)
class ASFVehicleWeapon : public ASFWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124860 ];

		return pClassPointer;
	};

};

UClass* ASFVehicleWeapon::pClassPointer = NULL;

// Class SFGame.SFVehicleWheel
// 0x0000 (0x0114 - 0x0114)
class USFVehicleWheel : public USVehicleWheel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124865 ];

		return pClassPointer;
	};

};

UClass* USFVehicleWheel::pClassPointer = NULL;

// Class SFGame.SFVeryHardWaveCompleteByMap
// 0x0000 (0x0140 - 0x0140)
class USFVeryHardWaveCompleteByMap : public USFWaveCompleteByMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124867 ];

		return pClassPointer;
	};

};

UClass* USFVeryHardWaveCompleteByMap::pClassPointer = NULL;

// Class SFGame.SFWallShotEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFWallShotEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124873 ];

		return pClassPointer;
	};

};

UClass* USFWallShotEventData::pClassPointer = NULL;

// Class SFGame.SFWarriorGameSetting
// 0x0030 (0x006C - 0x003C)
class USFWarriorGameSetting : public UObject
{
public:
	float                                              DefaultMoney;                                     		// 0x003C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPay;                                       		// 0x0040 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPayPeriod;                                 		// 0x0044 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	TArray< int >                                      ModeExp;                                          		// 0x0048 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray< struct FDamageRatioByGameMode >            arrDamageRatioByGameMode;                         		// 0x0054 (0x000C) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	float                                              ShockWavePeriod;                                  		// 0x0060 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AssistMoneyRewardRate;                            		// 0x0064 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AssistExpRewardRate;                              		// 0x0068 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124895 ];

		return pClassPointer;
	};

	float GetDamageRatioByGameMode ( struct FName InDamageTypeName );
	int GetModeLevel ( int Exp );
	float GetMoney ( struct FName EventName );
	float GetPeriod ( struct FName EventName );
};

UClass* USFWarriorGameSetting::pClassPointer = NULL;

// Class SFGame.SFWarriorGameReplicationInfo
// 0x001C (0x04C4 - 0x04A8)
class ASFWarriorGameReplicationInfo : public ASFGameReplicationInfo
{
public:
	unsigned char                                      HeroVersion;                                      		// 0x04A8 (0x0001) [0x0000000000004000]              ( CPF_Config )
	class USFCCTV*                                     CCTVInfo;                                         		// 0x04AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BackAttackAbsoluteModeLevelAdditionalRatio;       		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BackAttackRelativeModeLevelAdditionalRatio;       		// 0x04B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BackAttackMinimumRatio;                           		// 0x04B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AActor*                                      MoveSubjects[ 0x2 ];                              		// 0x04BC (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124936 ];

		return pClassPointer;
	};

	void MatchOverDediLog ( class USFOnlineSubsystemPCDedi* SFOSPCDedi, struct FSFGameLog GameLog, struct FString UniqueKey );
	void MatchOverLog ( class USFOnlineSubsystemPC* SFOSPC, struct FSFGameLog GameLog );
	bool IsPVEMode ( );
	bool HasMovingSubjectBase ( class APawn* inPawn );
	void SetMovingActor ( unsigned char TeamType, class AActor* MovingActor );
	float GetBackAttackDamageModifier ( class APlayerReplicationInfo* AssaulterPRI, class APlayerReplicationInfo* VictimPRI, float DefaultWeaponMul );
	void GetTeamLog ( int TeamNum, int* TeamModeLevel, int* TeamKills, int* Tower1RemainHealth, int* Tower2RemainHealth, int* RemainTowers, int* TotalGainModeMoney, int* TotalDesertion, int* TotalIntrusion );
	void SetAdditionalGameLog ( TArray< struct FAdditionalModeResult >* LogList );
	void NotifyTurretDestroyed ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyTurretDamaged ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyMissionActorDestroyed ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam );
	void NotifyMissionActorDamaged ( class ASFPlayerReplicationInfo* AssaulterPRI, int DamagedTeam, int DamageAmount );
	int GetRemainMissionActorHealth ( int TeamNum );
	int CalculateGoalScore ( );
	class USFCCTV* GetCCTVInfo ( );
	float GetDamageRatioByGameMode ( struct FName InDamageTypeName );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, class UClass* DamageType, int* Damage );
	bool CanAcquireLuckyPoint ( );
	void AddWallet ( class APlayerReplicationInfo* TargetPRI, int nAdd );
	int GetWalletAmounts ( class APlayerReplicationInfo* TargetPRI );
	bool ConsumeWalletAmounts ( class APlayerReplicationInfo* TargetPRI, unsigned char ForWhat, float NeedScore, unsigned long bForce );
	void UpdateAliveEnemyCount ( TArray< int > enemy_count );
};

UClass* ASFWarriorGameReplicationInfo::pClassPointer = NULL;

// Class SFGame.SFWarriorTeamInfo
// 0x0008 (0x0278 - 0x0270)
class ASFWarriorTeamInfo : public ASFTeamInfo
{
public:
	int                                                AIDeathCount;                                     		// 0x0270 (0x0004) [0x0000000000000000]              
	int                                                AICriticalDeathCount;                             		// 0x0274 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 124962 ];

		return pClassPointer;
	};

};

UClass* ASFWarriorTeamInfo::pClassPointer = NULL;

// Class SFGame.SFWarriorGameScore
// 0x0010 (0x00D0 - 0x00C0)
class USFWarriorGameScore : public USFGameScore
{
public:
	TArray< struct FAIPawnScore >                      PawnBasisScoreList;                               		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              BasisHighLevelKillScore;                          		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 125180 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
	bool IsTeamRewardGameScore ( unsigned char AIType );
	float GetModeBasisGameScore ( int LadderType, unsigned char AIType, int* RewardModeMoney, int* RewardModeExp, unsigned char* RewardBuff );
};

UClass* USFWarriorGameScore::pClassPointer = NULL;

// Class SFGame.SFWarriorHUD
// 0x0010 (0x0E50 - 0x0E40)
class ASFWarriorHUD : public ASFTeamHUD
{
public:
	float                                              HPBarDrawDistance;                                		// 0x0E40 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USFGFxHUD*                                   gfxHUD;                                           		// 0x0E44 (0x0004) [0x0000000000000000]              
	class USFGFxHUDWidget_CodeName*                    wigetCodeName;                                    		// 0x0E48 (0x0004) [0x0000000000000000]              
	int                                                PrevModeMoney;                                    		// 0x0E4C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 125181 ];

		return pClassPointer;
	};

	void NotifyChangedViewtarget ( class AActor* OldViewTarget, class AActor* NewViewTarget );
	bool ShouldSwitchToAlternativeWidget ( unsigned long CheckViewTarget );
	void eventPostRender ( );
	void CloseSelectWeaponSetMessage ( );
	void OpenSelectWeaponSetMessage ( );
	void OnChallengeChanged ( struct FName SupplyCode, int TaskIndex );
	int eventGetAimLevel ( class ASFPawn* TargetPawn );
	void UpdateModeMoney ( );
	void SetupOwnerPRI ( class ASFPlayerReplicationInfo* InPlayerPRI );
	void Tick ( float DeltaTime );
	void CheckUpdateServerTeamScore ( );
	int GetGoalScore ( );
};

UClass* ASFWarriorHUD::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_Throw
// 0x0000 (0x02B0 - 0x02B0)
class ASFWeaponAttachment_Throw : public ASFWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 125990 ];

		return pClassPointer;
	};

	void StopShellOut ( );
	void ShellOut ( );
};

UClass* ASFWeaponAttachment_Throw::pClassPointer = NULL;

// Class SFGame.SFWeap_Beacon
// 0x0000 (0x0C90 - 0x0C90)
class ASFWeap_Beacon : public ASFWeap_Throw
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 125991 ];

		return pClassPointer;
	};

};

UClass* ASFWeap_Beacon::pClassPointer = NULL;

// Class SFGame.SFWeap_BossSkill_Barrage
// 0x0020 (0x0C8C - 0x0C6C)
class ASFWeap_BossSkill_Barrage : public ASFWeap_BossSkill
{
public:
	int                                                ShotCountNow;                                     		// 0x0C6C (0x0004) [0x0000000000000000]              
	struct FRotator                                    AimDirBase;                                       		// 0x0C70 (0x000C) [0x0000000000000000]              
	unsigned long                                      bPlayingFireAnim : 1;                             		// 0x0C7C (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              DirectAimRatio;                                   		// 0x0C80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BaseSetPitch;                                     		// 0x0C84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PirchErrorRange;                                  		// 0x0C88 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 126006 ];

		return pClassPointer;
	};

	void Reload ( );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bZoomed, unsigned long bCrouch, int* Looping );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
};

UClass* ASFWeap_BossSkill_Barrage::pClassPointer = NULL;

// Class SFGame.SFWeap_BossSkill_CallPawn
// 0x0005 (0x0C91 - 0x0C8C)
class ASFWeap_BossSkill_CallPawn : public ASFWeap_BossSkill_Barrage
{
public:
	int                                                OverFriendCount;                                  		// 0x0C8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SpawnPawn;                                        		// 0x0C90 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 126034 ];

		return pClassPointer;
	};

	class AProjectile* ServerProjectileFire ( struct FVector SpawnLocation, int InAmmoCount, int InAmmoCountInMgz );
	bool CheckOverFriendCount ( );
	bool InCoolTime ( );
};

UClass* ASFWeap_BossSkill_CallPawn::pClassPointer = NULL;

// Class SFGame.SFWeap_BossSkill_Kidnaping
// 0x0000 (0x0C8C - 0x0C8C)
class ASFWeap_BossSkill_Kidnaping : public ASFWeap_BossSkill_Barrage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 126051 ];

		return pClassPointer;
	};

};

UClass* ASFWeap_BossSkill_Kidnaping::pClassPointer = NULL;

// Class SFGame.SFWeap_BossSkill_Rage
// 0x0000 (0x0C6C - 0x0C6C)
class ASFWeap_BossSkill_Rage : public ASFWeap_BossSkill
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 126055 ];

		return pClassPointer;
	};

};

UClass* ASFWeap_BossSkill_Rage::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_Exigency
// 0x0000 (0x02B0 - 0x02B0)
class ASFWeaponAttachment_Exigency : public ASFWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127045 ];

		return pClassPointer;
	};

	void DetachFrom ( class ASFPawn* InPawnOwner );
	void AttachTo ( class ASFPawn* InPawnOwner );
};

UClass* ASFWeaponAttachment_Exigency::pClassPointer = NULL;

// Class SFGame.SFWeap_Explode_AI
// 0x0000 (0x0C64 - 0x0C64)
class ASFWeap_Explode_AI : public ASFWeap_Projectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127046 ];

		return pClassPointer;
	};

	float GetFireInterval ( unsigned char FireModeNum );
	class AProjectile* ServerProjectileFire ( struct FVector SpawnLocation, int InAmmoCount, int InAmmoCountInMgz );
	class AProjectile* ProjectileFire ( );
};

UClass* ASFWeap_Explode_AI::pClassPointer = NULL;

// Class SFGame.SFWeap_Knife
// 0x0004 (0x0D14 - 0x0D10)
class ASFWeap_Knife : public ASFWeap_MeleeSwing
{
public:
	float                                              ChargeAttackRange;                                		// 0x0D10 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127163 ];

		return pClassPointer;
	};

	void Reload ( );
	bool CanExigencyAttack ( );
	float eventGetTraceRange ( );
	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
};

UClass* ASFWeap_Knife::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_Weaponless
// 0x0000 (0x02B0 - 0x02B0)
class ASFWeaponAttachment_Weaponless : public ASFWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127253 ];

		return pClassPointer;
	};

};

UClass* ASFWeaponAttachment_Weaponless::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_Mission
// 0x0000 (0x02B0 - 0x02B0)
class ASFWeaponAttachment_Mission : public ASFWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127345 ];

		return pClassPointer;
	};

	void ShellOut ( );
};

UClass* ASFWeaponAttachment_Mission::pClassPointer = NULL;

// Class SFGame.SFWeap_Range_AI
// 0x0000 (0x0C64 - 0x0C64)
class ASFWeap_Range_AI : public ASFWeap_Projectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127385 ];

		return pClassPointer;
	};

	bool AllowInfiniteProjectile ( );
	float GetFireBlendTime ( int Mode );
};

UClass* ASFWeap_Range_AI::pClassPointer = NULL;

// Class SFGame.SFWeap_ThrowingKnife
// 0x0000 (0x0C90 - 0x0C90)
class ASFWeap_ThrowingKnife : public ASFWeap_Throw
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127399 ];

		return pClassPointer;
	};

	void RefillEmptyAmmo ( );
};

UClass* ASFWeap_ThrowingKnife::pClassPointer = NULL;

// Class SFGame.SFWeap_Shuriken
// 0x0000 (0x0C90 - 0x0C90)
class ASFWeap_Shuriken : public ASFWeap_ThrowingKnife
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127406 ];

		return pClassPointer;
	};

	void ProjectileFireAdditionalValue ( class ASFProjectile* SpawnedProjectile );
	float GetCurvePower ( );
};

UClass* ASFWeap_Shuriken::pClassPointer = NULL;

// Class SFGame.SFWeap_SniperBase
// 0x0000 (0x0D78 - 0x0D78)
class ASFWeap_SniperBase : public ASFWeap_Bullet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127416 ];

		return pClassPointer;
	};

	void TimeWeaponFiring ( unsigned char FireModeNum );
	bool CanZoomModeChange ( );
	void FireIntervalCheckforSniper ( );
};

UClass* ASFWeap_SniperBase::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_DualWeapon
// 0x0004 (0x02B4 - 0x02B0)
class ASFWeaponAttachment_DualWeapon : public ASFWeaponAttachment
{
public:
	class USkeletalMeshComponent*                      WeaponSkelComponentDual;                          		// 0x02B0 (0x0004) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127464 ];

		return pClassPointer;
	};

	void ShellOut ( );
	struct FVector GetMuzzleLocation ( );
	void CauseMuzzleFlash ( );
	void CauseMuzzleLight ( int MuzzleIndex );
	void ForceDetach ( );
	void DetachFrom ( class ASFPawn* InPawnOwner );
	void AttachTo ( class ASFPawn* InPawnOwner );
	void InitializeForWeapon ( class ASFWeapon* InOwner, class USkeletalMesh* MirrorSkeletalMesh, class USkeletalMesh* MirrorSkeletalMeshEx, class UAnimTree* ThirdWeaponAnimTree, class UAnimSet* ThirdWeaponAnimSet, class USkeletalMesh* Accessory3rdMesh );
};

UClass* ASFWeaponAttachment_DualWeapon::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_ThrowingMelee
// 0x0008 (0x02BC - 0x02B4)
class ASFWeaponAttachment_ThrowingMelee : public ASFWeaponAttachment_DualWeapon
{
public:
	struct FName                                       HideBoneName;                                     		// 0x02B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127463 ];

		return pClassPointer;
	};

	void UpdateBoneToHide ( unsigned char WeaponState );
	void StopShellOut ( );
	void ShellOut ( );
};

UClass* ASFWeaponAttachment_ThrowingMelee::pClassPointer = NULL;

// Class SFGame.SFWeapon_ETC_Explosive
// 0x0000 (0x0C64 - 0x0C64)
class ASFWeapon_ETC_Explosive : public ASFWeap_Projectile
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127514 ];

		return pClassPointer;
	};

};

UClass* ASFWeapon_ETC_Explosive::pClassPointer = NULL;

// Class SFGame.SFWeapon_Melee_PlayerZombieWalker
// 0x0000 (0x0CE4 - 0x0CE4)
class ASFWeapon_Melee_PlayerZombieWalker : public ASFWeap_Melee
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127518 ];

		return pClassPointer;
	};

	void eventSetWeaponState ( unsigned char WeaponState, unsigned long bViaRep );
	void SetWeaponMeshes ( );
};

UClass* ASFWeapon_Melee_PlayerZombieWalker::pClassPointer = NULL;

// Class SFGame.SFWeapon_PriWeapExigency
// 0x0008 (0x0CEC - 0x0CE4)
class ASFWeapon_PriWeapExigency : public ASFWeap_Exigency
{
public:
	struct FName                                       DefaultThirdPawnAnimName;                         		// 0x0CE4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127526 ];

		return pClassPointer;
	};

	struct FName GetThirdPawnAnimName ( unsigned char WeaponState, unsigned long bIsZoomed, unsigned long bCrouch, int* Looping );
};

UClass* ASFWeapon_PriWeapExigency::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_Projectile
// 0x0008 (0x02B8 - 0x02B0)
class ASFWeaponAttachment_Projectile : public ASFWeaponAttachment
{
public:
	struct FName                                       HideBoneName;                                     		// 0x02B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127713 ];

		return pClassPointer;
	};

	void StopShellOut ( );
	void ShellOut ( );
};

UClass* ASFWeaponAttachment_Projectile::pClassPointer = NULL;

// Class SFGame.SFWeaponAttachment_Vehicle
// 0x0000 (0x02B0 - 0x02B0)
class ASFWeaponAttachment_Vehicle : public ASFWeaponAttachment
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127742 ];

		return pClassPointer;
	};

	void PlayWeaponSound ( unsigned char WeaponState );
	void CauseFireEffect ( unsigned long bForce );
	struct FVector GetMuzzleLocation ( );
};

UClass* ASFWeaponAttachment_Vehicle::pClassPointer = NULL;

// Class SFGame.SFWeaponMurderKnife_Exigency
// 0x0000 (0x0CE4 - 0x0CE4)
class ASFWeaponMurderKnife_Exigency : public ASFWeap_Exigency
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 127894 ];

		return pClassPointer;
	};

	void ApplyContentsProperty ( );
};

UClass* ASFWeaponMurderKnife_Exigency::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_AccessoryTest
// 0x0000 (0x0090 - 0x0090)
class USFWeaponRIS_AccessoryTest : public USFWeaponRIS_SkelComponentBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128037 ];

		return pClassPointer;
	};

};

UClass* USFWeaponRIS_AccessoryTest::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_EOTechSight
// 0x0000 (0x00AC - 0x00AC)
class USFWeaponRIS_EOTechSight : public USFWeaponRIS_DotSight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128120 ];

		return pClassPointer;
	};

};

UClass* USFWeaponRIS_EOTechSight::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_GrenadeLauncher
// 0x0008 (0x0120 - 0x0118)
class USFWeaponRIS_GrenadeLauncher : public USFWeaponRIS_SubWeapon
{
public:
	class UClass*                                      SubWeaponProjectiles;                             		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      OldWeaponProjectiles;                             		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128189 ];

		return pClassPointer;
	};

	void DeactivateSubWeapon ( unsigned long bPlayChangeAnimation );
	void ActivateSubWeapon ( );
};

UClass* USFWeaponRIS_GrenadeLauncher::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_Scope
// 0x0004 (0x00AC - 0x00A8)
class USFWeaponRIS_Scope : public USFWeaponRIS_AimingBase
{
public:
	class ASFWeap_Bullet*                              ScopeWeapon;                                      		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128249 ];

		return pClassPointer;
	};

	void UpdateFOV ( float DesiredFOV, unsigned long bNeedHide, unsigned long bImmediateUpdate );
	bool OwnerZoomStateChanging ( int InZoomStateNext, unsigned long bForce );
	bool OwnerZoomStateChanged ( int InZoomStateNext, unsigned long bForce );
	void SettingUpZoomVariable ( class ASFWeapon* InWeaponOwner );
	class USkeletalMeshComponent* GetParentMeshComponent ( );
};

UClass* USFWeaponRIS_Scope::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_OpenDotSight
// 0x0000 (0x00AC - 0x00AC)
class USFWeaponRIS_OpenDotSight : public USFWeaponRIS_DotSight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128254 ];

		return pClassPointer;
	};

};

UClass* USFWeaponRIS_OpenDotSight::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_Reflex_RoseSkull
// 0x0004 (0x00B0 - 0x00AC)
class USFWeaponRIS_Reflex_RoseSkull : public USFWeaponRIS_DotSight
{
public:
	float                                              ZoomingTime;                                      		// 0x00AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128277 ];

		return pClassPointer;
	};

	void InitZomming ( class ASFWeapon* InWeaponOwner );
	void Init ( class ASFWeapon* InWeaponOwner );
};

UClass* USFWeaponRIS_Reflex_RoseSkull::pClassPointer = NULL;

// Class SFGame.SFWeaponRIS_TacticalLight_Espionage
// 0x0000 (0x00E4 - 0x00E4)
class USFWeaponRIS_TacticalLight_Espionage : public USFWeaponRIS_TacticalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128452 ];

		return pClassPointer;
	};

	void LightFlashStateCheck ( );
	bool OwnerChangeWeaponState ( unsigned char NowWeaponState, unsigned char OldWeaponState );
};

UClass* USFWeaponRIS_TacticalLight_Espionage::pClassPointer = NULL;

// Class SFGame.SFWeapoRIS_SpecialMagazine
// 0x0000 (0x0054 - 0x0054)
class USFWeapoRIS_SpecialMagazine : public USFWeaponRISBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128519 ];

		return pClassPointer;
	};

};

UClass* USFWeapoRIS_SpecialMagazine::pClassPointer = NULL;

// Class SFGame.SFWeapSetUsedCountEventData
// 0x0000 (0x01BC - 0x01BC)
class USFWeapSetUsedCountEventData : public USFWeaponEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128521 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFWeapSetUsedCountEventData::pClassPointer = NULL;

// Class SFGame.SFWelcomeBackEventData
// 0x0000 (0x01C4 - 0x01C4)
class USFWelcomeBackEventData : public USFSpecialKillEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128529 ];

		return pClassPointer;
	};

};

UClass* USFWelcomeBackEventData::pClassPointer = NULL;

// Class SFGame.SFWillowWhisp
// 0x00BC (0x0314 - 0x0258)
class ASFWillowWhisp : public ASFReplicatedEmitter
{
public:
	struct FVector                                     WayPoints[ 0xF ];                                 		// 0x0258 (0x00B4) [0x0000000000000020]              ( CPF_Net )
	int                                                NumPoints;                                        		// 0x030C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                Position;                                         		// 0x0310 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128531 ];

		return pClassPointer;
	};

	void StartNextPath ( );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSetInitialState ( );
	void PostBeginPlay ( );
};

UClass* ASFWillowWhisp::pClassPointer = NULL;

// Class SFGame.SFWinningMatchEventData
// 0x0000 (0x0140 - 0x0140)
class USFWinningMatchEventData : public USFPlayerLogEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128561 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFWinningMatchEventData::pClassPointer = NULL;

// Class SFGame.SFWinningRoundCounterEventData
// 0x0000 (0x0140 - 0x0140)
class USFWinningRoundCounterEventData : public USFPlayerLogEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128569 ];

		return pClassPointer;
	};

	void ProcessMachedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFWinningRoundCounterEventData::pClassPointer = NULL;

// Class SFGame.SFWinningRoundEventData
// 0x0000 (0x0140 - 0x0140)
class USFWinningRoundEventData : public USFPlayerLogEventData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128577 ];

		return pClassPointer;
	};

	void ProcessMatchedEventType ( struct FName NewEventType, int Param1, int Param2, class UObject* Obj );
};

UClass* USFWinningRoundEventData::pClassPointer = NULL;

// Class SFGame.SFZombieBarricadeActor
// 0x0000 (0x0328 - 0x0328)
class ASFZombieBarricadeActor : public ASFBarricadeActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128664 ];

		return pClassPointer;
	};

	int GetPrice ( );
	void InitPriceList ( );
};

UClass* ASFZombieBarricadeActor::pClassPointer = NULL;

// Class SFGame.SFZombieGame
// 0x0000 (0x086C - 0x086C)
class ASFZombieGame : public ASFSurvivalGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128674 ];

		return pClassPointer;
	};

	void ServerToSendPlayerLogToDataBase ( class USFPacketProcessor* PacketProcessor, class ASFPlayerReplicationInfo* SFPRI, int GameModeIdx, int GameMapIdx, unsigned char bIsAbnormalMatchEnd );
	void BaseScoreKill ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* OtherPRI );
	void AccumulateAllMoney ( int Money );
};

UClass* ASFZombieGame::pClassPointer = NULL;

// Class SFGame.SFZombieHUD
// 0x0000 (0x0E48 - 0x0E48)
class ASFZombieHUD : public ASFSurvivalHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128687 ];

		return pClassPointer;
	};

};

UClass* ASFZombieHUD::pClassPointer = NULL;

// Class SFGame.SFZombieGameScoreBase
// 0x001C (0x00DC - 0x00C0)
class USFZombieGameScoreBase : public USFGameScore
{
public:
	TArray< struct FAIPawnScore >                      PawnClassBasis;                                   		// 0x00C0 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              SCORE_WaveEnd;                                    		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_BossClear;                                  		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_WaveEndTeam;                                		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SCORE_BossClearTeam;                              		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128711 ];

		return pClassPointer;
	};

	float GetMissionGameTeamScore ( struct FName MissionName, unsigned char* MissionScoreType );
	float GetMissionGameScore ( struct FName MissionName, unsigned char* missionLogType );
	float GetModeBasisGameScore ( int LadderType, unsigned char AIType, int* RewardModeMoney, int* RewardModeExp, unsigned char* RewardBuff );
};

UClass* USFZombieGameScoreBase::pClassPointer = NULL;

// Class SFGame.SFZombieHideSeekGame
// 0x0044 (0x0888 - 0x0844)
class ASFZombieHideSeekGame : public ASFTeamGameInfo
{
public:
	struct FString                                     DefaultZombiePlayerClassName;                     		// 0x0844 (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                KillFailedDamageForHuman;                         		// 0x0850 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AttackHealthForZombie;                            		// 0x0854 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ZombieTimerDamage;                                		// 0x0858 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ZombieTimerDamageDuration;                        		// 0x085C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                PrevZombieDamageTime;                             		// 0x0860 (0x0004) [0x0000000000000000]              
	float                                              FeverTimeGroundSpeedRate;                         		// 0x0864 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FeverTimeZombieHealthRatio;                       		// 0x0868 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                FeverTimeZombieHealth;                            		// 0x086C (0x0004) [0x0000000000000000]              
	int                                                ZombieFeverTimeBonusHealth;                       		// 0x0870 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ZombieAIKillPoint;                                		// 0x0874 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ZombiePlayerKillPoint;                            		// 0x0878 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FFeverWeaponGrade >                 FeverWeaponGradeList;                             		// 0x087C (0x000C) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128737 ];

		return pClassPointer;
	};

	void ZombieGamePlayerKillCountUpdate ( class ASFZombiePlayerReplicationInfo* KillerPRI );
	bool IsCheckInvalidHackType ( );
	bool IsSuppressedHackType ( unsigned char InHackType );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void SetFeverTime ( unsigned char newLevel );
	void UpdateSpectatorKillCount ( class ASFZombiePlayerReplicationInfo* KillerPRI );
	void UpdateHumanPlayerKill ( class AController* Killer, class ASFZombiePlayerReplicationInfo* KillerPRI, class ASFZombiePlayerReplicationInfo* VictimPRI, class UClass* KillDamageType );
	void UpdateZombiePlayerKill ( class ASFZombiePlayerReplicationInfo* KillerPRI, class ASFZombiePlayerReplicationInfo* VictimPRI );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, unsigned long bIgnoreDeathScore );
	class UClass* GetDefaultPlayerClass ( class AController* C );
};

UClass* ASFZombieHideSeekGame::pClassPointer = NULL;

// Class SFGame.SFZombieHideSeekGameScore
// 0x0000 (0x00C0 - 0x00C0)
class USFZombieHideSeekGameScore : public USFGameScore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128819 ];

		return pClassPointer;
	};

};

UClass* USFZombieHideSeekGameScore::pClassPointer = NULL;

// Class SFGame.SFZombieHideSeekHUD
// 0x000C (0x0E4C - 0x0E40)
class ASFZombieHideSeekHUD : public ASFHUD
{
public:
	TArray< struct FString >                           FeverTimeTextList;                                		// 0x0E40 (0x000C) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128820 ];

		return pClassPointer;
	};

};

UClass* ASFZombieHideSeekHUD::pClassPointer = NULL;

// Class SFGame.SFZombieKillDeathMessage
// 0x0000 (0x006C - 0x006C)
class USFZombieKillDeathMessage : public USFLocalMessage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 128927 ];

		return pClassPointer;
	};

	void ProcessZombieDeadLog ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* KilledPRI, class ASFPlayerController* SFPC, int KillType );
	void ProcessZombieKillLog ( class ASFPlayerReplicationInfo* KillerPRI, class ASFPlayerReplicationInfo* KilledPRI, class ASFPlayerController* SFPC, int KillType, int ItemCodeNameIndex, class UObject* OptionalObject );
	void ClientKillDeathReceive ( class APlayerController* P, int Index1, int Index2, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

UClass* USFZombieKillDeathMessage::pClassPointer = NULL;

// Class SFGame.SFZombieSurvivalGame
// 0x0000 (0x086C - 0x086C)
class ASFZombieSurvivalGame : public ASFZombieGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 129044 ];

		return pClassPointer;
	};

	bool IsSuppressedHackType ( unsigned char InHackType );
	void SetMaxWaves ( );
};

UClass* ASFZombieSurvivalGame::pClassPointer = NULL;

// Class SFGame.SFZombieSurvivalGameScore
// 0x0000 (0x00DC - 0x00DC)
class USFZombieSurvivalGameScore : public USFZombieGameScoreBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 129050 ];

		return pClassPointer;
	};

};

UClass* USFZombieSurvivalGameScore::pClassPointer = NULL;

// Class SFGame.SFZombieSurvivalGameTwo
// 0x0000 (0x086C - 0x086C)
class ASFZombieSurvivalGameTwo : public ASFZombieSurvivalGame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 129052 ];

		return pClassPointer;
	};

};

UClass* ASFZombieSurvivalGameTwo::pClassPointer = NULL;


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif